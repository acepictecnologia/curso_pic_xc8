

Microchip MPLAB XC8 Assembler V2.05 build -831301201 
                                                                                               Fri Apr 19 17:58:14 2019

Microchip MPLAB XC8 C Compiler v2.05 (Free license) build 20181220022703 Og1 
     1                           	processor	18F4520
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	flic
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
     9                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    10                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    11                           	psect	text0,global,reloc=2,class=CODE,delta=1
    12                           	psect	text1,global,reloc=2,class=CODE,delta=1,group=2
    13                           	psect	text2,global,reloc=2,class=CODE,delta=1
    14                           	psect	text3,global,reloc=2,class=CODE,delta=1
    15                           	psect	text4,global,reloc=2,class=CODE,delta=1
    16                           	psect	text5,global,reloc=2,class=CODE,delta=1
    17                           	psect	text6,global,reloc=2,class=CODE,delta=1,group=2
    18                           	psect	text7,global,reloc=2,class=CODE,delta=1,group=2
    19                           	psect	text8,global,reloc=2,class=CODE,delta=1,group=2
    20                           	psect	text9,global,reloc=2,class=CODE,delta=1,group=2
    21                           	psect	text10,global,reloc=2,class=CODE,delta=1,group=2
    22                           	psect	text11,global,reloc=2,class=CODE,delta=1,group=1
    23                           	psect	text12,global,reloc=2,class=CODE,delta=1,group=1
    24                           	psect	text13,global,reloc=2,class=CODE,delta=1,group=2
    25                           	psect	text14,global,reloc=2,class=CODE,delta=1,group=2
    26                           	psect	text15,global,reloc=2,class=CODE,delta=1,group=2
    27                           	psect	text16,global,reloc=2,class=CODE,delta=1,group=1
    28                           	psect	text17,global,reloc=2,class=CODE,delta=1
    29                           	psect	text18,global,reloc=2,class=CODE,delta=1
    30                           	psect	text19,global,reloc=2,class=CODE,delta=1
    31                           	psect	text20,global,reloc=2,class=CODE,delta=1
    32                           	psect	text21,global,reloc=2,class=CODE,delta=1
    33                           	psect	intcodelo,global,reloc=2,class=CODE,delta=1
    34                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    35                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    36                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    37  0000                     
    38                           ; Version 2.05
    39                           ; Generated 20/12/2018 GMT
    40                           ; 
    41                           ; Copyright Â© 2018, Microchip Technology Inc. and its subsidiaries ("Microchip")
    42                           ; All rights reserved.
    43                           ; 
    44                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    45                           ; 
    46                           ; Redistribution and use in source and binary forms, with or without modification, are
    47                           ; permitted provided that the following conditions are met:
    48                           ; 
    49                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    50                           ;        conditions and the following disclaimer.
    51                           ; 
    52                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    53                           ;        of conditions and the following disclaimer in the documentation and/or other
    54                           ;        materials provided with the distribution.
    55                           ; 
    56                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    57                           ;        software without specific prior written permission.
    58                           ; 
    59                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    60                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    61                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    62                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    63                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    64                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    65                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    66                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    67                           ; 
    68                           ; 
    69                           ; Code-generator required, PIC18F4520 Definitions
    70                           ; 
    71                           ; SFR Addresses
    72  0000                     _TMR0	set	4054
    73  0000                     _LATDbits	set	3980
    74  0000                     _LATEbits	set	3981
    75  0000                     _LATD	set	3980
    76  0000                     _TRISEbits	set	3990
    77  0000                     _TRISD	set	3989
    78  0000                     _T1CON	set	4045
    79  0000                     _T0CON	set	4053
    80  0000                     _INTCON	set	4082
    81  0000                     _ADCON1	set	4033
    82  0000                     _TMR1L	set	4046
    83  0000                     _TMR1H	set	4047
    84  0000                     _TMR1IE	set	31976
    85  0000                     _TMR1IF	set	31984
    86  0000                     _TMR0IF	set	32658
    87                           
    88                           	psect	smallconst
    89  000600                     __psmallconst:
    90                           	opt callstack 0
    91  000600  00                 	db	0
    92  000601                     STR_1:
    93  000601  43                 	db	67	;'C'
    94  000602  4F                 	db	79	;'O'
    95  000603  4E                 	db	78	;'N'
    96  000604  54                 	db	84	;'T'
    97  000605  41                 	db	65	;'A'
    98  000606  20                 	db	32
    99  000607  54                 	db	84	;'T'
   100  000608  4D                 	db	77	;'M'
   101  000609  52                 	db	82	;'R'
   102  00060A  30                 	db	48	;'0'
   103  00060B  3A                 	db	58	;':'
   104  00060C  20                 	db	32
   105  00060D  30                 	db	48	;'0'
   106  00060E  30                 	db	48	;'0'
   107  00060F  00                 	db	0
   108  000610                     STR_2:
   109  000610  43                 	db	67	;'C'
   110  000611  4F                 	db	79	;'O'
   111  000612  4E                 	db	78	;'N'
   112  000613  54                 	db	84	;'T'
   113  000614  41                 	db	65	;'A'
   114  000615  20                 	db	32
   115  000616  54                 	db	84	;'T'
   116  000617  4D                 	db	77	;'M'
   117  000618  52                 	db	82	;'R'
   118  000619  31                 	db	49	;'1'
   119  00061A  3A                 	db	58	;':'
   120  00061B  20                 	db	32
   121  00061C  30                 	db	48	;'0'
   122  00061D  30                 	db	48	;'0'
   123  00061E  00                 	db	0
   124  00061F                     STR_3:
   125  00061F  25                 	db	37
   126  000620  30                 	db	48	;'0'
   127  000621  32                 	db	50	;'2'
   128  000622  64                 	db	100	;'d'
   129  000623  00                 	db	0
   130  0000                     
   131                           ; #config settings
   132  000624  00                 	db	0	; dummy byte at the end
   133  0000                     
   134                           	psect	cinit
   135  001460                     __pcinit:
   136                           	opt callstack 0
   137  001460                     start_initialization:
   138                           	opt callstack 0
   139  001460                     __initialization:
   140                           	opt callstack 0
   141                           
   142                           ; Clear objects allocated to BANK0 (50 bytes)
   143  001460  EE00  F080         	lfsr	0,__pbssBANK0
   144  001464  0E32               	movlw	50
   145  001466                     clear_0:
   146  001466  6AEE               	clrf	postinc0,c
   147  001468  06E8               	decf	wreg,f,c
   148  00146A  E1FD               	bnz	clear_0
   149                           
   150                           ; Clear objects allocated to COMRAM (14 bytes)
   151  00146C  EE00  F067         	lfsr	0,__pbssCOMRAM
   152  001470  0E0E               	movlw	14
   153  001472                     clear_1:
   154  001472  6AEE               	clrf	postinc0,c
   155  001474  06E8               	decf	wreg,f,c
   156  001476  E1FD               	bnz	clear_1
   157  001478                     end_of_initialization:
   158                           	opt callstack 0
   159  001478                     __end_of__initialization:
   160                           	opt callstack 0
   161  001478  9075               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   162  00147A  9275               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   163  00147C  0E00               	movlw	low (__Lmediumconst shr (0+16))
   164  00147E  6EF8               	movwf	tblptru,c
   165  001480  0100               	movlb	0
   166  001482  EFE6  F007         	goto	_main	;jump to C main() function
   167                           
   168                           	psect	bssCOMRAM
   169  000067                     __pbssCOMRAM:
   170                           	opt callstack 0
   171  000067                     _width:
   172                           	opt callstack 0
   173  000067                     	ds	2
   174  000069                     _prec:
   175                           	opt callstack 0
   176  000069                     	ds	2
   177  00006B                     _flags:
   178                           	opt callstack 0
   179  00006B                     	ds	2
   180  00006D                     _conta_t1:
   181                           	opt callstack 0
   182  00006D                     	ds	2
   183  00006F                     _conta_t0:
   184                           	opt callstack 0
   185  00006F                     	ds	2
   186  000071                     _T1_1000ms:
   187                           	opt callstack 0
   188  000071                     	ds	2
   189  000073                     _T0_500ms:
   190                           	opt callstack 0
   191  000073                     	ds	2
   192                           
   193                           	psect	bssBANK0
   194  000080                     __pbssBANK0:
   195                           	opt callstack 0
   196  000080                     _nout:
   197                           	opt callstack 0
   198  000080                     	ds	2
   199  000082                     _dbuf:
   200                           	opt callstack 0
   201  000082                     	ds	32
   202  0000A2                     _bufferLCD:
   203                           	opt callstack 0
   204  0000A2                     	ds	16
   205                           
   206                           	psect	cstackBANK0
   207  0000B2                     __pcstackBANK0:
   208                           	opt callstack 0
   209  0000B2                     	ds	2
   210  0000B4                     sprintf@ap:
   211                           	opt callstack 0
   212                           
   213                           ; 2 bytes @ 0x2
   214  0000B4                     	ds	2
   215  0000B6                     sprintf@f:
   216                           	opt callstack 0
   217                           
   218                           ; 6 bytes @ 0x4
   219  0000B6                     	ds	6
   220                           
   221                           	psect	cstackCOMRAM
   222  000001                     __pcstackCOMRAM:
   223                           	opt callstack 0
   224  000001                     ??_int_TIMERS:
   225  000001                     
   226                           ; 1 bytes @ 0x0
   227  000001                     	ds	3
   228  000004                     ?_strlen:
   229                           	opt callstack 0
   230  000004                     ?_isdigit:
   231                           	opt callstack 0
   232  000004                     ?_isspace:
   233                           	opt callstack 0
   234  000004                     ?___wmul:
   235                           	opt callstack 0
   236  000004                     ?___aodiv:
   237                           	opt callstack 0
   238  000004                     ?___aomod:
   239                           	opt callstack 0
   240  000004                     set_bit@comp:
   241                           	opt callstack 0
   242  000004                     ___wmul@multiplier:
   243                           	opt callstack 0
   244  000004                     isdigit@c:
   245                           	opt callstack 0
   246  000004                     isspace@c:
   247                           	opt callstack 0
   248  000004                     fputc@c:
   249                           	opt callstack 0
   250  000004                     strlen@s:
   251                           	opt callstack 0
   252  000004                     ___aodiv@dividend:
   253                           	opt callstack 0
   254  000004                     ___aomod@dividend:
   255                           	opt callstack 0
   256                           
   257                           ; 8 bytes @ 0x3
   258  000004                     	ds	1
   259  000005                     set_bit@cmd:
   260                           	opt callstack 0
   261                           
   262                           ; 1 bytes @ 0x4
   263  000005                     	ds	1
   264  000006                     ??_lcd_cmd:
   265  000006                     ??_isdigit:
   266  000006                     ??_isspace:
   267  000006                     ___wmul@multiplicand:
   268                           	opt callstack 0
   269  000006                     fputc@fp:
   270                           	opt callstack 0
   271  000006                     strlen@a:
   272                           	opt callstack 0
   273                           
   274                           ; 2 bytes @ 0x5
   275  000006                     	ds	1
   276  000007                     lcd_cmd@cmd:
   277                           	opt callstack 0
   278                           
   279                           ; 1 bytes @ 0x6
   280  000007                     	ds	1
   281  000008                     ??_lcd_ini:
   282  000008                     ??_fputc:
   283  000008                     lcd_envia_byte@dado:
   284                           	opt callstack 0
   285  000008                     ___wmul@product:
   286                           	opt callstack 0
   287                           
   288                           ; 2 bytes @ 0x7
   289  000008                     	ds	1
   290  000009                     lcd_ini@i:
   291                           	opt callstack 0
   292  000009                     lcd_envia_byte@nivel:
   293                           	opt callstack 0
   294                           
   295                           ; 1 bytes @ 0x8
   296  000009                     	ds	1
   297  00000A                     lcd_escreve_bf@col:
   298                           	opt callstack 0
   299  00000A                     _isspace$758:
   300                           	opt callstack 0
   301                           
   302                           ; 1 bytes @ 0x9
   303  00000A                     	ds	1
   304  00000B                     ?_atoi:
   305                           	opt callstack 0
   306  00000B                     lcd_escreve_bf@str:
   307                           	opt callstack 0
   308  00000B                     atoi@s:
   309                           	opt callstack 0
   310                           
   311                           ; 2 bytes @ 0xA
   312  00000B                     	ds	1
   313  00000C                     ___aodiv@divisor:
   314                           	opt callstack 0
   315  00000C                     ___aomod@divisor:
   316                           	opt callstack 0
   317                           
   318                           ; 8 bytes @ 0xB
   319  00000C                     	ds	1
   320  00000D                     ??_atoi:
   321  00000D                     lcd_escreve_bf@end:
   322                           	opt callstack 0
   323  00000D                     fputs@s:
   324                           	opt callstack 0
   325                           
   326                           ; 2 bytes @ 0xC
   327  00000D                     	ds	1
   328  00000E                     lcd_escreve_bf@lin:
   329                           	opt callstack 0
   330                           
   331                           ; 1 bytes @ 0xD
   332  00000E                     	ds	1
   333  00000F                     fputs@fp:
   334                           	opt callstack 0
   335                           
   336                           ; 2 bytes @ 0xE
   337  00000F                     	ds	2
   338  000011                     fputs@c:
   339                           	opt callstack 0
   340  000011                     atoi@neg:
   341                           	opt callstack 0
   342                           
   343                           ; 2 bytes @ 0x10
   344  000011                     	ds	1
   345  000012                     fputs@i:
   346                           	opt callstack 0
   347                           
   348                           ; 2 bytes @ 0x11
   349  000012                     	ds	1
   350  000013                     _atoi$740:
   351                           	opt callstack 0
   352                           
   353                           ; 2 bytes @ 0x12
   354  000013                     	ds	1
   355  000014                     ?_pad:
   356                           	opt callstack 0
   357  000014                     ___aodiv@counter:
   358                           	opt callstack 0
   359  000014                     ___aomod@counter:
   360                           	opt callstack 0
   361  000014                     pad@fp:
   362                           	opt callstack 0
   363                           
   364                           ; 2 bytes @ 0x13
   365  000014                     	ds	1
   366  000015                     ___aodiv@sign:
   367                           	opt callstack 0
   368  000015                     ___aomod@sign:
   369                           	opt callstack 0
   370  000015                     _atoi$742:
   371                           	opt callstack 0
   372                           
   373                           ; 2 bytes @ 0x14
   374  000015                     	ds	1
   375  000016                     ?_abs:
   376                           	opt callstack 0
   377  000016                     pad@buf:
   378                           	opt callstack 0
   379  000016                     abs@a:
   380                           	opt callstack 0
   381  000016                     ___aodiv@quotient:
   382                           	opt callstack 0
   383                           
   384                           ; 8 bytes @ 0x15
   385  000016                     	ds	1
   386  000017                     _atoi$741:
   387                           	opt callstack 0
   388                           
   389                           ; 1 bytes @ 0x16
   390  000017                     	ds	1
   391  000018                     ??_abs:
   392  000018                     pad@p:
   393                           	opt callstack 0
   394  000018                     atoi@n:
   395                           	opt callstack 0
   396                           
   397                           ; 2 bytes @ 0x17
   398  000018                     	ds	2
   399  00001A                     ??_pad:
   400                           
   401                           ; 1 bytes @ 0x19
   402  00001A                     	ds	1
   403  00001B                     pad@i:
   404                           	opt callstack 0
   405                           
   406                           ; 2 bytes @ 0x1A
   407  00001B                     	ds	2
   408  00001D                     pad@w:
   409                           	opt callstack 0
   410                           
   411                           ; 2 bytes @ 0x1C
   412  00001D                     	ds	2
   413  00001F                     ?_dtoa:
   414                           	opt callstack 0
   415  00001F                     dtoa@fp:
   416                           	opt callstack 0
   417                           
   418                           ; 2 bytes @ 0x1E
   419  00001F                     	ds	2
   420  000021                     dtoa@d:
   421                           	opt callstack 0
   422                           
   423                           ; 8 bytes @ 0x20
   424  000021                     	ds	8
   425  000029                     ??_dtoa:
   426                           
   427                           ; 1 bytes @ 0x28
   428  000029                     	ds	8
   429  000031                     _dtoa$268:
   430                           	opt callstack 0
   431                           
   432                           ; 2 bytes @ 0x30
   433  000031                     	ds	2
   434  000033                     dtoa@p:
   435                           	opt callstack 0
   436                           
   437                           ; 2 bytes @ 0x32
   438  000033                     	ds	2
   439  000035                     dtoa@w:
   440                           	opt callstack 0
   441                           
   442                           ; 2 bytes @ 0x34
   443  000035                     	ds	2
   444  000037                     dtoa@s:
   445                           	opt callstack 0
   446                           
   447                           ; 2 bytes @ 0x36
   448  000037                     	ds	2
   449  000039                     dtoa@n:
   450                           	opt callstack 0
   451                           
   452                           ; 8 bytes @ 0x38
   453  000039                     	ds	8
   454  000041                     dtoa@i:
   455                           	opt callstack 0
   456                           
   457                           ; 2 bytes @ 0x40
   458  000041                     	ds	2
   459  000043                     ?_vfpfcnvrt:
   460                           	opt callstack 0
   461  000043                     vfpfcnvrt@fp:
   462                           	opt callstack 0
   463                           
   464                           ; 2 bytes @ 0x42
   465  000043                     	ds	2
   466  000045                     vfpfcnvrt@fmt:
   467                           	opt callstack 0
   468                           
   469                           ; 2 bytes @ 0x44
   470  000045                     	ds	2
   471  000047                     vfpfcnvrt@ap:
   472                           	opt callstack 0
   473                           
   474                           ; 2 bytes @ 0x46
   475  000047                     	ds	2
   476  000049                     ??_vfpfcnvrt:
   477                           
   478                           ; 1 bytes @ 0x48
   479  000049                     	ds	4
   480  00004D                     vfpfcnvrt@ll:
   481                           	opt callstack 0
   482                           
   483                           ; 8 bytes @ 0x4C
   484  00004D                     	ds	8
   485  000055                     vfpfcnvrt@done:
   486                           	opt callstack 0
   487                           
   488                           ; 2 bytes @ 0x54
   489  000055                     	ds	2
   490  000057                     _vfpfcnvrt$283:
   491                           	opt callstack 0
   492                           
   493                           ; 2 bytes @ 0x56
   494  000057                     	ds	2
   495  000059                     ?_vfprintf:
   496                           	opt callstack 0
   497  000059                     vfprintf@fp:
   498                           	opt callstack 0
   499                           
   500                           ; 2 bytes @ 0x58
   501  000059                     	ds	2
   502  00005B                     vfprintf@fmt:
   503                           	opt callstack 0
   504                           
   505                           ; 2 bytes @ 0x5A
   506  00005B                     	ds	2
   507  00005D                     vfprintf@ap:
   508                           	opt callstack 0
   509                           
   510                           ; 2 bytes @ 0x5C
   511  00005D                     	ds	2
   512  00005F                     vfprintf@cfmt:
   513                           	opt callstack 0
   514                           
   515                           ; 2 bytes @ 0x5E
   516  00005F                     	ds	2
   517  000061                     ?_sprintf:
   518                           	opt callstack 0
   519  000061                     sprintf@s:
   520                           	opt callstack 0
   521                           
   522                           ; 2 bytes @ 0x60
   523  000061                     	ds	2
   524  000063                     sprintf@fmt:
   525                           	opt callstack 0
   526                           
   527                           ; 2 bytes @ 0x62
   528  000063                     	ds	4
   529  000067                     
   530                           ; 1 bytes @ 0x66
   531 ;;
   532 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   533 ;;
   534 ;; *************** function _main *****************
   535 ;; Defined at:
   536 ;;		line 46 in file "EX16.c"
   537 ;; Parameters:    Size  Location     Type
   538 ;;		None
   539 ;; Auto vars:     Size  Location     Type
   540 ;;		None
   541 ;; Return value:  Size  Location     Type
   542 ;;                  1    wreg      void 
   543 ;; Registers used:
   544 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   545 ;; Tracked objects:
   546 ;;		On entry : 0/0
   547 ;;		On exit  : 0/0
   548 ;;		Unchanged: 0/0
   549 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   550 ;;      Params:         0       0       0       0       0       0       0
   551 ;;      Locals:         0       0       0       0       0       0       0
   552 ;;      Temps:          0       0       0       0       0       0       0
   553 ;;      Totals:         0       0       0       0       0       0       0
   554 ;;Total ram usage:        0 bytes
   555 ;; Hardware stack levels required when called:    9
   556 ;; This function calls:
   557 ;;		_lcd_escreve_bf
   558 ;;		_lcd_ini
   559 ;;		_sprintf
   560 ;; This function is called by:
   561 ;;		Startup code after reset
   562 ;; This function uses a non-reentrant model
   563 ;;
   564                           
   565                           	psect	text0
   566  000FCC                     __ptext0:
   567                           	opt callstack 0
   568  000FCC                     _main:
   569                           	opt callstack 22
   570                           
   571                           ;EX16.c: 48:     ADCON1 = 0x0F;
   572                           
   573                           ;incstack = 0
   574  000FCC  0E0F               	movlw	15
   575  000FCE  6EC1               	movwf	4033,c	;volatile
   576                           
   577                           ;EX16.c: 50:     INTCON = 0b11100000;
   578  000FD0  0EE0               	movlw	224
   579  000FD2  6EF2               	movwf	4082,c	;volatile
   580                           
   581                           ;EX16.c: 55:     T0CON = 0b11000111;
   582  000FD4  0EC7               	movlw	199
   583  000FD6  6ED5               	movwf	4053,c	;volatile
   584                           
   585                           ;EX16.c: 63:     TMR0 = 61;
   586  000FD8  0E00               	movlw	0
   587  000FDA  6ED7               	movwf	4055,c	;volatile
   588  000FDC  0E3D               	movlw	61
   589  000FDE  6ED6               	movwf	4054,c	;volatile
   590                           
   591                           ;EX16.c: 65:     T1CON = 0b00110101;
   592  000FE0  0E35               	movlw	53
   593  000FE2  6ECD               	movwf	4045,c	;volatile
   594                           
   595                           ;EX16.c: 73:     TMR1IE = 1;
   596  000FE4  809D               	bsf	3997,0,c	;volatile
   597                           
   598                           ;EX16.c: 75:     TMR1H = 0x0B;
   599  000FE6  0E0B               	movlw	11
   600  000FE8  6ECF               	movwf	4047,c	;volatile
   601                           
   602                           ;EX16.c: 76:     TMR1L = 0xDC;
   603  000FEA  0EDC               	movlw	220
   604  000FEC  6ECE               	movwf	4046,c	;volatile
   605                           
   606                           ;EX16.c: 78:     lcd_ini();
   607  000FEE  ECD5  F008         	call	_lcd_ini	;wreg free
   608                           
   609                           ;EX16.c: 81:     lcd_escreve_bf(1, 1, "CONTA TMR0: 00");
   610  000FF2  0E01               	movlw	1
   611  000FF4  6E0A               	movwf	lcd_escreve_bf@col,c
   612  000FF6  0E01               	movlw	low STR_1
   613  000FF8  6E0B               	movwf	lcd_escreve_bf@str,c
   614  000FFA  0E06               	movlw	high STR_1
   615  000FFC  6E0C               	movwf	lcd_escreve_bf@str+1,c
   616  000FFE  0E01               	movlw	1
   617  001000  EC1D  F009         	call	_lcd_escreve_bf
   618                           
   619                           ;EX16.c: 84:     lcd_escreve_bf(2, 1, "CONTA TMR1: 00");
   620  001004  0E01               	movlw	1
   621  001006  6E0A               	movwf	lcd_escreve_bf@col,c
   622  001008  0E10               	movlw	low STR_2
   623  00100A  6E0B               	movwf	lcd_escreve_bf@str,c
   624  00100C  0E06               	movlw	high STR_2
   625  00100E  6E0C               	movwf	lcd_escreve_bf@str+1,c
   626  001010  0E02               	movlw	2
   627  001012  EC1D  F009         	call	_lcd_escreve_bf
   628  001016                     l2414:
   629                           
   630                           ;EX16.c: 87:     {;EX16.c: 89:         sprintf(bufferLCD, "%02d", conta_t0);
   631  001016  0EA2               	movlw	low _bufferLCD
   632  001018  6E61               	movwf	sprintf@s,c
   633  00101A  0E00               	movlw	high _bufferLCD
   634  00101C  6E62               	movwf	sprintf@s+1,c
   635  00101E  0E1F               	movlw	low STR_3
   636  001020  6E63               	movwf	sprintf@fmt,c
   637  001022  0E06               	movlw	high STR_3
   638  001024  6E64               	movwf	sprintf@fmt+1,c
   639  001026  C06F  F065         	movff	_conta_t0,?_sprintf+4
   640  00102A  C070  F066         	movff	_conta_t0+1,?_sprintf+5
   641  00102E  EC86  F009         	call	_sprintf	;wreg free
   642                           
   643                           ;EX16.c: 92:         lcd_escreve_bf(1, 13, bufferLCD);
   644  001032  0E0D               	movlw	13
   645  001034  6E0A               	movwf	lcd_escreve_bf@col,c
   646  001036  0EA2               	movlw	low _bufferLCD
   647  001038  6E0B               	movwf	lcd_escreve_bf@str,c
   648  00103A  0E00               	movlw	high _bufferLCD
   649  00103C  6E0C               	movwf	lcd_escreve_bf@str+1,c
   650  00103E  0E01               	movlw	1
   651  001040  EC1D  F009         	call	_lcd_escreve_bf
   652                           
   653                           ;EX16.c: 95:         sprintf(bufferLCD, "%02d", conta_t1);
   654  001044  0EA2               	movlw	low _bufferLCD
   655  001046  6E61               	movwf	sprintf@s,c
   656  001048  0E00               	movlw	high _bufferLCD
   657  00104A  6E62               	movwf	sprintf@s+1,c
   658  00104C  0E1F               	movlw	low STR_3
   659  00104E  6E63               	movwf	sprintf@fmt,c
   660  001050  0E06               	movlw	high STR_3
   661  001052  6E64               	movwf	sprintf@fmt+1,c
   662  001054  C06D  F065         	movff	_conta_t1,?_sprintf+4
   663  001058  C06E  F066         	movff	_conta_t1+1,?_sprintf+5
   664  00105C  EC86  F009         	call	_sprintf	;wreg free
   665                           
   666                           ;EX16.c: 98:         lcd_escreve_bf(2, 13, bufferLCD);
   667  001060  0E0D               	movlw	13
   668  001062  6E0A               	movwf	lcd_escreve_bf@col,c
   669  001064  0EA2               	movlw	low _bufferLCD
   670  001066  6E0B               	movwf	lcd_escreve_bf@str,c
   671  001068  0E00               	movlw	high _bufferLCD
   672  00106A  6E0C               	movwf	lcd_escreve_bf@str+1,c
   673  00106C  0E02               	movlw	2
   674  00106E  EC1D  F009         	call	_lcd_escreve_bf
   675  001072  D7D1               	goto	l2414
   676  001074                     __end_of_main:
   677                           	opt callstack 0
   678                           
   679 ;; *************** function _sprintf *****************
   680 ;; Defined at:
   681 ;;		line 9 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\nf_sprintf.c"
   682 ;; Parameters:    Size  Location     Type
   683 ;;  s               2   96[COMRAM] PTR unsigned char 
   684 ;;		 -> bufferLCD(16), 
   685 ;;  fmt             2   98[COMRAM] PTR const unsigned char 
   686 ;;		 -> STR_4(5), STR_3(5), 
   687 ;; Auto vars:     Size  Location     Type
   688 ;;  f               6    4[BANK0 ] struct _IO_FILE
   689 ;;  ap              2    2[BANK0 ] PTR void [1]
   690 ;;		 -> ?_sprintf(2), 
   691 ;;  ret             2    0        int 
   692 ;; Return value:  Size  Location     Type
   693 ;;                  2   96[COMRAM] int 
   694 ;; Registers used:
   695 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   696 ;; Tracked objects:
   697 ;;		On entry : 0/0
   698 ;;		On exit  : 0/0
   699 ;;		Unchanged: 0/0
   700 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   701 ;;      Params:         6       0       0       0       0       0       0
   702 ;;      Locals:         0      10       0       0       0       0       0
   703 ;;      Temps:          0       0       0       0       0       0       0
   704 ;;      Totals:         6      10       0       0       0       0       0
   705 ;;Total ram usage:       16 bytes
   706 ;; Hardware stack levels used:    1
   707 ;; Hardware stack levels required when called:    8
   708 ;; This function calls:
   709 ;;		_vfprintf
   710 ;; This function is called by:
   711 ;;		_main
   712 ;; This function uses a non-reentrant model
   713 ;;
   714                           
   715                           	psect	text1
   716  00130C                     __ptext1:
   717                           	opt callstack 0
   718  00130C                     _sprintf:
   719                           	opt callstack 22
   720                           
   721                           ;incstack = 0
   722  00130C  0E65               	movlw	low (?_sprintf+4)
   723  00130E  0100               	movlb	0	; () banked
   724  001310  6FB4               	movwf	sprintf@ap& (0+255),b
   725  001312  0E00               	movlw	high (?_sprintf+4)
   726  001314  6FB5               	movwf	(sprintf@ap+1)& (0+255),b
   727  001316  C061  F0B6         	movff	sprintf@s,sprintf@f
   728  00131A  C062  F0B7         	movff	sprintf@s+1,sprintf@f+1
   729                           
   730                           ; BSR set to: 0
   731  00131E  0E00               	movlw	0
   732  001320  6FB9               	movwf	(sprintf@f+3)& (0+255),b
   733  001322  0E00               	movlw	0
   734  001324  6FB8               	movwf	(sprintf@f+2)& (0+255),b
   735                           
   736                           ; BSR set to: 0
   737  001326  0E00               	movlw	0
   738  001328  6FBB               	movwf	(sprintf@f+5)& (0+255),b
   739  00132A  0E00               	movlw	0
   740  00132C  6FBA               	movwf	(sprintf@f+4)& (0+255),b
   741                           
   742                           ; BSR set to: 0
   743  00132E  0EB6               	movlw	low sprintf@f
   744  001330  6E59               	movwf	vfprintf@fp,c
   745  001332  0E00               	movlw	high sprintf@f
   746  001334  6E5A               	movwf	vfprintf@fp+1,c
   747  001336  C063  F05B         	movff	sprintf@fmt,vfprintf@fmt
   748  00133A  C064  F05C         	movff	sprintf@fmt+1,vfprintf@fmt+1
   749  00133E  0EB4               	movlw	low sprintf@ap
   750  001340  6E5D               	movwf	vfprintf@ap,c
   751  001342  0E00               	movlw	high sprintf@ap
   752  001344  6E5E               	movwf	vfprintf@ap+1,c
   753  001346  EC5B  F009         	call	_vfprintf	;wreg free
   754  00134A  0100               	movlb	0	; () banked
   755  00134C  51B8               	movf	(sprintf@f+2)& (0+255),w,b
   756  00134E  2461               	addwf	sprintf@s,w,c
   757  001350  6ED9               	movwf	fsr2l,c
   758  001352  51B9               	movf	(sprintf@f+3)& (0+255),w,b
   759  001354  2062               	addwfc	sprintf@s+1,w,c
   760  001356  6EDA               	movwf	fsr2h,c
   761  001358  0E00               	movlw	0
   762  00135A  6EDF               	movwf	indf2,c
   763                           
   764                           ; BSR set to: 0
   765  00135C  0012               	return		;funcret
   766  00135E                     __end_of_sprintf:
   767                           	opt callstack 0
   768                           
   769 ;; *************** function _vfprintf *****************
   770 ;; Defined at:
   771 ;;		line 1368 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c"
   772 ;; Parameters:    Size  Location     Type
   773 ;;  fp              2   88[COMRAM] PTR struct _IO_FILE
   774 ;;		 -> sprintf@f(6), 
   775 ;;  fmt             2   90[COMRAM] PTR const unsigned char 
   776 ;;		 -> STR_4(5), STR_3(5), 
   777 ;;  ap              2   92[COMRAM] PTR PTR void 
   778 ;;		 -> sprintf@ap(2), 
   779 ;; Auto vars:     Size  Location     Type
   780 ;;  cfmt            2   94[COMRAM] PTR unsigned char 
   781 ;;		 -> STR_4(5), STR_3(5), 
   782 ;; Return value:  Size  Location     Type
   783 ;;                  2   88[COMRAM] int 
   784 ;; Registers used:
   785 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   786 ;; Tracked objects:
   787 ;;		On entry : 0/0
   788 ;;		On exit  : 0/0
   789 ;;		Unchanged: 0/0
   790 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   791 ;;      Params:         6       0       0       0       0       0       0
   792 ;;      Locals:         2       0       0       0       0       0       0
   793 ;;      Temps:          0       0       0       0       0       0       0
   794 ;;      Totals:         8       0       0       0       0       0       0
   795 ;;Total ram usage:        8 bytes
   796 ;; Hardware stack levels used:    1
   797 ;; Hardware stack levels required when called:    7
   798 ;; This function calls:
   799 ;;		_vfpfcnvrt
   800 ;; This function is called by:
   801 ;;		_sprintf
   802 ;; This function uses a non-reentrant model
   803 ;;
   804                           
   805                           	psect	text2
   806  0012B6                     __ptext2:
   807                           	opt callstack 0
   808  0012B6                     _vfprintf:
   809                           	opt callstack 22
   810                           
   811                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1368: int v
      +                          fprintf(FILE *fp, const char *fmt, va_list ap);C:\Program Files (x86)\Microchip\xc8\v2.0
      +                          5\pic\sources\c99\common\doprnt.c: 1369: {;C:\Program Files (x86)\Microchip\xc8\v2.05\pi
      +                          c\sources\c99\common\doprnt.c: 1371:     char *cfmt;;C:\Program Files (x86)\Microchip\xc
      +                          8\v2.05\pic\sources\c99\common\doprnt.c: 1373:     cfmt = (char *)fmt;
   812                           
   813                           ; BSR set to: 0
   814                           ;incstack = 0
   815  0012B6  C05B  F05F         	movff	vfprintf@fmt,vfprintf@cfmt
   816  0012BA  C05C  F060         	movff	vfprintf@fmt+1,vfprintf@cfmt+1
   817                           
   818                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1374:     n
      +                          out = 0;
   819  0012BE  0E00               	movlw	0
   820  0012C0  0100               	movlb	0	; () banked
   821  0012C2  6F81               	movwf	(_nout+1)& (0+255),b
   822  0012C4  0E00               	movlw	0
   823  0012C6  6F80               	movwf	_nout& (0+255),b
   824                           
   825                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1375:     w
      +                          hile (*cfmt) {
   826  0012C8  D013               	goto	l2390
   827  0012CA                     l2388:
   828                           
   829                           ; BSR set to: 0
   830                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1376:      
      +                             nout += vfpfcnvrt(fp, &cfmt, ap);
   831  0012CA  C059  F043         	movff	vfprintf@fp,vfpfcnvrt@fp
   832  0012CE  C05A  F044         	movff	vfprintf@fp+1,vfpfcnvrt@fp+1
   833  0012D2  0E5F               	movlw	low vfprintf@cfmt
   834  0012D4  6E45               	movwf	vfpfcnvrt@fmt,c
   835  0012D6  0E00               	movlw	high vfprintf@cfmt
   836  0012D8  6E46               	movwf	vfpfcnvrt@fmt+1,c
   837  0012DA  C05D  F047         	movff	vfprintf@ap,vfpfcnvrt@ap
   838  0012DE  C05E  F048         	movff	vfprintf@ap+1,vfpfcnvrt@ap+1
   839  0012E2  EC13  F003         	call	_vfpfcnvrt	;wreg free
   840  0012E6  5043               	movf	?_vfpfcnvrt,w,c
   841  0012E8  0100               	movlb	0	; () banked
   842  0012EA  2780               	addwf	_nout& (0+255),f,b
   843  0012EC  5044               	movf	?_vfpfcnvrt+1,w,c
   844  0012EE  2381               	addwfc	(_nout+1)& (0+255),f,b
   845  0012F0                     l2390:
   846                           
   847                           ; BSR set to: 0
   848                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1375:     w
      +                          hile (*cfmt) {
   849  0012F0  C05F  FFF6         	movff	vfprintf@cfmt,tblptrl
   850  0012F4  C060  FFF7         	movff	vfprintf@cfmt+1,tblptrh
   851  0012F8                     	if	0	;tblptru may be non-zero
   852  0012F8                     	endif
   853  0012F8                     	if	0	;tblptru may be non-zero
   854  0012F8                     	endif
   855  0012F8  0008               	tblrd		*
   856  0012FA  50F5               	movf	tablat,w,c
   857  0012FC  0900               	iorlw	0
   858  0012FE  A4D8               	btfss	status,2,c
   859  001300  D7E4               	goto	l2388
   860                           
   861                           ; BSR set to: 0
   862                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1378:     r
      +                          eturn nout;
   863  001302  C080  F059         	movff	_nout,?_vfprintf
   864  001306  C081  F05A         	movff	_nout+1,?_vfprintf+1
   865                           
   866                           ; BSR set to: 0
   867  00130A  0012               	return		;funcret
   868  00130C                     __end_of_vfprintf:
   869                           	opt callstack 0
   870                           
   871 ;; *************** function _vfpfcnvrt *****************
   872 ;; Defined at:
   873 ;;		line 670 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c"
   874 ;; Parameters:    Size  Location     Type
   875 ;;  fp              2   66[COMRAM] PTR struct _IO_FILE
   876 ;;		 -> sprintf@f(6), 
   877 ;;  fmt             2   68[COMRAM] PTR PTR unsigned char 
   878 ;;		 -> vfprintf@cfmt(2), 
   879 ;;  ap              2   70[COMRAM] PTR PTR void 
   880 ;;		 -> sprintf@ap(2), 
   881 ;; Auto vars:     Size  Location     Type
   882 ;;  ll              8   76[COMRAM] long long 
   883 ;;  llu             8    0        unsigned long long 
   884 ;;  f               4    0        unsigned long long 
   885 ;;  vp              3    0        PTR void 
   886 ;;  ct              3    0        unsigned char [3]
   887 ;;  cp              3    0        PTR unsigned char 
   888 ;;  done            2   84[COMRAM] int 
   889 ;;  i               2    0        int 
   890 ;;  c               1    0        unsigned char 
   891 ;; Return value:  Size  Location     Type
   892 ;;                  2   66[COMRAM] int 
   893 ;; Registers used:
   894 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   895 ;; Tracked objects:
   896 ;;		On entry : 0/0
   897 ;;		On exit  : 0/0
   898 ;;		Unchanged: 0/0
   899 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   900 ;;      Params:         6       0       0       0       0       0       0
   901 ;;      Locals:        12       0       0       0       0       0       0
   902 ;;      Temps:          4       0       0       0       0       0       0
   903 ;;      Totals:        22       0       0       0       0       0       0
   904 ;;Total ram usage:       22 bytes
   905 ;; Hardware stack levels used:    1
   906 ;; Hardware stack levels required when called:    6
   907 ;; This function calls:
   908 ;;		_atoi
   909 ;;		_dtoa
   910 ;;		_fputc
   911 ;;		_isdigit
   912 ;; This function is called by:
   913 ;;		_vfprintf
   914 ;; This function uses a non-reentrant model
   915 ;;
   916                           
   917                           	psect	text3
   918  000626                     __ptext3:
   919                           	opt callstack 0
   920  000626                     _vfpfcnvrt:
   921                           	opt callstack 22
   922                           
   923                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 670: static
      +                           int vfpfcnvrt(FILE *fp, char *fmt[], va_list ap);C:\Program Files (x86)\Microchip\xc8\v
      +                          2.05\pic\sources\c99\common\doprnt.c: 671: {;C:\Program Files (x86)\Microchip\xc8\v2.05\
      +                          pic\sources\c99\common\doprnt.c: 672:     char c, *cp, ct[3];;C:\Program Files (x86)\Mic
      +                          rochip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 673:     int done, i;;C:\Program Files
      +                           (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 674:     long long ll;
   924                           
   925                           ; BSR set to: 0
   926                           ;incstack = 0
   927  000626  C045  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
   928  00062A  C046  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
   929  00062E  CFDE FFF6          	movff	postinc2,tblptrl
   930  000632  CFDD FFF7          	movff	postdec2,tblptrh
   931  000636                     	if	0	;tblptru may be non-zero
   932  000636                     	endif
   933  000636                     	if	0	;tblptru may be non-zero
   934  000636                     	endif
   935  000636  0008               	tblrd		*
   936  000638  50F5               	movf	tablat,w,c
   937  00063A  0A25               	xorlw	37
   938  00063C  A4D8               	btfss	status,2,c
   939  00063E  D143               	goto	l2372
   940                           
   941                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 681:       
      +                            ++*fmt;
   942  000640  C045  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
   943  000644  C046  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
   944  000648  2ADE               	incf	postinc2,f,c
   945  00064A  0E00               	movlw	0
   946  00064C  22DD               	addwfc	postdec2,f,c
   947                           
   948                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 683:       
      +                            flags = width = 0;
   949  00064E  0E00               	movlw	0
   950  000650  6E68               	movwf	_width+1,c
   951  000652  0E00               	movlw	0
   952  000654  6E67               	movwf	_width,c
   953  000656  C067  F06B         	movff	_width,_flags
   954  00065A  C068  F06C         	movff	_width+1,_flags+1
   955                           
   956                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 684:       
      +                            prec = -1;
   957  00065E  6869               	setf	_prec,c
   958  000660  686A               	setf	_prec+1,c
   959                           
   960                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 688:       
      +                            done = 0;
   961  000662  0E00               	movlw	0
   962  000664  6E56               	movwf	vfpfcnvrt@done+1,c
   963  000666  0E00               	movlw	0
   964  000668  D014               	goto	L1
   965  00066A                     l2298:
   966                           
   967                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 692:       
      +                                        flags |= (1 << 0);
   968  00066A  806B               	bsf	_flags,0,c
   969  00066C                     l2300:
   970                           
   971                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 693:       
      +                                        ++*fmt;
   972  00066C  C045  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
   973  000670  C046  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
   974  000674  2ADE               	incf	postinc2,f,c
   975  000676  0E00               	movlw	0
   976  000678  22DD               	addwfc	postdec2,f,c
   977                           
   978                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 694:       
      +                                        break;
   979  00067A  D02E               	goto	l2324
   980  00067C                     l2302:
   981                           
   982                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 696:       
      +                                        flags |= (1 << 1);
   983  00067C  826B               	bsf	_flags,1,c
   984  00067E  D7F6               	goto	l2300
   985  000680                     l2306:
   986                           
   987                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 700:       
      +                                        flags |= (1 << 2);
   988  000680  846B               	bsf	_flags,2,c
   989  000682  D7F4               	goto	l2300
   990  000684                     l2310:
   991                           
   992                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 704:       
      +                                        flags |= (1 << 3);
   993  000684  866B               	bsf	_flags,3,c
   994  000686  D7F2               	goto	l2300
   995  000688                     l2314:
   996                           
   997                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 708:       
      +                                        flags |= (1 << 4);
   998  000688  886B               	bsf	_flags,4,c
   999  00068A  D7F0               	goto	l2300
  1000  00068C                     l2318:
  1001                           
  1002                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 712:       
      +                                        done = 1;
  1003  00068C  0E00               	movlw	0
  1004  00068E  6E56               	movwf	vfpfcnvrt@done+1,c
  1005  000690  0E01               	movlw	1
  1006  000692                     L1:
  1007  000692  6E55               	movwf	vfpfcnvrt@done,c
  1008                           
  1009                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 713:       
      +                                        break;
  1010  000694  D021               	goto	l2324
  1011  000696                     l2322:
  1012  000696  C045  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1013  00069A  C046  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1014  00069E  CFDE FFF6          	movff	postinc2,tblptrl
  1015  0006A2  CFDD FFF7          	movff	postdec2,tblptrh
  1016  0006A6                     	if	0	;tblptru may be non-zero
  1017  0006A6                     	endif
  1018  0006A6                     	if	0	;tblptru may be non-zero
  1019  0006A6                     	endif
  1020  0006A6  0008               	tblrd		*
  1021  0006A8  50F5               	movf	tablat,w,c
  1022  0006AA  6E49               	movwf	??_vfpfcnvrt& (0+255),c
  1023  0006AC  6A4A               	clrf	(??_vfpfcnvrt+1)& (0+255),c
  1024                           
  1025                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1026                           ; Switch size 1, requested type "simple"
  1027                           ; Number of cases is 1, Range of values is 0 to 0
  1028                           ; switch strategies available:
  1029                           ; Name         Instructions Cycles
  1030                           ; simple_byte            4     3 (average)
  1031                           ;	Chosen strategy is simple_byte
  1032  0006AE  504A               	movf	??_vfpfcnvrt+1,w,c
  1033  0006B0  0A00               	xorlw	0	; case 0
  1034  0006B2  A4D8               	btfss	status,2,c
  1035  0006B4  D7EB               	goto	l2318
  1036                           
  1037                           ; Switch size 1, requested type "simple"
  1038                           ; Number of cases is 5, Range of values is 32 to 48
  1039                           ; switch strategies available:
  1040                           ; Name         Instructions Cycles
  1041                           ; simple_byte           16     9 (average)
  1042                           ;	Chosen strategy is simple_byte
  1043  0006B6  5049               	movf	??_vfpfcnvrt,w,c
  1044  0006B8  0A20               	xorlw	32	; case 32
  1045  0006BA  B4D8               	btfsc	status,2,c
  1046  0006BC  D7E3               	goto	l2310
  1047  0006BE  0A03               	xorlw	3	; case 35
  1048  0006C0  B4D8               	btfsc	status,2,c
  1049  0006C2  D7E2               	goto	l2314
  1050  0006C4  0A08               	xorlw	8	; case 43
  1051  0006C6  B4D8               	btfsc	status,2,c
  1052  0006C8  D7DB               	goto	l2306
  1053  0006CA  0A06               	xorlw	6	; case 45
  1054  0006CC  B4D8               	btfsc	status,2,c
  1055  0006CE  D7CD               	goto	l2298
  1056  0006D0  0A1D               	xorlw	29	; case 48
  1057  0006D2  B4D8               	btfsc	status,2,c
  1058  0006D4  D7D3               	goto	l2302
  1059  0006D6  D7DA               	goto	l2318
  1060  0006D8                     l2324:
  1061                           
  1062                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 689:       
      +                            while (!done) {
  1063  0006D8  5055               	movf	vfpfcnvrt@done,w,c
  1064  0006DA  1056               	iorwf	vfpfcnvrt@done+1,w,c
  1065  0006DC  B4D8               	btfsc	status,2,c
  1066  0006DE  D7DB               	goto	l2322
  1067                           
  1068                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 716:       
      +                            if (flags & (1 << 0)) {
  1069  0006E0  B06B               	btfsc	_flags,0,c
  1070                           
  1071                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 717:       
      +                                flags &= ~(1 << 1);
  1072  0006E2  926B               	bcf	_flags,1,c
  1073                           
  1074                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 723:       
      +                            if ((*fmt)[0] == '*') {
  1075  0006E4  C045  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1076  0006E8  C046  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1077  0006EC  CFDE FFF6          	movff	postinc2,tblptrl
  1078  0006F0  CFDD FFF7          	movff	postdec2,tblptrh
  1079  0006F4                     	if	0	;tblptru may be non-zero
  1080  0006F4                     	endif
  1081  0006F4                     	if	0	;tblptru may be non-zero
  1082  0006F4                     	endif
  1083  0006F4  0008               	tblrd		*
  1084  0006F6  50F5               	movf	tablat,w,c
  1085  0006F8  0A2A               	xorlw	42
  1086  0006FA  A4D8               	btfss	status,2,c
  1087  0006FC  D023               	goto	l2336
  1088                           
  1089                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 724:       
      +                                ++*fmt;
  1090  0006FE  C045  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1091  000702  C046  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1092  000706  2ADE               	incf	postinc2,f,c
  1093  000708  0E00               	movlw	0
  1094  00070A  22DD               	addwfc	postdec2,f,c
  1095                           
  1096                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 725:       
      +                                width = (*(int *)__va_arg(*(int **)ap, (int)0));
  1097  00070C  C047  FFD9         	movff	vfpfcnvrt@ap,fsr2l
  1098  000710  C048  FFDA         	movff	vfpfcnvrt@ap+1,fsr2h
  1099  000714  CFDF F049          	movff	indf2,??_vfpfcnvrt
  1100  000718  0E02               	movlw	2
  1101  00071A  26DE               	addwf	postinc2,f,c
  1102  00071C  CFDF F04A          	movff	indf2,??_vfpfcnvrt+1
  1103  000720  0E00               	movlw	0
  1104  000722  22DD               	addwfc	postdec2,f,c
  1105  000724  C049  FFD9         	movff	??_vfpfcnvrt,fsr2l
  1106  000728  C04A  FFDA         	movff	??_vfpfcnvrt+1,fsr2h
  1107  00072C  CFDE F067          	movff	postinc2,_width
  1108  000730  CFDD F068          	movff	postdec2,_width+1
  1109                           
  1110                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 726:       
      +                                if (width < 0) {
  1111  000734  AE68               	btfss	_width+1,7,c
  1112  000736  D03F               	goto	u2040
  1113                           
  1114                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 727:       
      +                                    flags |= (1 << 0);
  1115  000738  806B               	bsf	_flags,0,c
  1116                           
  1117                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 728:       
      +                                    width = -width;
  1118  00073A  6C67               	negf	_width,c
  1119  00073C  1E68               	comf	_width+1,f,c
  1120  00073E  B0D8               	btfsc	status,0,c
  1121  000740  2A68               	incf	_width+1,f,c
  1122  000742  D039               	goto	u2040
  1123  000744                     l2336:
  1124                           
  1125                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 731:       
      +                                width = atoi(*fmt);
  1126  000744  C045  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1127  000748  C046  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1128  00074C  CFDE F00B          	movff	postinc2,atoi@s
  1129  000750  CFDD F00C          	movff	postdec2,atoi@s+1
  1130  000754  EC42  F006         	call	_atoi	;wreg free
  1131  000758  C00B  F067         	movff	?_atoi,_width
  1132  00075C  C00C  F068         	movff	?_atoi+1,_width+1
  1133                           
  1134                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 732:       
      +                                while ((0 ? isdigit((*fmt)[0]) : ((unsigned)((*fmt)[0])-'0') < 10)) {
  1135  000760  D007               	goto	l2340
  1136  000762                     l2338:
  1137                           
  1138                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 733:       
      +                                    ++*fmt;
  1139  000762  C045  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1140  000766  C046  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1141  00076A  2ADE               	incf	postinc2,f,c
  1142  00076C  0E00               	movlw	0
  1143  00076E  22DD               	addwfc	postdec2,f,c
  1144  000770                     l2340:
  1145  000770  0ED0               	movlw	208
  1146  000772  6E49               	movwf	??_vfpfcnvrt& (0+255),c
  1147  000774  0EFF               	movlw	255
  1148  000776  6E4A               	movwf	(??_vfpfcnvrt+1)& (0+255),c
  1149  000778  C045  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1150  00077C  C046  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1151  000780  CFDE FFF6          	movff	postinc2,tblptrl
  1152  000784  CFDD FFF7          	movff	postdec2,tblptrh
  1153  000788                     	if	0	;tblptru may be non-zero
  1154  000788                     	endif
  1155  000788                     	if	0	;tblptru may be non-zero
  1156  000788                     	endif
  1157  000788  0008               	tblrd		*
  1158  00078A  50F5               	movf	tablat,w,c
  1159  00078C  6E4B               	movwf	(??_vfpfcnvrt+2)& (0+255),c
  1160  00078E  6A4C               	clrf	(??_vfpfcnvrt+3)& (0+255),c
  1161  000790  5049               	movf	??_vfpfcnvrt,w,c
  1162  000792  264B               	addwf	??_vfpfcnvrt+2,f,c
  1163  000794  504A               	movf	??_vfpfcnvrt+1,w,c
  1164  000796  224C               	addwfc	??_vfpfcnvrt+3,f,c
  1165  000798  504C               	movf	??_vfpfcnvrt+3,w,c
  1166  00079A  E106               	bnz	u2020
  1167  00079C  0E0A               	movlw	10
  1168  00079E  5C4B               	subwf	??_vfpfcnvrt+2,w,c
  1169  0007A0  B0D8               	btfsc	status,0,c
  1170  0007A2  D002               	goto	u2020
  1171  0007A4  0E01               	movlw	1
  1172  0007A6  D001               	goto	u2030
  1173  0007A8                     u2020:
  1174  0007A8  0E00               	movlw	0
  1175  0007AA                     u2030:
  1176  0007AA  6E57               	movwf	_vfpfcnvrt$283,c
  1177  0007AC  6A58               	clrf	_vfpfcnvrt$283+1,c
  1178  0007AE  5057               	movf	_vfpfcnvrt$283,w,c
  1179  0007B0  1058               	iorwf	_vfpfcnvrt$283+1,w,c
  1180  0007B2  A4D8               	btfss	status,2,c
  1181  0007B4  D7D6               	goto	l2338
  1182  0007B6                     u2040:
  1183                           
  1184                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 825:       
      +                            if ((*fmt[0] == 'd') || (*fmt[0] == 'i')) {
  1185  0007B6  C045  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1186  0007BA  C046  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1187  0007BE  CFDE FFF6          	movff	postinc2,tblptrl
  1188  0007C2  CFDD FFF7          	movff	postdec2,tblptrh
  1189  0007C6                     	if	0	;tblptru may be non-zero
  1190  0007C6                     	endif
  1191  0007C6                     	if	0	;tblptru may be non-zero
  1192  0007C6                     	endif
  1193  0007C6  0008               	tblrd		*
  1194  0007C8  50F5               	movf	tablat,w,c
  1195  0007CA  0A64               	xorlw	100
  1196  0007CC  B4D8               	btfsc	status,2,c
  1197  0007CE  D00D               	goto	u2060
  1198  0007D0  C045  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1199  0007D4  C046  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1200  0007D8  CFDE FFF6          	movff	postinc2,tblptrl
  1201  0007DC  CFDD FFF7          	movff	postdec2,tblptrh
  1202  0007E0                     	if	0	;tblptru may be non-zero
  1203  0007E0                     	endif
  1204  0007E0                     	if	0	;tblptru may be non-zero
  1205  0007E0                     	endif
  1206  0007E0  0008               	tblrd		*
  1207  0007E2  50F5               	movf	tablat,w,c
  1208  0007E4  0A69               	xorlw	105
  1209  0007E6  A4D8               	btfss	status,2,c
  1210  0007E8  D03F               	goto	l2356
  1211  0007EA                     u2060:
  1212                           
  1213                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 827:       
      +                                ++*fmt;
  1214  0007EA  C045  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1215  0007EE  C046  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1216  0007F2  2ADE               	incf	postinc2,f,c
  1217  0007F4  0E00               	movlw	0
  1218  0007F6  22DD               	addwfc	postdec2,f,c
  1219                           
  1220                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 828:       
      +                                ll = (long long)(*(int *)__va_arg(*(int **)ap, (int)0));
  1221  0007F8  C047  FFD9         	movff	vfpfcnvrt@ap,fsr2l
  1222  0007FC  C048  FFDA         	movff	vfpfcnvrt@ap+1,fsr2h
  1223  000800  CFDF F049          	movff	indf2,??_vfpfcnvrt
  1224  000804  0E02               	movlw	2
  1225  000806  26DE               	addwf	postinc2,f,c
  1226  000808  CFDF F04A          	movff	indf2,??_vfpfcnvrt+1
  1227  00080C  0E00               	movlw	0
  1228  00080E  22DD               	addwfc	postdec2,f,c
  1229  000810  C049  FFD9         	movff	??_vfpfcnvrt,fsr2l
  1230  000814  C04A  FFDA         	movff	??_vfpfcnvrt+1,fsr2h
  1231  000818  CFDE F04D          	movff	postinc2,vfpfcnvrt@ll
  1232  00081C  CFDD F04E          	movff	postdec2,vfpfcnvrt@ll+1
  1233  000820  0E00               	movlw	0
  1234  000822  BE4E               	btfsc	vfpfcnvrt@ll+1,7,c
  1235  000824  0EFF               	movlw	-1
  1236  000826  6E4F               	movwf	vfpfcnvrt@ll+2,c
  1237  000828  6E50               	movwf	vfpfcnvrt@ll+3,c
  1238  00082A  6E51               	movwf	vfpfcnvrt@ll+4,c
  1239  00082C  6E52               	movwf	vfpfcnvrt@ll+5,c
  1240  00082E  6E53               	movwf	vfpfcnvrt@ll+6,c
  1241  000830  6E54               	movwf	vfpfcnvrt@ll+7,c
  1242                           
  1243                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 830:       
      +                                return dtoa(fp, ll);
  1244  000832  C043  F01F         	movff	vfpfcnvrt@fp,dtoa@fp
  1245  000836  C044  F020         	movff	vfpfcnvrt@fp+1,dtoa@fp+1
  1246  00083A  C04D  F021         	movff	vfpfcnvrt@ll,dtoa@d
  1247  00083E  C04E  F022         	movff	vfpfcnvrt@ll+1,dtoa@d+1
  1248  000842  C04F  F023         	movff	vfpfcnvrt@ll+2,dtoa@d+2
  1249  000846  C050  F024         	movff	vfpfcnvrt@ll+3,dtoa@d+3
  1250  00084A  C051  F025         	movff	vfpfcnvrt@ll+4,dtoa@d+4
  1251  00084E  C052  F026         	movff	vfpfcnvrt@ll+5,dtoa@d+5
  1252  000852  C053  F027         	movff	vfpfcnvrt@ll+6,dtoa@d+6
  1253  000856  C054  F028         	movff	vfpfcnvrt@ll+7,dtoa@d+7
  1254  00085A  EC7D  F004         	call	_dtoa	;wreg free
  1255  00085E  C01F  F043         	movff	?_dtoa,?_vfpfcnvrt
  1256  000862  C020  F044         	movff	?_dtoa+1,?_vfpfcnvrt+1
  1257  000866  0012               	return	
  1258  000868                     l2356:
  1259                           
  1260                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1350:      
      +                             if ((*fmt)[0] == '%') {
  1261  000868  C045  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1262  00086C  C046  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1263  000870  CFDE FFF6          	movff	postinc2,tblptrl
  1264  000874  CFDD FFF7          	movff	postdec2,tblptrh
  1265  000878                     	if	0	;tblptru may be non-zero
  1266  000878                     	endif
  1267  000878                     	if	0	;tblptru may be non-zero
  1268  000878                     	endif
  1269  000878  0008               	tblrd		*
  1270  00087A  50F5               	movf	tablat,w,c
  1271  00087C  0A25               	xorlw	37
  1272  00087E  A4D8               	btfss	status,2,c
  1273  000880  D016               	goto	l2366
  1274                           
  1275                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1351:      
      +                                 ++*fmt;
  1276  000882  C045  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1277  000886  C046  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1278  00088A  2ADE               	incf	postinc2,f,c
  1279  00088C  0E00               	movlw	0
  1280  00088E  22DD               	addwfc	postdec2,f,c
  1281                           
  1282                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1352:      
      +                                 fputc((int)'%', fp);
  1283  000890  0E00               	movlw	0
  1284  000892  6E05               	movwf	fputc@c+1,c
  1285  000894  0E25               	movlw	37
  1286  000896  6E04               	movwf	fputc@c,c
  1287  000898  C043  F006         	movff	vfpfcnvrt@fp,fputc@fp
  1288  00089C  C044  F007         	movff	vfpfcnvrt@fp+1,fputc@fp+1
  1289  0008A0  EC3A  F008         	call	_fputc	;wreg free
  1290  0008A4                     l2362:
  1291                           
  1292                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1353:      
      +                                 return 1;
  1293  0008A4  0E00               	movlw	0
  1294  0008A6  6E44               	movwf	?_vfpfcnvrt+1,c
  1295  0008A8  0E01               	movlw	1
  1296  0008AA  6E43               	movwf	?_vfpfcnvrt,c
  1297  0008AC  0012               	return	
  1298  0008AE                     l2366:
  1299                           
  1300                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1357:      
      +                             ++*fmt;
  1301  0008AE  C045  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1302  0008B2  C046  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1303  0008B6  2ADE               	incf	postinc2,f,c
  1304  0008B8  0E00               	movlw	0
  1305  0008BA  22DD               	addwfc	postdec2,f,c
  1306                           
  1307                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1358:      
      +                             return 0;
  1308  0008BC  0E00               	movlw	0
  1309  0008BE  6E44               	movwf	?_vfpfcnvrt+1,c
  1310  0008C0  0E00               	movlw	0
  1311  0008C2  6E43               	movwf	?_vfpfcnvrt,c
  1312  0008C4  0012               	return	
  1313  0008C6                     l2372:
  1314                           
  1315                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1362:     f
      +                          putc((int)(*fmt)[0], fp);
  1316  0008C6  C045  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1317  0008CA  C046  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1318  0008CE  CFDE FFF6          	movff	postinc2,tblptrl
  1319  0008D2  CFDD FFF7          	movff	postdec2,tblptrh
  1320  0008D6                     	if	0	;tblptru may be non-zero
  1321  0008D6                     	endif
  1322  0008D6                     	if	0	;tblptru may be non-zero
  1323  0008D6                     	endif
  1324  0008D6  0008               	tblrd		*
  1325  0008D8  50F5               	movf	tablat,w,c
  1326  0008DA  6E04               	movwf	fputc@c,c
  1327  0008DC  6A05               	clrf	fputc@c+1,c
  1328  0008DE  C043  F006         	movff	vfpfcnvrt@fp,fputc@fp
  1329  0008E2  C044  F007         	movff	vfpfcnvrt@fp+1,fputc@fp+1
  1330  0008E6  EC3A  F008         	call	_fputc	;wreg free
  1331                           
  1332                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1363:     +
      +                          +*fmt;
  1333  0008EA  C045  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1334  0008EE  C046  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1335  0008F2  2ADE               	incf	postinc2,f,c
  1336  0008F4  0E00               	movlw	0
  1337  0008F6  22DD               	addwfc	postdec2,f,c
  1338  0008F8  D7D5               	goto	l2362
  1339  0008FA                     __end_of_vfpfcnvrt:
  1340                           	opt callstack 0
  1341                           
  1342 ;; *************** function _dtoa *****************
  1343 ;; Defined at:
  1344 ;;		line 274 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c"
  1345 ;; Parameters:    Size  Location     Type
  1346 ;;  fp              2   30[COMRAM] PTR struct _IO_FILE
  1347 ;;		 -> sprintf@f(6), 
  1348 ;;  d               8   32[COMRAM] long long 
  1349 ;; Auto vars:     Size  Location     Type
  1350 ;;  n               8   56[COMRAM] long long 
  1351 ;;  i               2   64[COMRAM] int 
  1352 ;;  s               2   54[COMRAM] int 
  1353 ;;  w               2   52[COMRAM] int 
  1354 ;;  p               2   50[COMRAM] int 
  1355 ;; Return value:  Size  Location     Type
  1356 ;;                  2   30[COMRAM] int 
  1357 ;; Registers used:
  1358 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  1359 ;; Tracked objects:
  1360 ;;		On entry : 0/0
  1361 ;;		On exit  : 0/0
  1362 ;;		Unchanged: 0/0
  1363 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1364 ;;      Params:        10       0       0       0       0       0       0
  1365 ;;      Locals:        18       0       0       0       0       0       0
  1366 ;;      Temps:          8       0       0       0       0       0       0
  1367 ;;      Totals:        36       0       0       0       0       0       0
  1368 ;;Total ram usage:       36 bytes
  1369 ;; Hardware stack levels used:    1
  1370 ;; Hardware stack levels required when called:    5
  1371 ;; This function calls:
  1372 ;;		___aodiv
  1373 ;;		___aomod
  1374 ;;		_abs
  1375 ;;		_pad
  1376 ;; This function is called by:
  1377 ;;		_vfpfcnvrt
  1378 ;; This function uses a non-reentrant model
  1379 ;;
  1380                           
  1381                           	psect	text4
  1382  0008FA                     __ptext4:
  1383                           	opt callstack 0
  1384  0008FA                     _dtoa:
  1385                           	opt callstack 22
  1386                           
  1387                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 274: static
      +                           int dtoa(FILE *fp, long long d);C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\
      +                          c99\common\doprnt.c: 275: {;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\c
      +                          ommon\doprnt.c: 276:     int i, p, s, w;;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\
      +                          sources\c99\common\doprnt.c: 277:     long long n;;C:\Program Files (x86)\Microchip\xc8\
      +                          v2.05\pic\sources\c99\common\doprnt.c: 280:     n = d;
  1388                           
  1389                           ;incstack = 0
  1390  0008FA  C021  F039         	movff	dtoa@d,dtoa@n
  1391  0008FE  C022  F03A         	movff	dtoa@d+1,dtoa@n+1
  1392  000902  C023  F03B         	movff	dtoa@d+2,dtoa@n+2
  1393  000906  C024  F03C         	movff	dtoa@d+3,dtoa@n+3
  1394  00090A  C025  F03D         	movff	dtoa@d+4,dtoa@n+4
  1395  00090E  C026  F03E         	movff	dtoa@d+5,dtoa@n+5
  1396  000912  C027  F03F         	movff	dtoa@d+6,dtoa@n+6
  1397  000916  C028  F040         	movff	dtoa@d+7,dtoa@n+7
  1398                           
  1399                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 281:     s 
      +                          = n < 0 ? 1 : 0;
  1400  00091A  AE40               	btfss	dtoa@n+7,7,c
  1401  00091C  D002               	goto	u1750
  1402  00091E  0E01               	movlw	1
  1403  000920  D001               	goto	u1760
  1404  000922                     u1750:
  1405  000922  0E00               	movlw	0
  1406  000924                     u1760:
  1407  000924  6E37               	movwf	dtoa@s,c
  1408  000926  6A38               	clrf	dtoa@s+1,c
  1409                           
  1410                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 282:     if
      +                           (s) {
  1411  000928  5037               	movf	dtoa@s,w,c
  1412  00092A  1038               	iorwf	dtoa@s+1,w,c
  1413  00092C  B4D8               	btfsc	status,2,c
  1414  00092E  D010               	goto	l2190
  1415                           
  1416                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 283:       
      +                            n = -n;
  1417  000930  1E40               	comf	dtoa@n+7,f,c
  1418  000932  1E3F               	comf	dtoa@n+6,f,c
  1419  000934  1E3E               	comf	dtoa@n+5,f,c
  1420  000936  1E3D               	comf	dtoa@n+4,f,c
  1421  000938  1E3C               	comf	dtoa@n+3,f,c
  1422  00093A  1E3B               	comf	dtoa@n+2,f,c
  1423  00093C  1E3A               	comf	dtoa@n+1,f,c
  1424  00093E  6C39               	negf	dtoa@n,c
  1425  000940  0E00               	movlw	0
  1426  000942  223A               	addwfc	dtoa@n+1,f,c
  1427  000944  223B               	addwfc	dtoa@n+2,f,c
  1428  000946  223C               	addwfc	dtoa@n+3,f,c
  1429  000948  223D               	addwfc	dtoa@n+4,f,c
  1430  00094A  223E               	addwfc	dtoa@n+5,f,c
  1431  00094C  223F               	addwfc	dtoa@n+6,f,c
  1432  00094E  2240               	addwfc	dtoa@n+7,f,c
  1433  000950                     l2190:
  1434                           
  1435                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 287:     if
      +                           (!(prec < 0)) {
  1436  000950  AE6A               	btfss	_prec+1,7,c
  1437                           
  1438                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 288:       
      +                            flags &= ~(1 << 1);
  1439  000952  926B               	bcf	_flags,1,c
  1440                           
  1441                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 290:     p 
      +                          = (0 < prec) ? prec : 1;
  1442  000954  BE6A               	btfsc	_prec+1,7,c
  1443  000956  D005               	goto	u1790
  1444  000958  506A               	movf	_prec+1,w,c
  1445  00095A  E108               	bnz	l136
  1446  00095C  0469               	decf	_prec,w,c
  1447  00095E  B0D8               	btfsc	status,0,c
  1448  000960  D005               	goto	l136
  1449  000962                     u1790:
  1450  000962  0E00               	movlw	0
  1451  000964  6E34               	movwf	dtoa@p+1,c
  1452  000966  0E01               	movlw	1
  1453  000968  6E33               	movwf	dtoa@p,c
  1454  00096A  D004               	goto	l138
  1455  00096C                     l136:
  1456  00096C  C069  F033         	movff	_prec,dtoa@p
  1457  000970  C06A  F034         	movff	_prec+1,dtoa@p+1
  1458  000974                     l138:
  1459                           
  1460                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 291:     w 
      +                          = width;
  1461  000974  C067  F035         	movff	_width,dtoa@w
  1462  000978  C068  F036         	movff	_width+1,dtoa@w+1
  1463                           
  1464                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 292:     if
      +                           (s || (flags & (1 << 2))) {
  1465  00097C  5037               	movf	dtoa@s,w,c
  1466  00097E  1038               	iorwf	dtoa@s+1,w,c
  1467  000980  A4D8               	btfss	status,2,c
  1468  000982  D002               	goto	u1810
  1469  000984  A46B               	btfss	_flags,2,c
  1470  000986  D003               	goto	l2204
  1471  000988                     u1810:
  1472                           
  1473                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 293:       
      +                            --w;
  1474  000988  0635               	decf	dtoa@w,f,c
  1475  00098A  A0D8               	btfss	status,0,c
  1476  00098C  0636               	decf	dtoa@w+1,f,c
  1477  00098E                     l2204:
  1478                           
  1479                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 297:     i 
      +                          = sizeof(dbuf) - 1;
  1480  00098E  0E00               	movlw	0
  1481  000990  6E42               	movwf	dtoa@i+1,c
  1482  000992  0E1F               	movlw	31
  1483  000994  6E41               	movwf	dtoa@i,c
  1484                           
  1485                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 298:     db
      +                          uf[i] = '\0';
  1486  000996  0E00               	movlw	0
  1487  000998  0100               	movlb	0	; () banked
  1488  00099A  6FA1               	movwf	(_dbuf+31)& (0+255),b
  1489                           
  1490                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 299:     wh
      +                          ile (!(i < 1) && (n || (0 < p) || ((0 < w) && (flags & (1 << 1))))) {
  1491  00099C  D07C               	goto	l2218
  1492  00099E                     l2208:
  1493                           
  1494                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 300:       
      +                            --i;
  1495  00099E  0641               	decf	dtoa@i,f,c
  1496  0009A0  A0D8               	btfss	status,0,c
  1497  0009A2  0642               	decf	dtoa@i+1,f,c
  1498                           
  1499                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 301:       
      +                            dbuf[i] = '0' + abs(n % 10);
  1500  0009A4  0E82               	movlw	low _dbuf
  1501  0009A6  2441               	addwf	dtoa@i,w,c
  1502  0009A8  6ED9               	movwf	fsr2l,c
  1503  0009AA  0E00               	movlw	high _dbuf
  1504  0009AC  2042               	addwfc	dtoa@i+1,w,c
  1505  0009AE  6EDA               	movwf	fsr2h,c
  1506  0009B0  C039  F004         	movff	dtoa@n,___aomod@dividend
  1507  0009B4  C03A  F005         	movff	dtoa@n+1,___aomod@dividend+1
  1508  0009B8  C03B  F006         	movff	dtoa@n+2,___aomod@dividend+2
  1509  0009BC  C03C  F007         	movff	dtoa@n+3,___aomod@dividend+3
  1510  0009C0  C03D  F008         	movff	dtoa@n+4,___aomod@dividend+4
  1511  0009C4  C03E  F009         	movff	dtoa@n+5,___aomod@dividend+5
  1512  0009C8  C03F  F00A         	movff	dtoa@n+6,___aomod@dividend+6
  1513  0009CC  C040  F00B         	movff	dtoa@n+7,___aomod@dividend+7
  1514  0009D0  0E0A               	movlw	10
  1515  0009D2  6E0C               	movwf	___aomod@divisor,c
  1516  0009D4  0E00               	movlw	0
  1517  0009D6  6E0D               	movwf	___aomod@divisor+1,c
  1518  0009D8  0E00               	movlw	0
  1519  0009DA  6E0E               	movwf	___aomod@divisor+2,c
  1520  0009DC  0E00               	movlw	0
  1521  0009DE  6E0F               	movwf	___aomod@divisor+3,c
  1522  0009E0  0E00               	movlw	0
  1523  0009E2  6E10               	movwf	___aomod@divisor+4,c
  1524  0009E4  0E00               	movlw	0
  1525  0009E6  6E11               	movwf	___aomod@divisor+5,c
  1526  0009E8  0E00               	movlw	0
  1527  0009EA  6E12               	movwf	___aomod@divisor+6,c
  1528  0009EC  0E00               	movlw	0
  1529  0009EE  6E13               	movwf	___aomod@divisor+7,c
  1530  0009F0  ECE2  F006         	call	___aomod	;wreg free
  1531  0009F4  C004  F029         	movff	?___aomod,??_dtoa
  1532  0009F8  C005  F02A         	movff	?___aomod+1,??_dtoa+1
  1533  0009FC  C006  F02B         	movff	?___aomod+2,??_dtoa+2
  1534  000A00  C007  F02C         	movff	?___aomod+3,??_dtoa+3
  1535  000A04  C008  F02D         	movff	?___aomod+4,??_dtoa+4
  1536  000A08  C009  F02E         	movff	?___aomod+5,??_dtoa+5
  1537  000A0C  C00A  F02F         	movff	?___aomod+6,??_dtoa+6
  1538  000A10  C00B  F030         	movff	?___aomod+7,??_dtoa+7
  1539  000A14  C029  F016         	movff	??_dtoa,abs@a
  1540  000A18  C02B  F017         	movff	??_dtoa+2,abs@a+1
  1541  000A1C  ECEA  F009         	call	_abs	;wreg free
  1542  000A20  5016               	movf	?_abs,w,c
  1543  000A22  0F30               	addlw	48
  1544  000A24  6EDF               	movwf	indf2,c
  1545                           
  1546                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 302:       
      +                            --p;
  1547  000A26  0633               	decf	dtoa@p,f,c
  1548  000A28  A0D8               	btfss	status,0,c
  1549  000A2A  0634               	decf	dtoa@p+1,f,c
  1550                           
  1551                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 303:       
      +                            --w;
  1552  000A2C  0635               	decf	dtoa@w,f,c
  1553  000A2E  A0D8               	btfss	status,0,c
  1554  000A30  0636               	decf	dtoa@w+1,f,c
  1555                           
  1556                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 304:       
      +                            n = n / 10;
  1557  000A32  C039  F004         	movff	dtoa@n,___aodiv@dividend
  1558  000A36  C03A  F005         	movff	dtoa@n+1,___aodiv@dividend+1
  1559  000A3A  C03B  F006         	movff	dtoa@n+2,___aodiv@dividend+2
  1560  000A3E  C03C  F007         	movff	dtoa@n+3,___aodiv@dividend+3
  1561  000A42  C03D  F008         	movff	dtoa@n+4,___aodiv@dividend+4
  1562  000A46  C03E  F009         	movff	dtoa@n+5,___aodiv@dividend+5
  1563  000A4A  C03F  F00A         	movff	dtoa@n+6,___aodiv@dividend+6
  1564  000A4E  C040  F00B         	movff	dtoa@n+7,___aodiv@dividend+7
  1565  000A52  0E0A               	movlw	10
  1566  000A54  6E0C               	movwf	___aodiv@divisor,c
  1567  000A56  0E00               	movlw	0
  1568  000A58  6E0D               	movwf	___aodiv@divisor+1,c
  1569  000A5A  0E00               	movlw	0
  1570  000A5C  6E0E               	movwf	___aodiv@divisor+2,c
  1571  000A5E  0E00               	movlw	0
  1572  000A60  6E0F               	movwf	___aodiv@divisor+3,c
  1573  000A62  0E00               	movlw	0
  1574  000A64  6E10               	movwf	___aodiv@divisor+4,c
  1575  000A66  0E00               	movlw	0
  1576  000A68  6E11               	movwf	___aodiv@divisor+5,c
  1577  000A6A  0E00               	movlw	0
  1578  000A6C  6E12               	movwf	___aodiv@divisor+6,c
  1579  000A6E  0E00               	movlw	0
  1580  000A70  6E13               	movwf	___aodiv@divisor+7,c
  1581  000A72  EC9E  F005         	call	___aodiv	;wreg free
  1582  000A76  C004  F039         	movff	?___aodiv,dtoa@n
  1583  000A7A  C005  F03A         	movff	?___aodiv+1,dtoa@n+1
  1584  000A7E  C006  F03B         	movff	?___aodiv+2,dtoa@n+2
  1585  000A82  C007  F03C         	movff	?___aodiv+3,dtoa@n+3
  1586  000A86  C008  F03D         	movff	?___aodiv+4,dtoa@n+4
  1587  000A8A  C009  F03E         	movff	?___aodiv+5,dtoa@n+5
  1588  000A8E  C00A  F03F         	movff	?___aodiv+6,dtoa@n+6
  1589  000A92  C00B  F040         	movff	?___aodiv+7,dtoa@n+7
  1590  000A96                     l2218:
  1591                           
  1592                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 299:     wh
      +                          ile (!(i < 1) && (n || (0 < p) || ((0 < w) && (flags & (1 << 1))))) {
  1593  000A96  BE42               	btfsc	dtoa@i+1,7,c
  1594  000A98  D01F               	goto	u1860
  1595  000A9A  5042               	movf	dtoa@i+1,w,c
  1596  000A9C  E103               	bnz	u1820
  1597  000A9E  0441               	decf	dtoa@i,w,c
  1598  000AA0  A0D8               	btfss	status,0,c
  1599  000AA2  D01A               	goto	u1860
  1600  000AA4                     u1820:
  1601  000AA4  5039               	movf	dtoa@n,w,c
  1602  000AA6  103A               	iorwf	dtoa@n+1,w,c
  1603  000AA8  103B               	iorwf	dtoa@n+2,w,c
  1604  000AAA  103C               	iorwf	dtoa@n+3,w,c
  1605  000AAC  103D               	iorwf	dtoa@n+4,w,c
  1606  000AAE  103E               	iorwf	dtoa@n+5,w,c
  1607  000AB0  103F               	iorwf	dtoa@n+6,w,c
  1608  000AB2  1040               	iorwf	dtoa@n+7,w,c
  1609  000AB4  A4D8               	btfss	status,2,c
  1610  000AB6  D773               	goto	l2208
  1611  000AB8  BE34               	btfsc	dtoa@p+1,7,c
  1612  000ABA  D005               	goto	u1840
  1613  000ABC  5034               	movf	dtoa@p+1,w,c
  1614  000ABE  E102               	bnz	u1841
  1615  000AC0  0433               	decf	dtoa@p,w,c
  1616  000AC2  B0D8               	btfsc	status,0,c
  1617  000AC4                     u1841:
  1618  000AC4  D76C               	goto	l2208
  1619  000AC6                     u1840:
  1620  000AC6  BE36               	btfsc	dtoa@w+1,7,c
  1621  000AC8  D007               	goto	u1860
  1622  000ACA  5036               	movf	dtoa@w+1,w,c
  1623  000ACC  E103               	bnz	u1850
  1624  000ACE  0435               	decf	dtoa@w,w,c
  1625  000AD0  A0D8               	btfss	status,0,c
  1626  000AD2  D002               	goto	u1860
  1627  000AD4                     u1850:
  1628  000AD4  B26B               	btfsc	_flags,1,c
  1629  000AD6  D763               	goto	l2208
  1630  000AD8                     u1860:
  1631                           
  1632                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 308:     if
      +                           (s || (flags & (1 << 2))) {
  1633  000AD8  5037               	movf	dtoa@s,w,c
  1634  000ADA  1038               	iorwf	dtoa@s+1,w,c
  1635  000ADC  A4D8               	btfss	status,2,c
  1636  000ADE  D002               	goto	u1880
  1637  000AE0  A46B               	btfss	_flags,2,c
  1638  000AE2  D017               	goto	l2242
  1639  000AE4                     u1880:
  1640                           
  1641                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 309:       
      +                            --i;
  1642  000AE4  0641               	decf	dtoa@i,f,c
  1643  000AE6  A0D8               	btfss	status,0,c
  1644  000AE8  0642               	decf	dtoa@i+1,f,c
  1645                           
  1646                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 310:       
      +                            dbuf[i] = s ? '-' : '+';
  1647  000AEA  5037               	movf	dtoa@s,w,c
  1648  000AEC  1038               	iorwf	dtoa@s+1,w,c
  1649  000AEE  A4D8               	btfss	status,2,c
  1650  000AF0  D004               	goto	l2238
  1651  000AF2  0E00               	movlw	0
  1652  000AF4  6E32               	movwf	_dtoa$268+1,c
  1653  000AF6  0E2B               	movlw	43
  1654  000AF8  D003               	goto	L2
  1655  000AFA                     l2238:
  1656  000AFA  0E00               	movlw	0
  1657  000AFC  6E32               	movwf	_dtoa$268+1,c
  1658  000AFE  0E2D               	movlw	45
  1659  000B00                     L2:
  1660  000B00  6E31               	movwf	_dtoa$268,c
  1661  000B02  0E82               	movlw	low _dbuf
  1662  000B04  2441               	addwf	dtoa@i,w,c
  1663  000B06  6ED9               	movwf	fsr2l,c
  1664  000B08  0E00               	movlw	high _dbuf
  1665  000B0A  2042               	addwfc	dtoa@i+1,w,c
  1666  000B0C  6EDA               	movwf	fsr2h,c
  1667  000B0E  C031  FFDF         	movff	_dtoa$268,indf2
  1668  000B12                     l2242:
  1669                           
  1670                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 314:     re
      +                          turn pad(fp, &dbuf[i], w);
  1671  000B12  C01F  F014         	movff	dtoa@fp,pad@fp
  1672  000B16  C020  F015         	movff	dtoa@fp+1,pad@fp+1
  1673  000B1A  0E82               	movlw	low _dbuf
  1674  000B1C  2441               	addwf	dtoa@i,w,c
  1675  000B1E  6E16               	movwf	pad@buf,c
  1676  000B20  0E00               	movlw	high _dbuf
  1677  000B22  2042               	addwfc	dtoa@i+1,w,c
  1678  000B24  6E17               	movwf	pad@buf+1,c
  1679  000B26  C035  F018         	movff	dtoa@w,pad@p
  1680  000B2A  C036  F019         	movff	dtoa@w+1,pad@p+1
  1681  000B2E  EC8A  F008         	call	_pad	;wreg free
  1682  000B32  C014  F01F         	movff	?_pad,?_dtoa
  1683  000B36  C015  F020         	movff	?_pad+1,?_dtoa+1
  1684  000B3A  0012               	return		;funcret
  1685  000B3C                     __end_of_dtoa:
  1686                           	opt callstack 0
  1687                           
  1688 ;; *************** function _pad *****************
  1689 ;; Defined at:
  1690 ;;		line 72 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c"
  1691 ;; Parameters:    Size  Location     Type
  1692 ;;  fp              2   19[COMRAM] PTR struct _IO_FILE
  1693 ;;		 -> sprintf@f(6), 
  1694 ;;  buf             2   21[COMRAM] PTR unsigned char 
  1695 ;;		 -> dbuf(32), 
  1696 ;;  p               2   23[COMRAM] int 
  1697 ;; Auto vars:     Size  Location     Type
  1698 ;;  w               2   28[COMRAM] int 
  1699 ;;  i               2   26[COMRAM] int 
  1700 ;; Return value:  Size  Location     Type
  1701 ;;                  2   19[COMRAM] int 
  1702 ;; Registers used:
  1703 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  1704 ;; Tracked objects:
  1705 ;;		On entry : 0/0
  1706 ;;		On exit  : 0/0
  1707 ;;		Unchanged: 0/0
  1708 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1709 ;;      Params:         6       0       0       0       0       0       0
  1710 ;;      Locals:         4       0       0       0       0       0       0
  1711 ;;      Temps:          1       0       0       0       0       0       0
  1712 ;;      Totals:        11       0       0       0       0       0       0
  1713 ;;Total ram usage:       11 bytes
  1714 ;; Hardware stack levels used:    1
  1715 ;; Hardware stack levels required when called:    4
  1716 ;; This function calls:
  1717 ;;		_fputc
  1718 ;;		_fputs
  1719 ;;		_strlen
  1720 ;; This function is called by:
  1721 ;;		_dtoa
  1722 ;; This function uses a non-reentrant model
  1723 ;;
  1724                           
  1725                           	psect	text5
  1726  001114                     __ptext5:
  1727                           	opt callstack 0
  1728  001114                     _pad:
  1729                           	opt callstack 22
  1730                           
  1731                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 72: static 
      +                          int pad(FILE *fp, char *buf, int p);C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sourc
      +                          es\c99\common\doprnt.c: 73: {;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99
      +                          \common\doprnt.c: 74:     int i, w;;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sourc
      +                          es\c99\common\doprnt.c: 77:     if (flags & (1 << 0)) {
  1732                           
  1733                           ;incstack = 0
  1734  001114  A06B               	btfss	_flags,0,c
  1735  001116  D00A               	goto	l2060
  1736                           
  1737                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 78:        
      +                           fputs((const char *)buf, fp);
  1738  001118  C016  F00D         	movff	pad@buf,fputs@s
  1739  00111C  C017  F00E         	movff	pad@buf+1,fputs@s+1
  1740  001120  C014  F00F         	movff	pad@fp,fputs@fp
  1741  001124  C015  F010         	movff	pad@fp+1,fputs@fp+1
  1742  001128  ECCE  F009         	call	_fputs	;wreg free
  1743  00112C                     l2060:
  1744                           
  1745                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 82:     w =
      +                           (p < 0) ? 0 : p;
  1746  00112C  BE19               	btfsc	pad@p+1,7,c
  1747  00112E  D005               	goto	l2064
  1748  001130  C018  F01D         	movff	pad@p,pad@w
  1749  001134  C019  F01E         	movff	pad@p+1,pad@w+1
  1750  001138  D004               	goto	l125
  1751  00113A                     l2064:
  1752  00113A  0E00               	movlw	0
  1753  00113C  6E1E               	movwf	pad@w+1,c
  1754  00113E  0E00               	movlw	0
  1755  001140  6E1D               	movwf	pad@w,c
  1756  001142                     l125:
  1757                           
  1758                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 83:     i =
      +                           0;
  1759  001142  0E00               	movlw	0
  1760  001144  6E1C               	movwf	pad@i+1,c
  1761  001146  0E00               	movlw	0
  1762  001148  6E1B               	movwf	pad@i,c
  1763                           
  1764                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 84:     whi
      +                          le (i < w) {
  1765  00114A  D00C               	goto	l2070
  1766  00114C                     l2066:
  1767                           
  1768                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 85:        
      +                           fputc(' ', fp);
  1769  00114C  0E00               	movlw	0
  1770  00114E  6E05               	movwf	fputc@c+1,c
  1771  001150  0E20               	movlw	32
  1772  001152  6E04               	movwf	fputc@c,c
  1773  001154  C014  F006         	movff	pad@fp,fputc@fp
  1774  001158  C015  F007         	movff	pad@fp+1,fputc@fp+1
  1775  00115C  EC3A  F008         	call	_fputc	;wreg free
  1776                           
  1777                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 86:        
      +                           ++i;
  1778  001160  4A1B               	infsnz	pad@i,f,c
  1779  001162  2A1C               	incf	pad@i+1,f,c
  1780  001164                     l2070:
  1781                           
  1782                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 84:     whi
      +                          le (i < w) {
  1783  001164  501D               	movf	pad@w,w,c
  1784  001166  5C1B               	subwf	pad@i,w,c
  1785  001168  501C               	movf	pad@i+1,w,c
  1786  00116A  0A80               	xorlw	128
  1787  00116C  6E1A               	movwf	??_pad& (0+255),c
  1788  00116E  501E               	movf	pad@w+1,w,c
  1789  001170  0A80               	xorlw	128
  1790  001172  581A               	subwfb	??_pad& (0+255),w,c
  1791  001174  A0D8               	btfss	status,0,c
  1792  001176  D7EA               	goto	l2066
  1793                           
  1794                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 90:     if 
      +                          (!(flags & (1 << 0))) {
  1795  001178  B06B               	btfsc	_flags,0,c
  1796  00117A  D00A               	goto	l2074
  1797                           
  1798                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 91:        
      +                           fputs((const char *)buf, fp);
  1799  00117C  C016  F00D         	movff	pad@buf,fputs@s
  1800  001180  C017  F00E         	movff	pad@buf+1,fputs@s+1
  1801  001184  C014  F00F         	movff	pad@fp,fputs@fp
  1802  001188  C015  F010         	movff	pad@fp+1,fputs@fp+1
  1803  00118C  ECCE  F009         	call	_fputs	;wreg free
  1804  001190                     l2074:
  1805                           
  1806                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 94:     ret
      +                          urn strlen(buf) + w;
  1807  001190  C016  F004         	movff	pad@buf,strlen@s
  1808  001194  C017  F005         	movff	pad@buf+1,strlen@s+1
  1809  001198  EC1B  F00A         	call	_strlen	;wreg free
  1810  00119C  501D               	movf	pad@w,w,c
  1811  00119E  2404               	addwf	?_strlen,w,c
  1812  0011A0  6E14               	movwf	?_pad,c
  1813  0011A2  501E               	movf	pad@w+1,w,c
  1814  0011A4  2005               	addwfc	?_strlen+1,w,c
  1815  0011A6  6E15               	movwf	?_pad+1,c
  1816  0011A8  0012               	return		;funcret
  1817  0011AA                     __end_of_pad:
  1818                           	opt callstack 0
  1819                           
  1820 ;; *************** function _strlen *****************
  1821 ;; Defined at:
  1822 ;;		line 12 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\strlen.c"
  1823 ;; Parameters:    Size  Location     Type
  1824 ;;  s               2    3[COMRAM] PTR const unsigned char 
  1825 ;;		 -> dbuf(32), 
  1826 ;; Auto vars:     Size  Location     Type
  1827 ;;  a               2    5[COMRAM] PTR const unsigned char 
  1828 ;;		 -> dbuf(32), 
  1829 ;; Return value:  Size  Location     Type
  1830 ;;                  2    3[COMRAM] unsigned int 
  1831 ;; Registers used:
  1832 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  1833 ;; Tracked objects:
  1834 ;;		On entry : 0/0
  1835 ;;		On exit  : 0/0
  1836 ;;		Unchanged: 0/0
  1837 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1838 ;;      Params:         2       0       0       0       0       0       0
  1839 ;;      Locals:         2       0       0       0       0       0       0
  1840 ;;      Temps:          0       0       0       0       0       0       0
  1841 ;;      Totals:         4       0       0       0       0       0       0
  1842 ;;Total ram usage:        4 bytes
  1843 ;; Hardware stack levels used:    1
  1844 ;; Hardware stack levels required when called:    1
  1845 ;; This function calls:
  1846 ;;		Nothing
  1847 ;; This function is called by:
  1848 ;;		_pad
  1849 ;; This function uses a non-reentrant model
  1850 ;;
  1851                           
  1852                           	psect	text6
  1853  001436                     __ptext6:
  1854                           	opt callstack 0
  1855  001436                     _strlen:
  1856                           	opt callstack 24
  1857                           
  1858                           ;incstack = 0
  1859  001436  C004  F006         	movff	strlen@s,strlen@a
  1860  00143A  C005  F007         	movff	strlen@s+1,strlen@a+1
  1861  00143E  D002               	goto	l2050
  1862  001440                     l2048:
  1863  001440  4A04               	infsnz	strlen@s,f,c
  1864  001442  2A05               	incf	strlen@s+1,f,c
  1865  001444                     l2050:
  1866  001444  C004  FFD9         	movff	strlen@s,fsr2l
  1867  001448  C005  FFDA         	movff	strlen@s+1,fsr2h
  1868  00144C  50DF               	movf	indf2,w,c
  1869  00144E  A4D8               	btfss	status,2,c
  1870  001450  D7F7               	goto	l2048
  1871  001452  5006               	movf	strlen@a,w,c
  1872  001454  5C04               	subwf	strlen@s,w,c
  1873  001456  6E04               	movwf	?_strlen,c
  1874  001458  5007               	movf	strlen@a+1,w,c
  1875  00145A  5805               	subwfb	strlen@s+1,w,c
  1876  00145C  6E05               	movwf	?_strlen+1,c
  1877  00145E  0012               	return		;funcret
  1878  001460                     __end_of_strlen:
  1879                           	opt callstack 0
  1880                           
  1881 ;; *************** function _fputs *****************
  1882 ;; Defined at:
  1883 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\nf_fputs.c"
  1884 ;; Parameters:    Size  Location     Type
  1885 ;;  s               2   12[COMRAM] PTR const unsigned char 
  1886 ;;		 -> dbuf(32), 
  1887 ;;  fp              2   14[COMRAM] PTR struct _IO_FILE
  1888 ;;		 -> sprintf@f(6), 
  1889 ;; Auto vars:     Size  Location     Type
  1890 ;;  i               2   17[COMRAM] int 
  1891 ;;  c               1   16[COMRAM] unsigned char 
  1892 ;; Return value:  Size  Location     Type
  1893 ;;                  2   12[COMRAM] int 
  1894 ;; Registers used:
  1895 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  1896 ;; Tracked objects:
  1897 ;;		On entry : 0/0
  1898 ;;		On exit  : 0/0
  1899 ;;		Unchanged: 0/0
  1900 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1901 ;;      Params:         4       0       0       0       0       0       0
  1902 ;;      Locals:         3       0       0       0       0       0       0
  1903 ;;      Temps:          0       0       0       0       0       0       0
  1904 ;;      Totals:         7       0       0       0       0       0       0
  1905 ;;Total ram usage:        7 bytes
  1906 ;; Hardware stack levels used:    1
  1907 ;; Hardware stack levels required when called:    3
  1908 ;; This function calls:
  1909 ;;		_fputc
  1910 ;; This function is called by:
  1911 ;;		_pad
  1912 ;; This function uses a non-reentrant model
  1913 ;;
  1914                           
  1915                           	psect	text7
  1916  00139C                     __ptext7:
  1917                           	opt callstack 0
  1918  00139C                     _fputs:
  1919                           	opt callstack 22
  1920                           
  1921                           ;incstack = 0
  1922  00139C  0E00               	movlw	0
  1923  00139E  6E13               	movwf	fputs@i+1,c
  1924  0013A0  0E00               	movlw	0
  1925  0013A2  6E12               	movwf	fputs@i,c
  1926  0013A4  D00B               	goto	l2044
  1927  0013A6                     l2040:
  1928  0013A6  C011  F004         	movff	fputs@c,fputc@c
  1929  0013AA  6A05               	clrf	fputc@c+1,c
  1930  0013AC  C00F  F006         	movff	fputs@fp,fputc@fp
  1931  0013B0  C010  F007         	movff	fputs@fp+1,fputc@fp+1
  1932  0013B4  EC3A  F008         	call	_fputc	;wreg free
  1933  0013B8  4A12               	infsnz	fputs@i,f,c
  1934  0013BA  2A13               	incf	fputs@i+1,f,c
  1935  0013BC                     l2044:
  1936  0013BC  5012               	movf	fputs@i,w,c
  1937  0013BE  240D               	addwf	fputs@s,w,c
  1938  0013C0  6ED9               	movwf	fsr2l,c
  1939  0013C2  5013               	movf	fputs@i+1,w,c
  1940  0013C4  200E               	addwfc	fputs@s+1,w,c
  1941  0013C6  6EDA               	movwf	fsr2h,c
  1942  0013C8  50DF               	movf	indf2,w,c
  1943  0013CA  6E11               	movwf	fputs@c,c
  1944  0013CC  5011               	movf	fputs@c,w,c
  1945  0013CE  B4D8               	btfsc	status,2,c
  1946  0013D0  0012               	return	
  1947  0013D2  D7E9               	goto	l2040
  1948  0013D4                     __end_of_fputs:
  1949                           	opt callstack 0
  1950                           
  1951 ;; *************** function _fputc *****************
  1952 ;; Defined at:
  1953 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\nf_fputc.c"
  1954 ;; Parameters:    Size  Location     Type
  1955 ;;  c               2    3[COMRAM] int 
  1956 ;;  fp              2    5[COMRAM] PTR struct _IO_FILE
  1957 ;;		 -> sprintf@f(6), 
  1958 ;; Auto vars:     Size  Location     Type
  1959 ;;		None
  1960 ;; Return value:  Size  Location     Type
  1961 ;;                  2    3[COMRAM] int 
  1962 ;; Registers used:
  1963 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  1964 ;; Tracked objects:
  1965 ;;		On entry : 0/0
  1966 ;;		On exit  : 0/0
  1967 ;;		Unchanged: 0/0
  1968 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1969 ;;      Params:         4       0       0       0       0       0       0
  1970 ;;      Locals:         0       0       0       0       0       0       0
  1971 ;;      Temps:          5       0       0       0       0       0       0
  1972 ;;      Totals:         9       0       0       0       0       0       0
  1973 ;;Total ram usage:        9 bytes
  1974 ;; Hardware stack levels used:    1
  1975 ;; Hardware stack levels required when called:    2
  1976 ;; This function calls:
  1977 ;;		_putch
  1978 ;; This function is called by:
  1979 ;;		_pad
  1980 ;;		_vfpfcnvrt
  1981 ;;		_fputs
  1982 ;; This function uses a non-reentrant model
  1983 ;;
  1984                           
  1985                           	psect	text8
  1986  001074                     __ptext8:
  1987                           	opt callstack 0
  1988  001074                     _fputc:
  1989                           	opt callstack 25
  1990                           
  1991                           ;incstack = 0
  1992  001074  5006               	movf	fputc@fp,w,c
  1993  001076  1007               	iorwf	fputc@fp+1,w,c
  1994  001078  B4D8               	btfsc	status,2,c
  1995  00107A  D004               	goto	u1480
  1996  00107C  5006               	movf	fputc@fp,w,c
  1997  00107E  1007               	iorwf	fputc@fp+1,w,c
  1998  001080  A4D8               	btfss	status,2,c
  1999  001082  D004               	goto	l2030
  2000  001084                     u1480:
  2001  001084  5004               	movf	fputc@c,w,c
  2002  001086  EC6F  F00A         	call	_putch
  2003  00108A  0012               	return	
  2004  00108C                     l2030:
  2005  00108C  EE20 F004          	lfsr	2,4
  2006  001090  5006               	movf	fputc@fp,w,c
  2007  001092  26D9               	addwf	fsr2l,f,c
  2008  001094  5007               	movf	fputc@fp+1,w,c
  2009  001096  22DA               	addwfc	fsr2h,f,c
  2010  001098  50DE               	movf	postinc2,w,c
  2011  00109A  10DE               	iorwf	postinc2,w,c
  2012  00109C  B4D8               	btfsc	status,2,c
  2013  00109E  D016               	goto	u1500
  2014  0010A0  EE20 F004          	lfsr	2,4
  2015  0010A4  5006               	movf	fputc@fp,w,c
  2016  0010A6  26D9               	addwf	fsr2l,f,c
  2017  0010A8  5007               	movf	fputc@fp+1,w,c
  2018  0010AA  22DA               	addwfc	fsr2h,f,c
  2019  0010AC  EE10 F002          	lfsr	1,2
  2020  0010B0  5006               	movf	fputc@fp,w,c
  2021  0010B2  26E1               	addwf	fsr1l,f,c
  2022  0010B4  5007               	movf	fputc@fp+1,w,c
  2023  0010B6  22E2               	addwfc	fsr1h,f,c
  2024  0010B8  50DE               	movf	postinc2,w,c
  2025  0010BA  5CE6               	subwf	postinc1,w,c
  2026  0010BC  50E6               	movf	postinc1,w,c
  2027  0010BE  0A80               	xorlw	128
  2028  0010C0  6E0C               	movwf	(??_fputc+4)& (0+255),c
  2029  0010C2  50DE               	movf	postinc2,w,c
  2030  0010C4  0A80               	xorlw	128
  2031  0010C6  580C               	subwfb	(??_fputc+4)& (0+255),w,c
  2032  0010C8  B0D8               	btfsc	status,0,c
  2033  0010CA  0012               	return	
  2034  0010CC                     u1500:
  2035  0010CC  EE20 F002          	lfsr	2,2
  2036  0010D0  5006               	movf	fputc@fp,w,c
  2037  0010D2  26D9               	addwf	fsr2l,f,c
  2038  0010D4  5007               	movf	fputc@fp+1,w,c
  2039  0010D6  22DA               	addwfc	fsr2h,f,c
  2040  0010D8  CFDE F008          	movff	postinc2,??_fputc
  2041  0010DC  CFDD F009          	movff	postdec2,??_fputc+1
  2042  0010E0  C006  FFD9         	movff	fputc@fp,fsr2l
  2043  0010E4  C007  FFDA         	movff	fputc@fp+1,fsr2h
  2044  0010E8  CFDE F00A          	movff	postinc2,??_fputc+2
  2045  0010EC  CFDD F00B          	movff	postdec2,??_fputc+3
  2046  0010F0  5008               	movf	??_fputc,w,c
  2047  0010F2  240A               	addwf	??_fputc+2,w,c
  2048  0010F4  6ED9               	movwf	fsr2l,c
  2049  0010F6  5009               	movf	??_fputc+1,w,c
  2050  0010F8  200B               	addwfc	??_fputc+3,w,c
  2051  0010FA  6EDA               	movwf	fsr2h,c
  2052  0010FC  C004  FFDF         	movff	fputc@c,indf2
  2053  001100  EE20 F002          	lfsr	2,2
  2054  001104  5006               	movf	fputc@fp,w,c
  2055  001106  26D9               	addwf	fsr2l,f,c
  2056  001108  5007               	movf	fputc@fp+1,w,c
  2057  00110A  22DA               	addwfc	fsr2h,f,c
  2058  00110C  2ADE               	incf	postinc2,f,c
  2059  00110E  0E00               	movlw	0
  2060  001110  22DD               	addwfc	postdec2,f,c
  2061  001112  0012               	return		;funcret
  2062  001114                     __end_of_fputc:
  2063                           	opt callstack 0
  2064                           
  2065 ;; *************** function _putch *****************
  2066 ;; Defined at:
  2067 ;;		line 7 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\putch.c"
  2068 ;; Parameters:    Size  Location     Type
  2069 ;;  c               1    wreg     unsigned char 
  2070 ;; Auto vars:     Size  Location     Type
  2071 ;;  c               1    0[COMRAM] unsigned char 
  2072 ;; Return value:  Size  Location     Type
  2073 ;;                  1    wreg      void 
  2074 ;; Registers used:
  2075 ;;		wreg
  2076 ;; Tracked objects:
  2077 ;;		On entry : 0/0
  2078 ;;		On exit  : 0/0
  2079 ;;		Unchanged: 0/0
  2080 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2081 ;;      Params:         0       0       0       0       0       0       0
  2082 ;;      Locals:         0       0       0       0       0       0       0
  2083 ;;      Temps:          0       0       0       0       0       0       0
  2084 ;;      Totals:         0       0       0       0       0       0       0
  2085 ;;Total ram usage:        0 bytes
  2086 ;; Hardware stack levels used:    1
  2087 ;; Hardware stack levels required when called:    1
  2088 ;; This function calls:
  2089 ;;		Nothing
  2090 ;; This function is called by:
  2091 ;;		_fputc
  2092 ;; This function uses a non-reentrant model
  2093 ;;
  2094                           
  2095                           	psect	text9
  2096  0014DE                     __ptext9:
  2097                           	opt callstack 0
  2098  0014DE                     _putch:
  2099                           	opt callstack 25
  2100                           
  2101                           ;incstack = 0
  2102  0014DE  0012               	return		;funcret
  2103  0014E0                     __end_of_putch:
  2104                           	opt callstack 0
  2105                           
  2106 ;; *************** function _abs *****************
  2107 ;; Defined at:
  2108 ;;		line 1 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\abs.c"
  2109 ;; Parameters:    Size  Location     Type
  2110 ;;  a               2   21[COMRAM] int 
  2111 ;; Auto vars:     Size  Location     Type
  2112 ;;		None
  2113 ;; Return value:  Size  Location     Type
  2114 ;;                  2   21[COMRAM] int 
  2115 ;; Registers used:
  2116 ;;		wreg, status,2, status,0
  2117 ;; Tracked objects:
  2118 ;;		On entry : 0/0
  2119 ;;		On exit  : 0/0
  2120 ;;		Unchanged: 0/0
  2121 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2122 ;;      Params:         2       0       0       0       0       0       0
  2123 ;;      Locals:         0       0       0       0       0       0       0
  2124 ;;      Temps:          2       0       0       0       0       0       0
  2125 ;;      Totals:         4       0       0       0       0       0       0
  2126 ;;Total ram usage:        4 bytes
  2127 ;; Hardware stack levels used:    1
  2128 ;; Hardware stack levels required when called:    1
  2129 ;; This function calls:
  2130 ;;		Nothing
  2131 ;; This function is called by:
  2132 ;;		_dtoa
  2133 ;; This function uses a non-reentrant model
  2134 ;;
  2135                           
  2136                           	psect	text10
  2137  0013D4                     __ptext10:
  2138                           	opt callstack 0
  2139  0013D4                     _abs:
  2140                           	opt callstack 25
  2141                           
  2142                           ;incstack = 0
  2143  0013D4  BE17               	btfsc	abs@a+1,7,c
  2144  0013D6  D005               	goto	u1570
  2145  0013D8  5017               	movf	abs@a+1,w,c
  2146  0013DA  E110               	bnz	l870
  2147  0013DC  0416               	decf	abs@a,w,c
  2148  0013DE  B0D8               	btfsc	status,0,c
  2149  0013E0  D00D               	goto	l870
  2150  0013E2                     u1570:
  2151  0013E2  C016  F018         	movff	abs@a,??_abs
  2152  0013E6  C017  F019         	movff	abs@a+1,??_abs+1
  2153  0013EA  1E18               	comf	??_abs,f,c
  2154  0013EC  1E19               	comf	??_abs+1,f,c
  2155  0013EE  4A18               	infsnz	??_abs,f,c
  2156  0013F0  2A19               	incf	??_abs+1,f,c
  2157  0013F2  C018  F016         	movff	??_abs,?_abs
  2158  0013F6  C019  F017         	movff	??_abs+1,?_abs+1
  2159  0013FA  0012               	return	
  2160  0013FC                     l870:
  2161  0013FC  C016  F016         	movff	abs@a,?_abs
  2162  001400  C017  F017         	movff	abs@a+1,?_abs+1
  2163  001404  0012               	return		;funcret
  2164  001406                     __end_of_abs:
  2165                           	opt callstack 0
  2166                           
  2167 ;; *************** function ___aomod *****************
  2168 ;; Defined at:
  2169 ;;		line 9 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\aomod.c"
  2170 ;; Parameters:    Size  Location     Type
  2171 ;;  dividend        8    3[COMRAM] long long 
  2172 ;;  divisor         8   11[COMRAM] long long 
  2173 ;; Auto vars:     Size  Location     Type
  2174 ;;  sign            1   20[COMRAM] unsigned char 
  2175 ;;  counter         1   19[COMRAM] unsigned char 
  2176 ;; Return value:  Size  Location     Type
  2177 ;;                  8    3[COMRAM] long long 
  2178 ;; Registers used:
  2179 ;;		wreg, status,2, status,0
  2180 ;; Tracked objects:
  2181 ;;		On entry : 0/0
  2182 ;;		On exit  : 0/0
  2183 ;;		Unchanged: 0/0
  2184 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2185 ;;      Params:        16       0       0       0       0       0       0
  2186 ;;      Locals:         2       0       0       0       0       0       0
  2187 ;;      Temps:          0       0       0       0       0       0       0
  2188 ;;      Totals:        18       0       0       0       0       0       0
  2189 ;;Total ram usage:       18 bytes
  2190 ;; Hardware stack levels used:    1
  2191 ;; Hardware stack levels required when called:    1
  2192 ;; This function calls:
  2193 ;;		Nothing
  2194 ;; This function is called by:
  2195 ;;		_dtoa
  2196 ;; This function uses a non-reentrant model
  2197 ;;
  2198                           
  2199                           	psect	text11
  2200  000DC4                     __ptext11:
  2201                           	opt callstack 0
  2202  000DC4                     ___aomod:
  2203                           	opt callstack 25
  2204                           
  2205                           ;incstack = 0
  2206  000DC4  0E00               	movlw	0
  2207  000DC6  6E15               	movwf	___aomod@sign,c
  2208  000DC8  AE0B               	btfss	___aomod@dividend+7,7,c
  2209  000DCA  D012               	goto	l2144
  2210  000DCC  1E0B               	comf	___aomod@dividend+7,f,c
  2211  000DCE  1E0A               	comf	___aomod@dividend+6,f,c
  2212  000DD0  1E09               	comf	___aomod@dividend+5,f,c
  2213  000DD2  1E08               	comf	___aomod@dividend+4,f,c
  2214  000DD4  1E07               	comf	___aomod@dividend+3,f,c
  2215  000DD6  1E06               	comf	___aomod@dividend+2,f,c
  2216  000DD8  1E05               	comf	___aomod@dividend+1,f,c
  2217  000DDA  6C04               	negf	___aomod@dividend,c
  2218  000DDC  0E00               	movlw	0
  2219  000DDE  2205               	addwfc	___aomod@dividend+1,f,c
  2220  000DE0  2206               	addwfc	___aomod@dividend+2,f,c
  2221  000DE2  2207               	addwfc	___aomod@dividend+3,f,c
  2222  000DE4  2208               	addwfc	___aomod@dividend+4,f,c
  2223  000DE6  2209               	addwfc	___aomod@dividend+5,f,c
  2224  000DE8  220A               	addwfc	___aomod@dividend+6,f,c
  2225  000DEA  220B               	addwfc	___aomod@dividend+7,f,c
  2226  000DEC  0E01               	movlw	1
  2227  000DEE  6E15               	movwf	___aomod@sign,c
  2228  000DF0                     l2144:
  2229  000DF0  AE13               	btfss	___aomod@divisor+7,7,c
  2230  000DF2  D010               	goto	l2148
  2231  000DF4  1E13               	comf	___aomod@divisor+7,f,c
  2232  000DF6  1E12               	comf	___aomod@divisor+6,f,c
  2233  000DF8  1E11               	comf	___aomod@divisor+5,f,c
  2234  000DFA  1E10               	comf	___aomod@divisor+4,f,c
  2235  000DFC  1E0F               	comf	___aomod@divisor+3,f,c
  2236  000DFE  1E0E               	comf	___aomod@divisor+2,f,c
  2237  000E00  1E0D               	comf	___aomod@divisor+1,f,c
  2238  000E02  6C0C               	negf	___aomod@divisor,c
  2239  000E04  0E00               	movlw	0
  2240  000E06  220D               	addwfc	___aomod@divisor+1,f,c
  2241  000E08  220E               	addwfc	___aomod@divisor+2,f,c
  2242  000E0A  220F               	addwfc	___aomod@divisor+3,f,c
  2243  000E0C  2210               	addwfc	___aomod@divisor+4,f,c
  2244  000E0E  2211               	addwfc	___aomod@divisor+5,f,c
  2245  000E10  2212               	addwfc	___aomod@divisor+6,f,c
  2246  000E12  2213               	addwfc	___aomod@divisor+7,f,c
  2247  000E14                     l2148:
  2248  000E14  500C               	movf	___aomod@divisor,w,c
  2249  000E16  100D               	iorwf	___aomod@divisor+1,w,c
  2250  000E18  100E               	iorwf	___aomod@divisor+2,w,c
  2251  000E1A  100F               	iorwf	___aomod@divisor+3,w,c
  2252  000E1C  1010               	iorwf	___aomod@divisor+4,w,c
  2253  000E1E  1011               	iorwf	___aomod@divisor+5,w,c
  2254  000E20  1012               	iorwf	___aomod@divisor+6,w,c
  2255  000E22  1013               	iorwf	___aomod@divisor+7,w,c
  2256  000E24  B4D8               	btfsc	status,2,c
  2257  000E26  D03C               	goto	l2164
  2258  000E28  0E01               	movlw	1
  2259  000E2A  6E14               	movwf	___aomod@counter,c
  2260  000E2C  D00A               	goto	l2154
  2261  000E2E                     l2152:
  2262  000E2E  90D8               	bcf	status,0,c
  2263  000E30  360C               	rlcf	___aomod@divisor,f,c
  2264  000E32  360D               	rlcf	___aomod@divisor+1,f,c
  2265  000E34  360E               	rlcf	___aomod@divisor+2,f,c
  2266  000E36  360F               	rlcf	___aomod@divisor+3,f,c
  2267  000E38  3610               	rlcf	___aomod@divisor+4,f,c
  2268  000E3A  3611               	rlcf	___aomod@divisor+5,f,c
  2269  000E3C  3612               	rlcf	___aomod@divisor+6,f,c
  2270  000E3E  3613               	rlcf	___aomod@divisor+7,f,c
  2271  000E40  2A14               	incf	___aomod@counter,f,c
  2272  000E42                     l2154:
  2273  000E42  AE13               	btfss	___aomod@divisor+7,7,c
  2274  000E44  D7F4               	goto	l2152
  2275  000E46                     u1700:
  2276  000E46  500C               	movf	___aomod@divisor,w,c
  2277  000E48  5C04               	subwf	___aomod@dividend,w,c
  2278  000E4A  500D               	movf	___aomod@divisor+1,w,c
  2279  000E4C  5805               	subwfb	___aomod@dividend+1,w,c
  2280  000E4E  500E               	movf	___aomod@divisor+2,w,c
  2281  000E50  5806               	subwfb	___aomod@dividend+2,w,c
  2282  000E52  500F               	movf	___aomod@divisor+3,w,c
  2283  000E54  5807               	subwfb	___aomod@dividend+3,w,c
  2284  000E56  5010               	movf	___aomod@divisor+4,w,c
  2285  000E58  5808               	subwfb	___aomod@dividend+4,w,c
  2286  000E5A  5011               	movf	___aomod@divisor+5,w,c
  2287  000E5C  5809               	subwfb	___aomod@dividend+5,w,c
  2288  000E5E  5012               	movf	___aomod@divisor+6,w,c
  2289  000E60  580A               	subwfb	___aomod@dividend+6,w,c
  2290  000E62  5013               	movf	___aomod@divisor+7,w,c
  2291  000E64  580B               	subwfb	___aomod@dividend+7,w,c
  2292  000E66  A0D8               	btfss	status,0,c
  2293  000E68  D010               	goto	l2160
  2294  000E6A  500C               	movf	___aomod@divisor,w,c
  2295  000E6C  5E04               	subwf	___aomod@dividend,f,c
  2296  000E6E  500D               	movf	___aomod@divisor+1,w,c
  2297  000E70  5A05               	subwfb	___aomod@dividend+1,f,c
  2298  000E72  500E               	movf	___aomod@divisor+2,w,c
  2299  000E74  5A06               	subwfb	___aomod@dividend+2,f,c
  2300  000E76  500F               	movf	___aomod@divisor+3,w,c
  2301  000E78  5A07               	subwfb	___aomod@dividend+3,f,c
  2302  000E7A  5010               	movf	___aomod@divisor+4,w,c
  2303  000E7C  5A08               	subwfb	___aomod@dividend+4,f,c
  2304  000E7E  5011               	movf	___aomod@divisor+5,w,c
  2305  000E80  5A09               	subwfb	___aomod@dividend+5,f,c
  2306  000E82  5012               	movf	___aomod@divisor+6,w,c
  2307  000E84  5A0A               	subwfb	___aomod@dividend+6,f,c
  2308  000E86  5013               	movf	___aomod@divisor+7,w,c
  2309  000E88  5A0B               	subwfb	___aomod@dividend+7,f,c
  2310  000E8A                     l2160:
  2311  000E8A  90D8               	bcf	status,0,c
  2312  000E8C  3213               	rrcf	___aomod@divisor+7,f,c
  2313  000E8E  3212               	rrcf	___aomod@divisor+6,f,c
  2314  000E90  3211               	rrcf	___aomod@divisor+5,f,c
  2315  000E92  3210               	rrcf	___aomod@divisor+4,f,c
  2316  000E94  320F               	rrcf	___aomod@divisor+3,f,c
  2317  000E96  320E               	rrcf	___aomod@divisor+2,f,c
  2318  000E98  320D               	rrcf	___aomod@divisor+1,f,c
  2319  000E9A  320C               	rrcf	___aomod@divisor,f,c
  2320  000E9C  2E14               	decfsz	___aomod@counter,f,c
  2321  000E9E  D7D3               	goto	u1700
  2322  000EA0                     l2164:
  2323  000EA0  5015               	movf	___aomod@sign,w,c
  2324  000EA2  B4D8               	btfsc	status,2,c
  2325  000EA4  D010               	goto	l2168
  2326  000EA6  1E0B               	comf	___aomod@dividend+7,f,c
  2327  000EA8  1E0A               	comf	___aomod@dividend+6,f,c
  2328  000EAA  1E09               	comf	___aomod@dividend+5,f,c
  2329  000EAC  1E08               	comf	___aomod@dividend+4,f,c
  2330  000EAE  1E07               	comf	___aomod@dividend+3,f,c
  2331  000EB0  1E06               	comf	___aomod@dividend+2,f,c
  2332  000EB2  1E05               	comf	___aomod@dividend+1,f,c
  2333  000EB4  6C04               	negf	___aomod@dividend,c
  2334  000EB6  0E00               	movlw	0
  2335  000EB8  2205               	addwfc	___aomod@dividend+1,f,c
  2336  000EBA  2206               	addwfc	___aomod@dividend+2,f,c
  2337  000EBC  2207               	addwfc	___aomod@dividend+3,f,c
  2338  000EBE  2208               	addwfc	___aomod@dividend+4,f,c
  2339  000EC0  2209               	addwfc	___aomod@dividend+5,f,c
  2340  000EC2  220A               	addwfc	___aomod@dividend+6,f,c
  2341  000EC4  220B               	addwfc	___aomod@dividend+7,f,c
  2342  000EC6                     l2168:
  2343  000EC6  C004  F004         	movff	___aomod@dividend,?___aomod
  2344  000ECA  C005  F005         	movff	___aomod@dividend+1,?___aomod+1
  2345  000ECE  C006  F006         	movff	___aomod@dividend+2,?___aomod+2
  2346  000ED2  C007  F007         	movff	___aomod@dividend+3,?___aomod+3
  2347  000ED6  C008  F008         	movff	___aomod@dividend+4,?___aomod+4
  2348  000EDA  C009  F009         	movff	___aomod@dividend+5,?___aomod+5
  2349  000EDE  C00A  F00A         	movff	___aomod@dividend+6,?___aomod+6
  2350  000EE2  C00B  F00B         	movff	___aomod@dividend+7,?___aomod+7
  2351  000EE6  0012               	return		;funcret
  2352  000EE8                     __end_of___aomod:
  2353                           	opt callstack 0
  2354                           
  2355 ;; *************** function ___aodiv *****************
  2356 ;; Defined at:
  2357 ;;		line 9 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\aodiv.c"
  2358 ;; Parameters:    Size  Location     Type
  2359 ;;  dividend        8    3[COMRAM] long long 
  2360 ;;  divisor         8   11[COMRAM] long long 
  2361 ;; Auto vars:     Size  Location     Type
  2362 ;;  quotient        8   21[COMRAM] long long 
  2363 ;;  sign            1   20[COMRAM] unsigned char 
  2364 ;;  counter         1   19[COMRAM] unsigned char 
  2365 ;; Return value:  Size  Location     Type
  2366 ;;                  8    3[COMRAM] long long 
  2367 ;; Registers used:
  2368 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  2369 ;; Tracked objects:
  2370 ;;		On entry : 0/0
  2371 ;;		On exit  : 0/0
  2372 ;;		Unchanged: 0/0
  2373 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2374 ;;      Params:        16       0       0       0       0       0       0
  2375 ;;      Locals:        10       0       0       0       0       0       0
  2376 ;;      Temps:          0       0       0       0       0       0       0
  2377 ;;      Totals:        26       0       0       0       0       0       0
  2378 ;;Total ram usage:       26 bytes
  2379 ;; Hardware stack levels used:    1
  2380 ;; Hardware stack levels required when called:    1
  2381 ;; This function calls:
  2382 ;;		Nothing
  2383 ;; This function is called by:
  2384 ;;		_dtoa
  2385 ;; This function uses a non-reentrant model
  2386 ;;
  2387                           
  2388                           	psect	text12
  2389  000B3C                     __ptext12:
  2390                           	opt callstack 0
  2391  000B3C                     ___aodiv:
  2392                           	opt callstack 25
  2393                           
  2394                           ;incstack = 0
  2395  000B3C  0E00               	movlw	0
  2396  000B3E  6E15               	movwf	___aodiv@sign,c
  2397  000B40  AE13               	btfss	___aodiv@divisor+7,7,c
  2398  000B42  D012               	goto	l2100
  2399  000B44  1E13               	comf	___aodiv@divisor+7,f,c
  2400  000B46  1E12               	comf	___aodiv@divisor+6,f,c
  2401  000B48  1E11               	comf	___aodiv@divisor+5,f,c
  2402  000B4A  1E10               	comf	___aodiv@divisor+4,f,c
  2403  000B4C  1E0F               	comf	___aodiv@divisor+3,f,c
  2404  000B4E  1E0E               	comf	___aodiv@divisor+2,f,c
  2405  000B50  1E0D               	comf	___aodiv@divisor+1,f,c
  2406  000B52  6C0C               	negf	___aodiv@divisor,c
  2407  000B54  0E00               	movlw	0
  2408  000B56  220D               	addwfc	___aodiv@divisor+1,f,c
  2409  000B58  220E               	addwfc	___aodiv@divisor+2,f,c
  2410  000B5A  220F               	addwfc	___aodiv@divisor+3,f,c
  2411  000B5C  2210               	addwfc	___aodiv@divisor+4,f,c
  2412  000B5E  2211               	addwfc	___aodiv@divisor+5,f,c
  2413  000B60  2212               	addwfc	___aodiv@divisor+6,f,c
  2414  000B62  2213               	addwfc	___aodiv@divisor+7,f,c
  2415  000B64  0E01               	movlw	1
  2416  000B66  6E15               	movwf	___aodiv@sign,c
  2417  000B68                     l2100:
  2418  000B68  AE0B               	btfss	___aodiv@dividend+7,7,c
  2419  000B6A  D012               	goto	l2106
  2420  000B6C  1E0B               	comf	___aodiv@dividend+7,f,c
  2421  000B6E  1E0A               	comf	___aodiv@dividend+6,f,c
  2422  000B70  1E09               	comf	___aodiv@dividend+5,f,c
  2423  000B72  1E08               	comf	___aodiv@dividend+4,f,c
  2424  000B74  1E07               	comf	___aodiv@dividend+3,f,c
  2425  000B76  1E06               	comf	___aodiv@dividend+2,f,c
  2426  000B78  1E05               	comf	___aodiv@dividend+1,f,c
  2427  000B7A  6C04               	negf	___aodiv@dividend,c
  2428  000B7C  0E00               	movlw	0
  2429  000B7E  2205               	addwfc	___aodiv@dividend+1,f,c
  2430  000B80  2206               	addwfc	___aodiv@dividend+2,f,c
  2431  000B82  2207               	addwfc	___aodiv@dividend+3,f,c
  2432  000B84  2208               	addwfc	___aodiv@dividend+4,f,c
  2433  000B86  2209               	addwfc	___aodiv@dividend+5,f,c
  2434  000B88  220A               	addwfc	___aodiv@dividend+6,f,c
  2435  000B8A  220B               	addwfc	___aodiv@dividend+7,f,c
  2436  000B8C  0E01               	movlw	1
  2437  000B8E  1A15               	xorwf	___aodiv@sign,f,c
  2438  000B90                     l2106:
  2439  000B90  EE20  F016         	lfsr	2,___aodiv@quotient
  2440  000B94  0E07               	movlw	7
  2441  000B96                     u1621:
  2442  000B96  6ADE               	clrf	postinc2,c
  2443  000B98  06E8               	decf	wreg,f,c
  2444  000B9A  E2FD               	bc	u1621
  2445  000B9C  500C               	movf	___aodiv@divisor,w,c
  2446  000B9E  100D               	iorwf	___aodiv@divisor+1,w,c
  2447  000BA0  100E               	iorwf	___aodiv@divisor+2,w,c
  2448  000BA2  100F               	iorwf	___aodiv@divisor+3,w,c
  2449  000BA4  1010               	iorwf	___aodiv@divisor+4,w,c
  2450  000BA6  1011               	iorwf	___aodiv@divisor+5,w,c
  2451  000BA8  1012               	iorwf	___aodiv@divisor+6,w,c
  2452  000BAA  1013               	iorwf	___aodiv@divisor+7,w,c
  2453  000BAC  B4D8               	btfsc	status,2,c
  2454  000BAE  D046               	goto	l2128
  2455  000BB0  0E01               	movlw	1
  2456  000BB2  6E14               	movwf	___aodiv@counter,c
  2457  000BB4  D00A               	goto	l2114
  2458  000BB6                     l2112:
  2459  000BB6  90D8               	bcf	status,0,c
  2460  000BB8  360C               	rlcf	___aodiv@divisor,f,c
  2461  000BBA  360D               	rlcf	___aodiv@divisor+1,f,c
  2462  000BBC  360E               	rlcf	___aodiv@divisor+2,f,c
  2463  000BBE  360F               	rlcf	___aodiv@divisor+3,f,c
  2464  000BC0  3610               	rlcf	___aodiv@divisor+4,f,c
  2465  000BC2  3611               	rlcf	___aodiv@divisor+5,f,c
  2466  000BC4  3612               	rlcf	___aodiv@divisor+6,f,c
  2467  000BC6  3613               	rlcf	___aodiv@divisor+7,f,c
  2468  000BC8  2A14               	incf	___aodiv@counter,f,c
  2469  000BCA                     l2114:
  2470  000BCA  AE13               	btfss	___aodiv@divisor+7,7,c
  2471  000BCC  D7F4               	goto	l2112
  2472  000BCE                     u1640:
  2473  000BCE  90D8               	bcf	status,0,c
  2474  000BD0  3616               	rlcf	___aodiv@quotient,f,c
  2475  000BD2  3617               	rlcf	___aodiv@quotient+1,f,c
  2476  000BD4  3618               	rlcf	___aodiv@quotient+2,f,c
  2477  000BD6  3619               	rlcf	___aodiv@quotient+3,f,c
  2478  000BD8  361A               	rlcf	___aodiv@quotient+4,f,c
  2479  000BDA  361B               	rlcf	___aodiv@quotient+5,f,c
  2480  000BDC  361C               	rlcf	___aodiv@quotient+6,f,c
  2481  000BDE  361D               	rlcf	___aodiv@quotient+7,f,c
  2482  000BE0  500C               	movf	___aodiv@divisor,w,c
  2483  000BE2  5C04               	subwf	___aodiv@dividend,w,c
  2484  000BE4  500D               	movf	___aodiv@divisor+1,w,c
  2485  000BE6  5805               	subwfb	___aodiv@dividend+1,w,c
  2486  000BE8  500E               	movf	___aodiv@divisor+2,w,c
  2487  000BEA  5806               	subwfb	___aodiv@dividend+2,w,c
  2488  000BEC  500F               	movf	___aodiv@divisor+3,w,c
  2489  000BEE  5807               	subwfb	___aodiv@dividend+3,w,c
  2490  000BF0  5010               	movf	___aodiv@divisor+4,w,c
  2491  000BF2  5808               	subwfb	___aodiv@dividend+4,w,c
  2492  000BF4  5011               	movf	___aodiv@divisor+5,w,c
  2493  000BF6  5809               	subwfb	___aodiv@dividend+5,w,c
  2494  000BF8  5012               	movf	___aodiv@divisor+6,w,c
  2495  000BFA  580A               	subwfb	___aodiv@dividend+6,w,c
  2496  000BFC  5013               	movf	___aodiv@divisor+7,w,c
  2497  000BFE  580B               	subwfb	___aodiv@dividend+7,w,c
  2498  000C00  A0D8               	btfss	status,0,c
  2499  000C02  D011               	goto	l2124
  2500  000C04  500C               	movf	___aodiv@divisor,w,c
  2501  000C06  5E04               	subwf	___aodiv@dividend,f,c
  2502  000C08  500D               	movf	___aodiv@divisor+1,w,c
  2503  000C0A  5A05               	subwfb	___aodiv@dividend+1,f,c
  2504  000C0C  500E               	movf	___aodiv@divisor+2,w,c
  2505  000C0E  5A06               	subwfb	___aodiv@dividend+2,f,c
  2506  000C10  500F               	movf	___aodiv@divisor+3,w,c
  2507  000C12  5A07               	subwfb	___aodiv@dividend+3,f,c
  2508  000C14  5010               	movf	___aodiv@divisor+4,w,c
  2509  000C16  5A08               	subwfb	___aodiv@dividend+4,f,c
  2510  000C18  5011               	movf	___aodiv@divisor+5,w,c
  2511  000C1A  5A09               	subwfb	___aodiv@dividend+5,f,c
  2512  000C1C  5012               	movf	___aodiv@divisor+6,w,c
  2513  000C1E  5A0A               	subwfb	___aodiv@dividend+6,f,c
  2514  000C20  5013               	movf	___aodiv@divisor+7,w,c
  2515  000C22  5A0B               	subwfb	___aodiv@dividend+7,f,c
  2516  000C24  8016               	bsf	___aodiv@quotient,0,c
  2517  000C26                     l2124:
  2518  000C26  90D8               	bcf	status,0,c
  2519  000C28  3213               	rrcf	___aodiv@divisor+7,f,c
  2520  000C2A  3212               	rrcf	___aodiv@divisor+6,f,c
  2521  000C2C  3211               	rrcf	___aodiv@divisor+5,f,c
  2522  000C2E  3210               	rrcf	___aodiv@divisor+4,f,c
  2523  000C30  320F               	rrcf	___aodiv@divisor+3,f,c
  2524  000C32  320E               	rrcf	___aodiv@divisor+2,f,c
  2525  000C34  320D               	rrcf	___aodiv@divisor+1,f,c
  2526  000C36  320C               	rrcf	___aodiv@divisor,f,c
  2527  000C38  2E14               	decfsz	___aodiv@counter,f,c
  2528  000C3A  D7C9               	goto	u1640
  2529  000C3C                     l2128:
  2530  000C3C  5015               	movf	___aodiv@sign,w,c
  2531  000C3E  B4D8               	btfsc	status,2,c
  2532  000C40  D010               	goto	l2132
  2533  000C42  1E1D               	comf	___aodiv@quotient+7,f,c
  2534  000C44  1E1C               	comf	___aodiv@quotient+6,f,c
  2535  000C46  1E1B               	comf	___aodiv@quotient+5,f,c
  2536  000C48  1E1A               	comf	___aodiv@quotient+4,f,c
  2537  000C4A  1E19               	comf	___aodiv@quotient+3,f,c
  2538  000C4C  1E18               	comf	___aodiv@quotient+2,f,c
  2539  000C4E  1E17               	comf	___aodiv@quotient+1,f,c
  2540  000C50  6C16               	negf	___aodiv@quotient,c
  2541  000C52  0E00               	movlw	0
  2542  000C54  2217               	addwfc	___aodiv@quotient+1,f,c
  2543  000C56  2218               	addwfc	___aodiv@quotient+2,f,c
  2544  000C58  2219               	addwfc	___aodiv@quotient+3,f,c
  2545  000C5A  221A               	addwfc	___aodiv@quotient+4,f,c
  2546  000C5C  221B               	addwfc	___aodiv@quotient+5,f,c
  2547  000C5E  221C               	addwfc	___aodiv@quotient+6,f,c
  2548  000C60  221D               	addwfc	___aodiv@quotient+7,f,c
  2549  000C62                     l2132:
  2550  000C62  C016  F004         	movff	___aodiv@quotient,?___aodiv
  2551  000C66  C017  F005         	movff	___aodiv@quotient+1,?___aodiv+1
  2552  000C6A  C018  F006         	movff	___aodiv@quotient+2,?___aodiv+2
  2553  000C6E  C019  F007         	movff	___aodiv@quotient+3,?___aodiv+3
  2554  000C72  C01A  F008         	movff	___aodiv@quotient+4,?___aodiv+4
  2555  000C76  C01B  F009         	movff	___aodiv@quotient+5,?___aodiv+5
  2556  000C7A  C01C  F00A         	movff	___aodiv@quotient+6,?___aodiv+6
  2557  000C7E  C01D  F00B         	movff	___aodiv@quotient+7,?___aodiv+7
  2558  000C82  0012               	return		;funcret
  2559  000C84                     __end_of___aodiv:
  2560                           	opt callstack 0
  2561                           
  2562 ;; *************** function _atoi *****************
  2563 ;; Defined at:
  2564 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\atoi.c"
  2565 ;; Parameters:    Size  Location     Type
  2566 ;;  s               2   10[COMRAM] PTR const unsigned char 
  2567 ;;		 -> STR_4(5), STR_3(5), 
  2568 ;; Auto vars:     Size  Location     Type
  2569 ;;  n               2   23[COMRAM] int 
  2570 ;;  neg             2   16[COMRAM] int 
  2571 ;; Return value:  Size  Location     Type
  2572 ;;                  2   10[COMRAM] int 
  2573 ;; Registers used:
  2574 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2575 ;; Tracked objects:
  2576 ;;		On entry : 0/0
  2577 ;;		On exit  : 0/0
  2578 ;;		Unchanged: 0/0
  2579 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2580 ;;      Params:         2       0       0       0       0       0       0
  2581 ;;      Locals:         9       0       0       0       0       0       0
  2582 ;;      Temps:          4       0       0       0       0       0       0
  2583 ;;      Totals:        15       0       0       0       0       0       0
  2584 ;;Total ram usage:       15 bytes
  2585 ;; Hardware stack levels used:    1
  2586 ;; Hardware stack levels required when called:    2
  2587 ;; This function calls:
  2588 ;;		___wmul
  2589 ;;		_isdigit
  2590 ;;		_isspace
  2591 ;; This function is called by:
  2592 ;;		_vfpfcnvrt
  2593 ;; This function uses a non-reentrant model
  2594 ;;
  2595                           
  2596                           	psect	text13
  2597  000C84                     __ptext13:
  2598                           	opt callstack 0
  2599  000C84                     _atoi:
  2600                           	opt callstack 25
  2601                           
  2602                           ;incstack = 0
  2603  000C84  0E00               	movlw	0
  2604  000C86  6E19               	movwf	atoi@n+1,c
  2605  000C88  0E00               	movlw	0
  2606  000C8A  6E18               	movwf	atoi@n,c
  2607  000C8C  0E00               	movlw	0
  2608  000C8E  6E12               	movwf	atoi@neg+1,c
  2609  000C90  0E00               	movlw	0
  2610  000C92  6E11               	movwf	atoi@neg,c
  2611  000C94  D002               	goto	l2250
  2612  000C96                     l2248:
  2613  000C96  4A0B               	infsnz	atoi@s,f,c
  2614  000C98  2A0C               	incf	atoi@s+1,f,c
  2615  000C9A                     l2250:
  2616  000C9A  0E01               	movlw	1
  2617  000C9C  6E17               	movwf	_atoi$741,c
  2618  000C9E  C00B  FFF6         	movff	atoi@s,tblptrl
  2619  000CA2  C00C  FFF7         	movff	atoi@s+1,tblptrh
  2620  000CA6                     	if	0	;tblptru may be non-zero
  2621  000CA6                     	endif
  2622  000CA6                     	if	0	;tblptru may be non-zero
  2623  000CA6                     	endif
  2624  000CA6  0008               	tblrd		*
  2625  000CA8  50F5               	movf	tablat,w,c
  2626  000CAA  0A20               	xorlw	32
  2627  000CAC  B4D8               	btfsc	status,2,c
  2628  000CAE  D018               	goto	l2258
  2629  000CB0  0EF7               	movlw	247
  2630  000CB2  6E0D               	movwf	??_atoi& (0+255),c
  2631  000CB4  0EFF               	movlw	255
  2632  000CB6  6E0E               	movwf	(??_atoi+1)& (0+255),c
  2633  000CB8  C00B  FFF6         	movff	atoi@s,tblptrl
  2634  000CBC  C00C  FFF7         	movff	atoi@s+1,tblptrh
  2635  000CC0                     	if	0	;tblptru may be non-zero
  2636  000CC0                     	endif
  2637  000CC0                     	if	0	;tblptru may be non-zero
  2638  000CC0                     	endif
  2639  000CC0  0008               	tblrd		*
  2640  000CC2  50F5               	movf	tablat,w,c
  2641  000CC4  6E0F               	movwf	(??_atoi+2)& (0+255),c
  2642  000CC6  6A10               	clrf	(??_atoi+3)& (0+255),c
  2643  000CC8  500D               	movf	??_atoi,w,c
  2644  000CCA  260F               	addwf	??_atoi+2,f,c
  2645  000CCC  500E               	movf	??_atoi+1,w,c
  2646  000CCE  2210               	addwfc	??_atoi+3,f,c
  2647  000CD0  5010               	movf	??_atoi+3,w,c
  2648  000CD2  E104               	bnz	u1910
  2649  000CD4  0E05               	movlw	5
  2650  000CD6  5C0F               	subwf	??_atoi+2,w,c
  2651  000CD8  A0D8               	btfss	status,0,c
  2652  000CDA  D002               	goto	l2258
  2653  000CDC                     u1910:
  2654  000CDC  0E00               	movlw	0
  2655  000CDE  6E17               	movwf	_atoi$741,c
  2656  000CE0                     l2258:
  2657  000CE0  C017  F013         	movff	_atoi$741,_atoi$740
  2658  000CE4  6A14               	clrf	_atoi$740+1,c
  2659  000CE6  5013               	movf	_atoi$740,w,c
  2660  000CE8  1014               	iorwf	_atoi$740+1,w,c
  2661  000CEA  B4D8               	btfsc	status,2,c
  2662  000CEC  D008               	goto	l2268
  2663  000CEE  D7D3               	goto	l2248
  2664  000CF0                     l2264:
  2665  000CF0  0E00               	movlw	0
  2666  000CF2  6E12               	movwf	atoi@neg+1,c
  2667  000CF4  0E01               	movlw	1
  2668  000CF6  6E11               	movwf	atoi@neg,c
  2669  000CF8                     l2266:
  2670  000CF8  4A0B               	infsnz	atoi@s,f,c
  2671  000CFA  2A0C               	incf	atoi@s+1,f,c
  2672  000CFC  D02E               	goto	l2274
  2673  000CFE                     l2268:
  2674  000CFE  C00B  FFF6         	movff	atoi@s,tblptrl
  2675  000D02  C00C  FFF7         	movff	atoi@s+1,tblptrh
  2676  000D06                     	if	0	;tblptru may be non-zero
  2677  000D06                     	endif
  2678  000D06                     	if	0	;tblptru may be non-zero
  2679  000D06                     	endif
  2680  000D06  0008               	tblrd		*
  2681  000D08  50F5               	movf	tablat,w,c
  2682  000D0A  6E0D               	movwf	??_atoi& (0+255),c
  2683  000D0C  6A0E               	clrf	(??_atoi+1)& (0+255),c
  2684                           
  2685                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2686                           ; Switch size 1, requested type "simple"
  2687                           ; Number of cases is 1, Range of values is 0 to 0
  2688                           ; switch strategies available:
  2689                           ; Name         Instructions Cycles
  2690                           ; simple_byte            4     3 (average)
  2691                           ;	Chosen strategy is simple_byte
  2692  000D0E  500E               	movf	??_atoi+1,w,c
  2693  000D10  0A00               	xorlw	0	; case 0
  2694  000D12  A4D8               	btfss	status,2,c
  2695  000D14  D022               	goto	l2274
  2696                           
  2697                           ; Switch size 1, requested type "simple"
  2698                           ; Number of cases is 2, Range of values is 43 to 45
  2699                           ; switch strategies available:
  2700                           ; Name         Instructions Cycles
  2701                           ; simple_byte            7     4 (average)
  2702                           ;	Chosen strategy is simple_byte
  2703  000D16  500D               	movf	??_atoi,w,c
  2704  000D18  0A2B               	xorlw	43	; case 43
  2705  000D1A  B4D8               	btfsc	status,2,c
  2706  000D1C  D7ED               	goto	l2266
  2707  000D1E  0A06               	xorlw	6	; case 45
  2708  000D20  B4D8               	btfsc	status,2,c
  2709  000D22  D7E6               	goto	l2264
  2710  000D24  D01A               	goto	l2274
  2711  000D26                     l2270:
  2712  000D26  C018  F004         	movff	atoi@n,___wmul@multiplier
  2713  000D2A  C019  F005         	movff	atoi@n+1,___wmul@multiplier+1
  2714  000D2E  0E00               	movlw	0
  2715  000D30  6E07               	movwf	___wmul@multiplicand+1,c
  2716  000D32  0E0A               	movlw	10
  2717  000D34  6E06               	movwf	___wmul@multiplicand,c
  2718  000D36  EC43  F00A         	call	___wmul	;wreg free
  2719  000D3A  C00B  FFF6         	movff	atoi@s,tblptrl
  2720  000D3E  C00C  FFF7         	movff	atoi@s+1,tblptrh
  2721  000D42                     	if	0	;tblptru may be non-zero
  2722  000D42                     	endif
  2723  000D42                     	if	0	;tblptru may be non-zero
  2724  000D42                     	endif
  2725  000D42  0008               	tblrd		*
  2726  000D44  50F5               	movf	tablat,w,c
  2727  000D46  5E04               	subwf	?___wmul,f,c
  2728  000D48  0E00               	movlw	0
  2729  000D4A  5A05               	subwfb	?___wmul+1,f,c
  2730  000D4C  0E30               	movlw	48
  2731  000D4E  2404               	addwf	?___wmul,w,c
  2732  000D50  6E18               	movwf	atoi@n,c
  2733  000D52  0E00               	movlw	0
  2734  000D54  2005               	addwfc	?___wmul+1,w,c
  2735  000D56  6E19               	movwf	atoi@n+1,c
  2736  000D58  D7CF               	goto	l2266
  2737  000D5A                     l2274:
  2738  000D5A  0ED0               	movlw	208
  2739  000D5C  6E0D               	movwf	??_atoi& (0+255),c
  2740  000D5E  0EFF               	movlw	255
  2741  000D60  6E0E               	movwf	(??_atoi+1)& (0+255),c
  2742  000D62  C00B  FFF6         	movff	atoi@s,tblptrl
  2743  000D66  C00C  FFF7         	movff	atoi@s+1,tblptrh
  2744  000D6A                     	if	0	;tblptru may be non-zero
  2745  000D6A                     	endif
  2746  000D6A                     	if	0	;tblptru may be non-zero
  2747  000D6A                     	endif
  2748  000D6A  0008               	tblrd		*
  2749  000D6C  50F5               	movf	tablat,w,c
  2750  000D6E  6E0F               	movwf	(??_atoi+2)& (0+255),c
  2751  000D70  6A10               	clrf	(??_atoi+3)& (0+255),c
  2752  000D72  500D               	movf	??_atoi,w,c
  2753  000D74  260F               	addwf	??_atoi+2,f,c
  2754  000D76  500E               	movf	??_atoi+1,w,c
  2755  000D78  2210               	addwfc	??_atoi+3,f,c
  2756  000D7A  5010               	movf	??_atoi+3,w,c
  2757  000D7C  E106               	bnz	u1930
  2758  000D7E  0E0A               	movlw	10
  2759  000D80  5C0F               	subwf	??_atoi+2,w,c
  2760  000D82  B0D8               	btfsc	status,0,c
  2761  000D84  D002               	goto	u1930
  2762  000D86  0E01               	movlw	1
  2763  000D88  D001               	goto	u1940
  2764  000D8A                     u1930:
  2765  000D8A  0E00               	movlw	0
  2766  000D8C                     u1940:
  2767  000D8C  6E15               	movwf	_atoi$742,c
  2768  000D8E  6A16               	clrf	_atoi$742+1,c
  2769  000D90  5015               	movf	_atoi$742,w,c
  2770  000D92  1016               	iorwf	_atoi$742+1,w,c
  2771  000D94  A4D8               	btfss	status,2,c
  2772  000D96  D7C7               	goto	l2270
  2773  000D98  5011               	movf	atoi@neg,w,c
  2774  000D9A  1012               	iorwf	atoi@neg+1,w,c
  2775  000D9C  A4D8               	btfss	status,2,c
  2776  000D9E  D00D               	goto	l901
  2777  000DA0  C018  F00D         	movff	atoi@n,??_atoi
  2778  000DA4  C019  F00E         	movff	atoi@n+1,??_atoi+1
  2779  000DA8  1E0D               	comf	??_atoi,f,c
  2780  000DAA  1E0E               	comf	??_atoi+1,f,c
  2781  000DAC  4A0D               	infsnz	??_atoi,f,c
  2782  000DAE  2A0E               	incf	??_atoi+1,f,c
  2783  000DB0  C00D  F00B         	movff	??_atoi,?_atoi
  2784  000DB4  C00E  F00C         	movff	??_atoi+1,?_atoi+1
  2785  000DB8  0012               	return	
  2786  000DBA                     l901:
  2787  000DBA  C018  F00B         	movff	atoi@n,?_atoi
  2788  000DBE  C019  F00C         	movff	atoi@n+1,?_atoi+1
  2789  000DC2  0012               	return		;funcret
  2790  000DC4                     __end_of_atoi:
  2791                           	opt callstack 0
  2792                           
  2793 ;; *************** function _isspace *****************
  2794 ;; Defined at:
  2795 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\isspace.c"
  2796 ;; Parameters:    Size  Location     Type
  2797 ;;  c               2    3[COMRAM] int 
  2798 ;; Auto vars:     Size  Location     Type
  2799 ;;		None
  2800 ;; Return value:  Size  Location     Type
  2801 ;;                  2    3[COMRAM] int 
  2802 ;; Registers used:
  2803 ;;		wreg, status,2, status,0
  2804 ;; Tracked objects:
  2805 ;;		On entry : 0/0
  2806 ;;		On exit  : 0/0
  2807 ;;		Unchanged: 0/0
  2808 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2809 ;;      Params:         2       0       0       0       0       0       0
  2810 ;;      Locals:         1       0       0       0       0       0       0
  2811 ;;      Temps:          4       0       0       0       0       0       0
  2812 ;;      Totals:         7       0       0       0       0       0       0
  2813 ;;Total ram usage:        7 bytes
  2814 ;; Hardware stack levels used:    1
  2815 ;; Hardware stack levels required when called:    1
  2816 ;; This function calls:
  2817 ;;		Nothing
  2818 ;; This function is called by:
  2819 ;;		_atoi
  2820 ;; This function uses a non-reentrant model
  2821 ;;
  2822                           
  2823                           	psect	text14
  2824  00135E                     __ptext14:
  2825                           	opt callstack 0
  2826  00135E                     _isspace:
  2827                           	opt callstack 25
  2828                           
  2829                           ;incstack = 0
  2830  00135E  0E01               	movlw	1
  2831  001360  6E0A               	movwf	_isspace$758,c
  2832  001362  0E20               	movlw	32
  2833  001364  1804               	xorwf	isspace@c,w,c
  2834  001366  1005               	iorwf	isspace@c+1,w,c
  2835  001368  B4D8               	btfsc	status,2,c
  2836  00136A  D014               	goto	l2180
  2837  00136C  0EF7               	movlw	247
  2838  00136E  6E06               	movwf	??_isspace& (0+255),c
  2839  001370  0EFF               	movlw	255
  2840  001372  6E07               	movwf	(??_isspace+1)& (0+255),c
  2841  001374  C004  F008         	movff	isspace@c,??_isspace+2
  2842  001378  C005  F009         	movff	isspace@c+1,??_isspace+3
  2843  00137C  5006               	movf	??_isspace,w,c
  2844  00137E  2608               	addwf	??_isspace+2,f,c
  2845  001380  5007               	movf	??_isspace+1,w,c
  2846  001382  2209               	addwfc	??_isspace+3,f,c
  2847  001384  5009               	movf	??_isspace+3,w,c
  2848  001386  E104               	bnz	u1740
  2849  001388  0E05               	movlw	5
  2850  00138A  5C08               	subwf	??_isspace+2,w,c
  2851  00138C  A0D8               	btfss	status,0,c
  2852  00138E  D002               	goto	l2180
  2853  001390                     u1740:
  2854  001390  0E00               	movlw	0
  2855  001392  6E0A               	movwf	_isspace$758,c
  2856  001394                     l2180:
  2857  001394  C00A  F004         	movff	_isspace$758,?_isspace
  2858  001398  6A05               	clrf	?_isspace+1,c
  2859  00139A  0012               	return		;funcret
  2860  00139C                     __end_of_isspace:
  2861                           	opt callstack 0
  2862                           
  2863 ;; *************** function _isdigit *****************
  2864 ;; Defined at:
  2865 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\isdigit.c"
  2866 ;; Parameters:    Size  Location     Type
  2867 ;;  c               2    3[COMRAM] int 
  2868 ;; Auto vars:     Size  Location     Type
  2869 ;;		None
  2870 ;; Return value:  Size  Location     Type
  2871 ;;                  2    3[COMRAM] int 
  2872 ;; Registers used:
  2873 ;;		wreg, status,2, status,0
  2874 ;; Tracked objects:
  2875 ;;		On entry : 0/0
  2876 ;;		On exit  : 0/0
  2877 ;;		Unchanged: 0/0
  2878 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2879 ;;      Params:         2       0       0       0       0       0       0
  2880 ;;      Locals:         0       0       0       0       0       0       0
  2881 ;;      Temps:          4       0       0       0       0       0       0
  2882 ;;      Totals:         6       0       0       0       0       0       0
  2883 ;;Total ram usage:        6 bytes
  2884 ;; Hardware stack levels used:    1
  2885 ;; Hardware stack levels required when called:    1
  2886 ;; This function calls:
  2887 ;;		Nothing
  2888 ;; This function is called by:
  2889 ;;		_vfpfcnvrt
  2890 ;;		_atoi
  2891 ;; This function uses a non-reentrant model
  2892 ;;
  2893                           
  2894                           	psect	text15
  2895  001406                     __ptext15:
  2896                           	opt callstack 0
  2897  001406                     _isdigit:
  2898                           	opt callstack 26
  2899                           
  2900                           ;incstack = 0
  2901  001406  0ED0               	movlw	208
  2902  001408  6E06               	movwf	??_isdigit& (0+255),c
  2903  00140A  0EFF               	movlw	255
  2904  00140C  6E07               	movwf	(??_isdigit+1)& (0+255),c
  2905  00140E  C004  F008         	movff	isdigit@c,??_isdigit+2
  2906  001412  C005  F009         	movff	isdigit@c+1,??_isdigit+3
  2907  001416  5006               	movf	??_isdigit,w,c
  2908  001418  2608               	addwf	??_isdigit+2,f,c
  2909  00141A  5007               	movf	??_isdigit+1,w,c
  2910  00141C  2209               	addwfc	??_isdigit+3,f,c
  2911  00141E  5009               	movf	??_isdigit+3,w,c
  2912  001420  E106               	bnz	u1580
  2913  001422  0E0A               	movlw	10
  2914  001424  5C08               	subwf	??_isdigit+2,w,c
  2915  001426  B0D8               	btfsc	status,0,c
  2916  001428  D002               	goto	u1580
  2917  00142A  0E01               	movlw	1
  2918  00142C  D001               	goto	u1590
  2919  00142E                     u1580:
  2920  00142E  0E00               	movlw	0
  2921  001430                     u1590:
  2922  001430  6E04               	movwf	?_isdigit,c
  2923  001432  6A05               	clrf	?_isdigit+1,c
  2924  001434  0012               	return		;funcret
  2925  001436                     __end_of_isdigit:
  2926                           	opt callstack 0
  2927                           
  2928 ;; *************** function ___wmul *****************
  2929 ;; Defined at:
  2930 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\Umul16.c"
  2931 ;; Parameters:    Size  Location     Type
  2932 ;;  multiplier      2    3[COMRAM] unsigned int 
  2933 ;;  multiplicand    2    5[COMRAM] unsigned int 
  2934 ;; Auto vars:     Size  Location     Type
  2935 ;;  product         2    7[COMRAM] unsigned int 
  2936 ;; Return value:  Size  Location     Type
  2937 ;;                  2    3[COMRAM] unsigned int 
  2938 ;; Registers used:
  2939 ;;		wreg, status,2, status,0, prodl, prodh
  2940 ;; Tracked objects:
  2941 ;;		On entry : 0/0
  2942 ;;		On exit  : 0/0
  2943 ;;		Unchanged: 0/0
  2944 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2945 ;;      Params:         4       0       0       0       0       0       0
  2946 ;;      Locals:         2       0       0       0       0       0       0
  2947 ;;      Temps:          0       0       0       0       0       0       0
  2948 ;;      Totals:         6       0       0       0       0       0       0
  2949 ;;Total ram usage:        6 bytes
  2950 ;; Hardware stack levels used:    1
  2951 ;; Hardware stack levels required when called:    1
  2952 ;; This function calls:
  2953 ;;		Nothing
  2954 ;; This function is called by:
  2955 ;;		_atoi
  2956 ;; This function uses a non-reentrant model
  2957 ;;
  2958                           
  2959                           	psect	text16
  2960  001486                     __ptext16:
  2961                           	opt callstack 0
  2962  001486                     ___wmul:
  2963                           	opt callstack 25
  2964                           
  2965                           ;incstack = 0
  2966  001486  5004               	movf	___wmul@multiplier,w,c
  2967  001488  0206               	mulwf	___wmul@multiplicand,c
  2968  00148A  CFF3 F008          	movff	prodl,___wmul@product
  2969  00148E  CFF4 F009          	movff	prodh,___wmul@product+1
  2970  001492  5004               	movf	___wmul@multiplier,w,c
  2971  001494  0207               	mulwf	___wmul@multiplicand+1,c
  2972  001496  50F3               	movf	prodl,w,c
  2973  001498  2609               	addwf	___wmul@product+1,f,c
  2974  00149A  5005               	movf	___wmul@multiplier+1,w,c
  2975  00149C  0206               	mulwf	___wmul@multiplicand,c
  2976  00149E  50F3               	movf	prodl,w,c
  2977  0014A0  2609               	addwf	___wmul@product+1,f,c
  2978  0014A2  C008  F004         	movff	___wmul@product,?___wmul
  2979  0014A6  C009  F005         	movff	___wmul@product+1,?___wmul+1
  2980  0014AA  0012               	return		;funcret
  2981  0014AC                     __end_of___wmul:
  2982                           	opt callstack 0
  2983                           
  2984 ;; *************** function _lcd_ini *****************
  2985 ;; Defined at:
  2986 ;;		line 3 in file "../Bibliotecas/LCD4bits.c"
  2987 ;; Parameters:    Size  Location     Type
  2988 ;;		None
  2989 ;; Auto vars:     Size  Location     Type
  2990 ;;  i               1    8[COMRAM] unsigned char 
  2991 ;; Return value:  Size  Location     Type
  2992 ;;                  1    wreg      void 
  2993 ;; Registers used:
  2994 ;;		wreg, status,2, status,0, cstack
  2995 ;; Tracked objects:
  2996 ;;		On entry : 0/0
  2997 ;;		On exit  : 0/0
  2998 ;;		Unchanged: 0/0
  2999 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3000 ;;      Params:         0       0       0       0       0       0       0
  3001 ;;      Locals:         1       0       0       0       0       0       0
  3002 ;;      Temps:          1       0       0       0       0       0       0
  3003 ;;      Totals:         2       0       0       0       0       0       0
  3004 ;;Total ram usage:        2 bytes
  3005 ;; Hardware stack levels used:    1
  3006 ;; Hardware stack levels required when called:    3
  3007 ;; This function calls:
  3008 ;;		_lcd_cmd
  3009 ;; This function is called by:
  3010 ;;		_main
  3011 ;; This function uses a non-reentrant model
  3012 ;;
  3013                           
  3014                           	psect	text17
  3015  0011AA                     __ptext17:
  3016                           	opt callstack 0
  3017  0011AA                     _lcd_ini:
  3018                           	opt callstack 27
  3019                           
  3020                           ;../Bibliotecas/LCD4bits.c: 5:     char i;;../Bibliotecas/LCD4bits.c: 7:    TRISD = 0b00
      +                          000000;
  3021                           
  3022                           ;incstack = 0
  3023  0011AA  0E00               	movlw	0
  3024  0011AC  6E95               	movwf	3989,c	;volatile
  3025                           
  3026                           ;../Bibliotecas/LCD4bits.c: 8:    TRISEbits.TRISE0 = 0;
  3027  0011AE  9096               	bcf	3990,0,c	;volatile
  3028                           
  3029                           ;../Bibliotecas/LCD4bits.c: 9:    TRISEbits.TRISE1 = 0;
  3030  0011B0  9296               	bcf	3990,1,c	;volatile
  3031                           
  3032                           ;../Bibliotecas/LCD4bits.c: 11:    LATD = 0b00000000;
  3033  0011B2  0E00               	movlw	0
  3034  0011B4  6E8C               	movwf	3980,c	;volatile
  3035                           
  3036                           ;../Bibliotecas/LCD4bits.c: 12:    LATEbits.LATE0 = 0;
  3037  0011B6  908D               	bcf	3981,0,c	;volatile
  3038                           
  3039                           ;../Bibliotecas/LCD4bits.c: 13:    LATEbits.LATE1 = 0;
  3040  0011B8  928D               	bcf	3981,1,c	;volatile
  3041                           
  3042                           ;../Bibliotecas/LCD4bits.c: 15:    _delay((unsigned long)((15)*(8000000/4000.0)));
  3043  0011BA  0E27               	movlw	39
  3044  0011BC  6E08               	movwf	??_lcd_ini& (0+255),c
  3045  0011BE  0EF5               	movlw	245
  3046  0011C0                     u2097:
  3047  0011C0  2EE8               	decfsz	wreg,f,c
  3048  0011C2  D7FE               	bra	u2097
  3049  0011C4  2E08               	decfsz	??_lcd_ini& (0+255),f,c
  3050  0011C6  D7FC               	bra	u2097
  3051  0011C8  F000               	nop	
  3052                           
  3053                           ;../Bibliotecas/LCD4bits.c: 17:    for(i = 0; i < 3; i++)
  3054  0011CA  0E00               	movlw	0
  3055  0011CC  6E09               	movwf	lcd_ini@i,c
  3056  0011CE                     l1916:
  3057                           
  3058                           ;../Bibliotecas/LCD4bits.c: 18:    {;../Bibliotecas/LCD4bits.c: 19:        lcd_cmd(0x30)
      +                          ;
  3059  0011CE  0E30               	movlw	48
  3060  0011D0  EC74  F007         	call	_lcd_cmd
  3061                           
  3062                           ;../Bibliotecas/LCD4bits.c: 20:        _delay((unsigned long)((5)*(8000000/4000.0)));
  3063  0011D4  0E0D               	movlw	13
  3064  0011D6  6E08               	movwf	??_lcd_ini& (0+255),c
  3065  0011D8  0EFC               	movlw	252
  3066  0011DA                     u2107:
  3067  0011DA  2EE8               	decfsz	wreg,f,c
  3068  0011DC  D7FE               	bra	u2107
  3069  0011DE  2E08               	decfsz	??_lcd_ini& (0+255),f,c
  3070  0011E0  D7FC               	bra	u2107
  3071                           
  3072                           ;../Bibliotecas/LCD4bits.c: 21:    }
  3073  0011E2  2A09               	incf	lcd_ini@i,f,c
  3074  0011E4  0E02               	movlw	2
  3075  0011E6  6409               	cpfsgt	lcd_ini@i,c
  3076  0011E8  D7F2               	goto	l1916
  3077                           
  3078                           ;../Bibliotecas/LCD4bits.c: 22:    lcd_cmd(0x02);
  3079  0011EA  0E02               	movlw	2
  3080  0011EC  EC74  F007         	call	_lcd_cmd
  3081                           
  3082                           ;../Bibliotecas/LCD4bits.c: 23:    _delay((unsigned long)((40)*(8000000/4000000.0)));
  3083  0011F0  0E1A               	movlw	26
  3084  0011F2                     u2117:
  3085  0011F2  2EE8               	decfsz	wreg,f,c
  3086  0011F4  D7FE               	bra	u2117
  3087  0011F6  D000               	nop2	
  3088                           
  3089                           ;../Bibliotecas/LCD4bits.c: 24:    lcd_cmd(0x28);
  3090  0011F8  0E28               	movlw	40
  3091  0011FA  EC74  F007         	call	_lcd_cmd
  3092                           
  3093                           ;../Bibliotecas/LCD4bits.c: 25:    _delay((unsigned long)((40)*(8000000/4000000.0)));
  3094  0011FE  0E1A               	movlw	26
  3095  001200                     u2127:
  3096  001200  2EE8               	decfsz	wreg,f,c
  3097  001202  D7FE               	bra	u2127
  3098  001204  D000               	nop2	
  3099                           
  3100                           ;../Bibliotecas/LCD4bits.c: 26:    lcd_cmd(0x01);
  3101  001206  0E01               	movlw	1
  3102  001208  EC74  F007         	call	_lcd_cmd
  3103                           
  3104                           ;../Bibliotecas/LCD4bits.c: 27:    _delay((unsigned long)((2)*(8000000/4000.0)));
  3105  00120C  0E06               	movlw	6
  3106  00120E  6E08               	movwf	??_lcd_ini& (0+255),c
  3107  001210  0E30               	movlw	48
  3108  001212                     u2137:
  3109  001212  2EE8               	decfsz	wreg,f,c
  3110  001214  D7FE               	bra	u2137
  3111  001216  2E08               	decfsz	??_lcd_ini& (0+255),f,c
  3112  001218  D7FC               	bra	u2137
  3113  00121A  D000               	nop2	
  3114                           
  3115                           ;../Bibliotecas/LCD4bits.c: 28:    lcd_cmd(0x0C);
  3116  00121C  0E0C               	movlw	12
  3117  00121E  EC74  F007         	call	_lcd_cmd
  3118                           
  3119                           ;../Bibliotecas/LCD4bits.c: 29:    _delay((unsigned long)((40)*(8000000/4000000.0)));
  3120  001222  0E1A               	movlw	26
  3121  001224                     u2147:
  3122  001224  2EE8               	decfsz	wreg,f,c
  3123  001226  D7FE               	bra	u2147
  3124  001228  D000               	nop2	
  3125                           
  3126                           ;../Bibliotecas/LCD4bits.c: 30:    lcd_cmd(0x06);
  3127  00122A  0E06               	movlw	6
  3128  00122C  EC74  F007         	call	_lcd_cmd
  3129                           
  3130                           ;../Bibliotecas/LCD4bits.c: 31:    _delay((unsigned long)((40)*(8000000/4000000.0)));
  3131  001230  0E1A               	movlw	26
  3132  001232                     u2157:
  3133  001232  2EE8               	decfsz	wreg,f,c
  3134  001234  D7FE               	bra	u2157
  3135  001236  D000               	nop2	
  3136  001238  0012               	return		;funcret
  3137  00123A                     __end_of_lcd_ini:
  3138                           	opt callstack 0
  3139                           
  3140 ;; *************** function _lcd_escreve_bf *****************
  3141 ;; Defined at:
  3142 ;;		line 74 in file "../Bibliotecas/LCD4bits.c"
  3143 ;; Parameters:    Size  Location     Type
  3144 ;;  lin             1    wreg     unsigned char 
  3145 ;;  col             1    9[COMRAM] unsigned char 
  3146 ;;  str             2   10[COMRAM] PTR unsigned char 
  3147 ;;		 -> bufferLCD(16), STR_2(15), STR_1(15), 
  3148 ;; Auto vars:     Size  Location     Type
  3149 ;;  lin             1   13[COMRAM] unsigned char 
  3150 ;;  end             1   12[COMRAM] unsigned char 
  3151 ;; Return value:  Size  Location     Type
  3152 ;;                  1    wreg      void 
  3153 ;; Registers used:
  3154 ;;		wreg, fsr1l, fsr1h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  3155 ;; Tracked objects:
  3156 ;;		On entry : 0/0
  3157 ;;		On exit  : 0/0
  3158 ;;		Unchanged: 0/0
  3159 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3160 ;;      Params:         3       0       0       0       0       0       0
  3161 ;;      Locals:         2       0       0       0       0       0       0
  3162 ;;      Temps:          0       0       0       0       0       0       0
  3163 ;;      Totals:         5       0       0       0       0       0       0
  3164 ;;Total ram usage:        5 bytes
  3165 ;; Hardware stack levels used:    1
  3166 ;; Hardware stack levels required when called:    4
  3167 ;; This function calls:
  3168 ;;		_lcd_envia_byte
  3169 ;; This function is called by:
  3170 ;;		_main
  3171 ;; This function uses a non-reentrant model
  3172 ;;
  3173                           
  3174                           	psect	text18
  3175  00123A                     __ptext18:
  3176                           	opt callstack 0
  3177  00123A                     _lcd_escreve_bf:
  3178                           	opt callstack 26
  3179                           
  3180                           ;incstack = 0
  3181                           ;lcd_escreve_bf@lin stored from wreg
  3182  00123A  6E0E               	movwf	lcd_escreve_bf@lin,c
  3183                           
  3184                           ;../Bibliotecas/LCD4bits.c: 74: void lcd_escreve_bf(char lin, char col, char *str);../Bi
      +                          bliotecas/LCD4bits.c: 75: {;../Bibliotecas/LCD4bits.c: 76:     char end;;../Bibliotecas/
      +                          LCD4bits.c: 79:     if (lin == 1)
  3185  00123C  040E               	decf	lcd_escreve_bf@lin,w,c
  3186  00123E  A4D8               	btfss	status,2,c
  3187  001240  D003               	goto	l1942
  3188                           
  3189                           ;../Bibliotecas/LCD4bits.c: 80:         end = col + 0x80 - 1;
  3190  001242  500A               	movf	lcd_escreve_bf@col,w,c
  3191  001244  0F7F               	addlw	127
  3192  001246  D006               	goto	L3
  3193  001248                     l1942:
  3194  001248  0E02               	movlw	2
  3195  00124A  180E               	xorwf	lcd_escreve_bf@lin,w,c
  3196  00124C  A4D8               	btfss	status,2,c
  3197  00124E  D003               	goto	l1946
  3198                           
  3199                           ;../Bibliotecas/LCD4bits.c: 82:         end = col + 0xC0 - 1;
  3200  001250  500A               	movf	lcd_escreve_bf@col,w,c
  3201  001252  0FBF               	addlw	191
  3202  001254                     L3:
  3203  001254  6E0D               	movwf	lcd_escreve_bf@end,c
  3204  001256                     l1946:
  3205                           
  3206                           ;../Bibliotecas/LCD4bits.c: 84:     lcd_envia_byte(0, end);
  3207  001256  C00D  F008         	movff	lcd_escreve_bf@end,lcd_envia_byte@dado
  3208  00125A  0E00               	movlw	0
  3209  00125C  EC56  F00A         	call	_lcd_envia_byte
  3210                           
  3211                           ;../Bibliotecas/LCD4bits.c: 86:     while(*str)
  3212  001260  D016               	goto	l1952
  3213  001262                     l1948:
  3214                           
  3215                           ;../Bibliotecas/LCD4bits.c: 87:     {;../Bibliotecas/LCD4bits.c: 88:        lcd_envia_by
      +                          te(1,*str);
  3216  001262  C00B  FFF6         	movff	lcd_escreve_bf@str,tblptrl
  3217  001266  C00C  FFF7         	movff	lcd_escreve_bf@str+1,tblptrh
  3218  00126A  6AF8               	clrf	tblptru,c
  3219  00126C  0E05               	movlw	(high __ramtop+-1)
  3220  00126E  64F7               	cpfsgt	tblptrh,c
  3221  001270  D003               	bra	u1447
  3222  001272  0008               	tblrd		*
  3223  001274  50F5               	movf	tablat,w,c
  3224  001276  D005               	bra	u1440
  3225  001278                     u1447:
  3226  001278  CFF6 FFE1          	movff	tblptrl,fsr1l
  3227  00127C  CFF7 FFE2          	movff	tblptrh,fsr1h
  3228  001280  50E7               	movf	indf1,w,c
  3229  001282                     u1440:
  3230  001282  6E08               	movwf	lcd_envia_byte@dado,c
  3231  001284  0E01               	movlw	1
  3232  001286  EC56  F00A         	call	_lcd_envia_byte
  3233                           
  3234                           ;../Bibliotecas/LCD4bits.c: 89:        str++;
  3235  00128A  4A0B               	infsnz	lcd_escreve_bf@str,f,c
  3236  00128C  2A0C               	incf	lcd_escreve_bf@str+1,f,c
  3237  00128E                     l1952:
  3238                           
  3239                           ;../Bibliotecas/LCD4bits.c: 86:     while(*str)
  3240  00128E  C00B  FFF6         	movff	lcd_escreve_bf@str,tblptrl
  3241  001292  C00C  FFF7         	movff	lcd_escreve_bf@str+1,tblptrh
  3242  001296  6AF8               	clrf	tblptru,c
  3243  001298  0E05               	movlw	(high __ramtop+-1)
  3244  00129A  64F7               	cpfsgt	tblptrh,c
  3245  00129C  D003               	bra	u1457
  3246  00129E  0008               	tblrd		*
  3247  0012A0  50F5               	movf	tablat,w,c
  3248  0012A2  D005               	bra	u1450
  3249  0012A4                     u1457:
  3250  0012A4  CFF6 FFE1          	movff	tblptrl,fsr1l
  3251  0012A8  CFF7 FFE2          	movff	tblptrh,fsr1h
  3252  0012AC  50E7               	movf	indf1,w,c
  3253  0012AE                     u1450:
  3254  0012AE  0900               	iorlw	0
  3255  0012B0  B4D8               	btfsc	status,2,c
  3256  0012B2  0012               	return	
  3257  0012B4  D7D6               	goto	l1948
  3258  0012B6                     __end_of_lcd_escreve_bf:
  3259                           	opt callstack 0
  3260                           
  3261 ;; *************** function _lcd_envia_byte *****************
  3262 ;; Defined at:
  3263 ;;		line 66 in file "../Bibliotecas/LCD4bits.c"
  3264 ;; Parameters:    Size  Location     Type
  3265 ;;  nivel           1    wreg     unsigned char 
  3266 ;;  dado            1    7[COMRAM] unsigned char 
  3267 ;; Auto vars:     Size  Location     Type
  3268 ;;  nivel           1    8[COMRAM] unsigned char 
  3269 ;; Return value:  Size  Location     Type
  3270 ;;                  1    wreg      void 
  3271 ;; Registers used:
  3272 ;;		wreg, status,2, status,0, cstack
  3273 ;; Tracked objects:
  3274 ;;		On entry : 0/0
  3275 ;;		On exit  : 0/0
  3276 ;;		Unchanged: 0/0
  3277 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3278 ;;      Params:         1       0       0       0       0       0       0
  3279 ;;      Locals:         1       0       0       0       0       0       0
  3280 ;;      Temps:          0       0       0       0       0       0       0
  3281 ;;      Totals:         2       0       0       0       0       0       0
  3282 ;;Total ram usage:        2 bytes
  3283 ;; Hardware stack levels used:    1
  3284 ;; Hardware stack levels required when called:    3
  3285 ;; This function calls:
  3286 ;;		_lcd_cmd
  3287 ;; This function is called by:
  3288 ;;		_lcd_escreve_bf
  3289 ;; This function uses a non-reentrant model
  3290 ;;
  3291                           
  3292                           	psect	text19
  3293  0014AC                     __ptext19:
  3294                           	opt callstack 0
  3295  0014AC                     _lcd_envia_byte:
  3296                           	opt callstack 26
  3297                           
  3298                           ;incstack = 0
  3299                           ;lcd_envia_byte@nivel stored from wreg
  3300  0014AC  6E09               	movwf	lcd_envia_byte@nivel,c
  3301                           
  3302                           ;../Bibliotecas/LCD4bits.c: 66: void lcd_envia_byte(char nivel, char dado);../Biblioteca
      +                          s/LCD4bits.c: 67: {;../Bibliotecas/LCD4bits.c: 68:     LATEbits.LATE0 = nivel;
  3303  0014AE  B009               	btfsc	lcd_envia_byte@nivel,0,c
  3304  0014B0  D002               	bra	u1395
  3305  0014B2  908D               	bcf	3981,0,c	;volatile
  3306  0014B4  D001               	bra	u1396
  3307  0014B6                     u1395:
  3308  0014B6  808D               	bsf	3981,0,c	;volatile
  3309  0014B8                     u1396:
  3310                           
  3311                           ;../Bibliotecas/LCD4bits.c: 69:     _delay((unsigned long)((100)*(8000000/4000000.0)));
  3312  0014B8  0E42               	movlw	66
  3313  0014BA                     u2167:
  3314  0014BA  2EE8               	decfsz	wreg,f,c
  3315  0014BC  D7FE               	bra	u2167
  3316  0014BE  D000               	nop2	
  3317                           
  3318                           ;../Bibliotecas/LCD4bits.c: 70:     LATEbits.LATE1 = 0;
  3319  0014C0  928D               	bcf	3981,1,c	;volatile
  3320                           
  3321                           ;../Bibliotecas/LCD4bits.c: 71:     lcd_cmd(dado);
  3322  0014C2  5008               	movf	lcd_envia_byte@dado,w,c
  3323  0014C4  EC74  F007         	call	_lcd_cmd
  3324  0014C8  0012               	return		;funcret
  3325  0014CA                     __end_of_lcd_envia_byte:
  3326                           	opt callstack 0
  3327                           
  3328 ;; *************** function _lcd_cmd *****************
  3329 ;; Defined at:
  3330 ;;		line 45 in file "../Bibliotecas/LCD4bits.c"
  3331 ;; Parameters:    Size  Location     Type
  3332 ;;  cmd             1    wreg     unsigned char 
  3333 ;; Auto vars:     Size  Location     Type
  3334 ;;  cmd             1    6[COMRAM] unsigned char 
  3335 ;; Return value:  Size  Location     Type
  3336 ;;                  1    wreg      void 
  3337 ;; Registers used:
  3338 ;;		wreg, status,2, status,0, cstack
  3339 ;; Tracked objects:
  3340 ;;		On entry : 0/0
  3341 ;;		On exit  : 0/0
  3342 ;;		Unchanged: 0/0
  3343 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3344 ;;      Params:         0       0       0       0       0       0       0
  3345 ;;      Locals:         1       0       0       0       0       0       0
  3346 ;;      Temps:          1       0       0       0       0       0       0
  3347 ;;      Totals:         2       0       0       0       0       0       0
  3348 ;;Total ram usage:        2 bytes
  3349 ;; Hardware stack levels used:    1
  3350 ;; Hardware stack levels required when called:    2
  3351 ;; This function calls:
  3352 ;;		_set_bit
  3353 ;; This function is called by:
  3354 ;;		_lcd_ini
  3355 ;;		_lcd_envia_byte
  3356 ;; This function uses a non-reentrant model
  3357 ;;
  3358                           
  3359                           	psect	text20
  3360  000EE8                     __ptext20:
  3361                           	opt callstack 0
  3362  000EE8                     _lcd_cmd:
  3363                           	opt callstack 27
  3364                           
  3365                           ;incstack = 0
  3366                           ;lcd_cmd@cmd stored from wreg
  3367  000EE8  6E07               	movwf	lcd_cmd@cmd,c
  3368                           
  3369                           ;../Bibliotecas/LCD4bits.c: 45: void lcd_cmd(char cmd);../Bibliotecas/LCD4bits.c: 46: {;
      +                          ../Bibliotecas/LCD4bits.c: 47:     LATDbits.LATD4 = set_bit(cmd, 0b00010000);
  3370  000EEA  0E10               	movlw	16
  3371  000EEC  6E04               	movwf	set_bit@comp,c
  3372  000EEE  5007               	movf	lcd_cmd@cmd,w,c
  3373  000EF0  EC65  F00A         	call	_set_bit
  3374  000EF4  6E06               	movwf	??_lcd_cmd& (0+255),c
  3375  000EF6  3A06               	swapf	??_lcd_cmd,f,c
  3376  000EF8  508C               	movf	3980,w,c	;volatile
  3377  000EFA  1806               	xorwf	??_lcd_cmd,w,c
  3378  000EFC  0BEF               	andlw	-17
  3379  000EFE  1806               	xorwf	??_lcd_cmd,w,c
  3380  000F00  6E8C               	movwf	3980,c	;volatile
  3381                           
  3382                           ;../Bibliotecas/LCD4bits.c: 48:     LATDbits.LATD5 = set_bit(cmd, 0b00100000);
  3383  000F02  0E20               	movlw	32
  3384  000F04  6E04               	movwf	set_bit@comp,c
  3385  000F06  5007               	movf	lcd_cmd@cmd,w,c
  3386  000F08  EC65  F00A         	call	_set_bit
  3387  000F0C  6E06               	movwf	??_lcd_cmd& (0+255),c
  3388  000F0E  3A06               	swapf	??_lcd_cmd,f,c
  3389  000F10  4606               	rlncf	??_lcd_cmd,f,c
  3390  000F12  508C               	movf	3980,w,c	;volatile
  3391  000F14  1806               	xorwf	??_lcd_cmd,w,c
  3392  000F16  0BDF               	andlw	-33
  3393  000F18  1806               	xorwf	??_lcd_cmd,w,c
  3394  000F1A  6E8C               	movwf	3980,c	;volatile
  3395                           
  3396                           ;../Bibliotecas/LCD4bits.c: 49:     LATDbits.LATD6 = set_bit(cmd, 0b01000000);
  3397  000F1C  0E40               	movlw	64
  3398  000F1E  6E04               	movwf	set_bit@comp,c
  3399  000F20  5007               	movf	lcd_cmd@cmd,w,c
  3400  000F22  EC65  F00A         	call	_set_bit
  3401  000F26  6E06               	movwf	??_lcd_cmd& (0+255),c
  3402  000F28  3A06               	swapf	??_lcd_cmd,f,c
  3403  000F2A  4606               	rlncf	??_lcd_cmd,f,c
  3404  000F2C  4606               	rlncf	??_lcd_cmd,f,c
  3405  000F2E  508C               	movf	3980,w,c	;volatile
  3406  000F30  1806               	xorwf	??_lcd_cmd,w,c
  3407  000F32  0BBF               	andlw	-65
  3408  000F34  1806               	xorwf	??_lcd_cmd,w,c
  3409  000F36  6E8C               	movwf	3980,c	;volatile
  3410                           
  3411                           ;../Bibliotecas/LCD4bits.c: 50:     LATDbits.LATD7 = set_bit(cmd, 0b10000000);
  3412  000F38  0E80               	movlw	128
  3413  000F3A  6E04               	movwf	set_bit@comp,c
  3414  000F3C  5007               	movf	lcd_cmd@cmd,w,c
  3415  000F3E  EC65  F00A         	call	_set_bit
  3416  000F42  6E06               	movwf	??_lcd_cmd& (0+255),c
  3417  000F44  3206               	rrcf	??_lcd_cmd,f,c
  3418  000F46  3206               	rrcf	??_lcd_cmd,f,c
  3419  000F48  508C               	movf	3980,w,c	;volatile
  3420  000F4A  1806               	xorwf	??_lcd_cmd,w,c
  3421  000F4C  0B7F               	andlw	-129
  3422  000F4E  1806               	xorwf	??_lcd_cmd,w,c
  3423  000F50  6E8C               	movwf	3980,c	;volatile
  3424                           
  3425                           ;../Bibliotecas/LCD4bits.c: 52:     LATEbits.LATE1 = 1;
  3426  000F52  828D               	bsf	3981,1,c	;volatile
  3427                           
  3428                           ;../Bibliotecas/LCD4bits.c: 53:     LATEbits.LATE1 = 0;
  3429  000F54  928D               	bcf	3981,1,c	;volatile
  3430                           
  3431                           ;../Bibliotecas/LCD4bits.c: 55:     _delay((unsigned long)((100)*(8000000/4000000.0)));
  3432  000F56  0E42               	movlw	66
  3433  000F58                     u2177:
  3434  000F58  2EE8               	decfsz	wreg,f,c
  3435  000F5A  D7FE               	bra	u2177
  3436  000F5C  D000               	nop2	
  3437                           
  3438                           ;../Bibliotecas/LCD4bits.c: 57:     LATDbits.LATD4 = set_bit(cmd, 0b00000001);
  3439  000F5E  0E01               	movlw	1
  3440  000F60  6E04               	movwf	set_bit@comp,c
  3441  000F62  5007               	movf	lcd_cmd@cmd,w,c
  3442  000F64  EC65  F00A         	call	_set_bit
  3443  000F68  6E06               	movwf	??_lcd_cmd& (0+255),c
  3444  000F6A  3A06               	swapf	??_lcd_cmd,f,c
  3445  000F6C  508C               	movf	3980,w,c	;volatile
  3446  000F6E  1806               	xorwf	??_lcd_cmd,w,c
  3447  000F70  0BEF               	andlw	-17
  3448  000F72  1806               	xorwf	??_lcd_cmd,w,c
  3449  000F74  6E8C               	movwf	3980,c	;volatile
  3450                           
  3451                           ;../Bibliotecas/LCD4bits.c: 58:     LATDbits.LATD5 = set_bit(cmd, 0b00000010);
  3452  000F76  0E02               	movlw	2
  3453  000F78  6E04               	movwf	set_bit@comp,c
  3454  000F7A  5007               	movf	lcd_cmd@cmd,w,c
  3455  000F7C  EC65  F00A         	call	_set_bit
  3456  000F80  6E06               	movwf	??_lcd_cmd& (0+255),c
  3457  000F82  3A06               	swapf	??_lcd_cmd,f,c
  3458  000F84  4606               	rlncf	??_lcd_cmd,f,c
  3459  000F86  508C               	movf	3980,w,c	;volatile
  3460  000F88  1806               	xorwf	??_lcd_cmd,w,c
  3461  000F8A  0BDF               	andlw	-33
  3462  000F8C  1806               	xorwf	??_lcd_cmd,w,c
  3463  000F8E  6E8C               	movwf	3980,c	;volatile
  3464                           
  3465                           ;../Bibliotecas/LCD4bits.c: 59:     LATDbits.LATD6 = set_bit(cmd, 0b00000100);
  3466  000F90  0E04               	movlw	4
  3467  000F92  6E04               	movwf	set_bit@comp,c
  3468  000F94  5007               	movf	lcd_cmd@cmd,w,c
  3469  000F96  EC65  F00A         	call	_set_bit
  3470  000F9A  6E06               	movwf	??_lcd_cmd& (0+255),c
  3471  000F9C  3A06               	swapf	??_lcd_cmd,f,c
  3472  000F9E  4606               	rlncf	??_lcd_cmd,f,c
  3473  000FA0  4606               	rlncf	??_lcd_cmd,f,c
  3474  000FA2  508C               	movf	3980,w,c	;volatile
  3475  000FA4  1806               	xorwf	??_lcd_cmd,w,c
  3476  000FA6  0BBF               	andlw	-65
  3477  000FA8  1806               	xorwf	??_lcd_cmd,w,c
  3478  000FAA  6E8C               	movwf	3980,c	;volatile
  3479                           
  3480                           ;../Bibliotecas/LCD4bits.c: 60:     LATDbits.LATD7 = set_bit(cmd, 0b00001000);
  3481  000FAC  0E08               	movlw	8
  3482  000FAE  6E04               	movwf	set_bit@comp,c
  3483  000FB0  5007               	movf	lcd_cmd@cmd,w,c
  3484  000FB2  EC65  F00A         	call	_set_bit
  3485  000FB6  6E06               	movwf	??_lcd_cmd& (0+255),c
  3486  000FB8  3206               	rrcf	??_lcd_cmd,f,c
  3487  000FBA  3206               	rrcf	??_lcd_cmd,f,c
  3488  000FBC  508C               	movf	3980,w,c	;volatile
  3489  000FBE  1806               	xorwf	??_lcd_cmd,w,c
  3490  000FC0  0B7F               	andlw	-129
  3491  000FC2  1806               	xorwf	??_lcd_cmd,w,c
  3492  000FC4  6E8C               	movwf	3980,c	;volatile
  3493                           
  3494                           ;../Bibliotecas/LCD4bits.c: 62:     LATEbits.LATE1 = 1;
  3495  000FC6  828D               	bsf	3981,1,c	;volatile
  3496                           
  3497                           ;../Bibliotecas/LCD4bits.c: 63:     LATEbits.LATE1 = 0;
  3498  000FC8  928D               	bcf	3981,1,c	;volatile
  3499  000FCA  0012               	return		;funcret
  3500  000FCC                     __end_of_lcd_cmd:
  3501                           	opt callstack 0
  3502                           
  3503 ;; *************** function _set_bit *****************
  3504 ;; Defined at:
  3505 ;;		line 34 in file "../Bibliotecas/LCD4bits.c"
  3506 ;; Parameters:    Size  Location     Type
  3507 ;;  cmd             1    wreg     unsigned char 
  3508 ;;  comp            1    3[COMRAM] unsigned char 
  3509 ;; Auto vars:     Size  Location     Type
  3510 ;;  cmd             1    4[COMRAM] unsigned char 
  3511 ;; Return value:  Size  Location     Type
  3512 ;;                  1    wreg      unsigned char 
  3513 ;; Registers used:
  3514 ;;		wreg, status,2, status,0
  3515 ;; Tracked objects:
  3516 ;;		On entry : 0/0
  3517 ;;		On exit  : 0/0
  3518 ;;		Unchanged: 0/0
  3519 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3520 ;;      Params:         1       0       0       0       0       0       0
  3521 ;;      Locals:         1       0       0       0       0       0       0
  3522 ;;      Temps:          0       0       0       0       0       0       0
  3523 ;;      Totals:         2       0       0       0       0       0       0
  3524 ;;Total ram usage:        2 bytes
  3525 ;; Hardware stack levels used:    1
  3526 ;; Hardware stack levels required when called:    1
  3527 ;; This function calls:
  3528 ;;		Nothing
  3529 ;; This function is called by:
  3530 ;;		_lcd_cmd
  3531 ;; This function uses a non-reentrant model
  3532 ;;
  3533                           
  3534                           	psect	text21
  3535  0014CA                     __ptext21:
  3536                           	opt callstack 0
  3537  0014CA                     _set_bit:
  3538                           	opt callstack 27
  3539                           
  3540                           ;incstack = 0
  3541                           ;set_bit@cmd stored from wreg
  3542  0014CA  6E05               	movwf	set_bit@cmd,c
  3543                           
  3544                           ;../Bibliotecas/LCD4bits.c: 34: char set_bit(char cmd, char comp);../Bibliotecas/LCD4bit
      +                          s.c: 35: {;../Bibliotecas/LCD4bits.c: 36:     if ((cmd & comp) >= 1)
  3545  0014CC  5005               	movf	set_bit@cmd,w,c
  3546  0014CE  1404               	andwf	set_bit@comp,w,c
  3547  0014D0  0900               	iorlw	0
  3548  0014D2  B4D8               	btfsc	status,2,c
  3549  0014D4  D002               	goto	l1658
  3550                           
  3551                           ;../Bibliotecas/LCD4bits.c: 37:         return 1;
  3552  0014D6  0E01               	movlw	1
  3553  0014D8  0012               	return	
  3554  0014DA                     l1658:
  3555                           
  3556                           ;../Bibliotecas/LCD4bits.c: 39:         return 0;
  3557  0014DA  0E00               	movlw	0
  3558  0014DC  0012               	return		;funcret
  3559  0014DE                     __end_of_set_bit:
  3560                           	opt callstack 0
  3561                           
  3562 ;; *************** function _int_TIMERS *****************
  3563 ;; Defined at:
  3564 ;;		line 12 in file "EX16.c"
  3565 ;; Parameters:    Size  Location     Type
  3566 ;;		None
  3567 ;; Auto vars:     Size  Location     Type
  3568 ;;		None
  3569 ;; Return value:  Size  Location     Type
  3570 ;;                  1    wreg      void 
  3571 ;; Registers used:
  3572 ;;		wreg, status,2, status,0
  3573 ;; Tracked objects:
  3574 ;;		On entry : 0/0
  3575 ;;		On exit  : 0/0
  3576 ;;		Unchanged: 0/0
  3577 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3578 ;;      Params:         0       0       0       0       0       0       0
  3579 ;;      Locals:         0       0       0       0       0       0       0
  3580 ;;      Temps:          3       0       0       0       0       0       0
  3581 ;;      Totals:         3       0       0       0       0       0       0
  3582 ;;Total ram usage:        3 bytes
  3583 ;; Hardware stack levels used:    1
  3584 ;; This function calls:
  3585 ;;		Nothing
  3586 ;; This function is called by:
  3587 ;;		Interrupt level 1
  3588 ;; This function uses a non-reentrant model
  3589 ;;
  3590                           
  3591                           	psect	intcodelo
  3592  000018                     __pintcodelo:
  3593                           	opt callstack 0
  3594  000018                     _int_TIMERS:
  3595                           	opt callstack 22
  3596                           
  3597                           ;incstack = 0
  3598  000018  8075               	bsf	btemp,0,c	;set compiler interrupt flag (level 1)
  3599  00001A  CFD8 F001          	movff	status,??_int_TIMERS
  3600  00001E  CFE8 F002          	movff	wreg,??_int_TIMERS+1
  3601  000022  CFE0 F003          	movff	bsr,??_int_TIMERS+2
  3602                           
  3603                           ;EX16.c: 14:     if (TMR0IF)
  3604  000026  A4F2               	btfss	4082,2,c	;volatile
  3605  000028  D021               	goto	i1l1448
  3606                           
  3607                           ;EX16.c: 15:     {;EX16.c: 16:         T0_500ms++;
  3608  00002A  4A73               	infsnz	_T0_500ms,f,c
  3609  00002C  2A74               	incf	_T0_500ms+1,f,c
  3610                           
  3611                           ;EX16.c: 17:         if (T0_500ms>=20)
  3612  00002E  BE74               	btfsc	_T0_500ms+1,7,c
  3613  000030  D018               	goto	i1l42
  3614  000032  5074               	movf	_T0_500ms+1,w,c
  3615  000034  E104               	bnz	i1u72_20
  3616  000036  0E14               	movlw	20
  3617  000038  5C73               	subwf	_T0_500ms,w,c
  3618  00003A  A0D8               	btfss	status,0,c
  3619  00003C  D012               	goto	i1l42
  3620  00003E                     i1u72_20:
  3621                           
  3622                           ;EX16.c: 18:         {;EX16.c: 19:             T0_500ms=0;
  3623  00003E  0E00               	movlw	0
  3624  000040  6E74               	movwf	_T0_500ms+1,c
  3625  000042  0E00               	movlw	0
  3626  000044  6E73               	movwf	_T0_500ms,c
  3627                           
  3628                           ;EX16.c: 20:             conta_t0++;
  3629  000046  4A6F               	infsnz	_conta_t0,f,c
  3630  000048  2A70               	incf	_conta_t0+1,f,c
  3631                           
  3632                           ;EX16.c: 21:             if (conta_t0>=100)
  3633  00004A  BE70               	btfsc	_conta_t0+1,7,c
  3634  00004C  D00A               	goto	i1l42
  3635  00004E  5070               	movf	_conta_t0+1,w,c
  3636  000050  E104               	bnz	i1u73_20
  3637  000052  0E64               	movlw	100
  3638  000054  5C6F               	subwf	_conta_t0,w,c
  3639  000056  A0D8               	btfss	status,0,c
  3640  000058  D004               	goto	i1l42
  3641  00005A                     i1u73_20:
  3642                           
  3643                           ;EX16.c: 22:                 conta_t0=0;
  3644  00005A  0E00               	movlw	0
  3645  00005C  6E70               	movwf	_conta_t0+1,c
  3646  00005E  0E00               	movlw	0
  3647  000060  6E6F               	movwf	_conta_t0,c
  3648  000062                     i1l42:
  3649                           
  3650                           ;EX16.c: 25:      TMR0 = 61;
  3651  000062  0E00               	movlw	0
  3652  000064  6ED7               	movwf	4055,c	;volatile
  3653  000066  0E3D               	movlw	61
  3654  000068  6ED6               	movwf	4054,c	;volatile
  3655                           
  3656                           ;EX16.c: 26:      TMR0IF = 0;
  3657  00006A  94F2               	bcf	4082,2,c	;volatile
  3658  00006C                     i1l1448:
  3659                           
  3660                           ;EX16.c: 29:     if (TMR1IF)
  3661  00006C  A09E               	btfss	3998,0,c	;volatile
  3662  00006E  D021               	goto	i1l47
  3663                           
  3664                           ;EX16.c: 30:     {;EX16.c: 31:         T1_1000ms++;
  3665  000070  4A71               	infsnz	_T1_1000ms,f,c
  3666  000072  2A72               	incf	_T1_1000ms+1,f,c
  3667                           
  3668                           ;EX16.c: 32:         if (T1_1000ms>=4)
  3669  000074  BE72               	btfsc	_T1_1000ms+1,7,c
  3670  000076  D018               	goto	i1l45
  3671  000078  5072               	movf	_T1_1000ms+1,w,c
  3672  00007A  E104               	bnz	i1u75_20
  3673  00007C  0E04               	movlw	4
  3674  00007E  5C71               	subwf	_T1_1000ms,w,c
  3675  000080  A0D8               	btfss	status,0,c
  3676  000082  D012               	goto	i1l45
  3677  000084                     i1u75_20:
  3678                           
  3679                           ;EX16.c: 33:         {;EX16.c: 34:             T1_1000ms=0;
  3680  000084  0E00               	movlw	0
  3681  000086  6E72               	movwf	_T1_1000ms+1,c
  3682  000088  0E00               	movlw	0
  3683  00008A  6E71               	movwf	_T1_1000ms,c
  3684                           
  3685                           ;EX16.c: 35:             conta_t1++;
  3686  00008C  4A6D               	infsnz	_conta_t1,f,c
  3687  00008E  2A6E               	incf	_conta_t1+1,f,c
  3688                           
  3689                           ;EX16.c: 36:             if (conta_t1>=100)
  3690  000090  BE6E               	btfsc	_conta_t1+1,7,c
  3691  000092  D00A               	goto	i1l45
  3692  000094  506E               	movf	_conta_t1+1,w,c
  3693  000096  E104               	bnz	i1u76_20
  3694  000098  0E64               	movlw	100
  3695  00009A  5C6D               	subwf	_conta_t1,w,c
  3696  00009C  A0D8               	btfss	status,0,c
  3697  00009E  D004               	goto	i1l45
  3698  0000A0                     i1u76_20:
  3699                           
  3700                           ;EX16.c: 37:                 conta_t1=0;
  3701  0000A0  0E00               	movlw	0
  3702  0000A2  6E6E               	movwf	_conta_t1+1,c
  3703  0000A4  0E00               	movlw	0
  3704  0000A6  6E6D               	movwf	_conta_t1,c
  3705  0000A8                     i1l45:
  3706                           
  3707                           ;EX16.c: 40:      TMR1H = 0x0B;
  3708  0000A8  0E0B               	movlw	11
  3709  0000AA  6ECF               	movwf	4047,c	;volatile
  3710                           
  3711                           ;EX16.c: 41:      TMR1L = 0xDC;
  3712  0000AC  0EDC               	movlw	220
  3713  0000AE  6ECE               	movwf	4046,c	;volatile
  3714                           
  3715                           ;EX16.c: 42:      TMR1IF = 0;
  3716  0000B0  909E               	bcf	3998,0,c	;volatile
  3717  0000B2                     i1l47:
  3718  0000B2  C003  FFE0         	movff	??_int_TIMERS+2,bsr
  3719  0000B6  C002  FFE8         	movff	??_int_TIMERS+1,wreg
  3720  0000BA  C001  FFD8         	movff	??_int_TIMERS,status
  3721  0000BE  9075               	bcf	btemp,0,c	;clear compiler interrupt flag (level 1)
  3722  0000C0  0010               	retfie	
  3723  0000C2                     __end_of_int_TIMERS:
  3724                           	opt callstack 0
  3725                           
  3726                           	psect	rparam
  3727  0000                     
  3728                           	psect	temp
  3729  000075                     btemp:
  3730                           	opt callstack 0
  3731  000075                     	ds	1
  3732  0000                     int$flags	set	btemp
  3733  0000                     wtemp8	set	btemp+1
  3734  0000                     ttemp5	set	btemp+1
  3735  0000                     ttemp6	set	btemp+4
  3736  0000                     ttemp7	set	btemp+8
  3737                           tosu	equ	0xFFF
  3738                           tosh	equ	0xFFE
  3739                           tosl	equ	0xFFD
  3740                           stkptr	equ	0xFFC
  3741                           pclatu	equ	0xFFB
  3742                           pclath	equ	0xFFA
  3743                           pcl	equ	0xFF9
  3744                           tblptru	equ	0xFF8
  3745                           tblptrh	equ	0xFF7
  3746                           tblptrl	equ	0xFF6
  3747                           tablat	equ	0xFF5
  3748                           prodh	equ	0xFF4
  3749                           prodl	equ	0xFF3
  3750                           indf0	equ	0xFEF
  3751                           postinc0	equ	0xFEE
  3752                           postdec0	equ	0xFED
  3753                           preinc0	equ	0xFEC
  3754                           plusw0	equ	0xFEB
  3755                           fsr0h	equ	0xFEA
  3756                           fsr0l	equ	0xFE9
  3757                           wreg	equ	0xFE8
  3758                           indf1	equ	0xFE7
  3759                           postinc1	equ	0xFE6
  3760                           postdec1	equ	0xFE5
  3761                           preinc1	equ	0xFE4
  3762                           plusw1	equ	0xFE3
  3763                           fsr1h	equ	0xFE2
  3764                           fsr1l	equ	0xFE1
  3765                           bsr	equ	0xFE0
  3766                           indf2	equ	0xFDF
  3767                           postinc2	equ	0xFDE
  3768                           postdec2	equ	0xFDD
  3769                           preinc2	equ	0xFDC
  3770                           plusw2	equ	0xFDB
  3771                           fsr2h	equ	0xFDA
  3772                           fsr2l	equ	0xFD9
  3773                           status	equ	0xFD8


Data Sizes:
    Strings     35
    Constant    0
    Data        0
    BSS         64
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          126    102     116
    BANK0           128     10      60
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0

Pointer List with Targets:

    strlen@s	PTR const unsigned char  size(2) Largest target is 32
		 -> dbuf(BANK0[32]), 

    strlen@a	PTR const unsigned char  size(2) Largest target is 32
		 -> dbuf(BANK0[32]), 

    sprintf@fmt	PTR const unsigned char  size(2) Largest target is 5
		 -> STR_4(CODE[5]), STR_3(CODE[5]), 

    sprintf@s	PTR unsigned char  size(2) Largest target is 16
		 -> bufferLCD(BANK0[16]), 

    sprintf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_sprintf(COMRAM[2]), 

    f.buffer	PTR unsigned char  size(2) Largest target is 16
		 -> bufferLCD(BANK0[16]), 

    fputs@s	PTR const unsigned char  size(2) Largest target is 32
		 -> dbuf(BANK0[32]), 

    fputs@fp	PTR struct _IO_FILE size(2) Largest target is 7
		 -> sprintf@f(BANK0[6]), 

    S762_IO_FILE$buffer	PTR unsigned char  size(2) Largest target is 16
		 -> bufferLCD(BANK0[16]), 

    fputc@fp.buffer	PTR unsigned char  size(2) Largest target is 16
		 -> bufferLCD(BANK0[16]), 

    fputc@fp	PTR struct _IO_FILE size(2) Largest target is 7
		 -> sprintf@f(BANK0[6]), 

    atoi@s	PTR const unsigned char  size(2) Largest target is 5
		 -> STR_4(CODE[5]), STR_3(CODE[5]), 

    vfprintf@ap	PTR PTR void  size(2) Largest target is 2
		 -> sprintf@ap(BANK0[2]), 

    vfprintf@fp	PTR struct _IO_FILE size(2) Largest target is 7
		 -> sprintf@f(BANK0[6]), 

    vfprintf@fmt	PTR const unsigned char  size(2) Largest target is 5
		 -> STR_4(CODE[5]), STR_3(CODE[5]), 

    vfprintf@cfmt	PTR unsigned char  size(2) Largest target is 5
		 -> STR_4(CODE[5]), STR_3(CODE[5]), 

    vfpfcnvrt@fp	PTR struct _IO_FILE size(2) Largest target is 7
		 -> sprintf@f(BANK0[6]), 

    vfpfcnvrt@ap	PTR PTR void  size(2) Largest target is 2
		 -> sprintf@ap(BANK0[2]), 

    vfpfcnvrt@fmt	PTR PTR unsigned char  size(2) Largest target is 2
		 -> vfprintf@cfmt(COMRAM[2]), 

    dtoa@fp	PTR struct _IO_FILE size(2) Largest target is 7
		 -> sprintf@f(BANK0[6]), 

    pad@fp	PTR struct _IO_FILE size(2) Largest target is 7
		 -> sprintf@f(BANK0[6]), 

    pad@buf	PTR unsigned char  size(2) Largest target is 32
		 -> dbuf(BANK0[32]), 

    lcd_escreve_bf@str	PTR unsigned char  size(2) Largest target is 16
		 -> bufferLCD(BANK0[16]), STR_2(CODE[15]), STR_1(CODE[15]), 


Critical Paths under _main in COMRAM

    _main->_sprintf
    _sprintf->_vfprintf
    _vfprintf->_vfpfcnvrt
    _vfpfcnvrt->_dtoa
    _dtoa->_pad
    _pad->_fputs
    _fputs->_fputc
    _abs->___aomod
    _atoi->_isspace
    _lcd_ini->_lcd_cmd
    _lcd_escreve_bf->_lcd_envia_byte
    _lcd_envia_byte->_lcd_cmd
    _lcd_cmd->_set_bit

Critical Paths under _int_TIMERS in COMRAM

    None.

Critical Paths under _main in BANK0

    _main->_sprintf

Critical Paths under _int_TIMERS in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _int_TIMERS in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _int_TIMERS in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _int_TIMERS in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _int_TIMERS in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _int_TIMERS in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0   13696
                     _lcd_escreve_bf
                            _lcd_ini
                            _sprintf
 ---------------------------------------------------------------------------------
 (1) _sprintf                                             16    10      6   11033
                                             96 COMRAM     6     0      6
                                              0 BANK0     10    10      0
                           _vfprintf
 ---------------------------------------------------------------------------------
 (2) _vfprintf                                             8     2      6   10361
                                             88 COMRAM     8     2      6
                          _vfpfcnvrt
 ---------------------------------------------------------------------------------
 (3) _vfpfcnvrt                                           46    40      6    9831
                                             66 COMRAM    22    16      6
                               _atoi
                               _dtoa
                              _fputc
                            _isdigit
 ---------------------------------------------------------------------------------
 (4) _dtoa                                                36    26     10    5683
                                             30 COMRAM    36    26     10
                            ___aodiv
                            ___aomod
                                _abs
                                _pad
 ---------------------------------------------------------------------------------
 (5) _pad                                                 11     5      6    3417
                                             19 COMRAM    11     5      6
                              _fputc
                              _fputs
                             _strlen
 ---------------------------------------------------------------------------------
 (6) _strlen                                               4     2      2     220
                                              3 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (6) _fputs                                                7     3      4    1537
                                             12 COMRAM     7     3      4
                              _fputc
 ---------------------------------------------------------------------------------
 (4) _fputc                                                9     5      4    1037
                                              3 COMRAM     9     5      4
                              _putch
 ---------------------------------------------------------------------------------
 (5) _putch                                                1     1      0       0
 ---------------------------------------------------------------------------------
 (5) _abs                                                  4     2      2     183
                                             21 COMRAM     4     2      2
                            ___aomod (ARG)
 ---------------------------------------------------------------------------------
 (5) ___aomod                                             18     2     16     613
                                              3 COMRAM    18     2     16
 ---------------------------------------------------------------------------------
 (5) ___aodiv                                             26    10     16     625
                                              3 COMRAM    26    10     16
 ---------------------------------------------------------------------------------
 (4) _atoi                                                15    13      2    1615
                                             10 COMRAM    15    13      2
                             ___wmul
                            _isdigit
                            _isspace
 ---------------------------------------------------------------------------------
 (5) _isspace                                              7     5      2     259
                                              3 COMRAM     7     5      2
 ---------------------------------------------------------------------------------
 (4) _isdigit                                              6     4      2     281
                                              3 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (5) ___wmul                                               6     2      4     512
                                              3 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (1) _lcd_ini                                              2     2      0     874
                                              7 COMRAM     2     2      0
                            _lcd_cmd
 ---------------------------------------------------------------------------------
 (1) _lcd_escreve_bf                                       5     2      3    1789
                                              9 COMRAM     5     2      3
                     _lcd_envia_byte
 ---------------------------------------------------------------------------------
 (2) _lcd_envia_byte                                       2     1      1    1024
                                              7 COMRAM     2     1      1
                            _lcd_cmd
 ---------------------------------------------------------------------------------
 (2) _lcd_cmd                                              2     2      0     828
                                              5 COMRAM     2     2      0
                            _set_bit
 ---------------------------------------------------------------------------------
 (3) _set_bit                                              2     1      1     652
                                              3 COMRAM     2     1      1
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (9) _int_TIMERS                                           3     3      0       0
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 9
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _lcd_escreve_bf
     _lcd_envia_byte
       _lcd_cmd
         _set_bit
   _lcd_ini
     _lcd_cmd
       _set_bit
   _sprintf
     _vfprintf
       _vfpfcnvrt
         _atoi
           ___wmul
           _isdigit
           _isspace
         _dtoa
           ___aodiv
           ___aomod
           _abs
             ___aomod (ARG)
           _pad
             _fputc
               _putch
             _fputs
               _fputc
                 _putch
             _strlen
         _fputc
           _putch
         _isdigit

 _int_TIMERS (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             5FF      0       0      17        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK5           100      0       0      16        0.0%
BANK5              100      0       0      14        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80      A      3C       5       46.9%
BITCOMRAM           7E      0       0       0        0.0%
COMRAM              7E     66      74       1       92.1%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      B0      15        0.0%
DATA                 0      0      B0       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.05 build -831301201 
Symbol Table                                                                                   Fri Apr 19 17:58:14 2019

                     bsr 000FE0      ___wmul@multiplicand 0006              __CFG_BORV$3 000000  
           __CFG_CP0$OFF 000000             __CFG_CP1$OFF 000000             __CFG_CP2$OFF 000000  
           __CFG_CP3$OFF 000000              __CFG_OSC$HS 000000                      l125 1142  
                    l136 096C                      l138 0974                      l901 0DBA  
                    l870 13FC             __CFG_CPB$OFF 000000             __CFG_CPD$OFF 000000  
                    _abs 13D4                      _pad 1114                      wreg 000FE8  
           __CFG_LVP$OFF 000000             __CFG_WDT$OFF 000000                     ?_abs 0016  
                   l2100 0B68                     l2030 108C                     l2112 0BB6  
                   l2040 13A6                     l2114 0BCA                     l2106 0B90  
                   l2050 1444                     l2132 0C62                     l2124 0C26  
                   l2044 13BC                     l2060 112C                     l2204 098E  
                   l2300 066C                     l2070 1164                     l2310 0684  
                   l2302 067C                     l2128 0C3C                     l2160 0E8A  
                   l2152 0E2E                     l2144 0DF0                     l2048 1440  
                   l2064 113A                     l2208 099E                     l2250 0C9A  
                   l2154 0E42                     l2074 1190                     l2066 114C  
                   l2242 0B12                     l2218 0A96                     l2322 0696  
                   l2314 0688                     l2306 0680                     l2180 1394  
                   l2164 0EA0                     l2148 0E14                     l2340 0770  
                   l2324 06D8                     l2270 0D26                     l2238 0AFA  
                   l2190 0950                     l2318 068C                     l2414 1016  
                   l2264 0CF0                     l2248 0C96                     l2168 0EC6  
                   l2336 0744                     l2274 0D5A                     l2266 0CF8  
                   l2258 0CE0                     l2362 08A4                     l2338 0762  
                   l2268 0CFE                     l2356 0868                     l2372 08C6  
                   l2366 08AE                     l2390 12F0                     l1658 14DA  
                   l2298 066A                     l1916 11CE                     l2388 12CA  
                   l1942 1248                     l1952 128E                     l1946 1256  
                   l1948 1262                     ?_pad 0014                     STR_1 0601  
                   STR_2 0610                     STR_3 061F                     STR_4 061F  
                   u2020 07A8                     u2030 07AA                     u2040 07B6  
                   u2107 11DA                     u1500 10CC                     u2060 07EA  
                   u2117 11F2                     u2127 1200                     u1440 1282  
                   _LATD 000F8C                     u2137 1212                     u1450 12AE  
                   u2147 1224                     u1700 0E46                     u2157 1232  
                   u1621 0B96                     u2167 14BA                     u1447 1278  
                   u1640 0BCE                     u1480 1084                     u2177 0F58  
                   u1457 12A4                     u2097 11C0                     u1570 13E2  
                   u1810 0988                     u1395 14B6                     u1396 14B8  
                   u1580 142E                     u1740 1390                     u1820 0AA4  
                   u1590 1430                     u1910 0CDC                     u1750 0922  
                   u1840 0AC6                     u1760 0924                     u1841 0AC4  
                   u1930 0D8A                     u1850 0AD4                     u1940 0D8C  
                   u1860 0AD8                     u1790 0962                     u1880 0AE4  
                   i1l42 0062                     i1l45 00A8                     i1l47 00B2  
                   _TMR0 000FD6             __CFG_PWRT$ON 000000                     abs@a 0016  
                   _dbuf 0082                     _atoi 0C84                     _main 0FCC  
                   _dtoa 08FA                     _prec 0069                     _nout 0080  
                   pad@i 001B                     pad@p 0018                     fsr1h 000FE2  
                   fsr2h 000FDA                     indf1 000FE7                     indf2 000FDF  
                   fsr1l 000FE1                     pad@w 001D                     fsr2l 000FD9  
                   btemp 0075                     prodh 000FF4                     prodl 000FF3  
                   start 00C2            __CFG_IESO$OFF 000000            __CFG_MCLRE$ON 000000  
           ___param_bank 000000                    ??_abs 0018                    ??_pad 001A  
        __end_of___aodiv 0C84                    ?_atoi 000B                    ?_main 0001  
                  ?_dtoa 001F          __end_of___aomod 0EE8                    _T0CON 000FD5  
                  _T1CON 000FCD             vfpfcnvrt@fmt 0045                    _TMR1H 000FCF  
                  _TMR1L 000FCE                    _TRISD 000F95            __CFG_WRT0$OFF 000000  
          __CFG_WRT1$OFF 000000            __CFG_WRT2$OFF 000000            __CFG_WRT3$OFF 000000  
         __CFG_EBTR0$OFF 000000           __CFG_FCMEN$OFF 000000           __CFG_EBTR1$OFF 000000  
         __CFG_EBTR2$OFF 000000           __CFG_EBTR3$OFF 000000          __end_of_lcd_cmd 0FCC  
        __end_of_lcd_ini 123A            __CFG_WRTB$OFF 000000            __CFG_WRTC$OFF 000000  
          __CFG_WRTD$OFF 000000           __CFG_EBTRB$OFF 000000                    _flags 006B  
                  _fputc 1074                    _fputs 139C          __end_of_isdigit 1436  
                  atoi@n 0018                    pad@fp 0014                    atoi@s 000B  
                  _width 0067                    _putch 14DE                    dtoa@d 0021  
                  dtoa@i 0041                    dtoa@n 0039                    dtoa@p 0033  
                  dtoa@s 0037                    dtoa@w 0035          __end_of_isspace 139C  
         __CFG_BOREN$OFF 000000          __end_of_set_bit 14DE                    tablat 000FF5  
                  ttemp5 0076                    ttemp6 0079                    ttemp7 007D  
                  status 000FD8                    wtemp8 0076          __end_of_sprintf 135E  
        __initialization 1460             __end_of_atoi 0DC4             __end_of_main 1074  
           __end_of_dtoa 0B3C                   ??_atoi 000D                   ??_main 0067  
                 ??_dtoa 0029            __activetblptr 000002                   _ADCON1 000FC1  
                 ?_fputc 0004                   ?_fputs 000D                   ?_putch 0001  
                 i1l1448 006C                   _INTCON 000FF2            vfpfcnvrt@done 0055  
                 _TMR0IF 007F92                   _TMR1IE 007CE8                   _TMR1IF 007CF0  
         __CFG_XINST$OFF 000000             vfprintf@cfmt 005F                ??___aodiv 0014  
              ??___aomod 0014                   ___wmul 1486           __CFG_STVREN$ON 000000  
       ??_lcd_escreve_bf 000D                   clear_0 1466                   clear_1 1472  
       ??_lcd_envia_byte 0009                   pad@buf 0016                ??_lcd_cmd 0006  
                 dtoa@fp 001F                ??_lcd_ini 0008                   _strlen 1436  
                 fputc@c 0004                   fputs@c 0011                   fputs@i 0012  
                 fputs@s 000D                ??_isdigit 0006             __mediumconst 0000  
              ??_isspace 0006                ??_set_bit 0005                   tblptrh 000FF7  
                 tblptrl 000FF6                   tblptru 000FF8                   putch@c 0001  
       __end_of_vfprintf 130C                ??_sprintf 0067               __accesstop 0080  
__end_of__initialization 1478          __CFG_PBADEN$OFF 000000            ___rparam_used 000001  
         __pcstackCOMRAM 0001            __end_of_fputc 1114            __end_of_fputs 13D4  
          __end_of_putch 14E0                  ??_fputc 0008                  ??_fputs 0011  
                ??_putch 0004               __pbssBANK0 0080                  ?___wmul 0004  
                ?_strlen 0004       __size_of_vfpfcnvrt 02D4                  i1u72_20 003E  
                i1u73_20 005A                  i1u75_20 0084                  i1u76_20 00A0  
             _int_TIMERS 0018                  __Hparam 0000                  __Lparam 0000  
                ___aodiv 0B3C                  ___aomod 0DC4          __size_of___wmul 0026  
              ?_vfprintf 0059              set_bit@comp 0004             __psmallconst 0600  
                __pcinit 1460                  __ramtop 0600                  __ptext0 0FCC  
              _T1_1000ms 0071                  __ptext1 130C                  __ptext2 12B6  
                __ptext3 0626                  __ptext4 08FA                  __ptext5 1114  
                __ptext6 1436                  __ptext7 139C                  __ptext8 1074  
                __ptext9 14DE                  _lcd_cmd 0EE8                  _lcd_ini 11AA  
        __size_of_strlen 002A             __size_of_abs 0032             __size_of_pad 0096  
                _isdigit 1406                  _isspace 135E                  _set_bit 14CA  
                atoi@neg 0011                  _sprintf 130C     end_of_initialization 1478  
     lcd_envia_byte@dado 0008                  fputc@fp 0006            __Lmediumconst 0000  
                fputs@fp 000F        __end_of_vfpfcnvrt 08FA                  postdec2 000FDD  
                postinc0 000FEE                  postinc1 000FE6                  postinc2 000FDE  
             ??_vfprintf 005F                  strlen@a 0006                  strlen@s 0004  
              _TRISEbits 000F96               lcd_cmd@cmd 0007              ?_int_TIMERS 0001  
            vfpfcnvrt@ap 0047              vfpfcnvrt@fp 0043              vfpfcnvrt@ll 004D  
         __end_of___wmul 14AC           __end_of_strlen 1460      start_initialization 1460  
            __end_of_abs 1406              __end_of_pad 11AA              vfprintf@fmt 005B  
               ??___wmul 0008         __CFG_LPT1OSC$OFF 000000                 ??_strlen 0006  
            __pbssCOMRAM 0067      __size_of_int_TIMERS 00AA            __pcstackBANK0 00B2  
       ___aodiv@dividend 0004  __size_of_lcd_escreve_bf 007C  __size_of_lcd_envia_byte 001E  
      __CFG_CCP2MX$PORTC 000000                 ?___aodiv 0004                 ?___aomod 0004  
      lcd_escreve_bf@end 000D        lcd_escreve_bf@col 000A        lcd_escreve_bf@lin 000E  
       ___aodiv@quotient 0016        lcd_escreve_bf@str 000B                _bufferLCD 00A2  
            __pintcodelo 0018                 ?_lcd_cmd 0001        __size_of_vfprintf 0056  
               ?_lcd_ini 0001              __smallconst 0600                 ?_isdigit 0004  
               ?_isspace 0004                 ?_set_bit 0004               set_bit@cmd 0005  
               ?_sprintf 0061           __size_of_fputc 00A0           __size_of_fputs 0038  
         __size_of_putch 0002                 _T0_500ms 0073           ___wmul@product 0008  
               _LATDbits 000F8C                 _LATEbits 000F8D         __CFG_WDTPS$32768 000000  
              _vfpfcnvrt 0626        ___wmul@multiplier 0004             ??_int_TIMERS 0001  
               __Hrparam 0000               vfprintf@ap 005D                 __Lrparam 0000  
             vfprintf@fp 0059         __size_of___aodiv 0148         __size_of___aomod 0124  
             ?_vfpfcnvrt 0043          ___aodiv@divisor 000C          ___aodiv@counter 0014  
       __size_of_lcd_cmd 00E4         __size_of_lcd_ini 0090               sprintf@fmt 0063  
               _atoi$740 0013                 _atoi$741 0017                 _atoi$742 0015  
       __size_of_isdigit 0030                 _dtoa$268 0031       __end_of_int_TIMERS 00C2  
         _lcd_escreve_bf 123A         __size_of_isspace 003E                 __ptext10 13D4  
               __ptext11 0DC4                 __ptext20 0EE8                 __ptext12 0B3C  
               __ptext21 14CA                 __ptext13 0C84                 __ptext14 135E  
               __ptext15 1406                 __ptext16 1486                 __ptext17 11AA  
               __ptext18 123A                 __ptext19 14AC         __size_of_set_bit 0014  
         _lcd_envia_byte 14AC                 _conta_t0 006F                 _conta_t1 006D  
       __size_of_sprintf 0052            __size_of_atoi 0140            __size_of_main 00A8  
          __size_of_dtoa 0242                 int$flags 0075                 lcd_ini@i 0009  
               _vfprintf 12B6              _isspace$758 000A         ___aomod@dividend 0004  
 __end_of_lcd_escreve_bf 12B6   __end_of_lcd_envia_byte 14CA      lcd_envia_byte@nivel 0009  
               isdigit@c 0004                 intlevel1 0000                sprintf@ap 00B4  
               isspace@c 0004          ___aomod@divisor 000C              ??_vfpfcnvrt 0049  
          _vfpfcnvrt$283 0057          ___aomod@counter 0014                 sprintf@f 00B6  
               sprintf@s 0061          ?_lcd_escreve_bf 000A          ?_lcd_envia_byte 0008  
           ___aodiv@sign 0015             ___aomod@sign 0015  
