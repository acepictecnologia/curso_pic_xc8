

Microchip MPLAB XC8 Assembler V2.05 build -831301201 
                                                                                               Fri Apr 19 15:37:31 2019

Microchip MPLAB XC8 C Compiler v2.05 (Free license) build 20181220022703 Og1 
     1                           	processor	18F4520
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	flic
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
     9                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    10                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    11                           	psect	text0,global,reloc=2,class=CODE,delta=1
    12                           	psect	text1,global,reloc=2,class=CODE,delta=1,group=2
    13                           	psect	text2,global,reloc=2,class=CODE,delta=1
    14                           	psect	text3,global,reloc=2,class=CODE,delta=1
    15                           	psect	text4,global,reloc=2,class=CODE,delta=1
    16                           	psect	text5,global,reloc=2,class=CODE,delta=1
    17                           	psect	text6,global,reloc=2,class=CODE,delta=1,group=2
    18                           	psect	text7,global,reloc=2,class=CODE,delta=1,group=2
    19                           	psect	text8,global,reloc=2,class=CODE,delta=1,group=2
    20                           	psect	text9,global,reloc=2,class=CODE,delta=1,group=2
    21                           	psect	text10,global,reloc=2,class=CODE,delta=1,group=2
    22                           	psect	text11,global,reloc=2,class=CODE,delta=1,group=1
    23                           	psect	text12,global,reloc=2,class=CODE,delta=1,group=1
    24                           	psect	text13,global,reloc=2,class=CODE,delta=1,group=2
    25                           	psect	text14,global,reloc=2,class=CODE,delta=1,group=2
    26                           	psect	text15,global,reloc=2,class=CODE,delta=1,group=2
    27                           	psect	text16,global,reloc=2,class=CODE,delta=1,group=1
    28                           	psect	text17,global,reloc=2,class=CODE,delta=1
    29                           	psect	text18,global,reloc=2,class=CODE,delta=1
    30                           	psect	text19,global,reloc=2,class=CODE,delta=1
    31                           	psect	text20,global,reloc=2,class=CODE,delta=1
    32                           	psect	text21,global,reloc=2,class=CODE,delta=1
    33                           	psect	intcodelo,global,reloc=2,class=CODE,delta=1
    34                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    35                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    36                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    37  0000                     
    38                           ; Version 2.05
    39                           ; Generated 20/12/2018 GMT
    40                           ; 
    41                           ; Copyright Â© 2018, Microchip Technology Inc. and its subsidiaries ("Microchip")
    42                           ; All rights reserved.
    43                           ; 
    44                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    45                           ; 
    46                           ; Redistribution and use in source and binary forms, with or without modification, are
    47                           ; permitted provided that the following conditions are met:
    48                           ; 
    49                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    50                           ;        conditions and the following disclaimer.
    51                           ; 
    52                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    53                           ;        of conditions and the following disclaimer in the documentation and/or other
    54                           ;        materials provided with the distribution.
    55                           ; 
    56                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    57                           ;        software without specific prior written permission.
    58                           ; 
    59                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    60                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    61                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    62                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    63                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    64                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    65                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    66                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    67                           ; 
    68                           ; 
    69                           ; Code-generator required, PIC18F4520 Definitions
    70                           ; 
    71                           ; SFR Addresses
    72  0000                     _TMR0	set	4054
    73  0000                     _LATDbits	set	3980
    74  0000                     _LATEbits	set	3981
    75  0000                     _LATD	set	3980
    76  0000                     _TRISEbits	set	3990
    77  0000                     _TRISD	set	3989
    78  0000                     _T0CON	set	4053
    79  0000                     _INTCON	set	4082
    80  0000                     _ADCON1	set	4033
    81  0000                     _PORTBbits	set	3969
    82  0000                     _TRISBbits	set	3987
    83  0000                     _TMR0IF	set	32658
    84                           
    85                           	psect	smallconst
    86  000600                     __psmallconst:
    87                           	opt callstack 0
    88  000600  00                 	db	0
    89  000601                     STR_2:
    90  000601  43                 	db	67	;'C'
    91  000602  4F                 	db	79	;'O'
    92  000603  4E                 	db	78	;'N'
    93  000604  54                 	db	84	;'T'
    94  000605  41                 	db	65	;'A'
    95  000606  47                 	db	71	;'G'
    96  000607  45                 	db	69	;'E'
    97  000608  4D                 	db	77	;'M'
    98  000609  3A                 	db	58	;':'
    99  00060A  20                 	db	32
   100  00060B  30                 	db	48	;'0'
   101  00060C  30                 	db	48	;'0'
   102  00060D  30                 	db	48	;'0'
   103  00060E  00                 	db	0
   104  00060F                     STR_1:
   105  00060F  54                 	db	84	;'T'
   106  000610  49                 	db	73	;'I'
   107  000611  4D                 	db	77	;'M'
   108  000612  45                 	db	69	;'E'
   109  000613  52                 	db	82	;'R'
   110  000614  30                 	db	48	;'0'
   111  000615  00                 	db	0
   112  000616                     STR_3:
   113  000616  25                 	db	37
   114  000617  30                 	db	48	;'0'
   115  000618  33                 	db	51	;'3'
   116  000619  64                 	db	100	;'d'
   117  00061A  00                 	db	0
   118                           
   119                           ; #config settings
   120  00061B  00                 	db	0	; dummy byte at the end
   121  0000                     
   122                           	psect	cinit
   123  001448                     __pcinit:
   124                           	opt callstack 0
   125  001448                     start_initialization:
   126                           	opt callstack 0
   127  001448                     __initialization:
   128                           	opt callstack 0
   129                           
   130                           ; Clear objects allocated to BANK0 (48 bytes)
   131  001448  EE00  F080         	lfsr	0,__pbssBANK0
   132  00144C  0E30               	movlw	48
   133  00144E                     clear_0:
   134  00144E  6AEE               	clrf	postinc0,c
   135  001450  06E8               	decf	wreg,f,c
   136  001452  E1FD               	bnz	clear_0
   137                           
   138                           ; Clear objects allocated to COMRAM (12 bytes)
   139  001454  EE00  F069         	lfsr	0,__pbssCOMRAM
   140  001458  0E0C               	movlw	12
   141  00145A                     clear_1:
   142  00145A  6AEE               	clrf	postinc0,c
   143  00145C  06E8               	decf	wreg,f,c
   144  00145E  E1FD               	bnz	clear_1
   145  001460                     end_of_initialization:
   146                           	opt callstack 0
   147  001460                     __end_of__initialization:
   148                           	opt callstack 0
   149  001460  9075               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   150  001462  9275               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   151  001464  0E00               	movlw	low (__Lmediumconst shr (0+16))
   152  001466  6EF8               	movwf	tblptru,c
   153  001468  0100               	movlb	0
   154  00146A  EF31  F008         	goto	_main	;jump to C main() function
   155                           
   156                           	psect	bssCOMRAM
   157  000069                     __pbssCOMRAM:
   158                           	opt callstack 0
   159  000069                     _nout:
   160                           	opt callstack 0
   161  000069                     	ds	2
   162  00006B                     _width:
   163                           	opt callstack 0
   164  00006B                     	ds	2
   165  00006D                     _prec:
   166                           	opt callstack 0
   167  00006D                     	ds	2
   168  00006F                     _flags:
   169                           	opt callstack 0
   170  00006F                     	ds	2
   171  000071                     _T0_1000:
   172                           	opt callstack 0
   173  000071                     	ds	2
   174  000073                     _conta:
   175                           	opt callstack 0
   176  000073                     	ds	2
   177                           
   178                           	psect	bssBANK0
   179  000080                     __pbssBANK0:
   180                           	opt callstack 0
   181  000080                     _dbuf:
   182                           	opt callstack 0
   183  000080                     	ds	32
   184  0000A0                     _bufferLCD:
   185                           	opt callstack 0
   186  0000A0                     	ds	16
   187                           
   188                           	psect	cstackBANK0
   189  0000B0                     __pcstackBANK0:
   190                           	opt callstack 0
   191  0000B0                     	ds	2
   192  0000B2                     sprintf@ap:
   193                           	opt callstack 0
   194                           
   195                           ; 2 bytes @ 0x2
   196  0000B2                     	ds	2
   197  0000B4                     sprintf@f:
   198                           	opt callstack 0
   199                           
   200                           ; 6 bytes @ 0x4
   201  0000B4                     	ds	6
   202                           
   203                           	psect	cstackCOMRAM
   204  000001                     __pcstackCOMRAM:
   205                           	opt callstack 0
   206  000001                     ??_int_TMR0:
   207  000001                     
   208                           ; 1 bytes @ 0x0
   209  000001                     	ds	3
   210  000004                     ?_strlen:
   211                           	opt callstack 0
   212  000004                     ?_isdigit:
   213                           	opt callstack 0
   214  000004                     ?_isspace:
   215                           	opt callstack 0
   216  000004                     ?___wmul:
   217                           	opt callstack 0
   218  000004                     ?___aodiv:
   219                           	opt callstack 0
   220  000004                     ?___aomod:
   221                           	opt callstack 0
   222  000004                     set_bit@comp:
   223                           	opt callstack 0
   224  000004                     ___wmul@multiplier:
   225                           	opt callstack 0
   226  000004                     isdigit@c:
   227                           	opt callstack 0
   228  000004                     isspace@c:
   229                           	opt callstack 0
   230  000004                     fputc@c:
   231                           	opt callstack 0
   232  000004                     strlen@s:
   233                           	opt callstack 0
   234  000004                     ___aodiv@dividend:
   235                           	opt callstack 0
   236  000004                     ___aomod@dividend:
   237                           	opt callstack 0
   238                           
   239                           ; 8 bytes @ 0x3
   240  000004                     	ds	1
   241  000005                     set_bit@cmd:
   242                           	opt callstack 0
   243                           
   244                           ; 1 bytes @ 0x4
   245  000005                     	ds	1
   246  000006                     ??_lcd_cmd:
   247  000006                     ??_isdigit:
   248  000006                     ??_isspace:
   249  000006                     ___wmul@multiplicand:
   250                           	opt callstack 0
   251  000006                     fputc@fp:
   252                           	opt callstack 0
   253  000006                     strlen@a:
   254                           	opt callstack 0
   255                           
   256                           ; 2 bytes @ 0x5
   257  000006                     	ds	1
   258  000007                     lcd_cmd@cmd:
   259                           	opt callstack 0
   260                           
   261                           ; 1 bytes @ 0x6
   262  000007                     	ds	1
   263  000008                     ??_lcd_ini:
   264  000008                     ??_fputc:
   265  000008                     lcd_envia_byte@dado:
   266                           	opt callstack 0
   267  000008                     ___wmul@product:
   268                           	opt callstack 0
   269                           
   270                           ; 2 bytes @ 0x7
   271  000008                     	ds	1
   272  000009                     lcd_ini@i:
   273                           	opt callstack 0
   274  000009                     lcd_envia_byte@nivel:
   275                           	opt callstack 0
   276                           
   277                           ; 1 bytes @ 0x8
   278  000009                     	ds	1
   279  00000A                     lcd_escreve_bf@col:
   280                           	opt callstack 0
   281  00000A                     _isspace$879:
   282                           	opt callstack 0
   283                           
   284                           ; 1 bytes @ 0x9
   285  00000A                     	ds	1
   286  00000B                     ?_atoi:
   287                           	opt callstack 0
   288  00000B                     lcd_escreve_bf@str:
   289                           	opt callstack 0
   290  00000B                     atoi@s:
   291                           	opt callstack 0
   292                           
   293                           ; 2 bytes @ 0xA
   294  00000B                     	ds	1
   295  00000C                     ___aodiv@divisor:
   296                           	opt callstack 0
   297  00000C                     ___aomod@divisor:
   298                           	opt callstack 0
   299                           
   300                           ; 8 bytes @ 0xB
   301  00000C                     	ds	1
   302  00000D                     ??_atoi:
   303  00000D                     lcd_escreve_bf@end:
   304                           	opt callstack 0
   305  00000D                     fputs@s:
   306                           	opt callstack 0
   307                           
   308                           ; 2 bytes @ 0xC
   309  00000D                     	ds	1
   310  00000E                     lcd_escreve_bf@lin:
   311                           	opt callstack 0
   312                           
   313                           ; 1 bytes @ 0xD
   314  00000E                     	ds	1
   315  00000F                     fputs@fp:
   316                           	opt callstack 0
   317                           
   318                           ; 2 bytes @ 0xE
   319  00000F                     	ds	2
   320  000011                     fputs@c:
   321                           	opt callstack 0
   322  000011                     atoi@neg:
   323                           	opt callstack 0
   324                           
   325                           ; 2 bytes @ 0x10
   326  000011                     	ds	1
   327  000012                     fputs@i:
   328                           	opt callstack 0
   329                           
   330                           ; 2 bytes @ 0x11
   331  000012                     	ds	1
   332  000013                     _atoi$861:
   333                           	opt callstack 0
   334                           
   335                           ; 2 bytes @ 0x12
   336  000013                     	ds	1
   337  000014                     ?_pad:
   338                           	opt callstack 0
   339  000014                     ___aodiv@counter:
   340                           	opt callstack 0
   341  000014                     ___aomod@counter:
   342                           	opt callstack 0
   343  000014                     pad@fp:
   344                           	opt callstack 0
   345                           
   346                           ; 2 bytes @ 0x13
   347  000014                     	ds	1
   348  000015                     ___aodiv@sign:
   349                           	opt callstack 0
   350  000015                     ___aomod@sign:
   351                           	opt callstack 0
   352  000015                     _atoi$863:
   353                           	opt callstack 0
   354                           
   355                           ; 2 bytes @ 0x14
   356  000015                     	ds	1
   357  000016                     ?_abs:
   358                           	opt callstack 0
   359  000016                     pad@buf:
   360                           	opt callstack 0
   361  000016                     abs@a:
   362                           	opt callstack 0
   363  000016                     ___aodiv@quotient:
   364                           	opt callstack 0
   365                           
   366                           ; 8 bytes @ 0x15
   367  000016                     	ds	1
   368  000017                     _atoi$862:
   369                           	opt callstack 0
   370                           
   371                           ; 1 bytes @ 0x16
   372  000017                     	ds	1
   373  000018                     ??_abs:
   374  000018                     pad@p:
   375                           	opt callstack 0
   376  000018                     atoi@n:
   377                           	opt callstack 0
   378                           
   379                           ; 2 bytes @ 0x17
   380  000018                     	ds	2
   381  00001A                     ??_pad:
   382                           
   383                           ; 1 bytes @ 0x19
   384  00001A                     	ds	1
   385  00001B                     pad@i:
   386                           	opt callstack 0
   387                           
   388                           ; 2 bytes @ 0x1A
   389  00001B                     	ds	2
   390  00001D                     pad@w:
   391                           	opt callstack 0
   392                           
   393                           ; 2 bytes @ 0x1C
   394  00001D                     	ds	2
   395  00001F                     ?_dtoa:
   396                           	opt callstack 0
   397  00001F                     dtoa@fp:
   398                           	opt callstack 0
   399                           
   400                           ; 2 bytes @ 0x1E
   401  00001F                     	ds	2
   402  000021                     dtoa@d:
   403                           	opt callstack 0
   404                           
   405                           ; 8 bytes @ 0x20
   406  000021                     	ds	8
   407  000029                     ??_dtoa:
   408                           
   409                           ; 1 bytes @ 0x28
   410  000029                     	ds	8
   411  000031                     _dtoa$389:
   412                           	opt callstack 0
   413                           
   414                           ; 2 bytes @ 0x30
   415  000031                     	ds	2
   416  000033                     dtoa@p:
   417                           	opt callstack 0
   418                           
   419                           ; 2 bytes @ 0x32
   420  000033                     	ds	2
   421  000035                     dtoa@w:
   422                           	opt callstack 0
   423                           
   424                           ; 2 bytes @ 0x34
   425  000035                     	ds	2
   426  000037                     dtoa@s:
   427                           	opt callstack 0
   428                           
   429                           ; 2 bytes @ 0x36
   430  000037                     	ds	2
   431  000039                     dtoa@n:
   432                           	opt callstack 0
   433                           
   434                           ; 8 bytes @ 0x38
   435  000039                     	ds	8
   436  000041                     dtoa@i:
   437                           	opt callstack 0
   438                           
   439                           ; 2 bytes @ 0x40
   440  000041                     	ds	2
   441  000043                     ?_vfpfcnvrt:
   442                           	opt callstack 0
   443  000043                     vfpfcnvrt@fp:
   444                           	opt callstack 0
   445                           
   446                           ; 2 bytes @ 0x42
   447  000043                     	ds	2
   448  000045                     vfpfcnvrt@fmt:
   449                           	opt callstack 0
   450                           
   451                           ; 2 bytes @ 0x44
   452  000045                     	ds	2
   453  000047                     vfpfcnvrt@ap:
   454                           	opt callstack 0
   455                           
   456                           ; 2 bytes @ 0x46
   457  000047                     	ds	2
   458  000049                     ??_vfpfcnvrt:
   459                           
   460                           ; 1 bytes @ 0x48
   461  000049                     	ds	4
   462  00004D                     vfpfcnvrt@ll:
   463                           	opt callstack 0
   464                           
   465                           ; 8 bytes @ 0x4C
   466  00004D                     	ds	8
   467  000055                     vfpfcnvrt@done:
   468                           	opt callstack 0
   469                           
   470                           ; 2 bytes @ 0x54
   471  000055                     	ds	2
   472  000057                     _vfpfcnvrt$404:
   473                           	opt callstack 0
   474                           
   475                           ; 2 bytes @ 0x56
   476  000057                     	ds	2
   477  000059                     ?_vfprintf:
   478                           	opt callstack 0
   479  000059                     vfprintf@fp:
   480                           	opt callstack 0
   481                           
   482                           ; 2 bytes @ 0x58
   483  000059                     	ds	2
   484  00005B                     vfprintf@fmt:
   485                           	opt callstack 0
   486                           
   487                           ; 2 bytes @ 0x5A
   488  00005B                     	ds	2
   489  00005D                     vfprintf@ap:
   490                           	opt callstack 0
   491                           
   492                           ; 2 bytes @ 0x5C
   493  00005D                     	ds	2
   494  00005F                     vfprintf@cfmt:
   495                           	opt callstack 0
   496                           
   497                           ; 2 bytes @ 0x5E
   498  00005F                     	ds	2
   499  000061                     ?_sprintf:
   500                           	opt callstack 0
   501  000061                     sprintf@s:
   502                           	opt callstack 0
   503                           
   504                           ; 2 bytes @ 0x60
   505  000061                     	ds	2
   506  000063                     sprintf@fmt:
   507                           	opt callstack 0
   508                           
   509                           ; 2 bytes @ 0x62
   510  000063                     	ds	4
   511  000067                     ??_main:
   512                           
   513                           ; 1 bytes @ 0x66
   514  000067                     	ds	2
   515                           
   516 ;;
   517 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   518 ;;
   519 ;; *************** function _main *****************
   520 ;; Defined at:
   521 ;;		line 35 in file "EX12.c"
   522 ;; Parameters:    Size  Location     Type
   523 ;;		None
   524 ;; Auto vars:     Size  Location     Type
   525 ;;		None
   526 ;; Return value:  Size  Location     Type
   527 ;;                  1    wreg      void 
   528 ;; Registers used:
   529 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   530 ;; Tracked objects:
   531 ;;		On entry : 0/0
   532 ;;		On exit  : 0/0
   533 ;;		Unchanged: 0/0
   534 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   535 ;;      Params:         0       0       0       0       0       0       0
   536 ;;      Locals:         0       0       0       0       0       0       0
   537 ;;      Temps:          2       0       0       0       0       0       0
   538 ;;      Totals:         2       0       0       0       0       0       0
   539 ;;Total ram usage:        2 bytes
   540 ;; Hardware stack levels required when called:    9
   541 ;; This function calls:
   542 ;;		_lcd_escreve_bf
   543 ;;		_lcd_ini
   544 ;;		_sprintf
   545 ;; This function is called by:
   546 ;;		Startup code after reset
   547 ;; This function uses a non-reentrant model
   548 ;;
   549                           
   550                           	psect	text0
   551  001062                     __ptext0:
   552                           	opt callstack 0
   553  001062                     _main:
   554                           	opt callstack 22
   555                           
   556                           ;EX12.c: 36:     TRISBbits.TRISB0 = 0;
   557                           
   558                           ;incstack = 0
   559  001062  9093               	bcf	3987,0,c	;volatile
   560                           
   561                           ;EX12.c: 37:     PORTBbits.RB0 = 0;
   562  001064  9081               	bcf	3969,0,c	;volatile
   563                           
   564                           ;EX12.c: 38:     ADCON1 = 0x0F;
   565  001066  0E0F               	movlw	15
   566  001068  6EC1               	movwf	4033,c	;volatile
   567                           
   568                           ;EX12.c: 40:     INTCON = 0b10100000;
   569  00106A  0EA0               	movlw	160
   570  00106C  6EF2               	movwf	4082,c	;volatile
   571                           
   572                           ;EX12.c: 50:     T0CON = 0b11000111;
   573  00106E  0EC7               	movlw	199
   574  001070  6ED5               	movwf	4053,c	;volatile
   575                           
   576                           ;EX12.c: 58:     TMR0 = 61;
   577  001072  0E00               	movlw	0
   578  001074  6ED7               	movwf	4055,c	;volatile
   579  001076  0E3D               	movlw	61
   580  001078  6ED6               	movwf	4054,c	;volatile
   581                           
   582                           ;EX12.c: 61:     lcd_ini();
   583  00107A  ECCB  F008         	call	_lcd_ini	;wreg free
   584                           
   585                           ;EX12.c: 64:     lcd_escreve_bf(1, 6, "TIMER0");
   586  00107E  0E06               	movlw	6
   587  001080  6E0A               	movwf	lcd_escreve_bf@col,c
   588  001082  0E0F               	movlw	low STR_1
   589  001084  6E0B               	movwf	lcd_escreve_bf@str,c
   590  001086  0E06               	movlw	high STR_1
   591  001088  6E0C               	movwf	lcd_escreve_bf@str+1,c
   592  00108A  0E01               	movlw	1
   593  00108C  EC13  F009         	call	_lcd_escreve_bf
   594                           
   595                           ;EX12.c: 67:     lcd_escreve_bf(2, 3, "CONTAGEM: 000");
   596  001090  0E03               	movlw	3
   597  001092  6E0A               	movwf	lcd_escreve_bf@col,c
   598  001094  0E01               	movlw	low STR_2
   599  001096  6E0B               	movwf	lcd_escreve_bf@str,c
   600  001098  0E06               	movlw	high STR_2
   601  00109A  6E0C               	movwf	lcd_escreve_bf@str+1,c
   602  00109C  0E02               	movlw	2
   603  00109E  EC13  F009         	call	_lcd_escreve_bf
   604  0010A2                     l2387:
   605                           
   606                           ;EX12.c: 70:     {;EX12.c: 71:         _delay((unsigned long)((500)*(8000000/4000.0)));
   607  0010A2  0E06               	movlw	6
   608  0010A4  6E68               	movwf	(??_main+1)& (0+255),c
   609  0010A6  0E13               	movlw	19
   610  0010A8  6E67               	movwf	??_main& (0+255),c
   611  0010AA  0EAE               	movlw	174
   612  0010AC                     u2097:
   613  0010AC  2EE8               	decfsz	wreg,f,c
   614  0010AE  D7FE               	bra	u2097
   615  0010B0  2E67               	decfsz	??_main& (0+255),f,c
   616  0010B2  D7FC               	bra	u2097
   617  0010B4  2E68               	decfsz	(??_main+1)& (0+255),f,c
   618  0010B6  D7FA               	bra	u2097
   619                           
   620                           ;EX12.c: 73:         PORTBbits.RB0 = ~PORTBbits.RB0;
   621  0010B8  A081               	btfss	3969,0,c	;volatile
   622  0010BA  D002               	goto	u2080
   623  0010BC  0E01               	movlw	1
   624  0010BE  D001               	goto	u2086
   625  0010C0                     u2080:
   626  0010C0  0E00               	movlw	0
   627  0010C2                     u2086:
   628  0010C2  0AFF               	xorlw	255
   629  0010C4  6E67               	movwf	??_main& (0+255),c
   630  0010C6  5081               	movf	3969,w,c	;volatile
   631  0010C8  1867               	xorwf	??_main,w,c
   632  0010CA  0BFE               	andlw	-2
   633  0010CC  1867               	xorwf	??_main,w,c
   634  0010CE  6E81               	movwf	3969,c	;volatile
   635                           
   636                           ;EX12.c: 76:         sprintf(bufferLCD, "%03d", conta);
   637  0010D0  0EA0               	movlw	low _bufferLCD
   638  0010D2  6E61               	movwf	sprintf@s,c
   639  0010D4  0E00               	movlw	high _bufferLCD
   640  0010D6  6E62               	movwf	sprintf@s+1,c
   641  0010D8  0E16               	movlw	low STR_3
   642  0010DA  6E63               	movwf	sprintf@fmt,c
   643  0010DC  0E06               	movlw	high STR_3
   644  0010DE  6E64               	movwf	sprintf@fmt+1,c
   645  0010E0  C073  F065         	movff	_conta,?_sprintf+4
   646  0010E4  C074  F066         	movff	_conta+1,?_sprintf+5
   647  0010E8  EC51  F009         	call	_sprintf	;wreg free
   648                           
   649                           ;EX12.c: 79:         lcd_escreve_bf(2, 13, bufferLCD);
   650  0010EC  0E0D               	movlw	13
   651  0010EE  6E0A               	movwf	lcd_escreve_bf@col,c
   652  0010F0  0EA0               	movlw	low _bufferLCD
   653  0010F2  6E0B               	movwf	lcd_escreve_bf@str,c
   654  0010F4  0E00               	movlw	high _bufferLCD
   655  0010F6  6E0C               	movwf	lcd_escreve_bf@str+1,c
   656  0010F8  0E02               	movlw	2
   657  0010FA  EC13  F009         	call	_lcd_escreve_bf
   658  0010FE  D7D1               	goto	l2387
   659  001100                     __end_of_main:
   660                           	opt callstack 0
   661                           
   662 ;; *************** function _sprintf *****************
   663 ;; Defined at:
   664 ;;		line 9 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\nf_sprintf.c"
   665 ;; Parameters:    Size  Location     Type
   666 ;;  s               2   96[COMRAM] PTR unsigned char 
   667 ;;		 -> bufferLCD(16), 
   668 ;;  fmt             2   98[COMRAM] PTR const unsigned char 
   669 ;;		 -> STR_3(5), 
   670 ;; Auto vars:     Size  Location     Type
   671 ;;  f               6    4[BANK0 ] struct _IO_FILE
   672 ;;  ap              2    2[BANK0 ] PTR void [1]
   673 ;;		 -> ?_sprintf(2), 
   674 ;;  ret             2    0        int 
   675 ;; Return value:  Size  Location     Type
   676 ;;                  2   96[COMRAM] int 
   677 ;; Registers used:
   678 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   679 ;; Tracked objects:
   680 ;;		On entry : 0/0
   681 ;;		On exit  : 0/0
   682 ;;		Unchanged: 0/0
   683 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   684 ;;      Params:         6       0       0       0       0       0       0
   685 ;;      Locals:         0      10       0       0       0       0       0
   686 ;;      Temps:          0       0       0       0       0       0       0
   687 ;;      Totals:         6      10       0       0       0       0       0
   688 ;;Total ram usage:       16 bytes
   689 ;; Hardware stack levels used:    1
   690 ;; Hardware stack levels required when called:    8
   691 ;; This function calls:
   692 ;;		_vfprintf
   693 ;; This function is called by:
   694 ;;		_main
   695 ;; This function uses a non-reentrant model
   696 ;;
   697                           
   698                           	psect	text1
   699  0012A2                     __ptext1:
   700                           	opt callstack 0
   701  0012A2                     _sprintf:
   702                           	opt callstack 22
   703                           
   704                           ;incstack = 0
   705  0012A2  0E65               	movlw	low (?_sprintf+4)
   706  0012A4  0100               	movlb	0	; () banked
   707  0012A6  6FB2               	movwf	sprintf@ap& (0+255),b
   708  0012A8  0E00               	movlw	high (?_sprintf+4)
   709  0012AA  6FB3               	movwf	(sprintf@ap+1)& (0+255),b
   710  0012AC  C061  F0B4         	movff	sprintf@s,sprintf@f
   711  0012B0  C062  F0B5         	movff	sprintf@s+1,sprintf@f+1
   712                           
   713                           ; BSR set to: 0
   714  0012B4  0E00               	movlw	0
   715  0012B6  6FB7               	movwf	(sprintf@f+3)& (0+255),b
   716  0012B8  0E00               	movlw	0
   717  0012BA  6FB6               	movwf	(sprintf@f+2)& (0+255),b
   718                           
   719                           ; BSR set to: 0
   720  0012BC  0E00               	movlw	0
   721  0012BE  6FB9               	movwf	(sprintf@f+5)& (0+255),b
   722  0012C0  0E00               	movlw	0
   723  0012C2  6FB8               	movwf	(sprintf@f+4)& (0+255),b
   724                           
   725                           ; BSR set to: 0
   726  0012C4  0EB4               	movlw	low sprintf@f
   727  0012C6  6E59               	movwf	vfprintf@fp,c
   728  0012C8  0E00               	movlw	high sprintf@f
   729  0012CA  6E5A               	movwf	vfprintf@fp+1,c
   730  0012CC  C063  F05B         	movff	sprintf@fmt,vfprintf@fmt
   731  0012D0  C064  F05C         	movff	sprintf@fmt+1,vfprintf@fmt+1
   732  0012D4  0EB2               	movlw	low sprintf@ap
   733  0012D6  6E5D               	movwf	vfprintf@ap,c
   734  0012D8  0E00               	movlw	high sprintf@ap
   735  0012DA  6E5E               	movwf	vfprintf@ap+1,c
   736  0012DC  EC7A  F009         	call	_vfprintf	;wreg free
   737  0012E0  0100               	movlb	0	; () banked
   738  0012E2  51B6               	movf	(sprintf@f+2)& (0+255),w,b
   739  0012E4  2461               	addwf	sprintf@s,w,c
   740  0012E6  6ED9               	movwf	fsr2l,c
   741  0012E8  51B7               	movf	(sprintf@f+3)& (0+255),w,b
   742  0012EA  2062               	addwfc	sprintf@s+1,w,c
   743  0012EC  6EDA               	movwf	fsr2h,c
   744  0012EE  0E00               	movlw	0
   745  0012F0  6EDF               	movwf	indf2,c
   746                           
   747                           ; BSR set to: 0
   748  0012F2  0012               	return		;funcret
   749  0012F4                     __end_of_sprintf:
   750                           	opt callstack 0
   751                           
   752 ;; *************** function _vfprintf *****************
   753 ;; Defined at:
   754 ;;		line 1368 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c"
   755 ;; Parameters:    Size  Location     Type
   756 ;;  fp              2   88[COMRAM] PTR struct _IO_FILE
   757 ;;		 -> sprintf@f(6), 
   758 ;;  fmt             2   90[COMRAM] PTR const unsigned char 
   759 ;;		 -> STR_3(5), 
   760 ;;  ap              2   92[COMRAM] PTR PTR void 
   761 ;;		 -> sprintf@ap(2), 
   762 ;; Auto vars:     Size  Location     Type
   763 ;;  cfmt            2   94[COMRAM] PTR unsigned char 
   764 ;;		 -> STR_3(5), 
   765 ;; Return value:  Size  Location     Type
   766 ;;                  2   88[COMRAM] int 
   767 ;; Registers used:
   768 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   769 ;; Tracked objects:
   770 ;;		On entry : 0/0
   771 ;;		On exit  : 0/0
   772 ;;		Unchanged: 0/0
   773 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   774 ;;      Params:         6       0       0       0       0       0       0
   775 ;;      Locals:         2       0       0       0       0       0       0
   776 ;;      Temps:          0       0       0       0       0       0       0
   777 ;;      Totals:         8       0       0       0       0       0       0
   778 ;;Total ram usage:        8 bytes
   779 ;; Hardware stack levels used:    1
   780 ;; Hardware stack levels required when called:    7
   781 ;; This function calls:
   782 ;;		_vfpfcnvrt
   783 ;; This function is called by:
   784 ;;		_sprintf
   785 ;; This function uses a non-reentrant model
   786 ;;
   787                           
   788                           	psect	text2
   789  0012F4                     __ptext2:
   790                           	opt callstack 0
   791  0012F4                     _vfprintf:
   792                           	opt callstack 22
   793                           
   794                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1368: int v
      +                          fprintf(FILE *fp, const char *fmt, va_list ap);C:\Program Files (x86)\Microchip\xc8\v2.0
      +                          5\pic\sources\c99\common\doprnt.c: 1369: {;C:\Program Files (x86)\Microchip\xc8\v2.05\pi
      +                          c\sources\c99\common\doprnt.c: 1371:     char *cfmt;;C:\Program Files (x86)\Microchip\xc
      +                          8\v2.05\pic\sources\c99\common\doprnt.c: 1373:     cfmt = (char *)fmt;
   795                           
   796                           ; BSR set to: 0
   797                           ;incstack = 0
   798  0012F4  C05B  F05F         	movff	vfprintf@fmt,vfprintf@cfmt
   799  0012F8  C05C  F060         	movff	vfprintf@fmt+1,vfprintf@cfmt+1
   800                           
   801                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1374:     n
      +                          out = 0;
   802  0012FC  0E00               	movlw	0
   803  0012FE  6E6A               	movwf	_nout+1,c
   804  001300  0E00               	movlw	0
   805  001302  6E69               	movwf	_nout,c
   806                           
   807                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1375:     w
      +                          hile (*cfmt) {
   808  001304  D012               	goto	l2363
   809  001306                     l2361:
   810                           
   811                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1376:      
      +                             nout += vfpfcnvrt(fp, &cfmt, ap);
   812  001306  C059  F043         	movff	vfprintf@fp,vfpfcnvrt@fp
   813  00130A  C05A  F044         	movff	vfprintf@fp+1,vfpfcnvrt@fp+1
   814  00130E  0E5F               	movlw	low vfprintf@cfmt
   815  001310  6E45               	movwf	vfpfcnvrt@fmt,c
   816  001312  0E00               	movlw	high vfprintf@cfmt
   817  001314  6E46               	movwf	vfpfcnvrt@fmt+1,c
   818  001316  C05D  F047         	movff	vfprintf@ap,vfpfcnvrt@ap
   819  00131A  C05E  F048         	movff	vfprintf@ap+1,vfpfcnvrt@ap+1
   820  00131E  EC0E  F003         	call	_vfpfcnvrt	;wreg free
   821  001322  5043               	movf	?_vfpfcnvrt,w,c
   822  001324  2669               	addwf	_nout,f,c
   823  001326  5044               	movf	?_vfpfcnvrt+1,w,c
   824  001328  226A               	addwfc	_nout+1,f,c
   825  00132A                     l2363:
   826                           
   827                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1375:     w
      +                          hile (*cfmt) {
   828  00132A  C05F  FFF6         	movff	vfprintf@cfmt,tblptrl
   829  00132E  C060  FFF7         	movff	vfprintf@cfmt+1,tblptrh
   830  001332                     	if	0	;tblptru may be non-zero
   831  001332                     	endif
   832  001332                     	if	0	;tblptru may be non-zero
   833  001332                     	endif
   834  001332  0008               	tblrd		*
   835  001334  50F5               	movf	tablat,w,c
   836  001336  0900               	iorlw	0
   837  001338  A4D8               	btfss	status,2,c
   838  00133A  D7E5               	goto	l2361
   839                           
   840                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1378:     r
      +                          eturn nout;
   841  00133C  C069  F059         	movff	_nout,?_vfprintf
   842  001340  C06A  F05A         	movff	_nout+1,?_vfprintf+1
   843  001344  0012               	return		;funcret
   844  001346                     __end_of_vfprintf:
   845                           	opt callstack 0
   846                           
   847 ;; *************** function _vfpfcnvrt *****************
   848 ;; Defined at:
   849 ;;		line 670 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c"
   850 ;; Parameters:    Size  Location     Type
   851 ;;  fp              2   66[COMRAM] PTR struct _IO_FILE
   852 ;;		 -> sprintf@f(6), 
   853 ;;  fmt             2   68[COMRAM] PTR PTR unsigned char 
   854 ;;		 -> vfprintf@cfmt(2), 
   855 ;;  ap              2   70[COMRAM] PTR PTR void 
   856 ;;		 -> sprintf@ap(2), 
   857 ;; Auto vars:     Size  Location     Type
   858 ;;  ll              8   76[COMRAM] long long 
   859 ;;  llu             8    0        unsigned long long 
   860 ;;  f               4    0        unsigned long long 
   861 ;;  vp              3    0        PTR void 
   862 ;;  ct              3    0        unsigned char [3]
   863 ;;  cp              3    0        PTR unsigned char 
   864 ;;  done            2   84[COMRAM] int 
   865 ;;  i               2    0        int 
   866 ;;  c               1    0        unsigned char 
   867 ;; Return value:  Size  Location     Type
   868 ;;                  2   66[COMRAM] int 
   869 ;; Registers used:
   870 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   871 ;; Tracked objects:
   872 ;;		On entry : 0/0
   873 ;;		On exit  : 0/0
   874 ;;		Unchanged: 0/0
   875 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   876 ;;      Params:         6       0       0       0       0       0       0
   877 ;;      Locals:        12       0       0       0       0       0       0
   878 ;;      Temps:          4       0       0       0       0       0       0
   879 ;;      Totals:        22       0       0       0       0       0       0
   880 ;;Total ram usage:       22 bytes
   881 ;; Hardware stack levels used:    1
   882 ;; Hardware stack levels required when called:    6
   883 ;; This function calls:
   884 ;;		_atoi
   885 ;;		_dtoa
   886 ;;		_fputc
   887 ;;		_isdigit
   888 ;; This function is called by:
   889 ;;		_vfprintf
   890 ;; This function uses a non-reentrant model
   891 ;;
   892                           
   893                           	psect	text3
   894  00061C                     __ptext3:
   895                           	opt callstack 0
   896  00061C                     _vfpfcnvrt:
   897                           	opt callstack 22
   898                           
   899                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 670: static
      +                           int vfpfcnvrt(FILE *fp, char *fmt[], va_list ap);C:\Program Files (x86)\Microchip\xc8\v
      +                          2.05\pic\sources\c99\common\doprnt.c: 671: {;C:\Program Files (x86)\Microchip\xc8\v2.05\
      +                          pic\sources\c99\common\doprnt.c: 672:     char c, *cp, ct[3];;C:\Program Files (x86)\Mic
      +                          rochip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 673:     int done, i;;C:\Program Files
      +                           (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 674:     long long ll;
   900                           
   901                           ;incstack = 0
   902  00061C  C045  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
   903  000620  C046  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
   904  000624  CFDE FFF6          	movff	postinc2,tblptrl
   905  000628  CFDD FFF7          	movff	postdec2,tblptrh
   906  00062C                     	if	0	;tblptru may be non-zero
   907  00062C                     	endif
   908  00062C                     	if	0	;tblptru may be non-zero
   909  00062C                     	endif
   910  00062C  0008               	tblrd		*
   911  00062E  50F5               	movf	tablat,w,c
   912  000630  0A25               	xorlw	37
   913  000632  A4D8               	btfss	status,2,c
   914  000634  D143               	goto	l2345
   915                           
   916                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 681:       
      +                            ++*fmt;
   917  000636  C045  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
   918  00063A  C046  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
   919  00063E  2ADE               	incf	postinc2,f,c
   920  000640  0E00               	movlw	0
   921  000642  22DD               	addwfc	postdec2,f,c
   922                           
   923                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 683:       
      +                            flags = width = 0;
   924  000644  0E00               	movlw	0
   925  000646  6E6C               	movwf	_width+1,c
   926  000648  0E00               	movlw	0
   927  00064A  6E6B               	movwf	_width,c
   928  00064C  C06B  F06F         	movff	_width,_flags
   929  000650  C06C  F070         	movff	_width+1,_flags+1
   930                           
   931                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 684:       
      +                            prec = -1;
   932  000654  686D               	setf	_prec,c
   933  000656  686E               	setf	_prec+1,c
   934                           
   935                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 688:       
      +                            done = 0;
   936  000658  0E00               	movlw	0
   937  00065A  6E56               	movwf	vfpfcnvrt@done+1,c
   938  00065C  0E00               	movlw	0
   939  00065E  D014               	goto	L1
   940  000660                     l2271:
   941                           
   942                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 692:       
      +                                        flags |= (1 << 0);
   943  000660  806F               	bsf	_flags,0,c
   944  000662                     l2273:
   945                           
   946                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 693:       
      +                                        ++*fmt;
   947  000662  C045  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
   948  000666  C046  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
   949  00066A  2ADE               	incf	postinc2,f,c
   950  00066C  0E00               	movlw	0
   951  00066E  22DD               	addwfc	postdec2,f,c
   952                           
   953                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 694:       
      +                                        break;
   954  000670  D02E               	goto	l2297
   955  000672                     l2275:
   956                           
   957                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 696:       
      +                                        flags |= (1 << 1);
   958  000672  826F               	bsf	_flags,1,c
   959  000674  D7F6               	goto	l2273
   960  000676                     l2279:
   961                           
   962                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 700:       
      +                                        flags |= (1 << 2);
   963  000676  846F               	bsf	_flags,2,c
   964  000678  D7F4               	goto	l2273
   965  00067A                     l2283:
   966                           
   967                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 704:       
      +                                        flags |= (1 << 3);
   968  00067A  866F               	bsf	_flags,3,c
   969  00067C  D7F2               	goto	l2273
   970  00067E                     l2287:
   971                           
   972                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 708:       
      +                                        flags |= (1 << 4);
   973  00067E  886F               	bsf	_flags,4,c
   974  000680  D7F0               	goto	l2273
   975  000682                     l2291:
   976                           
   977                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 712:       
      +                                        done = 1;
   978  000682  0E00               	movlw	0
   979  000684  6E56               	movwf	vfpfcnvrt@done+1,c
   980  000686  0E01               	movlw	1
   981  000688                     L1:
   982  000688  6E55               	movwf	vfpfcnvrt@done,c
   983                           
   984                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 713:       
      +                                        break;
   985  00068A  D021               	goto	l2297
   986  00068C                     l2295:
   987  00068C  C045  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
   988  000690  C046  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
   989  000694  CFDE FFF6          	movff	postinc2,tblptrl
   990  000698  CFDD FFF7          	movff	postdec2,tblptrh
   991  00069C                     	if	0	;tblptru may be non-zero
   992  00069C                     	endif
   993  00069C                     	if	0	;tblptru may be non-zero
   994  00069C                     	endif
   995  00069C  0008               	tblrd		*
   996  00069E  50F5               	movf	tablat,w,c
   997  0006A0  6E49               	movwf	??_vfpfcnvrt& (0+255),c
   998  0006A2  6A4A               	clrf	(??_vfpfcnvrt+1)& (0+255),c
   999                           
  1000                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1001                           ; Switch size 1, requested type "simple"
  1002                           ; Number of cases is 1, Range of values is 0 to 0
  1003                           ; switch strategies available:
  1004                           ; Name         Instructions Cycles
  1005                           ; simple_byte            4     3 (average)
  1006                           ;	Chosen strategy is simple_byte
  1007  0006A4  504A               	movf	??_vfpfcnvrt+1,w,c
  1008  0006A6  0A00               	xorlw	0	; case 0
  1009  0006A8  A4D8               	btfss	status,2,c
  1010  0006AA  D7EB               	goto	l2291
  1011                           
  1012                           ; Switch size 1, requested type "simple"
  1013                           ; Number of cases is 5, Range of values is 32 to 48
  1014                           ; switch strategies available:
  1015                           ; Name         Instructions Cycles
  1016                           ; simple_byte           16     9 (average)
  1017                           ;	Chosen strategy is simple_byte
  1018  0006AC  5049               	movf	??_vfpfcnvrt,w,c
  1019  0006AE  0A20               	xorlw	32	; case 32
  1020  0006B0  B4D8               	btfsc	status,2,c
  1021  0006B2  D7E3               	goto	l2283
  1022  0006B4  0A03               	xorlw	3	; case 35
  1023  0006B6  B4D8               	btfsc	status,2,c
  1024  0006B8  D7E2               	goto	l2287
  1025  0006BA  0A08               	xorlw	8	; case 43
  1026  0006BC  B4D8               	btfsc	status,2,c
  1027  0006BE  D7DB               	goto	l2279
  1028  0006C0  0A06               	xorlw	6	; case 45
  1029  0006C2  B4D8               	btfsc	status,2,c
  1030  0006C4  D7CD               	goto	l2271
  1031  0006C6  0A1D               	xorlw	29	; case 48
  1032  0006C8  B4D8               	btfsc	status,2,c
  1033  0006CA  D7D3               	goto	l2275
  1034  0006CC  D7DA               	goto	l2291
  1035  0006CE                     l2297:
  1036                           
  1037                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 689:       
      +                            while (!done) {
  1038  0006CE  5055               	movf	vfpfcnvrt@done,w,c
  1039  0006D0  1056               	iorwf	vfpfcnvrt@done+1,w,c
  1040  0006D2  B4D8               	btfsc	status,2,c
  1041  0006D4  D7DB               	goto	l2295
  1042                           
  1043                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 716:       
      +                            if (flags & (1 << 0)) {
  1044  0006D6  B06F               	btfsc	_flags,0,c
  1045                           
  1046                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 717:       
      +                                flags &= ~(1 << 1);
  1047  0006D8  926F               	bcf	_flags,1,c
  1048                           
  1049                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 723:       
      +                            if ((*fmt)[0] == '*') {
  1050  0006DA  C045  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1051  0006DE  C046  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1052  0006E2  CFDE FFF6          	movff	postinc2,tblptrl
  1053  0006E6  CFDD FFF7          	movff	postdec2,tblptrh
  1054  0006EA                     	if	0	;tblptru may be non-zero
  1055  0006EA                     	endif
  1056  0006EA                     	if	0	;tblptru may be non-zero
  1057  0006EA                     	endif
  1058  0006EA  0008               	tblrd		*
  1059  0006EC  50F5               	movf	tablat,w,c
  1060  0006EE  0A2A               	xorlw	42
  1061  0006F0  A4D8               	btfss	status,2,c
  1062  0006F2  D023               	goto	l2309
  1063                           
  1064                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 724:       
      +                                ++*fmt;
  1065  0006F4  C045  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1066  0006F8  C046  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1067  0006FC  2ADE               	incf	postinc2,f,c
  1068  0006FE  0E00               	movlw	0
  1069  000700  22DD               	addwfc	postdec2,f,c
  1070                           
  1071                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 725:       
      +                                width = (*(int *)__va_arg(*(int **)ap, (int)0));
  1072  000702  C047  FFD9         	movff	vfpfcnvrt@ap,fsr2l
  1073  000706  C048  FFDA         	movff	vfpfcnvrt@ap+1,fsr2h
  1074  00070A  CFDF F049          	movff	indf2,??_vfpfcnvrt
  1075  00070E  0E02               	movlw	2
  1076  000710  26DE               	addwf	postinc2,f,c
  1077  000712  CFDF F04A          	movff	indf2,??_vfpfcnvrt+1
  1078  000716  0E00               	movlw	0
  1079  000718  22DD               	addwfc	postdec2,f,c
  1080  00071A  C049  FFD9         	movff	??_vfpfcnvrt,fsr2l
  1081  00071E  C04A  FFDA         	movff	??_vfpfcnvrt+1,fsr2h
  1082  000722  CFDE F06B          	movff	postinc2,_width
  1083  000726  CFDD F06C          	movff	postdec2,_width+1
  1084                           
  1085                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 726:       
      +                                if (width < 0) {
  1086  00072A  AE6C               	btfss	_width+1,7,c
  1087  00072C  D03F               	goto	u2030
  1088                           
  1089                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 727:       
      +                                    flags |= (1 << 0);
  1090  00072E  806F               	bsf	_flags,0,c
  1091                           
  1092                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 728:       
      +                                    width = -width;
  1093  000730  6C6B               	negf	_width,c
  1094  000732  1E6C               	comf	_width+1,f,c
  1095  000734  B0D8               	btfsc	status,0,c
  1096  000736  2A6C               	incf	_width+1,f,c
  1097  000738  D039               	goto	u2030
  1098  00073A                     l2309:
  1099                           
  1100                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 731:       
      +                                width = atoi(*fmt);
  1101  00073A  C045  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1102  00073E  C046  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1103  000742  CFDE F00B          	movff	postinc2,atoi@s
  1104  000746  CFDD F00C          	movff	postdec2,atoi@s+1
  1105  00074A  EC3D  F006         	call	_atoi	;wreg free
  1106  00074E  C00B  F06B         	movff	?_atoi,_width
  1107  000752  C00C  F06C         	movff	?_atoi+1,_width+1
  1108                           
  1109                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 732:       
      +                                while ((0 ? isdigit((*fmt)[0]) : ((unsigned)((*fmt)[0])-'0') < 10)) {
  1110  000756  D007               	goto	l2313
  1111  000758                     l2311:
  1112                           
  1113                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 733:       
      +                                    ++*fmt;
  1114  000758  C045  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1115  00075C  C046  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1116  000760  2ADE               	incf	postinc2,f,c
  1117  000762  0E00               	movlw	0
  1118  000764  22DD               	addwfc	postdec2,f,c
  1119  000766                     l2313:
  1120  000766  0ED0               	movlw	208
  1121  000768  6E49               	movwf	??_vfpfcnvrt& (0+255),c
  1122  00076A  0EFF               	movlw	255
  1123  00076C  6E4A               	movwf	(??_vfpfcnvrt+1)& (0+255),c
  1124  00076E  C045  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1125  000772  C046  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1126  000776  CFDE FFF6          	movff	postinc2,tblptrl
  1127  00077A  CFDD FFF7          	movff	postdec2,tblptrh
  1128  00077E                     	if	0	;tblptru may be non-zero
  1129  00077E                     	endif
  1130  00077E                     	if	0	;tblptru may be non-zero
  1131  00077E                     	endif
  1132  00077E  0008               	tblrd		*
  1133  000780  50F5               	movf	tablat,w,c
  1134  000782  6E4B               	movwf	(??_vfpfcnvrt+2)& (0+255),c
  1135  000784  6A4C               	clrf	(??_vfpfcnvrt+3)& (0+255),c
  1136  000786  5049               	movf	??_vfpfcnvrt,w,c
  1137  000788  264B               	addwf	??_vfpfcnvrt+2,f,c
  1138  00078A  504A               	movf	??_vfpfcnvrt+1,w,c
  1139  00078C  224C               	addwfc	??_vfpfcnvrt+3,f,c
  1140  00078E  504C               	movf	??_vfpfcnvrt+3,w,c
  1141  000790  E106               	bnz	u2010
  1142  000792  0E0A               	movlw	10
  1143  000794  5C4B               	subwf	??_vfpfcnvrt+2,w,c
  1144  000796  B0D8               	btfsc	status,0,c
  1145  000798  D002               	goto	u2010
  1146  00079A  0E01               	movlw	1
  1147  00079C  D001               	goto	u2020
  1148  00079E                     u2010:
  1149  00079E  0E00               	movlw	0
  1150  0007A0                     u2020:
  1151  0007A0  6E57               	movwf	_vfpfcnvrt$404,c
  1152  0007A2  6A58               	clrf	_vfpfcnvrt$404+1,c
  1153  0007A4  5057               	movf	_vfpfcnvrt$404,w,c
  1154  0007A6  1058               	iorwf	_vfpfcnvrt$404+1,w,c
  1155  0007A8  A4D8               	btfss	status,2,c
  1156  0007AA  D7D6               	goto	l2311
  1157  0007AC                     u2030:
  1158                           
  1159                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 825:       
      +                            if ((*fmt[0] == 'd') || (*fmt[0] == 'i')) {
  1160  0007AC  C045  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1161  0007B0  C046  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1162  0007B4  CFDE FFF6          	movff	postinc2,tblptrl
  1163  0007B8  CFDD FFF7          	movff	postdec2,tblptrh
  1164  0007BC                     	if	0	;tblptru may be non-zero
  1165  0007BC                     	endif
  1166  0007BC                     	if	0	;tblptru may be non-zero
  1167  0007BC                     	endif
  1168  0007BC  0008               	tblrd		*
  1169  0007BE  50F5               	movf	tablat,w,c
  1170  0007C0  0A64               	xorlw	100
  1171  0007C2  B4D8               	btfsc	status,2,c
  1172  0007C4  D00D               	goto	u2050
  1173  0007C6  C045  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1174  0007CA  C046  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1175  0007CE  CFDE FFF6          	movff	postinc2,tblptrl
  1176  0007D2  CFDD FFF7          	movff	postdec2,tblptrh
  1177  0007D6                     	if	0	;tblptru may be non-zero
  1178  0007D6                     	endif
  1179  0007D6                     	if	0	;tblptru may be non-zero
  1180  0007D6                     	endif
  1181  0007D6  0008               	tblrd		*
  1182  0007D8  50F5               	movf	tablat,w,c
  1183  0007DA  0A69               	xorlw	105
  1184  0007DC  A4D8               	btfss	status,2,c
  1185  0007DE  D03F               	goto	l2329
  1186  0007E0                     u2050:
  1187                           
  1188                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 827:       
      +                                ++*fmt;
  1189  0007E0  C045  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1190  0007E4  C046  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1191  0007E8  2ADE               	incf	postinc2,f,c
  1192  0007EA  0E00               	movlw	0
  1193  0007EC  22DD               	addwfc	postdec2,f,c
  1194                           
  1195                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 828:       
      +                                ll = (long long)(*(int *)__va_arg(*(int **)ap, (int)0));
  1196  0007EE  C047  FFD9         	movff	vfpfcnvrt@ap,fsr2l
  1197  0007F2  C048  FFDA         	movff	vfpfcnvrt@ap+1,fsr2h
  1198  0007F6  CFDF F049          	movff	indf2,??_vfpfcnvrt
  1199  0007FA  0E02               	movlw	2
  1200  0007FC  26DE               	addwf	postinc2,f,c
  1201  0007FE  CFDF F04A          	movff	indf2,??_vfpfcnvrt+1
  1202  000802  0E00               	movlw	0
  1203  000804  22DD               	addwfc	postdec2,f,c
  1204  000806  C049  FFD9         	movff	??_vfpfcnvrt,fsr2l
  1205  00080A  C04A  FFDA         	movff	??_vfpfcnvrt+1,fsr2h
  1206  00080E  CFDE F04D          	movff	postinc2,vfpfcnvrt@ll
  1207  000812  CFDD F04E          	movff	postdec2,vfpfcnvrt@ll+1
  1208  000816  0E00               	movlw	0
  1209  000818  BE4E               	btfsc	vfpfcnvrt@ll+1,7,c
  1210  00081A  0EFF               	movlw	-1
  1211  00081C  6E4F               	movwf	vfpfcnvrt@ll+2,c
  1212  00081E  6E50               	movwf	vfpfcnvrt@ll+3,c
  1213  000820  6E51               	movwf	vfpfcnvrt@ll+4,c
  1214  000822  6E52               	movwf	vfpfcnvrt@ll+5,c
  1215  000824  6E53               	movwf	vfpfcnvrt@ll+6,c
  1216  000826  6E54               	movwf	vfpfcnvrt@ll+7,c
  1217                           
  1218                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 830:       
      +                                return dtoa(fp, ll);
  1219  000828  C043  F01F         	movff	vfpfcnvrt@fp,dtoa@fp
  1220  00082C  C044  F020         	movff	vfpfcnvrt@fp+1,dtoa@fp+1
  1221  000830  C04D  F021         	movff	vfpfcnvrt@ll,dtoa@d
  1222  000834  C04E  F022         	movff	vfpfcnvrt@ll+1,dtoa@d+1
  1223  000838  C04F  F023         	movff	vfpfcnvrt@ll+2,dtoa@d+2
  1224  00083C  C050  F024         	movff	vfpfcnvrt@ll+3,dtoa@d+3
  1225  000840  C051  F025         	movff	vfpfcnvrt@ll+4,dtoa@d+4
  1226  000844  C052  F026         	movff	vfpfcnvrt@ll+5,dtoa@d+5
  1227  000848  C053  F027         	movff	vfpfcnvrt@ll+6,dtoa@d+6
  1228  00084C  C054  F028         	movff	vfpfcnvrt@ll+7,dtoa@d+7
  1229  000850  EC78  F004         	call	_dtoa	;wreg free
  1230  000854  C01F  F043         	movff	?_dtoa,?_vfpfcnvrt
  1231  000858  C020  F044         	movff	?_dtoa+1,?_vfpfcnvrt+1
  1232  00085C  0012               	return	
  1233  00085E                     l2329:
  1234                           
  1235                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1350:      
      +                             if ((*fmt)[0] == '%') {
  1236  00085E  C045  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1237  000862  C046  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1238  000866  CFDE FFF6          	movff	postinc2,tblptrl
  1239  00086A  CFDD FFF7          	movff	postdec2,tblptrh
  1240  00086E                     	if	0	;tblptru may be non-zero
  1241  00086E                     	endif
  1242  00086E                     	if	0	;tblptru may be non-zero
  1243  00086E                     	endif
  1244  00086E  0008               	tblrd		*
  1245  000870  50F5               	movf	tablat,w,c
  1246  000872  0A25               	xorlw	37
  1247  000874  A4D8               	btfss	status,2,c
  1248  000876  D016               	goto	l2339
  1249                           
  1250                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1351:      
      +                                 ++*fmt;
  1251  000878  C045  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1252  00087C  C046  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1253  000880  2ADE               	incf	postinc2,f,c
  1254  000882  0E00               	movlw	0
  1255  000884  22DD               	addwfc	postdec2,f,c
  1256                           
  1257                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1352:      
      +                                 fputc((int)'%', fp);
  1258  000886  0E00               	movlw	0
  1259  000888  6E05               	movwf	fputc@c+1,c
  1260  00088A  0E25               	movlw	37
  1261  00088C  6E04               	movwf	fputc@c,c
  1262  00088E  C043  F006         	movff	vfpfcnvrt@fp,fputc@fp
  1263  000892  C044  F007         	movff	vfpfcnvrt@fp+1,fputc@fp+1
  1264  000896  ECE1  F007         	call	_fputc	;wreg free
  1265  00089A                     l2335:
  1266                           
  1267                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1353:      
      +                                 return 1;
  1268  00089A  0E00               	movlw	0
  1269  00089C  6E44               	movwf	?_vfpfcnvrt+1,c
  1270  00089E  0E01               	movlw	1
  1271  0008A0  6E43               	movwf	?_vfpfcnvrt,c
  1272  0008A2  0012               	return	
  1273  0008A4                     l2339:
  1274                           
  1275                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1357:      
      +                             ++*fmt;
  1276  0008A4  C045  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1277  0008A8  C046  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1278  0008AC  2ADE               	incf	postinc2,f,c
  1279  0008AE  0E00               	movlw	0
  1280  0008B0  22DD               	addwfc	postdec2,f,c
  1281                           
  1282                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1358:      
      +                             return 0;
  1283  0008B2  0E00               	movlw	0
  1284  0008B4  6E44               	movwf	?_vfpfcnvrt+1,c
  1285  0008B6  0E00               	movlw	0
  1286  0008B8  6E43               	movwf	?_vfpfcnvrt,c
  1287  0008BA  0012               	return	
  1288  0008BC                     l2345:
  1289                           
  1290                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1362:     f
      +                          putc((int)(*fmt)[0], fp);
  1291  0008BC  C045  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1292  0008C0  C046  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1293  0008C4  CFDE FFF6          	movff	postinc2,tblptrl
  1294  0008C8  CFDD FFF7          	movff	postdec2,tblptrh
  1295  0008CC                     	if	0	;tblptru may be non-zero
  1296  0008CC                     	endif
  1297  0008CC                     	if	0	;tblptru may be non-zero
  1298  0008CC                     	endif
  1299  0008CC  0008               	tblrd		*
  1300  0008CE  50F5               	movf	tablat,w,c
  1301  0008D0  6E04               	movwf	fputc@c,c
  1302  0008D2  6A05               	clrf	fputc@c+1,c
  1303  0008D4  C043  F006         	movff	vfpfcnvrt@fp,fputc@fp
  1304  0008D8  C044  F007         	movff	vfpfcnvrt@fp+1,fputc@fp+1
  1305  0008DC  ECE1  F007         	call	_fputc	;wreg free
  1306                           
  1307                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1363:     +
      +                          +*fmt;
  1308  0008E0  C045  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1309  0008E4  C046  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1310  0008E8  2ADE               	incf	postinc2,f,c
  1311  0008EA  0E00               	movlw	0
  1312  0008EC  22DD               	addwfc	postdec2,f,c
  1313  0008EE  D7D5               	goto	l2335
  1314  0008F0                     __end_of_vfpfcnvrt:
  1315                           	opt callstack 0
  1316                           
  1317 ;; *************** function _dtoa *****************
  1318 ;; Defined at:
  1319 ;;		line 274 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c"
  1320 ;; Parameters:    Size  Location     Type
  1321 ;;  fp              2   30[COMRAM] PTR struct _IO_FILE
  1322 ;;		 -> sprintf@f(6), 
  1323 ;;  d               8   32[COMRAM] long long 
  1324 ;; Auto vars:     Size  Location     Type
  1325 ;;  n               8   56[COMRAM] long long 
  1326 ;;  i               2   64[COMRAM] int 
  1327 ;;  s               2   54[COMRAM] int 
  1328 ;;  w               2   52[COMRAM] int 
  1329 ;;  p               2   50[COMRAM] int 
  1330 ;; Return value:  Size  Location     Type
  1331 ;;                  2   30[COMRAM] int 
  1332 ;; Registers used:
  1333 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  1334 ;; Tracked objects:
  1335 ;;		On entry : 0/0
  1336 ;;		On exit  : 0/0
  1337 ;;		Unchanged: 0/0
  1338 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1339 ;;      Params:        10       0       0       0       0       0       0
  1340 ;;      Locals:        18       0       0       0       0       0       0
  1341 ;;      Temps:          8       0       0       0       0       0       0
  1342 ;;      Totals:        36       0       0       0       0       0       0
  1343 ;;Total ram usage:       36 bytes
  1344 ;; Hardware stack levels used:    1
  1345 ;; Hardware stack levels required when called:    5
  1346 ;; This function calls:
  1347 ;;		___aodiv
  1348 ;;		___aomod
  1349 ;;		_abs
  1350 ;;		_pad
  1351 ;; This function is called by:
  1352 ;;		_vfpfcnvrt
  1353 ;; This function uses a non-reentrant model
  1354 ;;
  1355                           
  1356                           	psect	text4
  1357  0008F0                     __ptext4:
  1358                           	opt callstack 0
  1359  0008F0                     _dtoa:
  1360                           	opt callstack 22
  1361                           
  1362                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 274: static
      +                           int dtoa(FILE *fp, long long d);C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\
      +                          c99\common\doprnt.c: 275: {;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\c
      +                          ommon\doprnt.c: 276:     int i, p, s, w;;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\
      +                          sources\c99\common\doprnt.c: 277:     long long n;;C:\Program Files (x86)\Microchip\xc8\
      +                          v2.05\pic\sources\c99\common\doprnt.c: 280:     n = d;
  1363                           
  1364                           ;incstack = 0
  1365  0008F0  C021  F039         	movff	dtoa@d,dtoa@n
  1366  0008F4  C022  F03A         	movff	dtoa@d+1,dtoa@n+1
  1367  0008F8  C023  F03B         	movff	dtoa@d+2,dtoa@n+2
  1368  0008FC  C024  F03C         	movff	dtoa@d+3,dtoa@n+3
  1369  000900  C025  F03D         	movff	dtoa@d+4,dtoa@n+4
  1370  000904  C026  F03E         	movff	dtoa@d+5,dtoa@n+5
  1371  000908  C027  F03F         	movff	dtoa@d+6,dtoa@n+6
  1372  00090C  C028  F040         	movff	dtoa@d+7,dtoa@n+7
  1373                           
  1374                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 281:     s 
      +                          = n < 0 ? 1 : 0;
  1375  000910  AE40               	btfss	dtoa@n+7,7,c
  1376  000912  D002               	goto	u1740
  1377  000914  0E01               	movlw	1
  1378  000916  D001               	goto	u1750
  1379  000918                     u1740:
  1380  000918  0E00               	movlw	0
  1381  00091A                     u1750:
  1382  00091A  6E37               	movwf	dtoa@s,c
  1383  00091C  6A38               	clrf	dtoa@s+1,c
  1384                           
  1385                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 282:     if
      +                           (s) {
  1386  00091E  5037               	movf	dtoa@s,w,c
  1387  000920  1038               	iorwf	dtoa@s+1,w,c
  1388  000922  B4D8               	btfsc	status,2,c
  1389  000924  D010               	goto	l2163
  1390                           
  1391                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 283:       
      +                            n = -n;
  1392  000926  1E40               	comf	dtoa@n+7,f,c
  1393  000928  1E3F               	comf	dtoa@n+6,f,c
  1394  00092A  1E3E               	comf	dtoa@n+5,f,c
  1395  00092C  1E3D               	comf	dtoa@n+4,f,c
  1396  00092E  1E3C               	comf	dtoa@n+3,f,c
  1397  000930  1E3B               	comf	dtoa@n+2,f,c
  1398  000932  1E3A               	comf	dtoa@n+1,f,c
  1399  000934  6C39               	negf	dtoa@n,c
  1400  000936  0E00               	movlw	0
  1401  000938  223A               	addwfc	dtoa@n+1,f,c
  1402  00093A  223B               	addwfc	dtoa@n+2,f,c
  1403  00093C  223C               	addwfc	dtoa@n+3,f,c
  1404  00093E  223D               	addwfc	dtoa@n+4,f,c
  1405  000940  223E               	addwfc	dtoa@n+5,f,c
  1406  000942  223F               	addwfc	dtoa@n+6,f,c
  1407  000944  2240               	addwfc	dtoa@n+7,f,c
  1408  000946                     l2163:
  1409                           
  1410                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 287:     if
      +                           (!(prec < 0)) {
  1411  000946  AE6E               	btfss	_prec+1,7,c
  1412                           
  1413                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 288:       
      +                            flags &= ~(1 << 1);
  1414  000948  926F               	bcf	_flags,1,c
  1415                           
  1416                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 290:     p 
      +                          = (0 < prec) ? prec : 1;
  1417  00094A  BE6E               	btfsc	_prec+1,7,c
  1418  00094C  D005               	goto	u1780
  1419  00094E  506E               	movf	_prec+1,w,c
  1420  000950  E108               	bnz	l125
  1421  000952  046D               	decf	_prec,w,c
  1422  000954  B0D8               	btfsc	status,0,c
  1423  000956  D005               	goto	l125
  1424  000958                     u1780:
  1425  000958  0E00               	movlw	0
  1426  00095A  6E34               	movwf	dtoa@p+1,c
  1427  00095C  0E01               	movlw	1
  1428  00095E  6E33               	movwf	dtoa@p,c
  1429  000960  D004               	goto	l127
  1430  000962                     l125:
  1431  000962  C06D  F033         	movff	_prec,dtoa@p
  1432  000966  C06E  F034         	movff	_prec+1,dtoa@p+1
  1433  00096A                     l127:
  1434                           
  1435                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 291:     w 
      +                          = width;
  1436  00096A  C06B  F035         	movff	_width,dtoa@w
  1437  00096E  C06C  F036         	movff	_width+1,dtoa@w+1
  1438                           
  1439                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 292:     if
      +                           (s || (flags & (1 << 2))) {
  1440  000972  5037               	movf	dtoa@s,w,c
  1441  000974  1038               	iorwf	dtoa@s+1,w,c
  1442  000976  A4D8               	btfss	status,2,c
  1443  000978  D002               	goto	u1800
  1444  00097A  A46F               	btfss	_flags,2,c
  1445  00097C  D003               	goto	l2177
  1446  00097E                     u1800:
  1447                           
  1448                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 293:       
      +                            --w;
  1449  00097E  0635               	decf	dtoa@w,f,c
  1450  000980  A0D8               	btfss	status,0,c
  1451  000982  0636               	decf	dtoa@w+1,f,c
  1452  000984                     l2177:
  1453                           
  1454                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 297:     i 
      +                          = sizeof(dbuf) - 1;
  1455  000984  0E00               	movlw	0
  1456  000986  6E42               	movwf	dtoa@i+1,c
  1457  000988  0E1F               	movlw	31
  1458  00098A  6E41               	movwf	dtoa@i,c
  1459                           
  1460                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 298:     db
      +                          uf[i] = '\0';
  1461  00098C  0E00               	movlw	0
  1462  00098E  0100               	movlb	0	; () banked
  1463  000990  6F9F               	movwf	(_dbuf+31)& (0+255),b
  1464                           
  1465                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 299:     wh
      +                          ile (!(i < 1) && (n || (0 < p) || ((0 < w) && (flags & (1 << 1))))) {
  1466  000992  D07C               	goto	l2191
  1467  000994                     l2181:
  1468                           
  1469                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 300:       
      +                            --i;
  1470  000994  0641               	decf	dtoa@i,f,c
  1471  000996  A0D8               	btfss	status,0,c
  1472  000998  0642               	decf	dtoa@i+1,f,c
  1473                           
  1474                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 301:       
      +                            dbuf[i] = '0' + abs(n % 10);
  1475  00099A  0E80               	movlw	low _dbuf
  1476  00099C  2441               	addwf	dtoa@i,w,c
  1477  00099E  6ED9               	movwf	fsr2l,c
  1478  0009A0  0E00               	movlw	high _dbuf
  1479  0009A2  2042               	addwfc	dtoa@i+1,w,c
  1480  0009A4  6EDA               	movwf	fsr2h,c
  1481  0009A6  C039  F004         	movff	dtoa@n,___aomod@dividend
  1482  0009AA  C03A  F005         	movff	dtoa@n+1,___aomod@dividend+1
  1483  0009AE  C03B  F006         	movff	dtoa@n+2,___aomod@dividend+2
  1484  0009B2  C03C  F007         	movff	dtoa@n+3,___aomod@dividend+3
  1485  0009B6  C03D  F008         	movff	dtoa@n+4,___aomod@dividend+4
  1486  0009BA  C03E  F009         	movff	dtoa@n+5,___aomod@dividend+5
  1487  0009BE  C03F  F00A         	movff	dtoa@n+6,___aomod@dividend+6
  1488  0009C2  C040  F00B         	movff	dtoa@n+7,___aomod@dividend+7
  1489  0009C6  0E0A               	movlw	10
  1490  0009C8  6E0C               	movwf	___aomod@divisor,c
  1491  0009CA  0E00               	movlw	0
  1492  0009CC  6E0D               	movwf	___aomod@divisor+1,c
  1493  0009CE  0E00               	movlw	0
  1494  0009D0  6E0E               	movwf	___aomod@divisor+2,c
  1495  0009D2  0E00               	movlw	0
  1496  0009D4  6E0F               	movwf	___aomod@divisor+3,c
  1497  0009D6  0E00               	movlw	0
  1498  0009D8  6E10               	movwf	___aomod@divisor+4,c
  1499  0009DA  0E00               	movlw	0
  1500  0009DC  6E11               	movwf	___aomod@divisor+5,c
  1501  0009DE  0E00               	movlw	0
  1502  0009E0  6E12               	movwf	___aomod@divisor+6,c
  1503  0009E2  0E00               	movlw	0
  1504  0009E4  6E13               	movwf	___aomod@divisor+7,c
  1505  0009E6  ECDD  F006         	call	___aomod	;wreg free
  1506  0009EA  C004  F029         	movff	?___aomod,??_dtoa
  1507  0009EE  C005  F02A         	movff	?___aomod+1,??_dtoa+1
  1508  0009F2  C006  F02B         	movff	?___aomod+2,??_dtoa+2
  1509  0009F6  C007  F02C         	movff	?___aomod+3,??_dtoa+3
  1510  0009FA  C008  F02D         	movff	?___aomod+4,??_dtoa+4
  1511  0009FE  C009  F02E         	movff	?___aomod+5,??_dtoa+5
  1512  000A02  C00A  F02F         	movff	?___aomod+6,??_dtoa+6
  1513  000A06  C00B  F030         	movff	?___aomod+7,??_dtoa+7
  1514  000A0A  C029  F016         	movff	??_dtoa,abs@a
  1515  000A0E  C02B  F017         	movff	??_dtoa+2,abs@a+1
  1516  000A12  ECDE  F009         	call	_abs	;wreg free
  1517  000A16  5016               	movf	?_abs,w,c
  1518  000A18  0F30               	addlw	48
  1519  000A1A  6EDF               	movwf	indf2,c
  1520                           
  1521                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 302:       
      +                            --p;
  1522  000A1C  0633               	decf	dtoa@p,f,c
  1523  000A1E  A0D8               	btfss	status,0,c
  1524  000A20  0634               	decf	dtoa@p+1,f,c
  1525                           
  1526                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 303:       
      +                            --w;
  1527  000A22  0635               	decf	dtoa@w,f,c
  1528  000A24  A0D8               	btfss	status,0,c
  1529  000A26  0636               	decf	dtoa@w+1,f,c
  1530                           
  1531                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 304:       
      +                            n = n / 10;
  1532  000A28  C039  F004         	movff	dtoa@n,___aodiv@dividend
  1533  000A2C  C03A  F005         	movff	dtoa@n+1,___aodiv@dividend+1
  1534  000A30  C03B  F006         	movff	dtoa@n+2,___aodiv@dividend+2
  1535  000A34  C03C  F007         	movff	dtoa@n+3,___aodiv@dividend+3
  1536  000A38  C03D  F008         	movff	dtoa@n+4,___aodiv@dividend+4
  1537  000A3C  C03E  F009         	movff	dtoa@n+5,___aodiv@dividend+5
  1538  000A40  C03F  F00A         	movff	dtoa@n+6,___aodiv@dividend+6
  1539  000A44  C040  F00B         	movff	dtoa@n+7,___aodiv@dividend+7
  1540  000A48  0E0A               	movlw	10
  1541  000A4A  6E0C               	movwf	___aodiv@divisor,c
  1542  000A4C  0E00               	movlw	0
  1543  000A4E  6E0D               	movwf	___aodiv@divisor+1,c
  1544  000A50  0E00               	movlw	0
  1545  000A52  6E0E               	movwf	___aodiv@divisor+2,c
  1546  000A54  0E00               	movlw	0
  1547  000A56  6E0F               	movwf	___aodiv@divisor+3,c
  1548  000A58  0E00               	movlw	0
  1549  000A5A  6E10               	movwf	___aodiv@divisor+4,c
  1550  000A5C  0E00               	movlw	0
  1551  000A5E  6E11               	movwf	___aodiv@divisor+5,c
  1552  000A60  0E00               	movlw	0
  1553  000A62  6E12               	movwf	___aodiv@divisor+6,c
  1554  000A64  0E00               	movlw	0
  1555  000A66  6E13               	movwf	___aodiv@divisor+7,c
  1556  000A68  EC99  F005         	call	___aodiv	;wreg free
  1557  000A6C  C004  F039         	movff	?___aodiv,dtoa@n
  1558  000A70  C005  F03A         	movff	?___aodiv+1,dtoa@n+1
  1559  000A74  C006  F03B         	movff	?___aodiv+2,dtoa@n+2
  1560  000A78  C007  F03C         	movff	?___aodiv+3,dtoa@n+3
  1561  000A7C  C008  F03D         	movff	?___aodiv+4,dtoa@n+4
  1562  000A80  C009  F03E         	movff	?___aodiv+5,dtoa@n+5
  1563  000A84  C00A  F03F         	movff	?___aodiv+6,dtoa@n+6
  1564  000A88  C00B  F040         	movff	?___aodiv+7,dtoa@n+7
  1565  000A8C                     l2191:
  1566                           
  1567                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 299:     wh
      +                          ile (!(i < 1) && (n || (0 < p) || ((0 < w) && (flags & (1 << 1))))) {
  1568  000A8C  BE42               	btfsc	dtoa@i+1,7,c
  1569  000A8E  D01F               	goto	u1850
  1570  000A90  5042               	movf	dtoa@i+1,w,c
  1571  000A92  E103               	bnz	u1810
  1572  000A94  0441               	decf	dtoa@i,w,c
  1573  000A96  A0D8               	btfss	status,0,c
  1574  000A98  D01A               	goto	u1850
  1575  000A9A                     u1810:
  1576  000A9A  5039               	movf	dtoa@n,w,c
  1577  000A9C  103A               	iorwf	dtoa@n+1,w,c
  1578  000A9E  103B               	iorwf	dtoa@n+2,w,c
  1579  000AA0  103C               	iorwf	dtoa@n+3,w,c
  1580  000AA2  103D               	iorwf	dtoa@n+4,w,c
  1581  000AA4  103E               	iorwf	dtoa@n+5,w,c
  1582  000AA6  103F               	iorwf	dtoa@n+6,w,c
  1583  000AA8  1040               	iorwf	dtoa@n+7,w,c
  1584  000AAA  A4D8               	btfss	status,2,c
  1585  000AAC  D773               	goto	l2181
  1586  000AAE  BE34               	btfsc	dtoa@p+1,7,c
  1587  000AB0  D005               	goto	u1830
  1588  000AB2  5034               	movf	dtoa@p+1,w,c
  1589  000AB4  E102               	bnz	u1831
  1590  000AB6  0433               	decf	dtoa@p,w,c
  1591  000AB8  B0D8               	btfsc	status,0,c
  1592  000ABA                     u1831:
  1593  000ABA  D76C               	goto	l2181
  1594  000ABC                     u1830:
  1595  000ABC  BE36               	btfsc	dtoa@w+1,7,c
  1596  000ABE  D007               	goto	u1850
  1597  000AC0  5036               	movf	dtoa@w+1,w,c
  1598  000AC2  E103               	bnz	u1840
  1599  000AC4  0435               	decf	dtoa@w,w,c
  1600  000AC6  A0D8               	btfss	status,0,c
  1601  000AC8  D002               	goto	u1850
  1602  000ACA                     u1840:
  1603  000ACA  B26F               	btfsc	_flags,1,c
  1604  000ACC  D763               	goto	l2181
  1605  000ACE                     u1850:
  1606                           
  1607                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 308:     if
      +                           (s || (flags & (1 << 2))) {
  1608  000ACE  5037               	movf	dtoa@s,w,c
  1609  000AD0  1038               	iorwf	dtoa@s+1,w,c
  1610  000AD2  A4D8               	btfss	status,2,c
  1611  000AD4  D002               	goto	u1870
  1612  000AD6  A46F               	btfss	_flags,2,c
  1613  000AD8  D017               	goto	l2215
  1614  000ADA                     u1870:
  1615                           
  1616                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 309:       
      +                            --i;
  1617  000ADA  0641               	decf	dtoa@i,f,c
  1618  000ADC  A0D8               	btfss	status,0,c
  1619  000ADE  0642               	decf	dtoa@i+1,f,c
  1620                           
  1621                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 310:       
      +                            dbuf[i] = s ? '-' : '+';
  1622  000AE0  5037               	movf	dtoa@s,w,c
  1623  000AE2  1038               	iorwf	dtoa@s+1,w,c
  1624  000AE4  A4D8               	btfss	status,2,c
  1625  000AE6  D004               	goto	l2211
  1626  000AE8  0E00               	movlw	0
  1627  000AEA  6E32               	movwf	_dtoa$389+1,c
  1628  000AEC  0E2B               	movlw	43
  1629  000AEE  D003               	goto	L2
  1630  000AF0                     l2211:
  1631  000AF0  0E00               	movlw	0
  1632  000AF2  6E32               	movwf	_dtoa$389+1,c
  1633  000AF4  0E2D               	movlw	45
  1634  000AF6                     L2:
  1635  000AF6  6E31               	movwf	_dtoa$389,c
  1636  000AF8  0E80               	movlw	low _dbuf
  1637  000AFA  2441               	addwf	dtoa@i,w,c
  1638  000AFC  6ED9               	movwf	fsr2l,c
  1639  000AFE  0E00               	movlw	high _dbuf
  1640  000B00  2042               	addwfc	dtoa@i+1,w,c
  1641  000B02  6EDA               	movwf	fsr2h,c
  1642  000B04  C031  FFDF         	movff	_dtoa$389,indf2
  1643  000B08                     l2215:
  1644                           
  1645                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 314:     re
      +                          turn pad(fp, &dbuf[i], w);
  1646  000B08  C01F  F014         	movff	dtoa@fp,pad@fp
  1647  000B0C  C020  F015         	movff	dtoa@fp+1,pad@fp+1
  1648  000B10  0E80               	movlw	low _dbuf
  1649  000B12  2441               	addwf	dtoa@i,w,c
  1650  000B14  6E16               	movwf	pad@buf,c
  1651  000B16  0E00               	movlw	high _dbuf
  1652  000B18  2042               	addwfc	dtoa@i+1,w,c
  1653  000B1A  6E17               	movwf	pad@buf+1,c
  1654  000B1C  C035  F018         	movff	dtoa@w,pad@p
  1655  000B20  C036  F019         	movff	dtoa@w+1,pad@p+1
  1656  000B24  EC80  F008         	call	_pad	;wreg free
  1657  000B28  C014  F01F         	movff	?_pad,?_dtoa
  1658  000B2C  C015  F020         	movff	?_pad+1,?_dtoa+1
  1659  000B30  0012               	return		;funcret
  1660  000B32                     __end_of_dtoa:
  1661                           	opt callstack 0
  1662                           
  1663 ;; *************** function _pad *****************
  1664 ;; Defined at:
  1665 ;;		line 72 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c"
  1666 ;; Parameters:    Size  Location     Type
  1667 ;;  fp              2   19[COMRAM] PTR struct _IO_FILE
  1668 ;;		 -> sprintf@f(6), 
  1669 ;;  buf             2   21[COMRAM] PTR unsigned char 
  1670 ;;		 -> dbuf(32), 
  1671 ;;  p               2   23[COMRAM] int 
  1672 ;; Auto vars:     Size  Location     Type
  1673 ;;  w               2   28[COMRAM] int 
  1674 ;;  i               2   26[COMRAM] int 
  1675 ;; Return value:  Size  Location     Type
  1676 ;;                  2   19[COMRAM] int 
  1677 ;; Registers used:
  1678 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  1679 ;; Tracked objects:
  1680 ;;		On entry : 0/0
  1681 ;;		On exit  : 0/0
  1682 ;;		Unchanged: 0/0
  1683 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1684 ;;      Params:         6       0       0       0       0       0       0
  1685 ;;      Locals:         4       0       0       0       0       0       0
  1686 ;;      Temps:          1       0       0       0       0       0       0
  1687 ;;      Totals:        11       0       0       0       0       0       0
  1688 ;;Total ram usage:       11 bytes
  1689 ;; Hardware stack levels used:    1
  1690 ;; Hardware stack levels required when called:    4
  1691 ;; This function calls:
  1692 ;;		_fputc
  1693 ;;		_fputs
  1694 ;;		_strlen
  1695 ;; This function is called by:
  1696 ;;		_dtoa
  1697 ;; This function uses a non-reentrant model
  1698 ;;
  1699                           
  1700                           	psect	text5
  1701  001100                     __ptext5:
  1702                           	opt callstack 0
  1703  001100                     _pad:
  1704                           	opt callstack 22
  1705                           
  1706                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 72: static 
      +                          int pad(FILE *fp, char *buf, int p);C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sourc
      +                          es\c99\common\doprnt.c: 73: {;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99
      +                          \common\doprnt.c: 74:     int i, w;;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sourc
      +                          es\c99\common\doprnt.c: 77:     if (flags & (1 << 0)) {
  1707                           
  1708                           ;incstack = 0
  1709  001100  A06F               	btfss	_flags,0,c
  1710  001102  D00A               	goto	l2033
  1711                           
  1712                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 78:        
      +                           fputs((const char *)buf, fp);
  1713  001104  C016  F00D         	movff	pad@buf,fputs@s
  1714  001108  C017  F00E         	movff	pad@buf+1,fputs@s+1
  1715  00110C  C014  F00F         	movff	pad@fp,fputs@fp
  1716  001110  C015  F010         	movff	pad@fp+1,fputs@fp+1
  1717  001114  ECC2  F009         	call	_fputs	;wreg free
  1718  001118                     l2033:
  1719                           
  1720                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 82:     w =
      +                           (p < 0) ? 0 : p;
  1721  001118  BE19               	btfsc	pad@p+1,7,c
  1722  00111A  D005               	goto	l2037
  1723  00111C  C018  F01D         	movff	pad@p,pad@w
  1724  001120  C019  F01E         	movff	pad@p+1,pad@w+1
  1725  001124  D004               	goto	l114
  1726  001126                     l2037:
  1727  001126  0E00               	movlw	0
  1728  001128  6E1E               	movwf	pad@w+1,c
  1729  00112A  0E00               	movlw	0
  1730  00112C  6E1D               	movwf	pad@w,c
  1731  00112E                     l114:
  1732                           
  1733                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 83:     i =
      +                           0;
  1734  00112E  0E00               	movlw	0
  1735  001130  6E1C               	movwf	pad@i+1,c
  1736  001132  0E00               	movlw	0
  1737  001134  6E1B               	movwf	pad@i,c
  1738                           
  1739                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 84:     whi
      +                          le (i < w) {
  1740  001136  D00C               	goto	l2043
  1741  001138                     l2039:
  1742                           
  1743                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 85:        
      +                           fputc(' ', fp);
  1744  001138  0E00               	movlw	0
  1745  00113A  6E05               	movwf	fputc@c+1,c
  1746  00113C  0E20               	movlw	32
  1747  00113E  6E04               	movwf	fputc@c,c
  1748  001140  C014  F006         	movff	pad@fp,fputc@fp
  1749  001144  C015  F007         	movff	pad@fp+1,fputc@fp+1
  1750  001148  ECE1  F007         	call	_fputc	;wreg free
  1751                           
  1752                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 86:        
      +                           ++i;
  1753  00114C  4A1B               	infsnz	pad@i,f,c
  1754  00114E  2A1C               	incf	pad@i+1,f,c
  1755  001150                     l2043:
  1756                           
  1757                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 84:     whi
      +                          le (i < w) {
  1758  001150  501D               	movf	pad@w,w,c
  1759  001152  5C1B               	subwf	pad@i,w,c
  1760  001154  501C               	movf	pad@i+1,w,c
  1761  001156  0A80               	xorlw	128
  1762  001158  6E1A               	movwf	??_pad& (0+255),c
  1763  00115A  501E               	movf	pad@w+1,w,c
  1764  00115C  0A80               	xorlw	128
  1765  00115E  581A               	subwfb	??_pad& (0+255),w,c
  1766  001160  A0D8               	btfss	status,0,c
  1767  001162  D7EA               	goto	l2039
  1768                           
  1769                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 90:     if 
      +                          (!(flags & (1 << 0))) {
  1770  001164  B06F               	btfsc	_flags,0,c
  1771  001166  D00A               	goto	l2047
  1772                           
  1773                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 91:        
      +                           fputs((const char *)buf, fp);
  1774  001168  C016  F00D         	movff	pad@buf,fputs@s
  1775  00116C  C017  F00E         	movff	pad@buf+1,fputs@s+1
  1776  001170  C014  F00F         	movff	pad@fp,fputs@fp
  1777  001174  C015  F010         	movff	pad@fp+1,fputs@fp+1
  1778  001178  ECC2  F009         	call	_fputs	;wreg free
  1779  00117C                     l2047:
  1780                           
  1781                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 94:     ret
      +                          urn strlen(buf) + w;
  1782  00117C  C016  F004         	movff	pad@buf,strlen@s
  1783  001180  C017  F005         	movff	pad@buf+1,strlen@s+1
  1784  001184  EC0F  F00A         	call	_strlen	;wreg free
  1785  001188  501D               	movf	pad@w,w,c
  1786  00118A  2404               	addwf	?_strlen,w,c
  1787  00118C  6E14               	movwf	?_pad,c
  1788  00118E  501E               	movf	pad@w+1,w,c
  1789  001190  2005               	addwfc	?_strlen+1,w,c
  1790  001192  6E15               	movwf	?_pad+1,c
  1791  001194  0012               	return		;funcret
  1792  001196                     __end_of_pad:
  1793                           	opt callstack 0
  1794                           
  1795 ;; *************** function _strlen *****************
  1796 ;; Defined at:
  1797 ;;		line 12 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\strlen.c"
  1798 ;; Parameters:    Size  Location     Type
  1799 ;;  s               2    3[COMRAM] PTR const unsigned char 
  1800 ;;		 -> dbuf(32), 
  1801 ;; Auto vars:     Size  Location     Type
  1802 ;;  a               2    5[COMRAM] PTR const unsigned char 
  1803 ;;		 -> dbuf(32), 
  1804 ;; Return value:  Size  Location     Type
  1805 ;;                  2    3[COMRAM] unsigned int 
  1806 ;; Registers used:
  1807 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  1808 ;; Tracked objects:
  1809 ;;		On entry : 0/0
  1810 ;;		On exit  : 0/0
  1811 ;;		Unchanged: 0/0
  1812 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1813 ;;      Params:         2       0       0       0       0       0       0
  1814 ;;      Locals:         2       0       0       0       0       0       0
  1815 ;;      Temps:          0       0       0       0       0       0       0
  1816 ;;      Totals:         4       0       0       0       0       0       0
  1817 ;;Total ram usage:        4 bytes
  1818 ;; Hardware stack levels used:    1
  1819 ;; Hardware stack levels required when called:    1
  1820 ;; This function calls:
  1821 ;;		Nothing
  1822 ;; This function is called by:
  1823 ;;		_pad
  1824 ;; This function uses a non-reentrant model
  1825 ;;
  1826                           
  1827                           	psect	text6
  1828  00141E                     __ptext6:
  1829                           	opt callstack 0
  1830  00141E                     _strlen:
  1831                           	opt callstack 24
  1832                           
  1833                           ;incstack = 0
  1834  00141E  C004  F006         	movff	strlen@s,strlen@a
  1835  001422  C005  F007         	movff	strlen@s+1,strlen@a+1
  1836  001426  D002               	goto	l2023
  1837  001428                     l2021:
  1838  001428  4A04               	infsnz	strlen@s,f,c
  1839  00142A  2A05               	incf	strlen@s+1,f,c
  1840  00142C                     l2023:
  1841  00142C  C004  FFD9         	movff	strlen@s,fsr2l
  1842  001430  C005  FFDA         	movff	strlen@s+1,fsr2h
  1843  001434  50DF               	movf	indf2,w,c
  1844  001436  A4D8               	btfss	status,2,c
  1845  001438  D7F7               	goto	l2021
  1846  00143A  5006               	movf	strlen@a,w,c
  1847  00143C  5C04               	subwf	strlen@s,w,c
  1848  00143E  6E04               	movwf	?_strlen,c
  1849  001440  5007               	movf	strlen@a+1,w,c
  1850  001442  5805               	subwfb	strlen@s+1,w,c
  1851  001444  6E05               	movwf	?_strlen+1,c
  1852  001446  0012               	return		;funcret
  1853  001448                     __end_of_strlen:
  1854                           	opt callstack 0
  1855                           
  1856 ;; *************** function _fputs *****************
  1857 ;; Defined at:
  1858 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\nf_fputs.c"
  1859 ;; Parameters:    Size  Location     Type
  1860 ;;  s               2   12[COMRAM] PTR const unsigned char 
  1861 ;;		 -> dbuf(32), 
  1862 ;;  fp              2   14[COMRAM] PTR struct _IO_FILE
  1863 ;;		 -> sprintf@f(6), 
  1864 ;; Auto vars:     Size  Location     Type
  1865 ;;  i               2   17[COMRAM] int 
  1866 ;;  c               1   16[COMRAM] unsigned char 
  1867 ;; Return value:  Size  Location     Type
  1868 ;;                  2   12[COMRAM] int 
  1869 ;; Registers used:
  1870 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  1871 ;; Tracked objects:
  1872 ;;		On entry : 0/0
  1873 ;;		On exit  : 0/0
  1874 ;;		Unchanged: 0/0
  1875 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1876 ;;      Params:         4       0       0       0       0       0       0
  1877 ;;      Locals:         3       0       0       0       0       0       0
  1878 ;;      Temps:          0       0       0       0       0       0       0
  1879 ;;      Totals:         7       0       0       0       0       0       0
  1880 ;;Total ram usage:        7 bytes
  1881 ;; Hardware stack levels used:    1
  1882 ;; Hardware stack levels required when called:    3
  1883 ;; This function calls:
  1884 ;;		_fputc
  1885 ;; This function is called by:
  1886 ;;		_pad
  1887 ;; This function uses a non-reentrant model
  1888 ;;
  1889                           
  1890                           	psect	text7
  1891  001384                     __ptext7:
  1892                           	opt callstack 0
  1893  001384                     _fputs:
  1894                           	opt callstack 22
  1895                           
  1896                           ;incstack = 0
  1897  001384  0E00               	movlw	0
  1898  001386  6E13               	movwf	fputs@i+1,c
  1899  001388  0E00               	movlw	0
  1900  00138A  6E12               	movwf	fputs@i,c
  1901  00138C  D00B               	goto	l2017
  1902  00138E                     l2013:
  1903  00138E  C011  F004         	movff	fputs@c,fputc@c
  1904  001392  6A05               	clrf	fputc@c+1,c
  1905  001394  C00F  F006         	movff	fputs@fp,fputc@fp
  1906  001398  C010  F007         	movff	fputs@fp+1,fputc@fp+1
  1907  00139C  ECE1  F007         	call	_fputc	;wreg free
  1908  0013A0  4A12               	infsnz	fputs@i,f,c
  1909  0013A2  2A13               	incf	fputs@i+1,f,c
  1910  0013A4                     l2017:
  1911  0013A4  5012               	movf	fputs@i,w,c
  1912  0013A6  240D               	addwf	fputs@s,w,c
  1913  0013A8  6ED9               	movwf	fsr2l,c
  1914  0013AA  5013               	movf	fputs@i+1,w,c
  1915  0013AC  200E               	addwfc	fputs@s+1,w,c
  1916  0013AE  6EDA               	movwf	fsr2h,c
  1917  0013B0  50DF               	movf	indf2,w,c
  1918  0013B2  6E11               	movwf	fputs@c,c
  1919  0013B4  5011               	movf	fputs@c,w,c
  1920  0013B6  B4D8               	btfsc	status,2,c
  1921  0013B8  0012               	return	
  1922  0013BA  D7E9               	goto	l2013
  1923  0013BC                     __end_of_fputs:
  1924                           	opt callstack 0
  1925                           
  1926 ;; *************** function _fputc *****************
  1927 ;; Defined at:
  1928 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\nf_fputc.c"
  1929 ;; Parameters:    Size  Location     Type
  1930 ;;  c               2    3[COMRAM] int 
  1931 ;;  fp              2    5[COMRAM] PTR struct _IO_FILE
  1932 ;;		 -> sprintf@f(6), 
  1933 ;; Auto vars:     Size  Location     Type
  1934 ;;		None
  1935 ;; Return value:  Size  Location     Type
  1936 ;;                  2    3[COMRAM] int 
  1937 ;; Registers used:
  1938 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  1939 ;; Tracked objects:
  1940 ;;		On entry : 0/0
  1941 ;;		On exit  : 0/0
  1942 ;;		Unchanged: 0/0
  1943 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1944 ;;      Params:         4       0       0       0       0       0       0
  1945 ;;      Locals:         0       0       0       0       0       0       0
  1946 ;;      Temps:          5       0       0       0       0       0       0
  1947 ;;      Totals:         9       0       0       0       0       0       0
  1948 ;;Total ram usage:        9 bytes
  1949 ;; Hardware stack levels used:    1
  1950 ;; Hardware stack levels required when called:    2
  1951 ;; This function calls:
  1952 ;;		_putch
  1953 ;; This function is called by:
  1954 ;;		_pad
  1955 ;;		_vfpfcnvrt
  1956 ;;		_fputs
  1957 ;; This function uses a non-reentrant model
  1958 ;;
  1959                           
  1960                           	psect	text8
  1961  000FC2                     __ptext8:
  1962                           	opt callstack 0
  1963  000FC2                     _fputc:
  1964                           	opt callstack 25
  1965                           
  1966                           ;incstack = 0
  1967  000FC2  5006               	movf	fputc@fp,w,c
  1968  000FC4  1007               	iorwf	fputc@fp+1,w,c
  1969  000FC6  B4D8               	btfsc	status,2,c
  1970  000FC8  D004               	goto	u1470
  1971  000FCA  5006               	movf	fputc@fp,w,c
  1972  000FCC  1007               	iorwf	fputc@fp+1,w,c
  1973  000FCE  A4D8               	btfss	status,2,c
  1974  000FD0  D004               	goto	l2003
  1975  000FD2                     u1470:
  1976  000FD2  5004               	movf	fputc@c,w,c
  1977  000FD4  EC63  F00A         	call	_putch
  1978  000FD8  0012               	return	
  1979  000FDA                     l2003:
  1980  000FDA  EE20 F004          	lfsr	2,4
  1981  000FDE  5006               	movf	fputc@fp,w,c
  1982  000FE0  26D9               	addwf	fsr2l,f,c
  1983  000FE2  5007               	movf	fputc@fp+1,w,c
  1984  000FE4  22DA               	addwfc	fsr2h,f,c
  1985  000FE6  50DE               	movf	postinc2,w,c
  1986  000FE8  10DE               	iorwf	postinc2,w,c
  1987  000FEA  B4D8               	btfsc	status,2,c
  1988  000FEC  D016               	goto	u1490
  1989  000FEE  EE20 F004          	lfsr	2,4
  1990  000FF2  5006               	movf	fputc@fp,w,c
  1991  000FF4  26D9               	addwf	fsr2l,f,c
  1992  000FF6  5007               	movf	fputc@fp+1,w,c
  1993  000FF8  22DA               	addwfc	fsr2h,f,c
  1994  000FFA  EE10 F002          	lfsr	1,2
  1995  000FFE  5006               	movf	fputc@fp,w,c
  1996  001000  26E1               	addwf	fsr1l,f,c
  1997  001002  5007               	movf	fputc@fp+1,w,c
  1998  001004  22E2               	addwfc	fsr1h,f,c
  1999  001006  50DE               	movf	postinc2,w,c
  2000  001008  5CE6               	subwf	postinc1,w,c
  2001  00100A  50E6               	movf	postinc1,w,c
  2002  00100C  0A80               	xorlw	128
  2003  00100E  6E0C               	movwf	(??_fputc+4)& (0+255),c
  2004  001010  50DE               	movf	postinc2,w,c
  2005  001012  0A80               	xorlw	128
  2006  001014  580C               	subwfb	(??_fputc+4)& (0+255),w,c
  2007  001016  B0D8               	btfsc	status,0,c
  2008  001018  0012               	return	
  2009  00101A                     u1490:
  2010  00101A  EE20 F002          	lfsr	2,2
  2011  00101E  5006               	movf	fputc@fp,w,c
  2012  001020  26D9               	addwf	fsr2l,f,c
  2013  001022  5007               	movf	fputc@fp+1,w,c
  2014  001024  22DA               	addwfc	fsr2h,f,c
  2015  001026  CFDE F008          	movff	postinc2,??_fputc
  2016  00102A  CFDD F009          	movff	postdec2,??_fputc+1
  2017  00102E  C006  FFD9         	movff	fputc@fp,fsr2l
  2018  001032  C007  FFDA         	movff	fputc@fp+1,fsr2h
  2019  001036  CFDE F00A          	movff	postinc2,??_fputc+2
  2020  00103A  CFDD F00B          	movff	postdec2,??_fputc+3
  2021  00103E  5008               	movf	??_fputc,w,c
  2022  001040  240A               	addwf	??_fputc+2,w,c
  2023  001042  6ED9               	movwf	fsr2l,c
  2024  001044  5009               	movf	??_fputc+1,w,c
  2025  001046  200B               	addwfc	??_fputc+3,w,c
  2026  001048  6EDA               	movwf	fsr2h,c
  2027  00104A  C004  FFDF         	movff	fputc@c,indf2
  2028  00104E  EE20 F002          	lfsr	2,2
  2029  001052  5006               	movf	fputc@fp,w,c
  2030  001054  26D9               	addwf	fsr2l,f,c
  2031  001056  5007               	movf	fputc@fp+1,w,c
  2032  001058  22DA               	addwfc	fsr2h,f,c
  2033  00105A  2ADE               	incf	postinc2,f,c
  2034  00105C  0E00               	movlw	0
  2035  00105E  22DD               	addwfc	postdec2,f,c
  2036  001060  0012               	return		;funcret
  2037  001062                     __end_of_fputc:
  2038                           	opt callstack 0
  2039                           
  2040 ;; *************** function _putch *****************
  2041 ;; Defined at:
  2042 ;;		line 7 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\putch.c"
  2043 ;; Parameters:    Size  Location     Type
  2044 ;;  c               1    wreg     unsigned char 
  2045 ;; Auto vars:     Size  Location     Type
  2046 ;;  c               1    0[COMRAM] unsigned char 
  2047 ;; Return value:  Size  Location     Type
  2048 ;;                  1    wreg      void 
  2049 ;; Registers used:
  2050 ;;		wreg
  2051 ;; Tracked objects:
  2052 ;;		On entry : 0/0
  2053 ;;		On exit  : 0/0
  2054 ;;		Unchanged: 0/0
  2055 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2056 ;;      Params:         0       0       0       0       0       0       0
  2057 ;;      Locals:         0       0       0       0       0       0       0
  2058 ;;      Temps:          0       0       0       0       0       0       0
  2059 ;;      Totals:         0       0       0       0       0       0       0
  2060 ;;Total ram usage:        0 bytes
  2061 ;; Hardware stack levels used:    1
  2062 ;; Hardware stack levels required when called:    1
  2063 ;; This function calls:
  2064 ;;		Nothing
  2065 ;; This function is called by:
  2066 ;;		_fputc
  2067 ;; This function uses a non-reentrant model
  2068 ;;
  2069                           
  2070                           	psect	text9
  2071  0014C6                     __ptext9:
  2072                           	opt callstack 0
  2073  0014C6                     _putch:
  2074                           	opt callstack 25
  2075                           
  2076                           ;incstack = 0
  2077  0014C6  0012               	return		;funcret
  2078  0014C8                     __end_of_putch:
  2079                           	opt callstack 0
  2080                           
  2081 ;; *************** function _abs *****************
  2082 ;; Defined at:
  2083 ;;		line 1 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\abs.c"
  2084 ;; Parameters:    Size  Location     Type
  2085 ;;  a               2   21[COMRAM] int 
  2086 ;; Auto vars:     Size  Location     Type
  2087 ;;		None
  2088 ;; Return value:  Size  Location     Type
  2089 ;;                  2   21[COMRAM] int 
  2090 ;; Registers used:
  2091 ;;		wreg, status,2, status,0
  2092 ;; Tracked objects:
  2093 ;;		On entry : 0/0
  2094 ;;		On exit  : 0/0
  2095 ;;		Unchanged: 0/0
  2096 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2097 ;;      Params:         2       0       0       0       0       0       0
  2098 ;;      Locals:         0       0       0       0       0       0       0
  2099 ;;      Temps:          2       0       0       0       0       0       0
  2100 ;;      Totals:         4       0       0       0       0       0       0
  2101 ;;Total ram usage:        4 bytes
  2102 ;; Hardware stack levels used:    1
  2103 ;; Hardware stack levels required when called:    1
  2104 ;; This function calls:
  2105 ;;		Nothing
  2106 ;; This function is called by:
  2107 ;;		_dtoa
  2108 ;; This function uses a non-reentrant model
  2109 ;;
  2110                           
  2111                           	psect	text10
  2112  0013BC                     __ptext10:
  2113                           	opt callstack 0
  2114  0013BC                     _abs:
  2115                           	opt callstack 25
  2116                           
  2117                           ;incstack = 0
  2118  0013BC  BE17               	btfsc	abs@a+1,7,c
  2119  0013BE  D005               	goto	u1560
  2120  0013C0  5017               	movf	abs@a+1,w,c
  2121  0013C2  E110               	bnz	l859
  2122  0013C4  0416               	decf	abs@a,w,c
  2123  0013C6  B0D8               	btfsc	status,0,c
  2124  0013C8  D00D               	goto	l859
  2125  0013CA                     u1560:
  2126  0013CA  C016  F018         	movff	abs@a,??_abs
  2127  0013CE  C017  F019         	movff	abs@a+1,??_abs+1
  2128  0013D2  1E18               	comf	??_abs,f,c
  2129  0013D4  1E19               	comf	??_abs+1,f,c
  2130  0013D6  4A18               	infsnz	??_abs,f,c
  2131  0013D8  2A19               	incf	??_abs+1,f,c
  2132  0013DA  C018  F016         	movff	??_abs,?_abs
  2133  0013DE  C019  F017         	movff	??_abs+1,?_abs+1
  2134  0013E2  0012               	return	
  2135  0013E4                     l859:
  2136  0013E4  C016  F016         	movff	abs@a,?_abs
  2137  0013E8  C017  F017         	movff	abs@a+1,?_abs+1
  2138  0013EC  0012               	return		;funcret
  2139  0013EE                     __end_of_abs:
  2140                           	opt callstack 0
  2141                           
  2142 ;; *************** function ___aomod *****************
  2143 ;; Defined at:
  2144 ;;		line 9 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\aomod.c"
  2145 ;; Parameters:    Size  Location     Type
  2146 ;;  dividend        8    3[COMRAM] long long 
  2147 ;;  divisor         8   11[COMRAM] long long 
  2148 ;; Auto vars:     Size  Location     Type
  2149 ;;  sign            1   20[COMRAM] unsigned char 
  2150 ;;  counter         1   19[COMRAM] unsigned char 
  2151 ;; Return value:  Size  Location     Type
  2152 ;;                  8    3[COMRAM] long long 
  2153 ;; Registers used:
  2154 ;;		wreg, status,2, status,0
  2155 ;; Tracked objects:
  2156 ;;		On entry : 0/0
  2157 ;;		On exit  : 0/0
  2158 ;;		Unchanged: 0/0
  2159 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2160 ;;      Params:        16       0       0       0       0       0       0
  2161 ;;      Locals:         2       0       0       0       0       0       0
  2162 ;;      Temps:          0       0       0       0       0       0       0
  2163 ;;      Totals:        18       0       0       0       0       0       0
  2164 ;;Total ram usage:       18 bytes
  2165 ;; Hardware stack levels used:    1
  2166 ;; Hardware stack levels required when called:    1
  2167 ;; This function calls:
  2168 ;;		Nothing
  2169 ;; This function is called by:
  2170 ;;		_dtoa
  2171 ;; This function uses a non-reentrant model
  2172 ;;
  2173                           
  2174                           	psect	text11
  2175  000DBA                     __ptext11:
  2176                           	opt callstack 0
  2177  000DBA                     ___aomod:
  2178                           	opt callstack 25
  2179                           
  2180                           ;incstack = 0
  2181  000DBA  0E00               	movlw	0
  2182  000DBC  6E15               	movwf	___aomod@sign,c
  2183  000DBE  AE0B               	btfss	___aomod@dividend+7,7,c
  2184  000DC0  D012               	goto	l2117
  2185  000DC2  1E0B               	comf	___aomod@dividend+7,f,c
  2186  000DC4  1E0A               	comf	___aomod@dividend+6,f,c
  2187  000DC6  1E09               	comf	___aomod@dividend+5,f,c
  2188  000DC8  1E08               	comf	___aomod@dividend+4,f,c
  2189  000DCA  1E07               	comf	___aomod@dividend+3,f,c
  2190  000DCC  1E06               	comf	___aomod@dividend+2,f,c
  2191  000DCE  1E05               	comf	___aomod@dividend+1,f,c
  2192  000DD0  6C04               	negf	___aomod@dividend,c
  2193  000DD2  0E00               	movlw	0
  2194  000DD4  2205               	addwfc	___aomod@dividend+1,f,c
  2195  000DD6  2206               	addwfc	___aomod@dividend+2,f,c
  2196  000DD8  2207               	addwfc	___aomod@dividend+3,f,c
  2197  000DDA  2208               	addwfc	___aomod@dividend+4,f,c
  2198  000DDC  2209               	addwfc	___aomod@dividend+5,f,c
  2199  000DDE  220A               	addwfc	___aomod@dividend+6,f,c
  2200  000DE0  220B               	addwfc	___aomod@dividend+7,f,c
  2201  000DE2  0E01               	movlw	1
  2202  000DE4  6E15               	movwf	___aomod@sign,c
  2203  000DE6                     l2117:
  2204  000DE6  AE13               	btfss	___aomod@divisor+7,7,c
  2205  000DE8  D010               	goto	l2121
  2206  000DEA  1E13               	comf	___aomod@divisor+7,f,c
  2207  000DEC  1E12               	comf	___aomod@divisor+6,f,c
  2208  000DEE  1E11               	comf	___aomod@divisor+5,f,c
  2209  000DF0  1E10               	comf	___aomod@divisor+4,f,c
  2210  000DF2  1E0F               	comf	___aomod@divisor+3,f,c
  2211  000DF4  1E0E               	comf	___aomod@divisor+2,f,c
  2212  000DF6  1E0D               	comf	___aomod@divisor+1,f,c
  2213  000DF8  6C0C               	negf	___aomod@divisor,c
  2214  000DFA  0E00               	movlw	0
  2215  000DFC  220D               	addwfc	___aomod@divisor+1,f,c
  2216  000DFE  220E               	addwfc	___aomod@divisor+2,f,c
  2217  000E00  220F               	addwfc	___aomod@divisor+3,f,c
  2218  000E02  2210               	addwfc	___aomod@divisor+4,f,c
  2219  000E04  2211               	addwfc	___aomod@divisor+5,f,c
  2220  000E06  2212               	addwfc	___aomod@divisor+6,f,c
  2221  000E08  2213               	addwfc	___aomod@divisor+7,f,c
  2222  000E0A                     l2121:
  2223  000E0A  500C               	movf	___aomod@divisor,w,c
  2224  000E0C  100D               	iorwf	___aomod@divisor+1,w,c
  2225  000E0E  100E               	iorwf	___aomod@divisor+2,w,c
  2226  000E10  100F               	iorwf	___aomod@divisor+3,w,c
  2227  000E12  1010               	iorwf	___aomod@divisor+4,w,c
  2228  000E14  1011               	iorwf	___aomod@divisor+5,w,c
  2229  000E16  1012               	iorwf	___aomod@divisor+6,w,c
  2230  000E18  1013               	iorwf	___aomod@divisor+7,w,c
  2231  000E1A  B4D8               	btfsc	status,2,c
  2232  000E1C  D03C               	goto	l2137
  2233  000E1E  0E01               	movlw	1
  2234  000E20  6E14               	movwf	___aomod@counter,c
  2235  000E22  D00A               	goto	l2127
  2236  000E24                     l2125:
  2237  000E24  90D8               	bcf	status,0,c
  2238  000E26  360C               	rlcf	___aomod@divisor,f,c
  2239  000E28  360D               	rlcf	___aomod@divisor+1,f,c
  2240  000E2A  360E               	rlcf	___aomod@divisor+2,f,c
  2241  000E2C  360F               	rlcf	___aomod@divisor+3,f,c
  2242  000E2E  3610               	rlcf	___aomod@divisor+4,f,c
  2243  000E30  3611               	rlcf	___aomod@divisor+5,f,c
  2244  000E32  3612               	rlcf	___aomod@divisor+6,f,c
  2245  000E34  3613               	rlcf	___aomod@divisor+7,f,c
  2246  000E36  2A14               	incf	___aomod@counter,f,c
  2247  000E38                     l2127:
  2248  000E38  AE13               	btfss	___aomod@divisor+7,7,c
  2249  000E3A  D7F4               	goto	l2125
  2250  000E3C                     u1690:
  2251  000E3C  500C               	movf	___aomod@divisor,w,c
  2252  000E3E  5C04               	subwf	___aomod@dividend,w,c
  2253  000E40  500D               	movf	___aomod@divisor+1,w,c
  2254  000E42  5805               	subwfb	___aomod@dividend+1,w,c
  2255  000E44  500E               	movf	___aomod@divisor+2,w,c
  2256  000E46  5806               	subwfb	___aomod@dividend+2,w,c
  2257  000E48  500F               	movf	___aomod@divisor+3,w,c
  2258  000E4A  5807               	subwfb	___aomod@dividend+3,w,c
  2259  000E4C  5010               	movf	___aomod@divisor+4,w,c
  2260  000E4E  5808               	subwfb	___aomod@dividend+4,w,c
  2261  000E50  5011               	movf	___aomod@divisor+5,w,c
  2262  000E52  5809               	subwfb	___aomod@dividend+5,w,c
  2263  000E54  5012               	movf	___aomod@divisor+6,w,c
  2264  000E56  580A               	subwfb	___aomod@dividend+6,w,c
  2265  000E58  5013               	movf	___aomod@divisor+7,w,c
  2266  000E5A  580B               	subwfb	___aomod@dividend+7,w,c
  2267  000E5C  A0D8               	btfss	status,0,c
  2268  000E5E  D010               	goto	l2133
  2269  000E60  500C               	movf	___aomod@divisor,w,c
  2270  000E62  5E04               	subwf	___aomod@dividend,f,c
  2271  000E64  500D               	movf	___aomod@divisor+1,w,c
  2272  000E66  5A05               	subwfb	___aomod@dividend+1,f,c
  2273  000E68  500E               	movf	___aomod@divisor+2,w,c
  2274  000E6A  5A06               	subwfb	___aomod@dividend+2,f,c
  2275  000E6C  500F               	movf	___aomod@divisor+3,w,c
  2276  000E6E  5A07               	subwfb	___aomod@dividend+3,f,c
  2277  000E70  5010               	movf	___aomod@divisor+4,w,c
  2278  000E72  5A08               	subwfb	___aomod@dividend+4,f,c
  2279  000E74  5011               	movf	___aomod@divisor+5,w,c
  2280  000E76  5A09               	subwfb	___aomod@dividend+5,f,c
  2281  000E78  5012               	movf	___aomod@divisor+6,w,c
  2282  000E7A  5A0A               	subwfb	___aomod@dividend+6,f,c
  2283  000E7C  5013               	movf	___aomod@divisor+7,w,c
  2284  000E7E  5A0B               	subwfb	___aomod@dividend+7,f,c
  2285  000E80                     l2133:
  2286  000E80  90D8               	bcf	status,0,c
  2287  000E82  3213               	rrcf	___aomod@divisor+7,f,c
  2288  000E84  3212               	rrcf	___aomod@divisor+6,f,c
  2289  000E86  3211               	rrcf	___aomod@divisor+5,f,c
  2290  000E88  3210               	rrcf	___aomod@divisor+4,f,c
  2291  000E8A  320F               	rrcf	___aomod@divisor+3,f,c
  2292  000E8C  320E               	rrcf	___aomod@divisor+2,f,c
  2293  000E8E  320D               	rrcf	___aomod@divisor+1,f,c
  2294  000E90  320C               	rrcf	___aomod@divisor,f,c
  2295  000E92  2E14               	decfsz	___aomod@counter,f,c
  2296  000E94  D7D3               	goto	u1690
  2297  000E96                     l2137:
  2298  000E96  5015               	movf	___aomod@sign,w,c
  2299  000E98  B4D8               	btfsc	status,2,c
  2300  000E9A  D010               	goto	l2141
  2301  000E9C  1E0B               	comf	___aomod@dividend+7,f,c
  2302  000E9E  1E0A               	comf	___aomod@dividend+6,f,c
  2303  000EA0  1E09               	comf	___aomod@dividend+5,f,c
  2304  000EA2  1E08               	comf	___aomod@dividend+4,f,c
  2305  000EA4  1E07               	comf	___aomod@dividend+3,f,c
  2306  000EA6  1E06               	comf	___aomod@dividend+2,f,c
  2307  000EA8  1E05               	comf	___aomod@dividend+1,f,c
  2308  000EAA  6C04               	negf	___aomod@dividend,c
  2309  000EAC  0E00               	movlw	0
  2310  000EAE  2205               	addwfc	___aomod@dividend+1,f,c
  2311  000EB0  2206               	addwfc	___aomod@dividend+2,f,c
  2312  000EB2  2207               	addwfc	___aomod@dividend+3,f,c
  2313  000EB4  2208               	addwfc	___aomod@dividend+4,f,c
  2314  000EB6  2209               	addwfc	___aomod@dividend+5,f,c
  2315  000EB8  220A               	addwfc	___aomod@dividend+6,f,c
  2316  000EBA  220B               	addwfc	___aomod@dividend+7,f,c
  2317  000EBC                     l2141:
  2318  000EBC  C004  F004         	movff	___aomod@dividend,?___aomod
  2319  000EC0  C005  F005         	movff	___aomod@dividend+1,?___aomod+1
  2320  000EC4  C006  F006         	movff	___aomod@dividend+2,?___aomod+2
  2321  000EC8  C007  F007         	movff	___aomod@dividend+3,?___aomod+3
  2322  000ECC  C008  F008         	movff	___aomod@dividend+4,?___aomod+4
  2323  000ED0  C009  F009         	movff	___aomod@dividend+5,?___aomod+5
  2324  000ED4  C00A  F00A         	movff	___aomod@dividend+6,?___aomod+6
  2325  000ED8  C00B  F00B         	movff	___aomod@dividend+7,?___aomod+7
  2326  000EDC  0012               	return		;funcret
  2327  000EDE                     __end_of___aomod:
  2328                           	opt callstack 0
  2329                           
  2330 ;; *************** function ___aodiv *****************
  2331 ;; Defined at:
  2332 ;;		line 9 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\aodiv.c"
  2333 ;; Parameters:    Size  Location     Type
  2334 ;;  dividend        8    3[COMRAM] long long 
  2335 ;;  divisor         8   11[COMRAM] long long 
  2336 ;; Auto vars:     Size  Location     Type
  2337 ;;  quotient        8   21[COMRAM] long long 
  2338 ;;  sign            1   20[COMRAM] unsigned char 
  2339 ;;  counter         1   19[COMRAM] unsigned char 
  2340 ;; Return value:  Size  Location     Type
  2341 ;;                  8    3[COMRAM] long long 
  2342 ;; Registers used:
  2343 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  2344 ;; Tracked objects:
  2345 ;;		On entry : 0/0
  2346 ;;		On exit  : 0/0
  2347 ;;		Unchanged: 0/0
  2348 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2349 ;;      Params:        16       0       0       0       0       0       0
  2350 ;;      Locals:        10       0       0       0       0       0       0
  2351 ;;      Temps:          0       0       0       0       0       0       0
  2352 ;;      Totals:        26       0       0       0       0       0       0
  2353 ;;Total ram usage:       26 bytes
  2354 ;; Hardware stack levels used:    1
  2355 ;; Hardware stack levels required when called:    1
  2356 ;; This function calls:
  2357 ;;		Nothing
  2358 ;; This function is called by:
  2359 ;;		_dtoa
  2360 ;; This function uses a non-reentrant model
  2361 ;;
  2362                           
  2363                           	psect	text12
  2364  000B32                     __ptext12:
  2365                           	opt callstack 0
  2366  000B32                     ___aodiv:
  2367                           	opt callstack 25
  2368                           
  2369                           ;incstack = 0
  2370  000B32  0E00               	movlw	0
  2371  000B34  6E15               	movwf	___aodiv@sign,c
  2372  000B36  AE13               	btfss	___aodiv@divisor+7,7,c
  2373  000B38  D012               	goto	l2073
  2374  000B3A  1E13               	comf	___aodiv@divisor+7,f,c
  2375  000B3C  1E12               	comf	___aodiv@divisor+6,f,c
  2376  000B3E  1E11               	comf	___aodiv@divisor+5,f,c
  2377  000B40  1E10               	comf	___aodiv@divisor+4,f,c
  2378  000B42  1E0F               	comf	___aodiv@divisor+3,f,c
  2379  000B44  1E0E               	comf	___aodiv@divisor+2,f,c
  2380  000B46  1E0D               	comf	___aodiv@divisor+1,f,c
  2381  000B48  6C0C               	negf	___aodiv@divisor,c
  2382  000B4A  0E00               	movlw	0
  2383  000B4C  220D               	addwfc	___aodiv@divisor+1,f,c
  2384  000B4E  220E               	addwfc	___aodiv@divisor+2,f,c
  2385  000B50  220F               	addwfc	___aodiv@divisor+3,f,c
  2386  000B52  2210               	addwfc	___aodiv@divisor+4,f,c
  2387  000B54  2211               	addwfc	___aodiv@divisor+5,f,c
  2388  000B56  2212               	addwfc	___aodiv@divisor+6,f,c
  2389  000B58  2213               	addwfc	___aodiv@divisor+7,f,c
  2390  000B5A  0E01               	movlw	1
  2391  000B5C  6E15               	movwf	___aodiv@sign,c
  2392  000B5E                     l2073:
  2393  000B5E  AE0B               	btfss	___aodiv@dividend+7,7,c
  2394  000B60  D012               	goto	l2079
  2395  000B62  1E0B               	comf	___aodiv@dividend+7,f,c
  2396  000B64  1E0A               	comf	___aodiv@dividend+6,f,c
  2397  000B66  1E09               	comf	___aodiv@dividend+5,f,c
  2398  000B68  1E08               	comf	___aodiv@dividend+4,f,c
  2399  000B6A  1E07               	comf	___aodiv@dividend+3,f,c
  2400  000B6C  1E06               	comf	___aodiv@dividend+2,f,c
  2401  000B6E  1E05               	comf	___aodiv@dividend+1,f,c
  2402  000B70  6C04               	negf	___aodiv@dividend,c
  2403  000B72  0E00               	movlw	0
  2404  000B74  2205               	addwfc	___aodiv@dividend+1,f,c
  2405  000B76  2206               	addwfc	___aodiv@dividend+2,f,c
  2406  000B78  2207               	addwfc	___aodiv@dividend+3,f,c
  2407  000B7A  2208               	addwfc	___aodiv@dividend+4,f,c
  2408  000B7C  2209               	addwfc	___aodiv@dividend+5,f,c
  2409  000B7E  220A               	addwfc	___aodiv@dividend+6,f,c
  2410  000B80  220B               	addwfc	___aodiv@dividend+7,f,c
  2411  000B82  0E01               	movlw	1
  2412  000B84  1A15               	xorwf	___aodiv@sign,f,c
  2413  000B86                     l2079:
  2414  000B86  EE20  F016         	lfsr	2,___aodiv@quotient
  2415  000B8A  0E07               	movlw	7
  2416  000B8C                     u1611:
  2417  000B8C  6ADE               	clrf	postinc2,c
  2418  000B8E  06E8               	decf	wreg,f,c
  2419  000B90  E2FD               	bc	u1611
  2420  000B92  500C               	movf	___aodiv@divisor,w,c
  2421  000B94  100D               	iorwf	___aodiv@divisor+1,w,c
  2422  000B96  100E               	iorwf	___aodiv@divisor+2,w,c
  2423  000B98  100F               	iorwf	___aodiv@divisor+3,w,c
  2424  000B9A  1010               	iorwf	___aodiv@divisor+4,w,c
  2425  000B9C  1011               	iorwf	___aodiv@divisor+5,w,c
  2426  000B9E  1012               	iorwf	___aodiv@divisor+6,w,c
  2427  000BA0  1013               	iorwf	___aodiv@divisor+7,w,c
  2428  000BA2  B4D8               	btfsc	status,2,c
  2429  000BA4  D046               	goto	l2101
  2430  000BA6  0E01               	movlw	1
  2431  000BA8  6E14               	movwf	___aodiv@counter,c
  2432  000BAA  D00A               	goto	l2087
  2433  000BAC                     l2085:
  2434  000BAC  90D8               	bcf	status,0,c
  2435  000BAE  360C               	rlcf	___aodiv@divisor,f,c
  2436  000BB0  360D               	rlcf	___aodiv@divisor+1,f,c
  2437  000BB2  360E               	rlcf	___aodiv@divisor+2,f,c
  2438  000BB4  360F               	rlcf	___aodiv@divisor+3,f,c
  2439  000BB6  3610               	rlcf	___aodiv@divisor+4,f,c
  2440  000BB8  3611               	rlcf	___aodiv@divisor+5,f,c
  2441  000BBA  3612               	rlcf	___aodiv@divisor+6,f,c
  2442  000BBC  3613               	rlcf	___aodiv@divisor+7,f,c
  2443  000BBE  2A14               	incf	___aodiv@counter,f,c
  2444  000BC0                     l2087:
  2445  000BC0  AE13               	btfss	___aodiv@divisor+7,7,c
  2446  000BC2  D7F4               	goto	l2085
  2447  000BC4                     u1630:
  2448  000BC4  90D8               	bcf	status,0,c
  2449  000BC6  3616               	rlcf	___aodiv@quotient,f,c
  2450  000BC8  3617               	rlcf	___aodiv@quotient+1,f,c
  2451  000BCA  3618               	rlcf	___aodiv@quotient+2,f,c
  2452  000BCC  3619               	rlcf	___aodiv@quotient+3,f,c
  2453  000BCE  361A               	rlcf	___aodiv@quotient+4,f,c
  2454  000BD0  361B               	rlcf	___aodiv@quotient+5,f,c
  2455  000BD2  361C               	rlcf	___aodiv@quotient+6,f,c
  2456  000BD4  361D               	rlcf	___aodiv@quotient+7,f,c
  2457  000BD6  500C               	movf	___aodiv@divisor,w,c
  2458  000BD8  5C04               	subwf	___aodiv@dividend,w,c
  2459  000BDA  500D               	movf	___aodiv@divisor+1,w,c
  2460  000BDC  5805               	subwfb	___aodiv@dividend+1,w,c
  2461  000BDE  500E               	movf	___aodiv@divisor+2,w,c
  2462  000BE0  5806               	subwfb	___aodiv@dividend+2,w,c
  2463  000BE2  500F               	movf	___aodiv@divisor+3,w,c
  2464  000BE4  5807               	subwfb	___aodiv@dividend+3,w,c
  2465  000BE6  5010               	movf	___aodiv@divisor+4,w,c
  2466  000BE8  5808               	subwfb	___aodiv@dividend+4,w,c
  2467  000BEA  5011               	movf	___aodiv@divisor+5,w,c
  2468  000BEC  5809               	subwfb	___aodiv@dividend+5,w,c
  2469  000BEE  5012               	movf	___aodiv@divisor+6,w,c
  2470  000BF0  580A               	subwfb	___aodiv@dividend+6,w,c
  2471  000BF2  5013               	movf	___aodiv@divisor+7,w,c
  2472  000BF4  580B               	subwfb	___aodiv@dividend+7,w,c
  2473  000BF6  A0D8               	btfss	status,0,c
  2474  000BF8  D011               	goto	l2097
  2475  000BFA  500C               	movf	___aodiv@divisor,w,c
  2476  000BFC  5E04               	subwf	___aodiv@dividend,f,c
  2477  000BFE  500D               	movf	___aodiv@divisor+1,w,c
  2478  000C00  5A05               	subwfb	___aodiv@dividend+1,f,c
  2479  000C02  500E               	movf	___aodiv@divisor+2,w,c
  2480  000C04  5A06               	subwfb	___aodiv@dividend+2,f,c
  2481  000C06  500F               	movf	___aodiv@divisor+3,w,c
  2482  000C08  5A07               	subwfb	___aodiv@dividend+3,f,c
  2483  000C0A  5010               	movf	___aodiv@divisor+4,w,c
  2484  000C0C  5A08               	subwfb	___aodiv@dividend+4,f,c
  2485  000C0E  5011               	movf	___aodiv@divisor+5,w,c
  2486  000C10  5A09               	subwfb	___aodiv@dividend+5,f,c
  2487  000C12  5012               	movf	___aodiv@divisor+6,w,c
  2488  000C14  5A0A               	subwfb	___aodiv@dividend+6,f,c
  2489  000C16  5013               	movf	___aodiv@divisor+7,w,c
  2490  000C18  5A0B               	subwfb	___aodiv@dividend+7,f,c
  2491  000C1A  8016               	bsf	___aodiv@quotient,0,c
  2492  000C1C                     l2097:
  2493  000C1C  90D8               	bcf	status,0,c
  2494  000C1E  3213               	rrcf	___aodiv@divisor+7,f,c
  2495  000C20  3212               	rrcf	___aodiv@divisor+6,f,c
  2496  000C22  3211               	rrcf	___aodiv@divisor+5,f,c
  2497  000C24  3210               	rrcf	___aodiv@divisor+4,f,c
  2498  000C26  320F               	rrcf	___aodiv@divisor+3,f,c
  2499  000C28  320E               	rrcf	___aodiv@divisor+2,f,c
  2500  000C2A  320D               	rrcf	___aodiv@divisor+1,f,c
  2501  000C2C  320C               	rrcf	___aodiv@divisor,f,c
  2502  000C2E  2E14               	decfsz	___aodiv@counter,f,c
  2503  000C30  D7C9               	goto	u1630
  2504  000C32                     l2101:
  2505  000C32  5015               	movf	___aodiv@sign,w,c
  2506  000C34  B4D8               	btfsc	status,2,c
  2507  000C36  D010               	goto	l2105
  2508  000C38  1E1D               	comf	___aodiv@quotient+7,f,c
  2509  000C3A  1E1C               	comf	___aodiv@quotient+6,f,c
  2510  000C3C  1E1B               	comf	___aodiv@quotient+5,f,c
  2511  000C3E  1E1A               	comf	___aodiv@quotient+4,f,c
  2512  000C40  1E19               	comf	___aodiv@quotient+3,f,c
  2513  000C42  1E18               	comf	___aodiv@quotient+2,f,c
  2514  000C44  1E17               	comf	___aodiv@quotient+1,f,c
  2515  000C46  6C16               	negf	___aodiv@quotient,c
  2516  000C48  0E00               	movlw	0
  2517  000C4A  2217               	addwfc	___aodiv@quotient+1,f,c
  2518  000C4C  2218               	addwfc	___aodiv@quotient+2,f,c
  2519  000C4E  2219               	addwfc	___aodiv@quotient+3,f,c
  2520  000C50  221A               	addwfc	___aodiv@quotient+4,f,c
  2521  000C52  221B               	addwfc	___aodiv@quotient+5,f,c
  2522  000C54  221C               	addwfc	___aodiv@quotient+6,f,c
  2523  000C56  221D               	addwfc	___aodiv@quotient+7,f,c
  2524  000C58                     l2105:
  2525  000C58  C016  F004         	movff	___aodiv@quotient,?___aodiv
  2526  000C5C  C017  F005         	movff	___aodiv@quotient+1,?___aodiv+1
  2527  000C60  C018  F006         	movff	___aodiv@quotient+2,?___aodiv+2
  2528  000C64  C019  F007         	movff	___aodiv@quotient+3,?___aodiv+3
  2529  000C68  C01A  F008         	movff	___aodiv@quotient+4,?___aodiv+4
  2530  000C6C  C01B  F009         	movff	___aodiv@quotient+5,?___aodiv+5
  2531  000C70  C01C  F00A         	movff	___aodiv@quotient+6,?___aodiv+6
  2532  000C74  C01D  F00B         	movff	___aodiv@quotient+7,?___aodiv+7
  2533  000C78  0012               	return		;funcret
  2534  000C7A                     __end_of___aodiv:
  2535                           	opt callstack 0
  2536                           
  2537 ;; *************** function _atoi *****************
  2538 ;; Defined at:
  2539 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\atoi.c"
  2540 ;; Parameters:    Size  Location     Type
  2541 ;;  s               2   10[COMRAM] PTR const unsigned char 
  2542 ;;		 -> STR_3(5), 
  2543 ;; Auto vars:     Size  Location     Type
  2544 ;;  n               2   23[COMRAM] int 
  2545 ;;  neg             2   16[COMRAM] int 
  2546 ;; Return value:  Size  Location     Type
  2547 ;;                  2   10[COMRAM] int 
  2548 ;; Registers used:
  2549 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2550 ;; Tracked objects:
  2551 ;;		On entry : 0/0
  2552 ;;		On exit  : 0/0
  2553 ;;		Unchanged: 0/0
  2554 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2555 ;;      Params:         2       0       0       0       0       0       0
  2556 ;;      Locals:         9       0       0       0       0       0       0
  2557 ;;      Temps:          4       0       0       0       0       0       0
  2558 ;;      Totals:        15       0       0       0       0       0       0
  2559 ;;Total ram usage:       15 bytes
  2560 ;; Hardware stack levels used:    1
  2561 ;; Hardware stack levels required when called:    2
  2562 ;; This function calls:
  2563 ;;		___wmul
  2564 ;;		_isdigit
  2565 ;;		_isspace
  2566 ;; This function is called by:
  2567 ;;		_vfpfcnvrt
  2568 ;; This function uses a non-reentrant model
  2569 ;;
  2570                           
  2571                           	psect	text13
  2572  000C7A                     __ptext13:
  2573                           	opt callstack 0
  2574  000C7A                     _atoi:
  2575                           	opt callstack 25
  2576                           
  2577                           ;incstack = 0
  2578  000C7A  0E00               	movlw	0
  2579  000C7C  6E19               	movwf	atoi@n+1,c
  2580  000C7E  0E00               	movlw	0
  2581  000C80  6E18               	movwf	atoi@n,c
  2582  000C82  0E00               	movlw	0
  2583  000C84  6E12               	movwf	atoi@neg+1,c
  2584  000C86  0E00               	movlw	0
  2585  000C88  6E11               	movwf	atoi@neg,c
  2586  000C8A  D002               	goto	l2223
  2587  000C8C                     l2221:
  2588  000C8C  4A0B               	infsnz	atoi@s,f,c
  2589  000C8E  2A0C               	incf	atoi@s+1,f,c
  2590  000C90                     l2223:
  2591  000C90  0E01               	movlw	1
  2592  000C92  6E17               	movwf	_atoi$862,c
  2593  000C94  C00B  FFF6         	movff	atoi@s,tblptrl
  2594  000C98  C00C  FFF7         	movff	atoi@s+1,tblptrh
  2595  000C9C                     	if	0	;tblptru may be non-zero
  2596  000C9C                     	endif
  2597  000C9C                     	if	0	;tblptru may be non-zero
  2598  000C9C                     	endif
  2599  000C9C  0008               	tblrd		*
  2600  000C9E  50F5               	movf	tablat,w,c
  2601  000CA0  0A20               	xorlw	32
  2602  000CA2  B4D8               	btfsc	status,2,c
  2603  000CA4  D018               	goto	l2231
  2604  000CA6  0EF7               	movlw	247
  2605  000CA8  6E0D               	movwf	??_atoi& (0+255),c
  2606  000CAA  0EFF               	movlw	255
  2607  000CAC  6E0E               	movwf	(??_atoi+1)& (0+255),c
  2608  000CAE  C00B  FFF6         	movff	atoi@s,tblptrl
  2609  000CB2  C00C  FFF7         	movff	atoi@s+1,tblptrh
  2610  000CB6                     	if	0	;tblptru may be non-zero
  2611  000CB6                     	endif
  2612  000CB6                     	if	0	;tblptru may be non-zero
  2613  000CB6                     	endif
  2614  000CB6  0008               	tblrd		*
  2615  000CB8  50F5               	movf	tablat,w,c
  2616  000CBA  6E0F               	movwf	(??_atoi+2)& (0+255),c
  2617  000CBC  6A10               	clrf	(??_atoi+3)& (0+255),c
  2618  000CBE  500D               	movf	??_atoi,w,c
  2619  000CC0  260F               	addwf	??_atoi+2,f,c
  2620  000CC2  500E               	movf	??_atoi+1,w,c
  2621  000CC4  2210               	addwfc	??_atoi+3,f,c
  2622  000CC6  5010               	movf	??_atoi+3,w,c
  2623  000CC8  E104               	bnz	u1900
  2624  000CCA  0E05               	movlw	5
  2625  000CCC  5C0F               	subwf	??_atoi+2,w,c
  2626  000CCE  A0D8               	btfss	status,0,c
  2627  000CD0  D002               	goto	l2231
  2628  000CD2                     u1900:
  2629  000CD2  0E00               	movlw	0
  2630  000CD4  6E17               	movwf	_atoi$862,c
  2631  000CD6                     l2231:
  2632  000CD6  C017  F013         	movff	_atoi$862,_atoi$861
  2633  000CDA  6A14               	clrf	_atoi$861+1,c
  2634  000CDC  5013               	movf	_atoi$861,w,c
  2635  000CDE  1014               	iorwf	_atoi$861+1,w,c
  2636  000CE0  B4D8               	btfsc	status,2,c
  2637  000CE2  D008               	goto	l2241
  2638  000CE4  D7D3               	goto	l2221
  2639  000CE6                     l2237:
  2640  000CE6  0E00               	movlw	0
  2641  000CE8  6E12               	movwf	atoi@neg+1,c
  2642  000CEA  0E01               	movlw	1
  2643  000CEC  6E11               	movwf	atoi@neg,c
  2644  000CEE                     l2239:
  2645  000CEE  4A0B               	infsnz	atoi@s,f,c
  2646  000CF0  2A0C               	incf	atoi@s+1,f,c
  2647  000CF2  D02E               	goto	l2247
  2648  000CF4                     l2241:
  2649  000CF4  C00B  FFF6         	movff	atoi@s,tblptrl
  2650  000CF8  C00C  FFF7         	movff	atoi@s+1,tblptrh
  2651  000CFC                     	if	0	;tblptru may be non-zero
  2652  000CFC                     	endif
  2653  000CFC                     	if	0	;tblptru may be non-zero
  2654  000CFC                     	endif
  2655  000CFC  0008               	tblrd		*
  2656  000CFE  50F5               	movf	tablat,w,c
  2657  000D00  6E0D               	movwf	??_atoi& (0+255),c
  2658  000D02  6A0E               	clrf	(??_atoi+1)& (0+255),c
  2659                           
  2660                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2661                           ; Switch size 1, requested type "simple"
  2662                           ; Number of cases is 1, Range of values is 0 to 0
  2663                           ; switch strategies available:
  2664                           ; Name         Instructions Cycles
  2665                           ; simple_byte            4     3 (average)
  2666                           ;	Chosen strategy is simple_byte
  2667  000D04  500E               	movf	??_atoi+1,w,c
  2668  000D06  0A00               	xorlw	0	; case 0
  2669  000D08  A4D8               	btfss	status,2,c
  2670  000D0A  D022               	goto	l2247
  2671                           
  2672                           ; Switch size 1, requested type "simple"
  2673                           ; Number of cases is 2, Range of values is 43 to 45
  2674                           ; switch strategies available:
  2675                           ; Name         Instructions Cycles
  2676                           ; simple_byte            7     4 (average)
  2677                           ;	Chosen strategy is simple_byte
  2678  000D0C  500D               	movf	??_atoi,w,c
  2679  000D0E  0A2B               	xorlw	43	; case 43
  2680  000D10  B4D8               	btfsc	status,2,c
  2681  000D12  D7ED               	goto	l2239
  2682  000D14  0A06               	xorlw	6	; case 45
  2683  000D16  B4D8               	btfsc	status,2,c
  2684  000D18  D7E6               	goto	l2237
  2685  000D1A  D01A               	goto	l2247
  2686  000D1C                     l2243:
  2687  000D1C  C018  F004         	movff	atoi@n,___wmul@multiplier
  2688  000D20  C019  F005         	movff	atoi@n+1,___wmul@multiplier+1
  2689  000D24  0E00               	movlw	0
  2690  000D26  6E07               	movwf	___wmul@multiplicand+1,c
  2691  000D28  0E0A               	movlw	10
  2692  000D2A  6E06               	movwf	___wmul@multiplicand,c
  2693  000D2C  EC37  F00A         	call	___wmul	;wreg free
  2694  000D30  C00B  FFF6         	movff	atoi@s,tblptrl
  2695  000D34  C00C  FFF7         	movff	atoi@s+1,tblptrh
  2696  000D38                     	if	0	;tblptru may be non-zero
  2697  000D38                     	endif
  2698  000D38                     	if	0	;tblptru may be non-zero
  2699  000D38                     	endif
  2700  000D38  0008               	tblrd		*
  2701  000D3A  50F5               	movf	tablat,w,c
  2702  000D3C  5E04               	subwf	?___wmul,f,c
  2703  000D3E  0E00               	movlw	0
  2704  000D40  5A05               	subwfb	?___wmul+1,f,c
  2705  000D42  0E30               	movlw	48
  2706  000D44  2404               	addwf	?___wmul,w,c
  2707  000D46  6E18               	movwf	atoi@n,c
  2708  000D48  0E00               	movlw	0
  2709  000D4A  2005               	addwfc	?___wmul+1,w,c
  2710  000D4C  6E19               	movwf	atoi@n+1,c
  2711  000D4E  D7CF               	goto	l2239
  2712  000D50                     l2247:
  2713  000D50  0ED0               	movlw	208
  2714  000D52  6E0D               	movwf	??_atoi& (0+255),c
  2715  000D54  0EFF               	movlw	255
  2716  000D56  6E0E               	movwf	(??_atoi+1)& (0+255),c
  2717  000D58  C00B  FFF6         	movff	atoi@s,tblptrl
  2718  000D5C  C00C  FFF7         	movff	atoi@s+1,tblptrh
  2719  000D60                     	if	0	;tblptru may be non-zero
  2720  000D60                     	endif
  2721  000D60                     	if	0	;tblptru may be non-zero
  2722  000D60                     	endif
  2723  000D60  0008               	tblrd		*
  2724  000D62  50F5               	movf	tablat,w,c
  2725  000D64  6E0F               	movwf	(??_atoi+2)& (0+255),c
  2726  000D66  6A10               	clrf	(??_atoi+3)& (0+255),c
  2727  000D68  500D               	movf	??_atoi,w,c
  2728  000D6A  260F               	addwf	??_atoi+2,f,c
  2729  000D6C  500E               	movf	??_atoi+1,w,c
  2730  000D6E  2210               	addwfc	??_atoi+3,f,c
  2731  000D70  5010               	movf	??_atoi+3,w,c
  2732  000D72  E106               	bnz	u1920
  2733  000D74  0E0A               	movlw	10
  2734  000D76  5C0F               	subwf	??_atoi+2,w,c
  2735  000D78  B0D8               	btfsc	status,0,c
  2736  000D7A  D002               	goto	u1920
  2737  000D7C  0E01               	movlw	1
  2738  000D7E  D001               	goto	u1930
  2739  000D80                     u1920:
  2740  000D80  0E00               	movlw	0
  2741  000D82                     u1930:
  2742  000D82  6E15               	movwf	_atoi$863,c
  2743  000D84  6A16               	clrf	_atoi$863+1,c
  2744  000D86  5015               	movf	_atoi$863,w,c
  2745  000D88  1016               	iorwf	_atoi$863+1,w,c
  2746  000D8A  A4D8               	btfss	status,2,c
  2747  000D8C  D7C7               	goto	l2243
  2748  000D8E  5011               	movf	atoi@neg,w,c
  2749  000D90  1012               	iorwf	atoi@neg+1,w,c
  2750  000D92  A4D8               	btfss	status,2,c
  2751  000D94  D00D               	goto	l890
  2752  000D96  C018  F00D         	movff	atoi@n,??_atoi
  2753  000D9A  C019  F00E         	movff	atoi@n+1,??_atoi+1
  2754  000D9E  1E0D               	comf	??_atoi,f,c
  2755  000DA0  1E0E               	comf	??_atoi+1,f,c
  2756  000DA2  4A0D               	infsnz	??_atoi,f,c
  2757  000DA4  2A0E               	incf	??_atoi+1,f,c
  2758  000DA6  C00D  F00B         	movff	??_atoi,?_atoi
  2759  000DAA  C00E  F00C         	movff	??_atoi+1,?_atoi+1
  2760  000DAE  0012               	return	
  2761  000DB0                     l890:
  2762  000DB0  C018  F00B         	movff	atoi@n,?_atoi
  2763  000DB4  C019  F00C         	movff	atoi@n+1,?_atoi+1
  2764  000DB8  0012               	return		;funcret
  2765  000DBA                     __end_of_atoi:
  2766                           	opt callstack 0
  2767                           
  2768 ;; *************** function _isspace *****************
  2769 ;; Defined at:
  2770 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\isspace.c"
  2771 ;; Parameters:    Size  Location     Type
  2772 ;;  c               2    3[COMRAM] int 
  2773 ;; Auto vars:     Size  Location     Type
  2774 ;;		None
  2775 ;; Return value:  Size  Location     Type
  2776 ;;                  2    3[COMRAM] int 
  2777 ;; Registers used:
  2778 ;;		wreg, status,2, status,0
  2779 ;; Tracked objects:
  2780 ;;		On entry : 0/0
  2781 ;;		On exit  : 0/0
  2782 ;;		Unchanged: 0/0
  2783 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2784 ;;      Params:         2       0       0       0       0       0       0
  2785 ;;      Locals:         1       0       0       0       0       0       0
  2786 ;;      Temps:          4       0       0       0       0       0       0
  2787 ;;      Totals:         7       0       0       0       0       0       0
  2788 ;;Total ram usage:        7 bytes
  2789 ;; Hardware stack levels used:    1
  2790 ;; Hardware stack levels required when called:    1
  2791 ;; This function calls:
  2792 ;;		Nothing
  2793 ;; This function is called by:
  2794 ;;		_atoi
  2795 ;; This function uses a non-reentrant model
  2796 ;;
  2797                           
  2798                           	psect	text14
  2799  001346                     __ptext14:
  2800                           	opt callstack 0
  2801  001346                     _isspace:
  2802                           	opt callstack 25
  2803                           
  2804                           ;incstack = 0
  2805  001346  0E01               	movlw	1
  2806  001348  6E0A               	movwf	_isspace$879,c
  2807  00134A  0E20               	movlw	32
  2808  00134C  1804               	xorwf	isspace@c,w,c
  2809  00134E  1005               	iorwf	isspace@c+1,w,c
  2810  001350  B4D8               	btfsc	status,2,c
  2811  001352  D014               	goto	l2153
  2812  001354  0EF7               	movlw	247
  2813  001356  6E06               	movwf	??_isspace& (0+255),c
  2814  001358  0EFF               	movlw	255
  2815  00135A  6E07               	movwf	(??_isspace+1)& (0+255),c
  2816  00135C  C004  F008         	movff	isspace@c,??_isspace+2
  2817  001360  C005  F009         	movff	isspace@c+1,??_isspace+3
  2818  001364  5006               	movf	??_isspace,w,c
  2819  001366  2608               	addwf	??_isspace+2,f,c
  2820  001368  5007               	movf	??_isspace+1,w,c
  2821  00136A  2209               	addwfc	??_isspace+3,f,c
  2822  00136C  5009               	movf	??_isspace+3,w,c
  2823  00136E  E104               	bnz	u1730
  2824  001370  0E05               	movlw	5
  2825  001372  5C08               	subwf	??_isspace+2,w,c
  2826  001374  A0D8               	btfss	status,0,c
  2827  001376  D002               	goto	l2153
  2828  001378                     u1730:
  2829  001378  0E00               	movlw	0
  2830  00137A  6E0A               	movwf	_isspace$879,c
  2831  00137C                     l2153:
  2832  00137C  C00A  F004         	movff	_isspace$879,?_isspace
  2833  001380  6A05               	clrf	?_isspace+1,c
  2834  001382  0012               	return		;funcret
  2835  001384                     __end_of_isspace:
  2836                           	opt callstack 0
  2837                           
  2838 ;; *************** function _isdigit *****************
  2839 ;; Defined at:
  2840 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\isdigit.c"
  2841 ;; Parameters:    Size  Location     Type
  2842 ;;  c               2    3[COMRAM] int 
  2843 ;; Auto vars:     Size  Location     Type
  2844 ;;		None
  2845 ;; Return value:  Size  Location     Type
  2846 ;;                  2    3[COMRAM] int 
  2847 ;; Registers used:
  2848 ;;		wreg, status,2, status,0
  2849 ;; Tracked objects:
  2850 ;;		On entry : 0/0
  2851 ;;		On exit  : 0/0
  2852 ;;		Unchanged: 0/0
  2853 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2854 ;;      Params:         2       0       0       0       0       0       0
  2855 ;;      Locals:         0       0       0       0       0       0       0
  2856 ;;      Temps:          4       0       0       0       0       0       0
  2857 ;;      Totals:         6       0       0       0       0       0       0
  2858 ;;Total ram usage:        6 bytes
  2859 ;; Hardware stack levels used:    1
  2860 ;; Hardware stack levels required when called:    1
  2861 ;; This function calls:
  2862 ;;		Nothing
  2863 ;; This function is called by:
  2864 ;;		_vfpfcnvrt
  2865 ;;		_atoi
  2866 ;; This function uses a non-reentrant model
  2867 ;;
  2868                           
  2869                           	psect	text15
  2870  0013EE                     __ptext15:
  2871                           	opt callstack 0
  2872  0013EE                     _isdigit:
  2873                           	opt callstack 26
  2874                           
  2875                           ;incstack = 0
  2876  0013EE  0ED0               	movlw	208
  2877  0013F0  6E06               	movwf	??_isdigit& (0+255),c
  2878  0013F2  0EFF               	movlw	255
  2879  0013F4  6E07               	movwf	(??_isdigit+1)& (0+255),c
  2880  0013F6  C004  F008         	movff	isdigit@c,??_isdigit+2
  2881  0013FA  C005  F009         	movff	isdigit@c+1,??_isdigit+3
  2882  0013FE  5006               	movf	??_isdigit,w,c
  2883  001400  2608               	addwf	??_isdigit+2,f,c
  2884  001402  5007               	movf	??_isdigit+1,w,c
  2885  001404  2209               	addwfc	??_isdigit+3,f,c
  2886  001406  5009               	movf	??_isdigit+3,w,c
  2887  001408  E106               	bnz	u1570
  2888  00140A  0E0A               	movlw	10
  2889  00140C  5C08               	subwf	??_isdigit+2,w,c
  2890  00140E  B0D8               	btfsc	status,0,c
  2891  001410  D002               	goto	u1570
  2892  001412  0E01               	movlw	1
  2893  001414  D001               	goto	u1580
  2894  001416                     u1570:
  2895  001416  0E00               	movlw	0
  2896  001418                     u1580:
  2897  001418  6E04               	movwf	?_isdigit,c
  2898  00141A  6A05               	clrf	?_isdigit+1,c
  2899  00141C  0012               	return		;funcret
  2900  00141E                     __end_of_isdigit:
  2901                           	opt callstack 0
  2902                           
  2903 ;; *************** function ___wmul *****************
  2904 ;; Defined at:
  2905 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\Umul16.c"
  2906 ;; Parameters:    Size  Location     Type
  2907 ;;  multiplier      2    3[COMRAM] unsigned int 
  2908 ;;  multiplicand    2    5[COMRAM] unsigned int 
  2909 ;; Auto vars:     Size  Location     Type
  2910 ;;  product         2    7[COMRAM] unsigned int 
  2911 ;; Return value:  Size  Location     Type
  2912 ;;                  2    3[COMRAM] unsigned int 
  2913 ;; Registers used:
  2914 ;;		wreg, status,2, status,0, prodl, prodh
  2915 ;; Tracked objects:
  2916 ;;		On entry : 0/0
  2917 ;;		On exit  : 0/0
  2918 ;;		Unchanged: 0/0
  2919 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2920 ;;      Params:         4       0       0       0       0       0       0
  2921 ;;      Locals:         2       0       0       0       0       0       0
  2922 ;;      Temps:          0       0       0       0       0       0       0
  2923 ;;      Totals:         6       0       0       0       0       0       0
  2924 ;;Total ram usage:        6 bytes
  2925 ;; Hardware stack levels used:    1
  2926 ;; Hardware stack levels required when called:    1
  2927 ;; This function calls:
  2928 ;;		Nothing
  2929 ;; This function is called by:
  2930 ;;		_atoi
  2931 ;; This function uses a non-reentrant model
  2932 ;;
  2933                           
  2934                           	psect	text16
  2935  00146E                     __ptext16:
  2936                           	opt callstack 0
  2937  00146E                     ___wmul:
  2938                           	opt callstack 25
  2939                           
  2940                           ;incstack = 0
  2941  00146E  5004               	movf	___wmul@multiplier,w,c
  2942  001470  0206               	mulwf	___wmul@multiplicand,c
  2943  001472  CFF3 F008          	movff	prodl,___wmul@product
  2944  001476  CFF4 F009          	movff	prodh,___wmul@product+1
  2945  00147A  5004               	movf	___wmul@multiplier,w,c
  2946  00147C  0207               	mulwf	___wmul@multiplicand+1,c
  2947  00147E  50F3               	movf	prodl,w,c
  2948  001480  2609               	addwf	___wmul@product+1,f,c
  2949  001482  5005               	movf	___wmul@multiplier+1,w,c
  2950  001484  0206               	mulwf	___wmul@multiplicand,c
  2951  001486  50F3               	movf	prodl,w,c
  2952  001488  2609               	addwf	___wmul@product+1,f,c
  2953  00148A  C008  F004         	movff	___wmul@product,?___wmul
  2954  00148E  C009  F005         	movff	___wmul@product+1,?___wmul+1
  2955  001492  0012               	return		;funcret
  2956  001494                     __end_of___wmul:
  2957                           	opt callstack 0
  2958                           
  2959 ;; *************** function _lcd_ini *****************
  2960 ;; Defined at:
  2961 ;;		line 3 in file "../Bibliotecas/LCD4bits.c"
  2962 ;; Parameters:    Size  Location     Type
  2963 ;;		None
  2964 ;; Auto vars:     Size  Location     Type
  2965 ;;  i               1    8[COMRAM] unsigned char 
  2966 ;; Return value:  Size  Location     Type
  2967 ;;                  1    wreg      void 
  2968 ;; Registers used:
  2969 ;;		wreg, status,2, status,0, cstack
  2970 ;; Tracked objects:
  2971 ;;		On entry : 0/0
  2972 ;;		On exit  : 0/0
  2973 ;;		Unchanged: 0/0
  2974 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2975 ;;      Params:         0       0       0       0       0       0       0
  2976 ;;      Locals:         1       0       0       0       0       0       0
  2977 ;;      Temps:          1       0       0       0       0       0       0
  2978 ;;      Totals:         2       0       0       0       0       0       0
  2979 ;;Total ram usage:        2 bytes
  2980 ;; Hardware stack levels used:    1
  2981 ;; Hardware stack levels required when called:    3
  2982 ;; This function calls:
  2983 ;;		_lcd_cmd
  2984 ;; This function is called by:
  2985 ;;		_main
  2986 ;; This function uses a non-reentrant model
  2987 ;;
  2988                           
  2989                           	psect	text17
  2990  001196                     __ptext17:
  2991                           	opt callstack 0
  2992  001196                     _lcd_ini:
  2993                           	opt callstack 27
  2994                           
  2995                           ;../Bibliotecas/LCD4bits.c: 5:     char i;;../Bibliotecas/LCD4bits.c: 7:    TRISD = 0b00
      +                          000000;
  2996                           
  2997                           ;incstack = 0
  2998  001196  0E00               	movlw	0
  2999  001198  6E95               	movwf	3989,c	;volatile
  3000                           
  3001                           ;../Bibliotecas/LCD4bits.c: 8:    TRISEbits.TRISE0 = 0;
  3002  00119A  9096               	bcf	3990,0,c	;volatile
  3003                           
  3004                           ;../Bibliotecas/LCD4bits.c: 9:    TRISEbits.TRISE1 = 0;
  3005  00119C  9296               	bcf	3990,1,c	;volatile
  3006                           
  3007                           ;../Bibliotecas/LCD4bits.c: 11:    LATD = 0b00000000;
  3008  00119E  0E00               	movlw	0
  3009  0011A0  6E8C               	movwf	3980,c	;volatile
  3010                           
  3011                           ;../Bibliotecas/LCD4bits.c: 12:    LATEbits.LATE0 = 0;
  3012  0011A2  908D               	bcf	3981,0,c	;volatile
  3013                           
  3014                           ;../Bibliotecas/LCD4bits.c: 13:    LATEbits.LATE1 = 0;
  3015  0011A4  928D               	bcf	3981,1,c	;volatile
  3016                           
  3017                           ;../Bibliotecas/LCD4bits.c: 15:    _delay((unsigned long)((15)*(8000000/4000.0)));
  3018  0011A6  0E27               	movlw	39
  3019  0011A8  6E08               	movwf	??_lcd_ini& (0+255),c
  3020  0011AA  0EF5               	movlw	245
  3021  0011AC                     u2107:
  3022  0011AC  2EE8               	decfsz	wreg,f,c
  3023  0011AE  D7FE               	bra	u2107
  3024  0011B0  2E08               	decfsz	??_lcd_ini& (0+255),f,c
  3025  0011B2  D7FC               	bra	u2107
  3026  0011B4  F000               	nop	
  3027                           
  3028                           ;../Bibliotecas/LCD4bits.c: 17:    for(i = 0; i < 3; i++)
  3029  0011B6  0E00               	movlw	0
  3030  0011B8  6E09               	movwf	lcd_ini@i,c
  3031  0011BA                     l1889:
  3032                           
  3033                           ;../Bibliotecas/LCD4bits.c: 18:    {;../Bibliotecas/LCD4bits.c: 19:        lcd_cmd(0x30)
      +                          ;
  3034  0011BA  0E30               	movlw	48
  3035  0011BC  EC6F  F007         	call	_lcd_cmd
  3036                           
  3037                           ;../Bibliotecas/LCD4bits.c: 20:        _delay((unsigned long)((5)*(8000000/4000.0)));
  3038  0011C0  0E0D               	movlw	13
  3039  0011C2  6E08               	movwf	??_lcd_ini& (0+255),c
  3040  0011C4  0EFC               	movlw	252
  3041  0011C6                     u2117:
  3042  0011C6  2EE8               	decfsz	wreg,f,c
  3043  0011C8  D7FE               	bra	u2117
  3044  0011CA  2E08               	decfsz	??_lcd_ini& (0+255),f,c
  3045  0011CC  D7FC               	bra	u2117
  3046                           
  3047                           ;../Bibliotecas/LCD4bits.c: 21:    }
  3048  0011CE  2A09               	incf	lcd_ini@i,f,c
  3049  0011D0  0E02               	movlw	2
  3050  0011D2  6409               	cpfsgt	lcd_ini@i,c
  3051  0011D4  D7F2               	goto	l1889
  3052                           
  3053                           ;../Bibliotecas/LCD4bits.c: 22:    lcd_cmd(0x02);
  3054  0011D6  0E02               	movlw	2
  3055  0011D8  EC6F  F007         	call	_lcd_cmd
  3056                           
  3057                           ;../Bibliotecas/LCD4bits.c: 23:    _delay((unsigned long)((40)*(8000000/4000000.0)));
  3058  0011DC  0E1A               	movlw	26
  3059  0011DE                     u2127:
  3060  0011DE  2EE8               	decfsz	wreg,f,c
  3061  0011E0  D7FE               	bra	u2127
  3062  0011E2  D000               	nop2	
  3063                           
  3064                           ;../Bibliotecas/LCD4bits.c: 24:    lcd_cmd(0x28);
  3065  0011E4  0E28               	movlw	40
  3066  0011E6  EC6F  F007         	call	_lcd_cmd
  3067                           
  3068                           ;../Bibliotecas/LCD4bits.c: 25:    _delay((unsigned long)((40)*(8000000/4000000.0)));
  3069  0011EA  0E1A               	movlw	26
  3070  0011EC                     u2137:
  3071  0011EC  2EE8               	decfsz	wreg,f,c
  3072  0011EE  D7FE               	bra	u2137
  3073  0011F0  D000               	nop2	
  3074                           
  3075                           ;../Bibliotecas/LCD4bits.c: 26:    lcd_cmd(0x01);
  3076  0011F2  0E01               	movlw	1
  3077  0011F4  EC6F  F007         	call	_lcd_cmd
  3078                           
  3079                           ;../Bibliotecas/LCD4bits.c: 27:    _delay((unsigned long)((2)*(8000000/4000.0)));
  3080  0011F8  0E06               	movlw	6
  3081  0011FA  6E08               	movwf	??_lcd_ini& (0+255),c
  3082  0011FC  0E30               	movlw	48
  3083  0011FE                     u2147:
  3084  0011FE  2EE8               	decfsz	wreg,f,c
  3085  001200  D7FE               	bra	u2147
  3086  001202  2E08               	decfsz	??_lcd_ini& (0+255),f,c
  3087  001204  D7FC               	bra	u2147
  3088  001206  D000               	nop2	
  3089                           
  3090                           ;../Bibliotecas/LCD4bits.c: 28:    lcd_cmd(0x0C);
  3091  001208  0E0C               	movlw	12
  3092  00120A  EC6F  F007         	call	_lcd_cmd
  3093                           
  3094                           ;../Bibliotecas/LCD4bits.c: 29:    _delay((unsigned long)((40)*(8000000/4000000.0)));
  3095  00120E  0E1A               	movlw	26
  3096  001210                     u2157:
  3097  001210  2EE8               	decfsz	wreg,f,c
  3098  001212  D7FE               	bra	u2157
  3099  001214  D000               	nop2	
  3100                           
  3101                           ;../Bibliotecas/LCD4bits.c: 30:    lcd_cmd(0x06);
  3102  001216  0E06               	movlw	6
  3103  001218  EC6F  F007         	call	_lcd_cmd
  3104                           
  3105                           ;../Bibliotecas/LCD4bits.c: 31:    _delay((unsigned long)((40)*(8000000/4000000.0)));
  3106  00121C  0E1A               	movlw	26
  3107  00121E                     u2167:
  3108  00121E  2EE8               	decfsz	wreg,f,c
  3109  001220  D7FE               	bra	u2167
  3110  001222  D000               	nop2	
  3111  001224  0012               	return		;funcret
  3112  001226                     __end_of_lcd_ini:
  3113                           	opt callstack 0
  3114                           
  3115 ;; *************** function _lcd_escreve_bf *****************
  3116 ;; Defined at:
  3117 ;;		line 74 in file "../Bibliotecas/LCD4bits.c"
  3118 ;; Parameters:    Size  Location     Type
  3119 ;;  lin             1    wreg     unsigned char 
  3120 ;;  col             1    9[COMRAM] unsigned char 
  3121 ;;  str             2   10[COMRAM] PTR unsigned char 
  3122 ;;		 -> bufferLCD(16), STR_2(14), STR_1(7), 
  3123 ;; Auto vars:     Size  Location     Type
  3124 ;;  lin             1   13[COMRAM] unsigned char 
  3125 ;;  end             1   12[COMRAM] unsigned char 
  3126 ;; Return value:  Size  Location     Type
  3127 ;;                  1    wreg      void 
  3128 ;; Registers used:
  3129 ;;		wreg, fsr1l, fsr1h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  3130 ;; Tracked objects:
  3131 ;;		On entry : 0/0
  3132 ;;		On exit  : 0/0
  3133 ;;		Unchanged: 0/0
  3134 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3135 ;;      Params:         3       0       0       0       0       0       0
  3136 ;;      Locals:         2       0       0       0       0       0       0
  3137 ;;      Temps:          0       0       0       0       0       0       0
  3138 ;;      Totals:         5       0       0       0       0       0       0
  3139 ;;Total ram usage:        5 bytes
  3140 ;; Hardware stack levels used:    1
  3141 ;; Hardware stack levels required when called:    4
  3142 ;; This function calls:
  3143 ;;		_lcd_envia_byte
  3144 ;; This function is called by:
  3145 ;;		_main
  3146 ;; This function uses a non-reentrant model
  3147 ;;
  3148                           
  3149                           	psect	text18
  3150  001226                     __ptext18:
  3151                           	opt callstack 0
  3152  001226                     _lcd_escreve_bf:
  3153                           	opt callstack 26
  3154                           
  3155                           ;incstack = 0
  3156                           ;lcd_escreve_bf@lin stored from wreg
  3157  001226  6E0E               	movwf	lcd_escreve_bf@lin,c
  3158                           
  3159                           ;../Bibliotecas/LCD4bits.c: 74: void lcd_escreve_bf(char lin, char col, char *str);../Bi
      +                          bliotecas/LCD4bits.c: 75: {;../Bibliotecas/LCD4bits.c: 76:     char end;;../Bibliotecas/
      +                          LCD4bits.c: 79:     if (lin == 1)
  3160  001228  040E               	decf	lcd_escreve_bf@lin,w,c
  3161  00122A  A4D8               	btfss	status,2,c
  3162  00122C  D003               	goto	l1915
  3163                           
  3164                           ;../Bibliotecas/LCD4bits.c: 80:         end = col + 0x80 - 1;
  3165  00122E  500A               	movf	lcd_escreve_bf@col,w,c
  3166  001230  0F7F               	addlw	127
  3167  001232  D006               	goto	L3
  3168  001234                     l1915:
  3169  001234  0E02               	movlw	2
  3170  001236  180E               	xorwf	lcd_escreve_bf@lin,w,c
  3171  001238  A4D8               	btfss	status,2,c
  3172  00123A  D003               	goto	l1919
  3173                           
  3174                           ;../Bibliotecas/LCD4bits.c: 82:         end = col + 0xC0 - 1;
  3175  00123C  500A               	movf	lcd_escreve_bf@col,w,c
  3176  00123E  0FBF               	addlw	191
  3177  001240                     L3:
  3178  001240  6E0D               	movwf	lcd_escreve_bf@end,c
  3179  001242                     l1919:
  3180                           
  3181                           ;../Bibliotecas/LCD4bits.c: 84:     lcd_envia_byte(0, end);
  3182  001242  C00D  F008         	movff	lcd_escreve_bf@end,lcd_envia_byte@dado
  3183  001246  0E00               	movlw	0
  3184  001248  EC4A  F00A         	call	_lcd_envia_byte
  3185                           
  3186                           ;../Bibliotecas/LCD4bits.c: 86:     while(*str)
  3187  00124C  D016               	goto	l1925
  3188  00124E                     l1921:
  3189                           
  3190                           ;../Bibliotecas/LCD4bits.c: 87:     {;../Bibliotecas/LCD4bits.c: 88:        lcd_envia_by
      +                          te(1,*str);
  3191  00124E  C00B  FFF6         	movff	lcd_escreve_bf@str,tblptrl
  3192  001252  C00C  FFF7         	movff	lcd_escreve_bf@str+1,tblptrh
  3193  001256  6AF8               	clrf	tblptru,c
  3194  001258  0E05               	movlw	(high __ramtop+-1)
  3195  00125A  64F7               	cpfsgt	tblptrh,c
  3196  00125C  D003               	bra	u1427
  3197  00125E  0008               	tblrd		*
  3198  001260  50F5               	movf	tablat,w,c
  3199  001262  D005               	bra	u1420
  3200  001264                     u1427:
  3201  001264  CFF6 FFE1          	movff	tblptrl,fsr1l
  3202  001268  CFF7 FFE2          	movff	tblptrh,fsr1h
  3203  00126C  50E7               	movf	indf1,w,c
  3204  00126E                     u1420:
  3205  00126E  6E08               	movwf	lcd_envia_byte@dado,c
  3206  001270  0E01               	movlw	1
  3207  001272  EC4A  F00A         	call	_lcd_envia_byte
  3208                           
  3209                           ;../Bibliotecas/LCD4bits.c: 89:        str++;
  3210  001276  4A0B               	infsnz	lcd_escreve_bf@str,f,c
  3211  001278  2A0C               	incf	lcd_escreve_bf@str+1,f,c
  3212  00127A                     l1925:
  3213                           
  3214                           ;../Bibliotecas/LCD4bits.c: 86:     while(*str)
  3215  00127A  C00B  FFF6         	movff	lcd_escreve_bf@str,tblptrl
  3216  00127E  C00C  FFF7         	movff	lcd_escreve_bf@str+1,tblptrh
  3217  001282  6AF8               	clrf	tblptru,c
  3218  001284  0E05               	movlw	(high __ramtop+-1)
  3219  001286  64F7               	cpfsgt	tblptrh,c
  3220  001288  D003               	bra	u1437
  3221  00128A  0008               	tblrd		*
  3222  00128C  50F5               	movf	tablat,w,c
  3223  00128E  D005               	bra	u1430
  3224  001290                     u1437:
  3225  001290  CFF6 FFE1          	movff	tblptrl,fsr1l
  3226  001294  CFF7 FFE2          	movff	tblptrh,fsr1h
  3227  001298  50E7               	movf	indf1,w,c
  3228  00129A                     u1430:
  3229  00129A  0900               	iorlw	0
  3230  00129C  B4D8               	btfsc	status,2,c
  3231  00129E  0012               	return	
  3232  0012A0  D7D6               	goto	l1921
  3233  0012A2                     __end_of_lcd_escreve_bf:
  3234                           	opt callstack 0
  3235                           
  3236 ;; *************** function _lcd_envia_byte *****************
  3237 ;; Defined at:
  3238 ;;		line 66 in file "../Bibliotecas/LCD4bits.c"
  3239 ;; Parameters:    Size  Location     Type
  3240 ;;  nivel           1    wreg     unsigned char 
  3241 ;;  dado            1    7[COMRAM] unsigned char 
  3242 ;; Auto vars:     Size  Location     Type
  3243 ;;  nivel           1    8[COMRAM] unsigned char 
  3244 ;; Return value:  Size  Location     Type
  3245 ;;                  1    wreg      void 
  3246 ;; Registers used:
  3247 ;;		wreg, status,2, status,0, cstack
  3248 ;; Tracked objects:
  3249 ;;		On entry : 0/0
  3250 ;;		On exit  : 0/0
  3251 ;;		Unchanged: 0/0
  3252 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3253 ;;      Params:         1       0       0       0       0       0       0
  3254 ;;      Locals:         1       0       0       0       0       0       0
  3255 ;;      Temps:          0       0       0       0       0       0       0
  3256 ;;      Totals:         2       0       0       0       0       0       0
  3257 ;;Total ram usage:        2 bytes
  3258 ;; Hardware stack levels used:    1
  3259 ;; Hardware stack levels required when called:    3
  3260 ;; This function calls:
  3261 ;;		_lcd_cmd
  3262 ;; This function is called by:
  3263 ;;		_lcd_escreve_bf
  3264 ;; This function uses a non-reentrant model
  3265 ;;
  3266                           
  3267                           	psect	text19
  3268  001494                     __ptext19:
  3269                           	opt callstack 0
  3270  001494                     _lcd_envia_byte:
  3271                           	opt callstack 26
  3272                           
  3273                           ;incstack = 0
  3274                           ;lcd_envia_byte@nivel stored from wreg
  3275  001494  6E09               	movwf	lcd_envia_byte@nivel,c
  3276                           
  3277                           ;../Bibliotecas/LCD4bits.c: 66: void lcd_envia_byte(char nivel, char dado);../Biblioteca
      +                          s/LCD4bits.c: 67: {;../Bibliotecas/LCD4bits.c: 68:     LATEbits.LATE0 = nivel;
  3278  001496  B009               	btfsc	lcd_envia_byte@nivel,0,c
  3279  001498  D002               	bra	u1375
  3280  00149A  908D               	bcf	3981,0,c	;volatile
  3281  00149C  D001               	bra	u1376
  3282  00149E                     u1375:
  3283  00149E  808D               	bsf	3981,0,c	;volatile
  3284  0014A0                     u1376:
  3285                           
  3286                           ;../Bibliotecas/LCD4bits.c: 69:     _delay((unsigned long)((100)*(8000000/4000000.0)));
  3287  0014A0  0E42               	movlw	66
  3288  0014A2                     u2177:
  3289  0014A2  2EE8               	decfsz	wreg,f,c
  3290  0014A4  D7FE               	bra	u2177
  3291  0014A6  D000               	nop2	
  3292                           
  3293                           ;../Bibliotecas/LCD4bits.c: 70:     LATEbits.LATE1 = 0;
  3294  0014A8  928D               	bcf	3981,1,c	;volatile
  3295                           
  3296                           ;../Bibliotecas/LCD4bits.c: 71:     lcd_cmd(dado);
  3297  0014AA  5008               	movf	lcd_envia_byte@dado,w,c
  3298  0014AC  EC6F  F007         	call	_lcd_cmd
  3299  0014B0  0012               	return		;funcret
  3300  0014B2                     __end_of_lcd_envia_byte:
  3301                           	opt callstack 0
  3302                           
  3303 ;; *************** function _lcd_cmd *****************
  3304 ;; Defined at:
  3305 ;;		line 45 in file "../Bibliotecas/LCD4bits.c"
  3306 ;; Parameters:    Size  Location     Type
  3307 ;;  cmd             1    wreg     unsigned char 
  3308 ;; Auto vars:     Size  Location     Type
  3309 ;;  cmd             1    6[COMRAM] unsigned char 
  3310 ;; Return value:  Size  Location     Type
  3311 ;;                  1    wreg      void 
  3312 ;; Registers used:
  3313 ;;		wreg, status,2, status,0, cstack
  3314 ;; Tracked objects:
  3315 ;;		On entry : 0/0
  3316 ;;		On exit  : 0/0
  3317 ;;		Unchanged: 0/0
  3318 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3319 ;;      Params:         0       0       0       0       0       0       0
  3320 ;;      Locals:         1       0       0       0       0       0       0
  3321 ;;      Temps:          1       0       0       0       0       0       0
  3322 ;;      Totals:         2       0       0       0       0       0       0
  3323 ;;Total ram usage:        2 bytes
  3324 ;; Hardware stack levels used:    1
  3325 ;; Hardware stack levels required when called:    2
  3326 ;; This function calls:
  3327 ;;		_set_bit
  3328 ;; This function is called by:
  3329 ;;		_lcd_ini
  3330 ;;		_lcd_envia_byte
  3331 ;; This function uses a non-reentrant model
  3332 ;;
  3333                           
  3334                           	psect	text20
  3335  000EDE                     __ptext20:
  3336                           	opt callstack 0
  3337  000EDE                     _lcd_cmd:
  3338                           	opt callstack 27
  3339                           
  3340                           ;incstack = 0
  3341                           ;lcd_cmd@cmd stored from wreg
  3342  000EDE  6E07               	movwf	lcd_cmd@cmd,c
  3343                           
  3344                           ;../Bibliotecas/LCD4bits.c: 45: void lcd_cmd(char cmd);../Bibliotecas/LCD4bits.c: 46: {;
      +                          ../Bibliotecas/LCD4bits.c: 47:     LATDbits.LATD4 = set_bit(cmd, 0b00010000);
  3345  000EE0  0E10               	movlw	16
  3346  000EE2  6E04               	movwf	set_bit@comp,c
  3347  000EE4  5007               	movf	lcd_cmd@cmd,w,c
  3348  000EE6  EC59  F00A         	call	_set_bit
  3349  000EEA  6E06               	movwf	??_lcd_cmd& (0+255),c
  3350  000EEC  3A06               	swapf	??_lcd_cmd,f,c
  3351  000EEE  508C               	movf	3980,w,c	;volatile
  3352  000EF0  1806               	xorwf	??_lcd_cmd,w,c
  3353  000EF2  0BEF               	andlw	-17
  3354  000EF4  1806               	xorwf	??_lcd_cmd,w,c
  3355  000EF6  6E8C               	movwf	3980,c	;volatile
  3356                           
  3357                           ;../Bibliotecas/LCD4bits.c: 48:     LATDbits.LATD5 = set_bit(cmd, 0b00100000);
  3358  000EF8  0E20               	movlw	32
  3359  000EFA  6E04               	movwf	set_bit@comp,c
  3360  000EFC  5007               	movf	lcd_cmd@cmd,w,c
  3361  000EFE  EC59  F00A         	call	_set_bit
  3362  000F02  6E06               	movwf	??_lcd_cmd& (0+255),c
  3363  000F04  3A06               	swapf	??_lcd_cmd,f,c
  3364  000F06  4606               	rlncf	??_lcd_cmd,f,c
  3365  000F08  508C               	movf	3980,w,c	;volatile
  3366  000F0A  1806               	xorwf	??_lcd_cmd,w,c
  3367  000F0C  0BDF               	andlw	-33
  3368  000F0E  1806               	xorwf	??_lcd_cmd,w,c
  3369  000F10  6E8C               	movwf	3980,c	;volatile
  3370                           
  3371                           ;../Bibliotecas/LCD4bits.c: 49:     LATDbits.LATD6 = set_bit(cmd, 0b01000000);
  3372  000F12  0E40               	movlw	64
  3373  000F14  6E04               	movwf	set_bit@comp,c
  3374  000F16  5007               	movf	lcd_cmd@cmd,w,c
  3375  000F18  EC59  F00A         	call	_set_bit
  3376  000F1C  6E06               	movwf	??_lcd_cmd& (0+255),c
  3377  000F1E  3A06               	swapf	??_lcd_cmd,f,c
  3378  000F20  4606               	rlncf	??_lcd_cmd,f,c
  3379  000F22  4606               	rlncf	??_lcd_cmd,f,c
  3380  000F24  508C               	movf	3980,w,c	;volatile
  3381  000F26  1806               	xorwf	??_lcd_cmd,w,c
  3382  000F28  0BBF               	andlw	-65
  3383  000F2A  1806               	xorwf	??_lcd_cmd,w,c
  3384  000F2C  6E8C               	movwf	3980,c	;volatile
  3385                           
  3386                           ;../Bibliotecas/LCD4bits.c: 50:     LATDbits.LATD7 = set_bit(cmd, 0b10000000);
  3387  000F2E  0E80               	movlw	128
  3388  000F30  6E04               	movwf	set_bit@comp,c
  3389  000F32  5007               	movf	lcd_cmd@cmd,w,c
  3390  000F34  EC59  F00A         	call	_set_bit
  3391  000F38  6E06               	movwf	??_lcd_cmd& (0+255),c
  3392  000F3A  3206               	rrcf	??_lcd_cmd,f,c
  3393  000F3C  3206               	rrcf	??_lcd_cmd,f,c
  3394  000F3E  508C               	movf	3980,w,c	;volatile
  3395  000F40  1806               	xorwf	??_lcd_cmd,w,c
  3396  000F42  0B7F               	andlw	-129
  3397  000F44  1806               	xorwf	??_lcd_cmd,w,c
  3398  000F46  6E8C               	movwf	3980,c	;volatile
  3399                           
  3400                           ;../Bibliotecas/LCD4bits.c: 52:     LATEbits.LATE1 = 1;
  3401  000F48  828D               	bsf	3981,1,c	;volatile
  3402                           
  3403                           ;../Bibliotecas/LCD4bits.c: 53:     LATEbits.LATE1 = 0;
  3404  000F4A  928D               	bcf	3981,1,c	;volatile
  3405                           
  3406                           ;../Bibliotecas/LCD4bits.c: 55:     _delay((unsigned long)((100)*(8000000/4000000.0)));
  3407  000F4C  0E42               	movlw	66
  3408  000F4E                     u2187:
  3409  000F4E  2EE8               	decfsz	wreg,f,c
  3410  000F50  D7FE               	bra	u2187
  3411  000F52  D000               	nop2	
  3412                           
  3413                           ;../Bibliotecas/LCD4bits.c: 57:     LATDbits.LATD4 = set_bit(cmd, 0b00000001);
  3414  000F54  0E01               	movlw	1
  3415  000F56  6E04               	movwf	set_bit@comp,c
  3416  000F58  5007               	movf	lcd_cmd@cmd,w,c
  3417  000F5A  EC59  F00A         	call	_set_bit
  3418  000F5E  6E06               	movwf	??_lcd_cmd& (0+255),c
  3419  000F60  3A06               	swapf	??_lcd_cmd,f,c
  3420  000F62  508C               	movf	3980,w,c	;volatile
  3421  000F64  1806               	xorwf	??_lcd_cmd,w,c
  3422  000F66  0BEF               	andlw	-17
  3423  000F68  1806               	xorwf	??_lcd_cmd,w,c
  3424  000F6A  6E8C               	movwf	3980,c	;volatile
  3425                           
  3426                           ;../Bibliotecas/LCD4bits.c: 58:     LATDbits.LATD5 = set_bit(cmd, 0b00000010);
  3427  000F6C  0E02               	movlw	2
  3428  000F6E  6E04               	movwf	set_bit@comp,c
  3429  000F70  5007               	movf	lcd_cmd@cmd,w,c
  3430  000F72  EC59  F00A         	call	_set_bit
  3431  000F76  6E06               	movwf	??_lcd_cmd& (0+255),c
  3432  000F78  3A06               	swapf	??_lcd_cmd,f,c
  3433  000F7A  4606               	rlncf	??_lcd_cmd,f,c
  3434  000F7C  508C               	movf	3980,w,c	;volatile
  3435  000F7E  1806               	xorwf	??_lcd_cmd,w,c
  3436  000F80  0BDF               	andlw	-33
  3437  000F82  1806               	xorwf	??_lcd_cmd,w,c
  3438  000F84  6E8C               	movwf	3980,c	;volatile
  3439                           
  3440                           ;../Bibliotecas/LCD4bits.c: 59:     LATDbits.LATD6 = set_bit(cmd, 0b00000100);
  3441  000F86  0E04               	movlw	4
  3442  000F88  6E04               	movwf	set_bit@comp,c
  3443  000F8A  5007               	movf	lcd_cmd@cmd,w,c
  3444  000F8C  EC59  F00A         	call	_set_bit
  3445  000F90  6E06               	movwf	??_lcd_cmd& (0+255),c
  3446  000F92  3A06               	swapf	??_lcd_cmd,f,c
  3447  000F94  4606               	rlncf	??_lcd_cmd,f,c
  3448  000F96  4606               	rlncf	??_lcd_cmd,f,c
  3449  000F98  508C               	movf	3980,w,c	;volatile
  3450  000F9A  1806               	xorwf	??_lcd_cmd,w,c
  3451  000F9C  0BBF               	andlw	-65
  3452  000F9E  1806               	xorwf	??_lcd_cmd,w,c
  3453  000FA0  6E8C               	movwf	3980,c	;volatile
  3454                           
  3455                           ;../Bibliotecas/LCD4bits.c: 60:     LATDbits.LATD7 = set_bit(cmd, 0b00001000);
  3456  000FA2  0E08               	movlw	8
  3457  000FA4  6E04               	movwf	set_bit@comp,c
  3458  000FA6  5007               	movf	lcd_cmd@cmd,w,c
  3459  000FA8  EC59  F00A         	call	_set_bit
  3460  000FAC  6E06               	movwf	??_lcd_cmd& (0+255),c
  3461  000FAE  3206               	rrcf	??_lcd_cmd,f,c
  3462  000FB0  3206               	rrcf	??_lcd_cmd,f,c
  3463  000FB2  508C               	movf	3980,w,c	;volatile
  3464  000FB4  1806               	xorwf	??_lcd_cmd,w,c
  3465  000FB6  0B7F               	andlw	-129
  3466  000FB8  1806               	xorwf	??_lcd_cmd,w,c
  3467  000FBA  6E8C               	movwf	3980,c	;volatile
  3468                           
  3469                           ;../Bibliotecas/LCD4bits.c: 62:     LATEbits.LATE1 = 1;
  3470  000FBC  828D               	bsf	3981,1,c	;volatile
  3471                           
  3472                           ;../Bibliotecas/LCD4bits.c: 63:     LATEbits.LATE1 = 0;
  3473  000FBE  928D               	bcf	3981,1,c	;volatile
  3474  000FC0  0012               	return		;funcret
  3475  000FC2                     __end_of_lcd_cmd:
  3476                           	opt callstack 0
  3477                           
  3478 ;; *************** function _set_bit *****************
  3479 ;; Defined at:
  3480 ;;		line 34 in file "../Bibliotecas/LCD4bits.c"
  3481 ;; Parameters:    Size  Location     Type
  3482 ;;  cmd             1    wreg     unsigned char 
  3483 ;;  comp            1    3[COMRAM] unsigned char 
  3484 ;; Auto vars:     Size  Location     Type
  3485 ;;  cmd             1    4[COMRAM] unsigned char 
  3486 ;; Return value:  Size  Location     Type
  3487 ;;                  1    wreg      unsigned char 
  3488 ;; Registers used:
  3489 ;;		wreg, status,2, status,0
  3490 ;; Tracked objects:
  3491 ;;		On entry : 0/0
  3492 ;;		On exit  : 0/0
  3493 ;;		Unchanged: 0/0
  3494 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3495 ;;      Params:         1       0       0       0       0       0       0
  3496 ;;      Locals:         1       0       0       0       0       0       0
  3497 ;;      Temps:          0       0       0       0       0       0       0
  3498 ;;      Totals:         2       0       0       0       0       0       0
  3499 ;;Total ram usage:        2 bytes
  3500 ;; Hardware stack levels used:    1
  3501 ;; Hardware stack levels required when called:    1
  3502 ;; This function calls:
  3503 ;;		Nothing
  3504 ;; This function is called by:
  3505 ;;		_lcd_cmd
  3506 ;; This function uses a non-reentrant model
  3507 ;;
  3508                           
  3509                           	psect	text21
  3510  0014B2                     __ptext21:
  3511                           	opt callstack 0
  3512  0014B2                     _set_bit:
  3513                           	opt callstack 27
  3514                           
  3515                           ;incstack = 0
  3516                           ;set_bit@cmd stored from wreg
  3517  0014B2  6E05               	movwf	set_bit@cmd,c
  3518                           
  3519                           ;../Bibliotecas/LCD4bits.c: 34: char set_bit(char cmd, char comp);../Bibliotecas/LCD4bit
      +                          s.c: 35: {;../Bibliotecas/LCD4bits.c: 36:     if ((cmd & comp) >= 1)
  3520  0014B4  5005               	movf	set_bit@cmd,w,c
  3521  0014B6  1404               	andwf	set_bit@comp,w,c
  3522  0014B8  0900               	iorlw	0
  3523  0014BA  B4D8               	btfsc	status,2,c
  3524  0014BC  D002               	goto	l1631
  3525                           
  3526                           ;../Bibliotecas/LCD4bits.c: 37:         return 1;
  3527  0014BE  0E01               	movlw	1
  3528  0014C0  0012               	return	
  3529  0014C2                     l1631:
  3530                           
  3531                           ;../Bibliotecas/LCD4bits.c: 39:         return 0;
  3532  0014C2  0E00               	movlw	0
  3533  0014C4  0012               	return		;funcret
  3534  0014C6                     __end_of_set_bit:
  3535                           	opt callstack 0
  3536                           
  3537 ;; *************** function _int_TMR0 *****************
  3538 ;; Defined at:
  3539 ;;		line 16 in file "EX12.c"
  3540 ;; Parameters:    Size  Location     Type
  3541 ;;		None
  3542 ;; Auto vars:     Size  Location     Type
  3543 ;;		None
  3544 ;; Return value:  Size  Location     Type
  3545 ;;                  1    wreg      void 
  3546 ;; Registers used:
  3547 ;;		wreg, status,2, status,0
  3548 ;; Tracked objects:
  3549 ;;		On entry : 0/0
  3550 ;;		On exit  : 0/0
  3551 ;;		Unchanged: 0/0
  3552 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3553 ;;      Params:         0       0       0       0       0       0       0
  3554 ;;      Locals:         0       0       0       0       0       0       0
  3555 ;;      Temps:          3       0       0       0       0       0       0
  3556 ;;      Totals:         3       0       0       0       0       0       0
  3557 ;;Total ram usage:        3 bytes
  3558 ;; Hardware stack levels used:    1
  3559 ;; This function calls:
  3560 ;;		Nothing
  3561 ;; This function is called by:
  3562 ;;		Interrupt level 1
  3563 ;; This function uses a non-reentrant model
  3564 ;;
  3565                           
  3566                           	psect	intcodelo
  3567  000018                     __pintcodelo:
  3568                           	opt callstack 0
  3569  000018                     _int_TMR0:
  3570                           	opt callstack 22
  3571                           
  3572                           ;incstack = 0
  3573  000018  8075               	bsf	btemp,0,c	;set compiler interrupt flag (level 1)
  3574  00001A  CFD8 F001          	movff	status,??_int_TMR0
  3575  00001E  CFE8 F002          	movff	wreg,??_int_TMR0+1
  3576  000022  CFE0 F003          	movff	bsr,??_int_TMR0+2
  3577                           
  3578                           ;EX12.c: 18:     if (TMR0IF)
  3579  000026  A4F2               	btfss	4082,2,c	;volatile
  3580  000028  D021               	goto	i1l36
  3581                           
  3582                           ;EX12.c: 19:     {;EX12.c: 20:      T0_1000++;
  3583  00002A  4A71               	infsnz	_T0_1000,f,c
  3584  00002C  2A72               	incf	_T0_1000+1,f,c
  3585                           
  3586                           ;EX12.c: 21:      if (T0_1000 >= 40)
  3587  00002E  BE72               	btfsc	_T0_1000+1,7,c
  3588  000030  D018               	goto	i1l34
  3589  000032  5072               	movf	_T0_1000+1,w,c
  3590  000034  E104               	bnz	i1u72_20
  3591  000036  0E28               	movlw	40
  3592  000038  5C71               	subwf	_T0_1000,w,c
  3593  00003A  A0D8               	btfss	status,0,c
  3594  00003C  D012               	goto	i1l34
  3595  00003E                     i1u72_20:
  3596                           
  3597                           ;EX12.c: 22:         {;EX12.c: 23:             T0_1000 = 0;
  3598  00003E  0E00               	movlw	0
  3599  000040  6E72               	movwf	_T0_1000+1,c
  3600  000042  0E00               	movlw	0
  3601  000044  6E71               	movwf	_T0_1000,c
  3602                           
  3603                           ;EX12.c: 25:             conta++;
  3604  000046  4A73               	infsnz	_conta,f,c
  3605  000048  2A74               	incf	_conta+1,f,c
  3606                           
  3607                           ;EX12.c: 27:             if (conta>=1000) conta = 0;
  3608  00004A  BE74               	btfsc	_conta+1,7,c
  3609  00004C  D00A               	goto	i1l34
  3610  00004E  0EE8               	movlw	232
  3611  000050  5C73               	subwf	_conta,w,c
  3612  000052  0E03               	movlw	3
  3613  000054  5874               	subwfb	_conta+1,w,c
  3614  000056  A0D8               	btfss	status,0,c
  3615  000058  D004               	goto	i1l34
  3616  00005A  0E00               	movlw	0
  3617  00005C  6E74               	movwf	_conta+1,c
  3618  00005E  0E00               	movlw	0
  3619  000060  6E73               	movwf	_conta,c
  3620  000062                     i1l34:
  3621                           
  3622                           ;EX12.c: 30:      TMR0 = 61;
  3623  000062  0E00               	movlw	0
  3624  000064  6ED7               	movwf	4055,c	;volatile
  3625  000066  0E3D               	movlw	61
  3626  000068  6ED6               	movwf	4054,c	;volatile
  3627                           
  3628                           ;EX12.c: 31:      TMR0IF = 0;
  3629  00006A  94F2               	bcf	4082,2,c	;volatile
  3630  00006C                     i1l36:
  3631  00006C  C003  FFE0         	movff	??_int_TMR0+2,bsr
  3632  000070  C002  FFE8         	movff	??_int_TMR0+1,wreg
  3633  000074  C001  FFD8         	movff	??_int_TMR0,status
  3634  000078  9075               	bcf	btemp,0,c	;clear compiler interrupt flag (level 1)
  3635  00007A  0010               	retfie	
  3636  00007C                     __end_of_int_TMR0:
  3637                           	opt callstack 0
  3638                           
  3639                           	psect	rparam
  3640  0000                     
  3641                           	psect	temp
  3642  000075                     btemp:
  3643                           	opt callstack 0
  3644  000075                     	ds	1
  3645  0000                     int$flags	set	btemp
  3646  0000                     wtemp8	set	btemp+1
  3647  0000                     ttemp5	set	btemp+1
  3648  0000                     ttemp6	set	btemp+4
  3649  0000                     ttemp7	set	btemp+8
  3650                           tosu	equ	0xFFF
  3651                           tosh	equ	0xFFE
  3652                           tosl	equ	0xFFD
  3653                           stkptr	equ	0xFFC
  3654                           pclatu	equ	0xFFB
  3655                           pclath	equ	0xFFA
  3656                           pcl	equ	0xFF9
  3657                           tblptru	equ	0xFF8
  3658                           tblptrh	equ	0xFF7
  3659                           tblptrl	equ	0xFF6
  3660                           tablat	equ	0xFF5
  3661                           prodh	equ	0xFF4
  3662                           prodl	equ	0xFF3
  3663                           indf0	equ	0xFEF
  3664                           postinc0	equ	0xFEE
  3665                           postdec0	equ	0xFED
  3666                           preinc0	equ	0xFEC
  3667                           plusw0	equ	0xFEB
  3668                           fsr0h	equ	0xFEA
  3669                           fsr0l	equ	0xFE9
  3670                           wreg	equ	0xFE8
  3671                           indf1	equ	0xFE7
  3672                           postinc1	equ	0xFE6
  3673                           postdec1	equ	0xFE5
  3674                           preinc1	equ	0xFE4
  3675                           plusw1	equ	0xFE3
  3676                           fsr1h	equ	0xFE2
  3677                           fsr1l	equ	0xFE1
  3678                           bsr	equ	0xFE0
  3679                           indf2	equ	0xFDF
  3680                           postinc2	equ	0xFDE
  3681                           postdec2	equ	0xFDD
  3682                           preinc2	equ	0xFDC
  3683                           plusw2	equ	0xFDB
  3684                           fsr2h	equ	0xFDA
  3685                           fsr2l	equ	0xFD9
  3686                           status	equ	0xFD8


Data Sizes:
    Strings     26
    Constant    0
    Data        0
    BSS         60
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          126    104     116
    BANK0           128     10      58
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0

Pointer List with Targets:

    strlen@s	PTR const unsigned char  size(2) Largest target is 32
		 -> dbuf(BANK0[32]), 

    strlen@a	PTR const unsigned char  size(2) Largest target is 32
		 -> dbuf(BANK0[32]), 

    sprintf@fmt	PTR const unsigned char  size(2) Largest target is 5
		 -> STR_3(CODE[5]), 

    sprintf@s	PTR unsigned char  size(2) Largest target is 16
		 -> bufferLCD(BANK0[16]), 

    sprintf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_sprintf(COMRAM[2]), 

    f.buffer	PTR unsigned char  size(2) Largest target is 16
		 -> bufferLCD(BANK0[16]), 

    fputs@s	PTR const unsigned char  size(2) Largest target is 32
		 -> dbuf(BANK0[32]), 

    fputs@fp	PTR struct _IO_FILE size(2) Largest target is 7
		 -> sprintf@f(BANK0[6]), 

    S883_IO_FILE$buffer	PTR unsigned char  size(2) Largest target is 16
		 -> bufferLCD(BANK0[16]), 

    fputc@fp.buffer	PTR unsigned char  size(2) Largest target is 16
		 -> bufferLCD(BANK0[16]), 

    fputc@fp	PTR struct _IO_FILE size(2) Largest target is 7
		 -> sprintf@f(BANK0[6]), 

    atoi@s	PTR const unsigned char  size(2) Largest target is 5
		 -> STR_3(CODE[5]), 

    vfprintf@ap	PTR PTR void  size(2) Largest target is 2
		 -> sprintf@ap(BANK0[2]), 

    vfprintf@fp	PTR struct _IO_FILE size(2) Largest target is 7
		 -> sprintf@f(BANK0[6]), 

    vfprintf@fmt	PTR const unsigned char  size(2) Largest target is 5
		 -> STR_3(CODE[5]), 

    vfprintf@cfmt	PTR unsigned char  size(2) Largest target is 5
		 -> STR_3(CODE[5]), 

    vfpfcnvrt@fp	PTR struct _IO_FILE size(2) Largest target is 7
		 -> sprintf@f(BANK0[6]), 

    vfpfcnvrt@ap	PTR PTR void  size(2) Largest target is 2
		 -> sprintf@ap(BANK0[2]), 

    vfpfcnvrt@fmt	PTR PTR unsigned char  size(2) Largest target is 2
		 -> vfprintf@cfmt(COMRAM[2]), 

    dtoa@fp	PTR struct _IO_FILE size(2) Largest target is 7
		 -> sprintf@f(BANK0[6]), 

    pad@fp	PTR struct _IO_FILE size(2) Largest target is 7
		 -> sprintf@f(BANK0[6]), 

    pad@buf	PTR unsigned char  size(2) Largest target is 32
		 -> dbuf(BANK0[32]), 

    lcd_escreve_bf@str	PTR unsigned char  size(2) Largest target is 16
		 -> bufferLCD(BANK0[16]), STR_2(CODE[14]), STR_1(CODE[7]), 


Critical Paths under _main in COMRAM

    _main->_sprintf
    _sprintf->_vfprintf
    _vfprintf->_vfpfcnvrt
    _vfpfcnvrt->_dtoa
    _dtoa->_pad
    _pad->_fputs
    _fputs->_fputc
    _abs->___aomod
    _atoi->_isspace
    _lcd_ini->_lcd_cmd
    _lcd_escreve_bf->_lcd_envia_byte
    _lcd_envia_byte->_lcd_cmd
    _lcd_cmd->_set_bit

Critical Paths under _int_TMR0 in COMRAM

    None.

Critical Paths under _main in BANK0

    _main->_sprintf

Critical Paths under _int_TMR0 in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _int_TMR0 in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _int_TMR0 in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _int_TMR0 in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _int_TMR0 in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _int_TMR0 in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0   13364
                                            102 COMRAM     2     2      0
                     _lcd_escreve_bf
                            _lcd_ini
                            _sprintf
 ---------------------------------------------------------------------------------
 (1) _sprintf                                             16    10      6   10853
                                             96 COMRAM     6     0      6
                                              0 BANK0     10    10      0
                           _vfprintf
 ---------------------------------------------------------------------------------
 (2) _vfprintf                                             8     2      6   10361
                                             88 COMRAM     8     2      6
                          _vfpfcnvrt
 ---------------------------------------------------------------------------------
 (3) _vfpfcnvrt                                           46    40      6    9831
                                             66 COMRAM    22    16      6
                               _atoi
                               _dtoa
                              _fputc
                            _isdigit
 ---------------------------------------------------------------------------------
 (4) _dtoa                                                36    26     10    5683
                                             30 COMRAM    36    26     10
                            ___aodiv
                            ___aomod
                                _abs
                                _pad
 ---------------------------------------------------------------------------------
 (5) _pad                                                 11     5      6    3417
                                             19 COMRAM    11     5      6
                              _fputc
                              _fputs
                             _strlen
 ---------------------------------------------------------------------------------
 (6) _strlen                                               4     2      2     220
                                              3 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (6) _fputs                                                7     3      4    1537
                                             12 COMRAM     7     3      4
                              _fputc
 ---------------------------------------------------------------------------------
 (4) _fputc                                                9     5      4    1037
                                              3 COMRAM     9     5      4
                              _putch
 ---------------------------------------------------------------------------------
 (5) _putch                                                1     1      0       0
 ---------------------------------------------------------------------------------
 (5) _abs                                                  4     2      2     183
                                             21 COMRAM     4     2      2
                            ___aomod (ARG)
 ---------------------------------------------------------------------------------
 (5) ___aomod                                             18     2     16     613
                                              3 COMRAM    18     2     16
 ---------------------------------------------------------------------------------
 (5) ___aodiv                                             26    10     16     625
                                              3 COMRAM    26    10     16
 ---------------------------------------------------------------------------------
 (4) _atoi                                                15    13      2    1615
                                             10 COMRAM    15    13      2
                             ___wmul
                            _isdigit
                            _isspace
 ---------------------------------------------------------------------------------
 (5) _isspace                                              7     5      2     259
                                              3 COMRAM     7     5      2
 ---------------------------------------------------------------------------------
 (4) _isdigit                                              6     4      2     281
                                              3 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (5) ___wmul                                               6     2      4     512
                                              3 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (1) _lcd_ini                                              2     2      0     874
                                              7 COMRAM     2     2      0
                            _lcd_cmd
 ---------------------------------------------------------------------------------
 (1) _lcd_escreve_bf                                       5     2      3    1637
                                              9 COMRAM     5     2      3
                     _lcd_envia_byte
 ---------------------------------------------------------------------------------
 (2) _lcd_envia_byte                                       2     1      1    1024
                                              7 COMRAM     2     1      1
                            _lcd_cmd
 ---------------------------------------------------------------------------------
 (2) _lcd_cmd                                              2     2      0     828
                                              5 COMRAM     2     2      0
                            _set_bit
 ---------------------------------------------------------------------------------
 (3) _set_bit                                              2     1      1     652
                                              3 COMRAM     2     1      1
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (9) _int_TMR0                                             3     3      0       0
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 9
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _lcd_escreve_bf
     _lcd_envia_byte
       _lcd_cmd
         _set_bit
   _lcd_ini
     _lcd_cmd
       _set_bit
   _sprintf
     _vfprintf
       _vfpfcnvrt
         _atoi
           ___wmul
           _isdigit
           _isspace
         _dtoa
           ___aodiv
           ___aomod
           _abs
             ___aomod (ARG)
           _pad
             _fputc
               _putch
             _fputs
               _fputc
                 _putch
             _strlen
         _fputc
           _putch
         _isdigit

 _int_TMR0 (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             5FF      0       0      17        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK5           100      0       0      16        0.0%
BANK5              100      0       0      14        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80      A      3A       5       45.3%
BITCOMRAM           7E      0       0       0        0.0%
COMRAM              7E     68      74       1       92.1%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      AE      15        0.0%
DATA                 0      0      AE       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.05 build -831301201 
Symbol Table                                                                                   Fri Apr 19 15:37:31 2019

                     bsr 000FE0      ___wmul@multiplicand 0006              __CFG_BORV$3 000000  
           __CFG_CP0$OFF 000000             __CFG_CP1$OFF 000000             __CFG_CP2$OFF 000000  
           __CFG_CP3$OFF 000000              __CFG_OSC$HS 000000                      l114 112E  
                    l125 0962                      l127 096A                      l890 0DB0  
                    l859 13E4             __CFG_CPB$OFF 000000             __CFG_CPD$OFF 000000  
                    _abs 13BC                      _pad 1100                      wreg 000FE8  
           __CFG_LVP$OFF 000000             __CFG_WDT$OFF 000000                     l2003 0FDA  
                   ?_abs 0016                     l2101 0C32                     l2013 138E  
                   l2021 1428                     l2023 142C                     l2105 0C58  
                   l2121 0E0A                     l2017 13A4                     l2033 1118  
                   l2043 1150                     l2211 0AF0                     l2221 0C8C  
                   l2141 0EBC                     l2133 0E80                     l2125 0E24  
                   l2117 0DE6                     l2037 1126                     l2231 0CD6  
                   l2223 0C90                     l2127 0E38                     l2047 117C  
                   l2039 1138                     l2215 0B08                     l2311 0758  
                   l2153 137C                     l2241 0CF4                     l2073 0B5E  
                   l2137 0E96                     l2313 0766                     l2243 0D1C  
                   l2163 0946                     l2237 0CE6                     l2085 0BAC  
                   l2181 0994                     l2309 073A                     l1631 14C2  
                   l2247 0D50                     l2239 0CEE                     l2087 0BC0  
                   l2079 0B86                     l2191 0A8C                     l2335 089A  
                   l2271 0660                     l2097 0C1C                     l2177 0984  
                   l2329 085E                     l2273 0662                     l2345 08BC  
                   l2361 1306                     l2339 08A4                     l2291 0682  
                   l2283 067A                     l2275 0672                     l2363 132A  
                   l2295 068C                     l2287 067E                     l2279 0676  
                   l1921 124E                     l2297 06CE                     l1915 1234  
                   l2387 10A2                     l1925 127A                     l1919 1242  
                   ?_pad 0014                     l1889 11BA                     STR_1 060F  
                   STR_2 0601                     STR_3 0616                     u2010 079E  
                   u2020 07A0                     u2030 07AC                     u2050 07E0  
                   u2107 11AC                     u1420 126E                     u2117 11C6  
                   u1430 129A                     u2127 11DE                     u2080 10C0  
                   _LATD 000F8C                     u2137 11EC                     u1427 1264  
                   u2147 11FE                     u1611 0B8C                     u1437 1290  
                   u2157 1210                     u1630 0BC4                     u1470 0FD2  
                   u2086 10C2                     u1375 149E                     u2167 121E  
                   u1376 14A0                     u1560 13CA                     u1800 097E  
                   u2177 14A2                     u2097 10AC                     u1570 1416  
                   u1730 1378                     u1490 101A                     u1810 0A9A  
                   u2187 0F4E                     u1580 1418                     u1900 0CD2  
                   u1740 0918                     u1830 0ABC                     u1750 091A  
                   u1831 0ABA                     u1920 0D80                     u1840 0ACA  
                   u1930 0D82                     u1690 0E3C                     u1850 0ACE  
                   u1780 0958                     u1870 0ADA                     i1l34 0062  
                   i1l36 006C                     _TMR0 000FD6             __CFG_PWRT$ON 000000  
                   abs@a 0016                     _dbuf 0080                     _atoi 0C7A  
                   _main 1062                     _dtoa 08F0                     _prec 006D  
                   _nout 0069                     pad@i 001B                     pad@p 0018  
                   fsr1h 000FE2                     fsr2h 000FDA                     indf1 000FE7  
                   indf2 000FDF                     fsr1l 000FE1                     pad@w 001D  
                   fsr2l 000FD9                     btemp 0075                     prodh 000FF4  
                   prodl 000FF3                     start 007C            __CFG_IESO$OFF 000000  
          __CFG_MCLRE$ON 000000             ___param_bank 000000                    ??_abs 0018  
                  ??_pad 001A          __end_of___aodiv 0C7A                    ?_atoi 000B  
                  ?_main 0001                    ?_dtoa 001F          __end_of___aomod 0EDE  
                  _T0CON 000FD5             vfpfcnvrt@fmt 0045                    _TRISD 000F95  
          __CFG_WRT0$OFF 000000            __CFG_WRT1$OFF 000000            __CFG_WRT2$OFF 000000  
          __CFG_WRT3$OFF 000000           __CFG_EBTR0$OFF 000000           __CFG_FCMEN$OFF 000000  
         __CFG_EBTR1$OFF 000000           __CFG_EBTR2$OFF 000000           __CFG_EBTR3$OFF 000000  
        __end_of_lcd_cmd 0FC2          __end_of_lcd_ini 1226            __CFG_WRTB$OFF 000000  
          __CFG_WRTC$OFF 000000            __CFG_WRTD$OFF 000000           __CFG_EBTRB$OFF 000000  
                  _flags 006F                    _conta 0073                    _fputc 0FC2  
                  _fputs 1384          __end_of_isdigit 141E                    atoi@n 0018  
                  pad@fp 0014                    atoi@s 000B                    _width 006B  
                  _putch 14C6                    dtoa@d 0021                    dtoa@i 0041  
                  dtoa@n 0039                    dtoa@p 0033                    dtoa@s 0037  
                  dtoa@w 0035          __end_of_isspace 1384           __CFG_BOREN$OFF 000000  
        __end_of_set_bit 14C6                    tablat 000FF5                    ttemp5 0076  
                  ttemp6 0079                    ttemp7 007D                    status 000FD8  
                  wtemp8 0076          __end_of_sprintf 12F4          __initialization 1448  
           __end_of_atoi 0DBA             __end_of_main 1100             __end_of_dtoa 0B32  
                 ??_atoi 000D                   ??_main 0067                   ??_dtoa 0029  
          __activetblptr 000002                   _ADCON1 000FC1                   ?_fputc 0004  
                 ?_fputs 000D                   ?_putch 0001                   _INTCON 000FF2  
          vfpfcnvrt@done 0055                   _TMR0IF 007F92           __CFG_XINST$OFF 000000  
           vfprintf@cfmt 005F                ??___aodiv 0014                ??___aomod 0014  
                 ___wmul 146E           __CFG_STVREN$ON 000000         __end_of_int_TMR0 007C  
       ??_lcd_escreve_bf 000D                   clear_0 144E                   clear_1 145A  
       ??_lcd_envia_byte 0009                   pad@buf 0016                ??_lcd_cmd 0006  
                 dtoa@fp 001F                ??_lcd_ini 0008                   _strlen 141E  
                 fputc@c 0004                   fputs@c 0011                   fputs@i 0012  
                 fputs@s 000D                ??_isdigit 0006             __mediumconst 0000  
              ??_isspace 0006                ??_set_bit 0005                   tblptrh 000FF7  
                 tblptrl 000FF6                   tblptru 000FF8                   putch@c 0001  
       __end_of_vfprintf 1346                ??_sprintf 0067               __accesstop 0080  
__end_of__initialization 1460          __CFG_PBADEN$OFF 000000            ___rparam_used 000001  
         __pcstackCOMRAM 0001            __end_of_fputc 1062            __end_of_fputs 13BC  
          __end_of_putch 14C8                  ??_fputc 0008                  ??_fputs 0011  
                ??_putch 0004               __pbssBANK0 0080                  ?___wmul 0004  
                _T0_1000 0071                  ?_strlen 0004       __size_of_vfpfcnvrt 02D4  
                i1u72_20 003E                ?_int_TMR0 0001                  __Hparam 0000  
                __Lparam 0000                  ___aodiv 0B32                  ___aomod 0DBA  
        __size_of___wmul 0026                ?_vfprintf 0059              set_bit@comp 0004  
           __psmallconst 0600                  __pcinit 1448                  __ramtop 0600  
                __ptext0 1062                  __ptext1 12A2                  __ptext2 12F4  
                __ptext3 061C                  __ptext4 08F0                  __ptext5 1100  
                __ptext6 141E                  __ptext7 1384                  __ptext8 0FC2  
                __ptext9 14C6                  _lcd_cmd 0EDE                  _lcd_ini 1196  
        __size_of_strlen 002A             __size_of_abs 0032             __size_of_pad 0096  
                _isdigit 13EE                  _isspace 1346                  _set_bit 14B2  
                atoi@neg 0011                  _sprintf 12A2     end_of_initialization 1460  
             ??_int_TMR0 0001       lcd_envia_byte@dado 0008                  fputc@fp 0006  
          __Lmediumconst 0000                  fputs@fp 000F        __end_of_vfpfcnvrt 08F0  
                postdec2 000FDD                  postinc0 000FEE                  postinc1 000FE6  
                postinc2 000FDE               ??_vfprintf 005F                  strlen@a 0006  
                strlen@s 0004                _PORTBbits 000F81                _TRISBbits 000F93  
              _TRISEbits 000F96               lcd_cmd@cmd 0007              vfpfcnvrt@ap 0047  
            vfpfcnvrt@fp 0043              vfpfcnvrt@ll 004D           __end_of___wmul 1494  
         __end_of_strlen 1448      start_initialization 1448              __end_of_abs 13EE  
            __end_of_pad 1196              vfprintf@fmt 005B                 ??___wmul 0008  
       __CFG_LPT1OSC$OFF 000000                 ??_strlen 0006              __pbssCOMRAM 0069  
          __pcstackBANK0 00B0         ___aodiv@dividend 0004  __size_of_lcd_escreve_bf 007C  
__size_of_lcd_envia_byte 001E        __size_of_int_TMR0 0064        __CFG_CCP2MX$PORTC 000000  
               ?___aodiv 0004                 ?___aomod 0004        lcd_escreve_bf@end 000D  
      lcd_escreve_bf@col 000A        lcd_escreve_bf@lin 000E         ___aodiv@quotient 0016  
      lcd_escreve_bf@str 000B                _bufferLCD 00A0              __pintcodelo 0018  
               ?_lcd_cmd 0001        __size_of_vfprintf 0052                 ?_lcd_ini 0001  
            __smallconst 0600                 ?_isdigit 0004                 ?_isspace 0004  
               ?_set_bit 0004               set_bit@cmd 0005                 ?_sprintf 0061  
         __size_of_fputc 00A0           __size_of_fputs 0038           __size_of_putch 0002  
         ___wmul@product 0008                 _LATDbits 000F8C                 _LATEbits 000F8D  
       __CFG_WDTPS$32768 000000                _vfpfcnvrt 061C        ___wmul@multiplier 0004  
               __Hrparam 0000               vfprintf@ap 005D                 __Lrparam 0000  
             vfprintf@fp 0059         __size_of___aodiv 0148         __size_of___aomod 0124  
             ?_vfpfcnvrt 0043          ___aodiv@divisor 000C          ___aodiv@counter 0014  
       __size_of_lcd_cmd 00E4         __size_of_lcd_ini 0090               sprintf@fmt 0063  
               _atoi$861 0013                 _atoi$862 0017                 _atoi$863 0015  
       __size_of_isdigit 0030                 _dtoa$389 0031           _lcd_escreve_bf 1226  
       __size_of_isspace 003E                 __ptext10 13BC                 __ptext11 0DBA  
               __ptext20 0EDE                 __ptext12 0B32                 __ptext21 14B2  
               __ptext13 0C7A                 __ptext14 1346                 __ptext15 13EE  
               __ptext16 146E                 __ptext17 1196                 __ptext18 1226  
               __ptext19 1494         __size_of_set_bit 0014           _lcd_envia_byte 1494  
       __size_of_sprintf 0052                 _int_TMR0 0018            __size_of_atoi 0140  
          __size_of_main 009E            __size_of_dtoa 0242                 int$flags 0075  
               lcd_ini@i 0009                 _vfprintf 12F4              _isspace$879 000A  
       ___aomod@dividend 0004   __end_of_lcd_escreve_bf 12A2   __end_of_lcd_envia_byte 14B2  
    lcd_envia_byte@nivel 0009                 isdigit@c 0004                 intlevel1 0000  
              sprintf@ap 00B2                 isspace@c 0004          ___aomod@divisor 000C  
            ??_vfpfcnvrt 0049            _vfpfcnvrt$404 0057          ___aomod@counter 0014  
               sprintf@f 00B4                 sprintf@s 0061          ?_lcd_escreve_bf 000A  
        ?_lcd_envia_byte 0008             ___aodiv@sign 0015             ___aomod@sign 0015  
