

Microchip MPLAB XC8 Assembler V2.05 build -831301201 
                                                                                               Sat Apr 13 18:07:03 2019

Microchip MPLAB XC8 C Compiler v2.05 (Free license) build 20181220022703 Og1 
     1                           	processor	18F4520
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	flic
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    10                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    11                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    12                           	psect	text0,global,reloc=2,class=CODE,delta=1
    13                           	psect	text1,global,reloc=2,class=CODE,delta=1,group=2
    14                           	psect	text2,global,reloc=2,class=CODE,delta=1
    15                           	psect	text3,global,reloc=2,class=CODE,delta=1
    16                           	psect	text4,global,reloc=2,class=CODE,delta=1
    17                           	psect	text5,global,reloc=2,class=CODE,delta=1
    18                           	psect	text6,global,reloc=2,class=CODE,delta=1,group=2
    19                           	psect	text7,global,reloc=2,class=CODE,delta=1,group=2
    20                           	psect	text8,global,reloc=2,class=CODE,delta=1,group=2
    21                           	psect	text9,global,reloc=2,class=CODE,delta=1,group=2
    22                           	psect	text10,global,reloc=2,class=CODE,delta=1,group=2
    23                           	psect	text11,global,reloc=2,class=CODE,delta=1,group=1
    24                           	psect	text12,global,reloc=2,class=CODE,delta=1,group=1
    25                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    26                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    27  0000                     
    28                           ; Version 2.05
    29                           ; Generated 20/12/2018 GMT
    30                           ; 
    31                           ; Copyright Â© 2018, Microchip Technology Inc. and its subsidiaries ("Microchip")
    32                           ; All rights reserved.
    33                           ; 
    34                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    35                           ; 
    36                           ; Redistribution and use in source and binary forms, with or without modification, are
    37                           ; permitted provided that the following conditions are met:
    38                           ; 
    39                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    40                           ;        conditions and the following disclaimer.
    41                           ; 
    42                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    43                           ;        of conditions and the following disclaimer in the documentation and/or other
    44                           ;        materials provided with the distribution.
    45                           ; 
    46                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    47                           ;        software without specific prior written permission.
    48                           ; 
    49                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    50                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    51                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    52                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    53                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    54                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    55                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    56                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    57                           ; 
    58                           ; 
    59                           ; Code-generator required, PIC18F4520 Definitions
    60                           ; 
    61                           ; SFR Addresses
    62  0000                     
    63                           	psect	idataCOMRAM
    64  000F0A                     __pidataCOMRAM:
    65                           	opt callstack 0
    66                           
    67                           ;initializer for _teste
    68  000F0A  0D82               	dw	3458
    69                           
    70                           	psect	smallconst
    71  000600                     __psmallconst:
    72                           	opt callstack 0
    73  000600  00                 	db	0
    74  000601                     STR_1:
    75  000601  56                 	db	86	;'V'
    76  000602  61                 	db	97	;'a'
    77  000603  6C                 	db	108	;'l'
    78  000604  6F                 	db	111	;'o'
    79  000605  72                 	db	114	;'r'
    80  000606  20                 	db	32
    81  000607  64                 	db	100	;'d'
    82  000608  65                 	db	101	;'e'
    83  000609  20                 	db	32
    84  00060A  74                 	db	116	;'t'
    85  00060B  65                 	db	101	;'e'
    86  00060C  73                 	db	115	;'s'
    87  00060D  74                 	db	116	;'t'
    88  00060E  65                 	db	101	;'e'
    89  00060F  20                 	db	32
    90  000610  3D                 	db	61	;'='
    91  000611  20                 	db	32
    92  000612  25                 	db	37
    93  000613  64                 	db	100	;'d'
    94  000614  00                 	db	0
    95  000615  00                 	db	0	; dummy byte at the end
    96  0000                     
    97                           ; #config settings
    98                           
    99                           	psect	cinit
   100  000E1A                     __pcinit:
   101                           	opt callstack 0
   102  000E1A                     start_initialization:
   103                           	opt callstack 0
   104  000E1A                     __initialization:
   105                           	opt callstack 0
   106                           
   107                           ; Initialize objects allocated to COMRAM (2 bytes)
   108                           ; load TBLPTR registers with __pidataCOMRAM
   109  000E1A  0E0A               	movlw	low __pidataCOMRAM
   110  000E1C  6EF6               	movwf	tblptrl,c
   111  000E1E  0E0F               	movlw	high __pidataCOMRAM
   112  000E20  6EF7               	movwf	tblptrh,c
   113  000E22  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   114  000E24  6EF8               	movwf	tblptru,c
   115  000E26  0009               	tblrd		*+	;fetch initializer
   116  000E28  CFF5 F070          	movff	tablat,__pdataCOMRAM
   117  000E2C  0009               	tblrd		*+	;fetch initializer
   118  000E2E  CFF5 F071          	movff	tablat,__pdataCOMRAM+1
   119                           
   120                           ; Clear objects allocated to BANK0 (57 bytes)
   121  000E32  EE00  F080         	lfsr	0,__pbssBANK0
   122  000E36  0E39               	movlw	57
   123  000E38                     clear_0:
   124  000E38  6AEE               	clrf	postinc0,c
   125  000E3A  06E8               	decf	wreg,f,c
   126  000E3C  E1FD               	bnz	clear_0
   127                           
   128                           ; Clear objects allocated to COMRAM (8 bytes)
   129  000E3E  EE00  F068         	lfsr	0,__pbssCOMRAM
   130  000E42  0E08               	movlw	8
   131  000E44                     clear_1:
   132  000E44  6AEE               	clrf	postinc0,c
   133  000E46  06E8               	decf	wreg,f,c
   134  000E48  E1FD               	bnz	clear_1
   135  000E4A                     end_of_initialization:
   136                           	opt callstack 0
   137  000E4A                     __end_of__initialization:
   138                           	opt callstack 0
   139  000E4A  0E00               	movlw	low (__Lsmallconst shr (0+16))
   140  000E4C  6EF8               	movwf	tblptru,c
   141  000E4E  0E06               	movlw	high __Lsmallconst
   142  000E50  6EF7               	movwf	tblptrh,c
   143  000E52  0100               	movlb	0
   144  000E54  EF76  F007         	goto	_main	;jump to C main() function
   145                           
   146                           	psect	bssCOMRAM
   147  000068                     __pbssCOMRAM:
   148                           	opt callstack 0
   149  000068                     _nout:
   150                           	opt callstack 0
   151  000068                     	ds	2
   152  00006A                     _width:
   153                           	opt callstack 0
   154  00006A                     	ds	2
   155  00006C                     _prec:
   156                           	opt callstack 0
   157  00006C                     	ds	2
   158  00006E                     _flags:
   159                           	opt callstack 0
   160  00006E                     	ds	2
   161                           
   162                           	psect	dataCOMRAM
   163  000070                     __pdataCOMRAM:
   164                           	opt callstack 0
   165  000070                     _teste:
   166                           	opt callstack 0
   167  000070                     	ds	2
   168                           
   169                           	psect	bssBANK0
   170  000080                     __pbssBANK0:
   171                           	opt callstack 0
   172  000080                     _dbuf:
   173                           	opt callstack 0
   174  000080                     	ds	32
   175  0000A0                     _buffer:
   176                           	opt callstack 0
   177  0000A0                     	ds	25
   178                           
   179                           	psect	cstackCOMRAM
   180  000001                     __pcstackCOMRAM:
   181                           	opt callstack 0
   182  000001                     ?_strlen:
   183                           	opt callstack 0
   184  000001                     ?___aodiv:
   185                           	opt callstack 0
   186  000001                     ?___aomod:
   187                           	opt callstack 0
   188  000001                     fputc@c:
   189                           	opt callstack 0
   190  000001                     strlen@s:
   191                           	opt callstack 0
   192  000001                     ___aodiv@dividend:
   193                           	opt callstack 0
   194  000001                     ___aomod@dividend:
   195                           	opt callstack 0
   196                           
   197                           ; 8 bytes @ 0x0
   198  000001                     	ds	2
   199  000003                     fputc@fp:
   200                           	opt callstack 0
   201  000003                     strlen@a:
   202                           	opt callstack 0
   203                           
   204                           ; 2 bytes @ 0x2
   205  000003                     	ds	2
   206  000005                     ??_fputc:
   207                           
   208                           ; 1 bytes @ 0x4
   209  000005                     	ds	4
   210  000009                     ___aodiv@divisor:
   211                           	opt callstack 0
   212  000009                     ___aomod@divisor:
   213                           	opt callstack 0
   214                           
   215                           ; 8 bytes @ 0x8
   216  000009                     	ds	1
   217  00000A                     fputs@s:
   218                           	opt callstack 0
   219                           
   220                           ; 2 bytes @ 0x9
   221  00000A                     	ds	2
   222  00000C                     fputs@fp:
   223                           	opt callstack 0
   224                           
   225                           ; 2 bytes @ 0xB
   226  00000C                     	ds	2
   227  00000E                     fputs@c:
   228                           	opt callstack 0
   229                           
   230                           ; 1 bytes @ 0xD
   231  00000E                     	ds	1
   232  00000F                     fputs@i:
   233                           	opt callstack 0
   234                           
   235                           ; 2 bytes @ 0xE
   236  00000F                     	ds	2
   237  000011                     ?_pad:
   238                           	opt callstack 0
   239  000011                     ___aodiv@counter:
   240                           	opt callstack 0
   241  000011                     ___aomod@counter:
   242                           	opt callstack 0
   243  000011                     pad@fp:
   244                           	opt callstack 0
   245                           
   246                           ; 2 bytes @ 0x10
   247  000011                     	ds	1
   248  000012                     ___aodiv@sign:
   249                           	opt callstack 0
   250  000012                     ___aomod@sign:
   251                           	opt callstack 0
   252                           
   253                           ; 1 bytes @ 0x11
   254  000012                     	ds	1
   255  000013                     ?_abs:
   256                           	opt callstack 0
   257  000013                     pad@buf:
   258                           	opt callstack 0
   259  000013                     abs@a:
   260                           	opt callstack 0
   261  000013                     ___aodiv@quotient:
   262                           	opt callstack 0
   263                           
   264                           ; 8 bytes @ 0x12
   265  000013                     	ds	2
   266  000015                     ??_abs:
   267  000015                     pad@p:
   268                           	opt callstack 0
   269                           
   270                           ; 2 bytes @ 0x14
   271  000015                     	ds	2
   272  000017                     ??_pad:
   273                           
   274                           ; 1 bytes @ 0x16
   275  000017                     	ds	1
   276  000018                     pad@i:
   277                           	opt callstack 0
   278                           
   279                           ; 2 bytes @ 0x17
   280  000018                     	ds	2
   281  00001A                     pad@w:
   282                           	opt callstack 0
   283                           
   284                           ; 2 bytes @ 0x19
   285  00001A                     	ds	2
   286  00001C                     ?_dtoa:
   287                           	opt callstack 0
   288  00001C                     dtoa@fp:
   289                           	opt callstack 0
   290                           
   291                           ; 2 bytes @ 0x1B
   292  00001C                     	ds	2
   293  00001E                     dtoa@d:
   294                           	opt callstack 0
   295                           
   296                           ; 8 bytes @ 0x1D
   297  00001E                     	ds	8
   298  000026                     ??_dtoa:
   299                           
   300                           ; 1 bytes @ 0x25
   301  000026                     	ds	8
   302  00002E                     _dtoa$85:
   303                           	opt callstack 0
   304                           
   305                           ; 2 bytes @ 0x2D
   306  00002E                     	ds	2
   307  000030                     dtoa@p:
   308                           	opt callstack 0
   309                           
   310                           ; 2 bytes @ 0x2F
   311  000030                     	ds	2
   312  000032                     dtoa@w:
   313                           	opt callstack 0
   314                           
   315                           ; 2 bytes @ 0x31
   316  000032                     	ds	2
   317  000034                     dtoa@s:
   318                           	opt callstack 0
   319                           
   320                           ; 2 bytes @ 0x33
   321  000034                     	ds	2
   322  000036                     dtoa@n:
   323                           	opt callstack 0
   324                           
   325                           ; 8 bytes @ 0x35
   326  000036                     	ds	8
   327  00003E                     dtoa@i:
   328                           	opt callstack 0
   329                           
   330                           ; 2 bytes @ 0x3D
   331  00003E                     	ds	2
   332  000040                     ?_vfpfcnvrt:
   333                           	opt callstack 0
   334  000040                     vfpfcnvrt@fp:
   335                           	opt callstack 0
   336                           
   337                           ; 2 bytes @ 0x3F
   338  000040                     	ds	2
   339  000042                     vfpfcnvrt@fmt:
   340                           	opt callstack 0
   341                           
   342                           ; 2 bytes @ 0x41
   343  000042                     	ds	2
   344  000044                     vfpfcnvrt@ap:
   345                           	opt callstack 0
   346                           
   347                           ; 2 bytes @ 0x43
   348  000044                     	ds	2
   349  000046                     ??_vfpfcnvrt:
   350                           
   351                           ; 1 bytes @ 0x45
   352  000046                     	ds	2
   353  000048                     vfpfcnvrt@ll:
   354                           	opt callstack 0
   355                           
   356                           ; 8 bytes @ 0x47
   357  000048                     	ds	8
   358  000050                     ?_vfprintf:
   359                           	opt callstack 0
   360  000050                     vfprintf@fp:
   361                           	opt callstack 0
   362                           
   363                           ; 2 bytes @ 0x4F
   364  000050                     	ds	2
   365  000052                     vfprintf@fmt:
   366                           	opt callstack 0
   367                           
   368                           ; 2 bytes @ 0x51
   369  000052                     	ds	2
   370  000054                     vfprintf@ap:
   371                           	opt callstack 0
   372                           
   373                           ; 2 bytes @ 0x53
   374  000054                     	ds	2
   375  000056                     vfprintf@cfmt:
   376                           	opt callstack 0
   377                           
   378                           ; 2 bytes @ 0x55
   379  000056                     	ds	2
   380  000058                     ?_sprintf:
   381                           	opt callstack 0
   382  000058                     sprintf@s:
   383                           	opt callstack 0
   384                           
   385                           ; 2 bytes @ 0x57
   386  000058                     	ds	2
   387  00005A                     sprintf@fmt:
   388                           	opt callstack 0
   389                           
   390                           ; 2 bytes @ 0x59
   391  00005A                     	ds	4
   392  00005E                     
   393                           ; 1 bytes @ 0x5D
   394  00005E                     	ds	2
   395  000060                     sprintf@ap:
   396                           	opt callstack 0
   397                           
   398                           ; 2 bytes @ 0x5F
   399  000060                     	ds	2
   400  000062                     sprintf@f:
   401                           	opt callstack 0
   402                           
   403                           ; 6 bytes @ 0x61
   404  000062                     	ds	6
   405  000068                     
   406                           ; 1 bytes @ 0x67
   407 ;;
   408 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   409 ;;
   410 ;; *************** function _main *****************
   411 ;; Defined at:
   412 ;;		line 8 in file "Matriz.c"
   413 ;; Parameters:    Size  Location     Type
   414 ;;		None
   415 ;; Auto vars:     Size  Location     Type
   416 ;;		None
   417 ;; Return value:  Size  Location     Type
   418 ;;                  1    wreg      void 
   419 ;; Registers used:
   420 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   421 ;; Tracked objects:
   422 ;;		On entry : 0/0
   423 ;;		On exit  : 0/0
   424 ;;		Unchanged: 0/0
   425 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   426 ;;      Params:         0       0       0       0       0       0       0
   427 ;;      Locals:         0       0       0       0       0       0       0
   428 ;;      Temps:          0       0       0       0       0       0       0
   429 ;;      Totals:         0       0       0       0       0       0       0
   430 ;;Total ram usage:        0 bytes
   431 ;; Hardware stack levels required when called:    8
   432 ;; This function calls:
   433 ;;		_sprintf
   434 ;; This function is called by:
   435 ;;		Startup code after reset
   436 ;; This function uses a non-reentrant model
   437 ;;
   438                           
   439                           	psect	text0
   440  000EEC                     __ptext0:
   441                           	opt callstack 0
   442  000EEC                     _main:
   443                           	opt callstack 23
   444                           
   445                           ;Matriz.c: 10:     sprintf(buffer, "Valor de teste = %d", teste);
   446                           
   447                           ;incstack = 0
   448  000EEC  0EA0               	movlw	low _buffer
   449  000EEE  6E58               	movwf	sprintf@s,c
   450  000EF0  0E00               	movlw	high _buffer
   451  000EF2  6E59               	movwf	sprintf@s+1,c
   452  000EF4  0E01               	movlw	low STR_1
   453  000EF6  6E5A               	movwf	sprintf@fmt,c
   454  000EF8  0E06               	movlw	high STR_1
   455  000EFA  6E5B               	movwf	sprintf@fmt+1,c
   456  000EFC  0E0D               	movlw	13
   457  000EFE  6E5D               	movwf	?_sprintf+5,c
   458  000F00  0E82               	movlw	130
   459  000F02  6E5C               	movwf	?_sprintf+4,c
   460  000F04  ECE6  F006         	call	_sprintf	;wreg free
   461  000F08                     l11:
   462  000F08  D7FF               	goto	l11
   463  000F0A                     __end_of_main:
   464                           	opt callstack 0
   465                           
   466 ;; *************** function _sprintf *****************
   467 ;; Defined at:
   468 ;;		line 9 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\nf_sprintf.c"
   469 ;; Parameters:    Size  Location     Type
   470 ;;  s               2   87[COMRAM] PTR unsigned char 
   471 ;;		 -> buffer(25), 
   472 ;;  fmt             2   89[COMRAM] PTR const unsigned char 
   473 ;;		 -> STR_1(20), 
   474 ;; Auto vars:     Size  Location     Type
   475 ;;  f               6   97[COMRAM] struct _IO_FILE
   476 ;;  ap              2   95[COMRAM] PTR void [1]
   477 ;;		 -> ?_sprintf(2), 
   478 ;;  ret             2    0        int 
   479 ;; Return value:  Size  Location     Type
   480 ;;                  2   87[COMRAM] int 
   481 ;; Registers used:
   482 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   483 ;; Tracked objects:
   484 ;;		On entry : 0/0
   485 ;;		On exit  : 0/0
   486 ;;		Unchanged: 0/0
   487 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   488 ;;      Params:         6       0       0       0       0       0       0
   489 ;;      Locals:        10       0       0       0       0       0       0
   490 ;;      Temps:          0       0       0       0       0       0       0
   491 ;;      Totals:        16       0       0       0       0       0       0
   492 ;;Total ram usage:       16 bytes
   493 ;; Hardware stack levels used:    1
   494 ;; Hardware stack levels required when called:    7
   495 ;; This function calls:
   496 ;;		_vfprintf
   497 ;; This function is called by:
   498 ;;		_main
   499 ;; This function uses a non-reentrant model
   500 ;;
   501                           
   502                           	psect	text1
   503  000DCC                     __ptext1:
   504                           	opt callstack 0
   505  000DCC                     _sprintf:
   506                           	opt callstack 23
   507                           
   508                           ;incstack = 0
   509  000DCC  0E5C               	movlw	low (?_sprintf+4)
   510  000DCE  6E60               	movwf	sprintf@ap,c
   511  000DD0  0E00               	movlw	high (?_sprintf+4)
   512  000DD2  6E61               	movwf	sprintf@ap+1,c
   513  000DD4  C058  F062         	movff	sprintf@s,sprintf@f
   514  000DD8  C059  F063         	movff	sprintf@s+1,sprintf@f+1
   515  000DDC  0E00               	movlw	0
   516  000DDE  6E65               	movwf	sprintf@f+3,c
   517  000DE0  0E00               	movlw	0
   518  000DE2  6E64               	movwf	sprintf@f+2,c
   519  000DE4  0E00               	movlw	0
   520  000DE6  6E67               	movwf	sprintf@f+5,c
   521  000DE8  0E00               	movlw	0
   522  000DEA  6E66               	movwf	sprintf@f+4,c
   523  000DEC  0E62               	movlw	low sprintf@f
   524  000DEE  6E50               	movwf	vfprintf@fp,c
   525  000DF0  0E00               	movlw	high sprintf@f
   526  000DF2  6E51               	movwf	vfprintf@fp+1,c
   527  000DF4  C05A  F052         	movff	sprintf@fmt,vfprintf@fmt
   528  000DF8  C05B  F053         	movff	sprintf@fmt+1,vfprintf@fmt+1
   529  000DFC  0E60               	movlw	low sprintf@ap
   530  000DFE  6E54               	movwf	vfprintf@ap,c
   531  000E00  0E00               	movlw	high sprintf@ap
   532  000E02  6E55               	movwf	vfprintf@ap+1,c
   533  000E04  ECBD  F006         	call	_vfprintf	;wreg free
   534  000E08  5064               	movf	sprintf@f+2,w,c
   535  000E0A  2458               	addwf	sprintf@s,w,c
   536  000E0C  6ED9               	movwf	fsr2l,c
   537  000E0E  5065               	movf	sprintf@f+3,w,c
   538  000E10  2059               	addwfc	sprintf@s+1,w,c
   539  000E12  6EDA               	movwf	fsr2h,c
   540  000E14  0E00               	movlw	0
   541  000E16  6EDF               	movwf	indf2,c
   542  000E18  0012               	return		;funcret
   543  000E1A                     __end_of_sprintf:
   544                           	opt callstack 0
   545                           
   546 ;; *************** function _vfprintf *****************
   547 ;; Defined at:
   548 ;;		line 1368 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c"
   549 ;; Parameters:    Size  Location     Type
   550 ;;  fp              2   79[COMRAM] PTR struct _IO_FILE
   551 ;;		 -> sprintf@f(6), 
   552 ;;  fmt             2   81[COMRAM] PTR const unsigned char 
   553 ;;		 -> STR_1(20), 
   554 ;;  ap              2   83[COMRAM] PTR PTR void 
   555 ;;		 -> sprintf@ap(2), 
   556 ;; Auto vars:     Size  Location     Type
   557 ;;  cfmt            2   85[COMRAM] PTR unsigned char 
   558 ;;		 -> STR_1(20), 
   559 ;; Return value:  Size  Location     Type
   560 ;;                  2   79[COMRAM] int 
   561 ;; Registers used:
   562 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   563 ;; Tracked objects:
   564 ;;		On entry : 0/0
   565 ;;		On exit  : 0/0
   566 ;;		Unchanged: 0/0
   567 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   568 ;;      Params:         6       0       0       0       0       0       0
   569 ;;      Locals:         2       0       0       0       0       0       0
   570 ;;      Temps:          0       0       0       0       0       0       0
   571 ;;      Totals:         8       0       0       0       0       0       0
   572 ;;Total ram usage:        8 bytes
   573 ;; Hardware stack levels used:    1
   574 ;; Hardware stack levels required when called:    6
   575 ;; This function calls:
   576 ;;		_vfpfcnvrt
   577 ;; This function is called by:
   578 ;;		_sprintf
   579 ;; This function uses a non-reentrant model
   580 ;;
   581                           
   582                           	psect	text2
   583  000D7A                     __ptext2:
   584                           	opt callstack 0
   585  000D7A                     _vfprintf:
   586                           	opt callstack 23
   587                           
   588                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1368: int v
      +                          fprintf(FILE *fp, const char *fmt, va_list ap);C:\Program Files (x86)\Microchip\xc8\v2.0
      +                          5\pic\sources\c99\common\doprnt.c: 1369: {;C:\Program Files (x86)\Microchip\xc8\v2.05\pi
      +                          c\sources\c99\common\doprnt.c: 1371:     char *cfmt;;C:\Program Files (x86)\Microchip\xc
      +                          8\v2.05\pic\sources\c99\common\doprnt.c: 1373:     cfmt = (char *)fmt;
   589                           
   590                           ;incstack = 0
   591  000D7A  C052  F056         	movff	vfprintf@fmt,vfprintf@cfmt
   592  000D7E  C053  F057         	movff	vfprintf@fmt+1,vfprintf@cfmt+1
   593                           
   594                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1374:     n
      +                          out = 0;
   595  000D82  0E00               	movlw	0
   596  000D84  6E69               	movwf	_nout+1,c
   597  000D86  0E00               	movlw	0
   598  000D88  6E68               	movwf	_nout,c
   599                           
   600                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1375:     w
      +                          hile (*cfmt) {
   601  000D8A  D012               	goto	l1317
   602  000D8C                     l1315:
   603                           
   604                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1376:      
      +                             nout += vfpfcnvrt(fp, &cfmt, ap);
   605  000D8C  C050  F040         	movff	vfprintf@fp,vfpfcnvrt@fp
   606  000D90  C051  F041         	movff	vfprintf@fp+1,vfpfcnvrt@fp+1
   607  000D94  0E56               	movlw	low vfprintf@cfmt
   608  000D96  6E42               	movwf	vfpfcnvrt@fmt,c
   609  000D98  0E00               	movlw	high vfprintf@cfmt
   610  000D9A  6E43               	movwf	vfpfcnvrt@fmt+1,c
   611  000D9C  C054  F044         	movff	vfprintf@ap,vfpfcnvrt@ap
   612  000DA0  C055  F045         	movff	vfprintf@ap+1,vfpfcnvrt@ap+1
   613  000DA4  EC2C  F004         	call	_vfpfcnvrt	;wreg free
   614  000DA8  5040               	movf	?_vfpfcnvrt,w,c
   615  000DAA  2668               	addwf	_nout,f,c
   616  000DAC  5041               	movf	?_vfpfcnvrt+1,w,c
   617  000DAE  2269               	addwfc	_nout+1,f,c
   618  000DB0                     l1317:
   619                           
   620                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1375:     w
      +                          hile (*cfmt) {
   621  000DB0  C056  FFF6         	movff	vfprintf@cfmt,tblptrl
   622  000DB4  C057  FFF7         	movff	vfprintf@cfmt+1,tblptrh
   623  000DB8                     	if	0	;tblptru may be non-zero
   624  000DB8                     	endif
   625  000DB8                     	if	0	;tblptru may be non-zero
   626  000DB8                     	endif
   627  000DB8  0008               	tblrd		*
   628  000DBA  50F5               	movf	tablat,w,c
   629  000DBC  0900               	iorlw	0
   630  000DBE  A4D8               	btfss	status,2,c
   631  000DC0  D7E5               	goto	l1315
   632                           
   633                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1378:     r
      +                          eturn nout;
   634  000DC2  C068  F050         	movff	_nout,?_vfprintf
   635  000DC6  C069  F051         	movff	_nout+1,?_vfprintf+1
   636  000DCA  0012               	return		;funcret
   637  000DCC                     __end_of_vfprintf:
   638                           	opt callstack 0
   639                           
   640 ;; *************** function _vfpfcnvrt *****************
   641 ;; Defined at:
   642 ;;		line 670 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c"
   643 ;; Parameters:    Size  Location     Type
   644 ;;  fp              2   63[COMRAM] PTR struct _IO_FILE
   645 ;;		 -> sprintf@f(6), 
   646 ;;  fmt             2   65[COMRAM] PTR PTR unsigned char 
   647 ;;		 -> vfprintf@cfmt(2), 
   648 ;;  ap              2   67[COMRAM] PTR PTR void 
   649 ;;		 -> sprintf@ap(2), 
   650 ;; Auto vars:     Size  Location     Type
   651 ;;  ll              8   71[COMRAM] long long 
   652 ;;  llu             8    0        unsigned long long 
   653 ;;  f               4    0        unsigned long long 
   654 ;;  vp              3    0        PTR void 
   655 ;;  ct              3    0        unsigned char [3]
   656 ;;  cp              3    0        PTR unsigned char 
   657 ;;  i               2    0        int 
   658 ;;  done            2    0        int 
   659 ;;  c               1    0        unsigned char 
   660 ;; Return value:  Size  Location     Type
   661 ;;                  2   63[COMRAM] int 
   662 ;; Registers used:
   663 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   664 ;; Tracked objects:
   665 ;;		On entry : 0/0
   666 ;;		On exit  : 0/0
   667 ;;		Unchanged: 0/0
   668 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   669 ;;      Params:         6       0       0       0       0       0       0
   670 ;;      Locals:         8       0       0       0       0       0       0
   671 ;;      Temps:          2       0       0       0       0       0       0
   672 ;;      Totals:        16       0       0       0       0       0       0
   673 ;;Total ram usage:       16 bytes
   674 ;; Hardware stack levels used:    1
   675 ;; Hardware stack levels required when called:    5
   676 ;; This function calls:
   677 ;;		_dtoa
   678 ;;		_fputc
   679 ;; This function is called by:
   680 ;;		_vfprintf
   681 ;; This function uses a non-reentrant model
   682 ;;
   683                           
   684                           	psect	text3
   685  000858                     __ptext3:
   686                           	opt callstack 0
   687  000858                     _vfpfcnvrt:
   688                           	opt callstack 23
   689                           
   690                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 670: static
      +                           int vfpfcnvrt(FILE *fp, char *fmt[], va_list ap);C:\Program Files (x86)\Microchip\xc8\v
      +                          2.05\pic\sources\c99\common\doprnt.c: 671: {;C:\Program Files (x86)\Microchip\xc8\v2.05\
      +                          pic\sources\c99\common\doprnt.c: 672:     char c, *cp, ct[3];;C:\Program Files (x86)\Mic
      +                          rochip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 673:     int done, i;;C:\Program Files
      +                           (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 674:     long long ll;
   691                           
   692                           ;incstack = 0
   693  000858  C042  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
   694  00085C  C043  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
   695  000860  CFDE FFF6          	movff	postinc2,tblptrl
   696  000864  CFDD FFF7          	movff	postdec2,tblptrh
   697  000868                     	if	0	;tblptru may be non-zero
   698  000868                     	endif
   699  000868                     	if	0	;tblptru may be non-zero
   700  000868                     	endif
   701  000868  0008               	tblrd		*
   702  00086A  50F5               	movf	tablat,w,c
   703  00086C  0A25               	xorlw	37
   704  00086E  A4D8               	btfss	status,2,c
   705  000870  D099               	goto	l1303
   706                           
   707                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 681:       
      +                            ++*fmt;
   708  000872  C042  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
   709  000876  C043  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
   710  00087A  2ADE               	incf	postinc2,f,c
   711  00087C  0E00               	movlw	0
   712  00087E  22DD               	addwfc	postdec2,f,c
   713                           
   714                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 683:       
      +                            flags = width = 0;
   715  000880  0E00               	movlw	0
   716  000882  6E6B               	movwf	_width+1,c
   717  000884  0E00               	movlw	0
   718  000886  6E6A               	movwf	_width,c
   719  000888  C06A  F06E         	movff	_width,_flags
   720  00088C  C06B  F06F         	movff	_width+1,_flags+1
   721                           
   722                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 684:       
      +                            prec = -1;
   723  000890  686C               	setf	_prec,c
   724  000892  686D               	setf	_prec+1,c
   725                           
   726                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 825:       
      +                            if ((*fmt[0] == 'd') || (*fmt[0] == 'i')) {
   727  000894  C042  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
   728  000898  C043  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
   729  00089C  CFDE FFF6          	movff	postinc2,tblptrl
   730  0008A0  CFDD FFF7          	movff	postdec2,tblptrh
   731  0008A4                     	if	0	;tblptru may be non-zero
   732  0008A4                     	endif
   733  0008A4                     	if	0	;tblptru may be non-zero
   734  0008A4                     	endif
   735  0008A4  0008               	tblrd		*
   736  0008A6  50F5               	movf	tablat,w,c
   737  0008A8  0A64               	xorlw	100
   738  0008AA  B4D8               	btfsc	status,2,c
   739  0008AC  D00D               	goto	u860
   740  0008AE  C042  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
   741  0008B2  C043  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
   742  0008B6  CFDE FFF6          	movff	postinc2,tblptrl
   743  0008BA  CFDD FFF7          	movff	postdec2,tblptrh
   744  0008BE                     	if	0	;tblptru may be non-zero
   745  0008BE                     	endif
   746  0008BE                     	if	0	;tblptru may be non-zero
   747  0008BE                     	endif
   748  0008BE  0008               	tblrd		*
   749  0008C0  50F5               	movf	tablat,w,c
   750  0008C2  0A69               	xorlw	105
   751  0008C4  A4D8               	btfss	status,2,c
   752  0008C6  D03F               	goto	l1287
   753  0008C8                     u860:
   754                           
   755                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 827:       
      +                                ++*fmt;
   756  0008C8  C042  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
   757  0008CC  C043  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
   758  0008D0  2ADE               	incf	postinc2,f,c
   759  0008D2  0E00               	movlw	0
   760  0008D4  22DD               	addwfc	postdec2,f,c
   761                           
   762                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 828:       
      +                                ll = (long long)(*(int *)__va_arg(*(int **)ap, (int)0));
   763  0008D6  C044  FFD9         	movff	vfpfcnvrt@ap,fsr2l
   764  0008DA  C045  FFDA         	movff	vfpfcnvrt@ap+1,fsr2h
   765  0008DE  CFDF F046          	movff	indf2,??_vfpfcnvrt
   766  0008E2  0E02               	movlw	2
   767  0008E4  26DE               	addwf	postinc2,f,c
   768  0008E6  CFDF F047          	movff	indf2,??_vfpfcnvrt+1
   769  0008EA  0E00               	movlw	0
   770  0008EC  22DD               	addwfc	postdec2,f,c
   771  0008EE  C046  FFD9         	movff	??_vfpfcnvrt,fsr2l
   772  0008F2  C047  FFDA         	movff	??_vfpfcnvrt+1,fsr2h
   773  0008F6  CFDE F048          	movff	postinc2,vfpfcnvrt@ll
   774  0008FA  CFDD F049          	movff	postdec2,vfpfcnvrt@ll+1
   775  0008FE  0E00               	movlw	0
   776  000900  BE49               	btfsc	vfpfcnvrt@ll+1,7,c
   777  000902  0EFF               	movlw	-1
   778  000904  6E4A               	movwf	vfpfcnvrt@ll+2,c
   779  000906  6E4B               	movwf	vfpfcnvrt@ll+3,c
   780  000908  6E4C               	movwf	vfpfcnvrt@ll+4,c
   781  00090A  6E4D               	movwf	vfpfcnvrt@ll+5,c
   782  00090C  6E4E               	movwf	vfpfcnvrt@ll+6,c
   783  00090E  6E4F               	movwf	vfpfcnvrt@ll+7,c
   784                           
   785                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 830:       
      +                                return dtoa(fp, ll);
   786  000910  C040  F01C         	movff	vfpfcnvrt@fp,dtoa@fp
   787  000914  C041  F01D         	movff	vfpfcnvrt@fp+1,dtoa@fp+1
   788  000918  C048  F01E         	movff	vfpfcnvrt@ll,dtoa@d
   789  00091C  C049  F01F         	movff	vfpfcnvrt@ll+1,dtoa@d+1
   790  000920  C04A  F020         	movff	vfpfcnvrt@ll+2,dtoa@d+2
   791  000924  C04B  F021         	movff	vfpfcnvrt@ll+3,dtoa@d+3
   792  000928  C04C  F022         	movff	vfpfcnvrt@ll+4,dtoa@d+4
   793  00092C  C04D  F023         	movff	vfpfcnvrt@ll+5,dtoa@d+5
   794  000930  C04E  F024         	movff	vfpfcnvrt@ll+6,dtoa@d+6
   795  000934  C04F  F025         	movff	vfpfcnvrt@ll+7,dtoa@d+7
   796  000938  EC0B  F003         	call	_dtoa	;wreg free
   797  00093C  C01C  F040         	movff	?_dtoa,?_vfpfcnvrt
   798  000940  C01D  F041         	movff	?_dtoa+1,?_vfpfcnvrt+1
   799  000944  0012               	return	
   800  000946                     l1287:
   801                           
   802                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1350:      
      +                             if ((*fmt)[0] == '%') {
   803  000946  C042  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
   804  00094A  C043  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
   805  00094E  CFDE FFF6          	movff	postinc2,tblptrl
   806  000952  CFDD FFF7          	movff	postdec2,tblptrh
   807  000956                     	if	0	;tblptru may be non-zero
   808  000956                     	endif
   809  000956                     	if	0	;tblptru may be non-zero
   810  000956                     	endif
   811  000956  0008               	tblrd		*
   812  000958  50F5               	movf	tablat,w,c
   813  00095A  0A25               	xorlw	37
   814  00095C  A4D8               	btfss	status,2,c
   815  00095E  D016               	goto	l1297
   816                           
   817                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1351:      
      +                                 ++*fmt;
   818  000960  C042  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
   819  000964  C043  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
   820  000968  2ADE               	incf	postinc2,f,c
   821  00096A  0E00               	movlw	0
   822  00096C  22DD               	addwfc	postdec2,f,c
   823                           
   824                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1352:      
      +                                 fputc((int)'%', fp);
   825  00096E  0E00               	movlw	0
   826  000970  6E02               	movwf	fputc@c+1,c
   827  000972  0E25               	movlw	37
   828  000974  6E01               	movwf	fputc@c,c
   829  000976  C040  F003         	movff	vfpfcnvrt@fp,fputc@fp
   830  00097A  C041  F004         	movff	vfpfcnvrt@fp+1,fputc@fp+1
   831  00097E  EC22  F006         	call	_fputc	;wreg free
   832  000982                     l1293:
   833                           
   834                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1353:      
      +                                 return 1;
   835  000982  0E00               	movlw	0
   836  000984  6E41               	movwf	?_vfpfcnvrt+1,c
   837  000986  0E01               	movlw	1
   838  000988  6E40               	movwf	?_vfpfcnvrt,c
   839  00098A  0012               	return	
   840  00098C                     l1297:
   841                           
   842                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1357:      
      +                             ++*fmt;
   843  00098C  C042  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
   844  000990  C043  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
   845  000994  2ADE               	incf	postinc2,f,c
   846  000996  0E00               	movlw	0
   847  000998  22DD               	addwfc	postdec2,f,c
   848                           
   849                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1358:      
      +                             return 0;
   850  00099A  0E00               	movlw	0
   851  00099C  6E41               	movwf	?_vfpfcnvrt+1,c
   852  00099E  0E00               	movlw	0
   853  0009A0  6E40               	movwf	?_vfpfcnvrt,c
   854  0009A2  0012               	return	
   855  0009A4                     l1303:
   856                           
   857                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1362:     f
      +                          putc((int)(*fmt)[0], fp);
   858  0009A4  C042  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
   859  0009A8  C043  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
   860  0009AC  CFDE FFF6          	movff	postinc2,tblptrl
   861  0009B0  CFDD FFF7          	movff	postdec2,tblptrh
   862  0009B4                     	if	0	;tblptru may be non-zero
   863  0009B4                     	endif
   864  0009B4                     	if	0	;tblptru may be non-zero
   865  0009B4                     	endif
   866  0009B4  0008               	tblrd		*
   867  0009B6  50F5               	movf	tablat,w,c
   868  0009B8  6E01               	movwf	fputc@c,c
   869  0009BA  6A02               	clrf	fputc@c+1,c
   870  0009BC  C040  F003         	movff	vfpfcnvrt@fp,fputc@fp
   871  0009C0  C041  F004         	movff	vfpfcnvrt@fp+1,fputc@fp+1
   872  0009C4  EC22  F006         	call	_fputc	;wreg free
   873                           
   874                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1363:     +
      +                          +*fmt;
   875  0009C8  C042  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
   876  0009CC  C043  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
   877  0009D0  2ADE               	incf	postinc2,f,c
   878  0009D2  0E00               	movlw	0
   879  0009D4  22DD               	addwfc	postdec2,f,c
   880  0009D6  D7D5               	goto	l1293
   881  0009D8                     __end_of_vfpfcnvrt:
   882                           	opt callstack 0
   883                           
   884 ;; *************** function _dtoa *****************
   885 ;; Defined at:
   886 ;;		line 274 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c"
   887 ;; Parameters:    Size  Location     Type
   888 ;;  fp              2   27[COMRAM] PTR struct _IO_FILE
   889 ;;		 -> sprintf@f(6), 
   890 ;;  d               8   29[COMRAM] long long 
   891 ;; Auto vars:     Size  Location     Type
   892 ;;  n               8   53[COMRAM] long long 
   893 ;;  i               2   61[COMRAM] int 
   894 ;;  s               2   51[COMRAM] int 
   895 ;;  w               2   49[COMRAM] int 
   896 ;;  p               2   47[COMRAM] int 
   897 ;; Return value:  Size  Location     Type
   898 ;;                  2   27[COMRAM] int 
   899 ;; Registers used:
   900 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
   901 ;; Tracked objects:
   902 ;;		On entry : 0/0
   903 ;;		On exit  : 0/0
   904 ;;		Unchanged: 0/0
   905 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   906 ;;      Params:        10       0       0       0       0       0       0
   907 ;;      Locals:        18       0       0       0       0       0       0
   908 ;;      Temps:          8       0       0       0       0       0       0
   909 ;;      Totals:        36       0       0       0       0       0       0
   910 ;;Total ram usage:       36 bytes
   911 ;; Hardware stack levels used:    1
   912 ;; Hardware stack levels required when called:    4
   913 ;; This function calls:
   914 ;;		___aodiv
   915 ;;		___aomod
   916 ;;		_abs
   917 ;;		_pad
   918 ;; This function is called by:
   919 ;;		_vfpfcnvrt
   920 ;; This function uses a non-reentrant model
   921 ;;
   922                           
   923                           	psect	text4
   924  000616                     __ptext4:
   925                           	opt callstack 0
   926  000616                     _dtoa:
   927                           	opt callstack 23
   928                           
   929                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 274: static
      +                           int dtoa(FILE *fp, long long d);C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\
      +                          c99\common\doprnt.c: 275: {;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\c
      +                          ommon\doprnt.c: 276:     int i, p, s, w;;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\
      +                          sources\c99\common\doprnt.c: 277:     long long n;;C:\Program Files (x86)\Microchip\xc8\
      +                          v2.05\pic\sources\c99\common\doprnt.c: 280:     n = d;
   930                           
   931                           ;incstack = 0
   932  000616  C01E  F036         	movff	dtoa@d,dtoa@n
   933  00061A  C01F  F037         	movff	dtoa@d+1,dtoa@n+1
   934  00061E  C020  F038         	movff	dtoa@d+2,dtoa@n+2
   935  000622  C021  F039         	movff	dtoa@d+3,dtoa@n+3
   936  000626  C022  F03A         	movff	dtoa@d+4,dtoa@n+4
   937  00062A  C023  F03B         	movff	dtoa@d+5,dtoa@n+5
   938  00062E  C024  F03C         	movff	dtoa@d+6,dtoa@n+6
   939  000632  C025  F03D         	movff	dtoa@d+7,dtoa@n+7
   940                           
   941                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 281:     s 
      +                          = n < 0 ? 1 : 0;
   942  000636  AE3D               	btfss	dtoa@n+7,7,c
   943  000638  D002               	goto	u690
   944  00063A  0E01               	movlw	1
   945  00063C  D001               	goto	u700
   946  00063E                     u690:
   947  00063E  0E00               	movlw	0
   948  000640                     u700:
   949  000640  6E34               	movwf	dtoa@s,c
   950  000642  6A35               	clrf	dtoa@s+1,c
   951                           
   952                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 282:     if
      +                           (s) {
   953  000644  5034               	movf	dtoa@s,w,c
   954  000646  1035               	iorwf	dtoa@s+1,w,c
   955  000648  B4D8               	btfsc	status,2,c
   956  00064A  D010               	goto	l1213
   957                           
   958                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 283:       
      +                            n = -n;
   959  00064C  1E3D               	comf	dtoa@n+7,f,c
   960  00064E  1E3C               	comf	dtoa@n+6,f,c
   961  000650  1E3B               	comf	dtoa@n+5,f,c
   962  000652  1E3A               	comf	dtoa@n+4,f,c
   963  000654  1E39               	comf	dtoa@n+3,f,c
   964  000656  1E38               	comf	dtoa@n+2,f,c
   965  000658  1E37               	comf	dtoa@n+1,f,c
   966  00065A  6C36               	negf	dtoa@n,c
   967  00065C  0E00               	movlw	0
   968  00065E  2237               	addwfc	dtoa@n+1,f,c
   969  000660  2238               	addwfc	dtoa@n+2,f,c
   970  000662  2239               	addwfc	dtoa@n+3,f,c
   971  000664  223A               	addwfc	dtoa@n+4,f,c
   972  000666  223B               	addwfc	dtoa@n+5,f,c
   973  000668  223C               	addwfc	dtoa@n+6,f,c
   974  00066A  223D               	addwfc	dtoa@n+7,f,c
   975  00066C                     l1213:
   976                           
   977                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 287:     if
      +                           (!(prec < 0)) {
   978  00066C  AE6D               	btfss	_prec+1,7,c
   979                           
   980                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 288:       
      +                            flags &= ~(1 << 1);
   981  00066E  926E               	bcf	_flags,1,c
   982                           
   983                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 290:     p 
      +                          = (0 < prec) ? prec : 1;
   984  000670  BE6D               	btfsc	_prec+1,7,c
   985  000672  D005               	goto	u730
   986  000674  506D               	movf	_prec+1,w,c
   987  000676  E108               	bnz	l52
   988  000678  046C               	decf	_prec,w,c
   989  00067A  B0D8               	btfsc	status,0,c
   990  00067C  D005               	goto	l52
   991  00067E                     u730:
   992  00067E  0E00               	movlw	0
   993  000680  6E31               	movwf	dtoa@p+1,c
   994  000682  0E01               	movlw	1
   995  000684  6E30               	movwf	dtoa@p,c
   996  000686  D004               	goto	l54
   997  000688                     l52:
   998  000688  C06C  F030         	movff	_prec,dtoa@p
   999  00068C  C06D  F031         	movff	_prec+1,dtoa@p+1
  1000  000690                     l54:
  1001                           
  1002                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 291:     w 
      +                          = width;
  1003  000690  C06A  F032         	movff	_width,dtoa@w
  1004  000694  C06B  F033         	movff	_width+1,dtoa@w+1
  1005                           
  1006                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 292:     if
      +                           (s || (flags & (1 << 2))) {
  1007  000698  5034               	movf	dtoa@s,w,c
  1008  00069A  1035               	iorwf	dtoa@s+1,w,c
  1009  00069C  A4D8               	btfss	status,2,c
  1010  00069E  D002               	goto	u750
  1011  0006A0  A46E               	btfss	_flags,2,c
  1012  0006A2  D003               	goto	l1227
  1013  0006A4                     u750:
  1014                           
  1015                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 293:       
      +                            --w;
  1016  0006A4  0632               	decf	dtoa@w,f,c
  1017  0006A6  A0D8               	btfss	status,0,c
  1018  0006A8  0633               	decf	dtoa@w+1,f,c
  1019  0006AA                     l1227:
  1020                           
  1021                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 297:     i 
      +                          = sizeof(dbuf) - 1;
  1022  0006AA  0E00               	movlw	0
  1023  0006AC  6E3F               	movwf	dtoa@i+1,c
  1024  0006AE  0E1F               	movlw	31
  1025  0006B0  6E3E               	movwf	dtoa@i,c
  1026                           
  1027                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 298:     db
      +                          uf[i] = '\0';
  1028  0006B2  0E00               	movlw	0
  1029  0006B4  0100               	movlb	0	; () banked
  1030  0006B6  6F9F               	movwf	(_dbuf+31)& (0+255),b
  1031                           
  1032                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 299:     wh
      +                          ile (!(i < 1) && (n || (0 < p) || ((0 < w) && (flags & (1 << 1))))) {
  1033  0006B8  D07C               	goto	l1241
  1034  0006BA                     l1231:
  1035                           
  1036                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 300:       
      +                            --i;
  1037  0006BA  063E               	decf	dtoa@i,f,c
  1038  0006BC  A0D8               	btfss	status,0,c
  1039  0006BE  063F               	decf	dtoa@i+1,f,c
  1040                           
  1041                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 301:       
      +                            dbuf[i] = '0' + abs(n % 10);
  1042  0006C0  0E80               	movlw	low _dbuf
  1043  0006C2  243E               	addwf	dtoa@i,w,c
  1044  0006C4  6ED9               	movwf	fsr2l,c
  1045  0006C6  0E00               	movlw	high _dbuf
  1046  0006C8  203F               	addwfc	dtoa@i+1,w,c
  1047  0006CA  6EDA               	movwf	fsr2h,c
  1048  0006CC  C036  F001         	movff	dtoa@n,___aomod@dividend
  1049  0006D0  C037  F002         	movff	dtoa@n+1,___aomod@dividend+1
  1050  0006D4  C038  F003         	movff	dtoa@n+2,___aomod@dividend+2
  1051  0006D8  C039  F004         	movff	dtoa@n+3,___aomod@dividend+3
  1052  0006DC  C03A  F005         	movff	dtoa@n+4,___aomod@dividend+4
  1053  0006E0  C03B  F006         	movff	dtoa@n+5,___aomod@dividend+5
  1054  0006E4  C03C  F007         	movff	dtoa@n+6,___aomod@dividend+6
  1055  0006E8  C03D  F008         	movff	dtoa@n+7,___aomod@dividend+7
  1056  0006EC  0E0A               	movlw	10
  1057  0006EE  6E09               	movwf	___aomod@divisor,c
  1058  0006F0  0E00               	movlw	0
  1059  0006F2  6E0A               	movwf	___aomod@divisor+1,c
  1060  0006F4  0E00               	movlw	0
  1061  0006F6  6E0B               	movwf	___aomod@divisor+2,c
  1062  0006F8  0E00               	movlw	0
  1063  0006FA  6E0C               	movwf	___aomod@divisor+3,c
  1064  0006FC  0E00               	movlw	0
  1065  0006FE  6E0D               	movwf	___aomod@divisor+4,c
  1066  000700  0E00               	movlw	0
  1067  000702  6E0E               	movwf	___aomod@divisor+5,c
  1068  000704  0E00               	movlw	0
  1069  000706  6E0F               	movwf	___aomod@divisor+6,c
  1070  000708  0E00               	movlw	0
  1071  00070A  6E10               	movwf	___aomod@divisor+7,c
  1072  00070C  EC90  F005         	call	___aomod	;wreg free
  1073  000710  C001  F026         	movff	?___aomod,??_dtoa
  1074  000714  C002  F027         	movff	?___aomod+1,??_dtoa+1
  1075  000718  C003  F028         	movff	?___aomod+2,??_dtoa+2
  1076  00071C  C004  F029         	movff	?___aomod+3,??_dtoa+3
  1077  000720  C005  F02A         	movff	?___aomod+4,??_dtoa+4
  1078  000724  C006  F02B         	movff	?___aomod+5,??_dtoa+5
  1079  000728  C007  F02C         	movff	?___aomod+6,??_dtoa+6
  1080  00072C  C008  F02D         	movff	?___aomod+7,??_dtoa+7
  1081  000730  C026  F013         	movff	??_dtoa,abs@a
  1082  000734  C028  F014         	movff	??_dtoa+2,abs@a+1
  1083  000738  EC48  F007         	call	_abs	;wreg free
  1084  00073C  5013               	movf	?_abs,w,c
  1085  00073E  0F30               	addlw	48
  1086  000740  6EDF               	movwf	indf2,c
  1087                           
  1088                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 302:       
      +                            --p;
  1089  000742  0630               	decf	dtoa@p,f,c
  1090  000744  A0D8               	btfss	status,0,c
  1091  000746  0631               	decf	dtoa@p+1,f,c
  1092                           
  1093                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 303:       
      +                            --w;
  1094  000748  0632               	decf	dtoa@w,f,c
  1095  00074A  A0D8               	btfss	status,0,c
  1096  00074C  0633               	decf	dtoa@w+1,f,c
  1097                           
  1098                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 304:       
      +                            n = n / 10;
  1099  00074E  C036  F001         	movff	dtoa@n,___aodiv@dividend
  1100  000752  C037  F002         	movff	dtoa@n+1,___aodiv@dividend+1
  1101  000756  C038  F003         	movff	dtoa@n+2,___aodiv@dividend+2
  1102  00075A  C039  F004         	movff	dtoa@n+3,___aodiv@dividend+3
  1103  00075E  C03A  F005         	movff	dtoa@n+4,___aodiv@dividend+4
  1104  000762  C03B  F006         	movff	dtoa@n+5,___aodiv@dividend+5
  1105  000766  C03C  F007         	movff	dtoa@n+6,___aodiv@dividend+6
  1106  00076A  C03D  F008         	movff	dtoa@n+7,___aodiv@dividend+7
  1107  00076E  0E0A               	movlw	10
  1108  000770  6E09               	movwf	___aodiv@divisor,c
  1109  000772  0E00               	movlw	0
  1110  000774  6E0A               	movwf	___aodiv@divisor+1,c
  1111  000776  0E00               	movlw	0
  1112  000778  6E0B               	movwf	___aodiv@divisor+2,c
  1113  00077A  0E00               	movlw	0
  1114  00077C  6E0C               	movwf	___aodiv@divisor+3,c
  1115  00077E  0E00               	movlw	0
  1116  000780  6E0D               	movwf	___aodiv@divisor+4,c
  1117  000782  0E00               	movlw	0
  1118  000784  6E0E               	movwf	___aodiv@divisor+5,c
  1119  000786  0E00               	movlw	0
  1120  000788  6E0F               	movwf	___aodiv@divisor+6,c
  1121  00078A  0E00               	movlw	0
  1122  00078C  6E10               	movwf	___aodiv@divisor+7,c
  1123  00078E  ECEC  F004         	call	___aodiv	;wreg free
  1124  000792  C001  F036         	movff	?___aodiv,dtoa@n
  1125  000796  C002  F037         	movff	?___aodiv+1,dtoa@n+1
  1126  00079A  C003  F038         	movff	?___aodiv+2,dtoa@n+2
  1127  00079E  C004  F039         	movff	?___aodiv+3,dtoa@n+3
  1128  0007A2  C005  F03A         	movff	?___aodiv+4,dtoa@n+4
  1129  0007A6  C006  F03B         	movff	?___aodiv+5,dtoa@n+5
  1130  0007AA  C007  F03C         	movff	?___aodiv+6,dtoa@n+6
  1131  0007AE  C008  F03D         	movff	?___aodiv+7,dtoa@n+7
  1132  0007B2                     l1241:
  1133                           
  1134                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 299:     wh
      +                          ile (!(i < 1) && (n || (0 < p) || ((0 < w) && (flags & (1 << 1))))) {
  1135  0007B2  BE3F               	btfsc	dtoa@i+1,7,c
  1136  0007B4  D01F               	goto	u800
  1137  0007B6  503F               	movf	dtoa@i+1,w,c
  1138  0007B8  E103               	bnz	u760
  1139  0007BA  043E               	decf	dtoa@i,w,c
  1140  0007BC  A0D8               	btfss	status,0,c
  1141  0007BE  D01A               	goto	u800
  1142  0007C0                     u760:
  1143  0007C0  5036               	movf	dtoa@n,w,c
  1144  0007C2  1037               	iorwf	dtoa@n+1,w,c
  1145  0007C4  1038               	iorwf	dtoa@n+2,w,c
  1146  0007C6  1039               	iorwf	dtoa@n+3,w,c
  1147  0007C8  103A               	iorwf	dtoa@n+4,w,c
  1148  0007CA  103B               	iorwf	dtoa@n+5,w,c
  1149  0007CC  103C               	iorwf	dtoa@n+6,w,c
  1150  0007CE  103D               	iorwf	dtoa@n+7,w,c
  1151  0007D0  A4D8               	btfss	status,2,c
  1152  0007D2  D773               	goto	l1231
  1153  0007D4  BE31               	btfsc	dtoa@p+1,7,c
  1154  0007D6  D005               	goto	u780
  1155  0007D8  5031               	movf	dtoa@p+1,w,c
  1156  0007DA  E102               	bnz	u781
  1157  0007DC  0430               	decf	dtoa@p,w,c
  1158  0007DE  B0D8               	btfsc	status,0,c
  1159  0007E0                     u781:
  1160  0007E0  D76C               	goto	l1231
  1161  0007E2                     u780:
  1162  0007E2  BE33               	btfsc	dtoa@w+1,7,c
  1163  0007E4  D007               	goto	u800
  1164  0007E6  5033               	movf	dtoa@w+1,w,c
  1165  0007E8  E103               	bnz	u790
  1166  0007EA  0432               	decf	dtoa@w,w,c
  1167  0007EC  A0D8               	btfss	status,0,c
  1168  0007EE  D002               	goto	u800
  1169  0007F0                     u790:
  1170  0007F0  B26E               	btfsc	_flags,1,c
  1171  0007F2  D763               	goto	l1231
  1172  0007F4                     u800:
  1173                           
  1174                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 308:     if
      +                           (s || (flags & (1 << 2))) {
  1175  0007F4  5034               	movf	dtoa@s,w,c
  1176  0007F6  1035               	iorwf	dtoa@s+1,w,c
  1177  0007F8  A4D8               	btfss	status,2,c
  1178  0007FA  D002               	goto	u820
  1179  0007FC  A46E               	btfss	_flags,2,c
  1180  0007FE  D017               	goto	l1265
  1181  000800                     u820:
  1182                           
  1183                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 309:       
      +                            --i;
  1184  000800  063E               	decf	dtoa@i,f,c
  1185  000802  A0D8               	btfss	status,0,c
  1186  000804  063F               	decf	dtoa@i+1,f,c
  1187                           
  1188                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 310:       
      +                            dbuf[i] = s ? '-' : '+';
  1189  000806  5034               	movf	dtoa@s,w,c
  1190  000808  1035               	iorwf	dtoa@s+1,w,c
  1191  00080A  A4D8               	btfss	status,2,c
  1192  00080C  D004               	goto	l1261
  1193  00080E  0E00               	movlw	0
  1194  000810  6E2F               	movwf	_dtoa$85+1,c
  1195  000812  0E2B               	movlw	43
  1196  000814  D003               	goto	L1
  1197  000816                     l1261:
  1198  000816  0E00               	movlw	0
  1199  000818  6E2F               	movwf	_dtoa$85+1,c
  1200  00081A  0E2D               	movlw	45
  1201  00081C                     L1:
  1202  00081C  6E2E               	movwf	_dtoa$85,c
  1203  00081E  0E80               	movlw	low _dbuf
  1204  000820  243E               	addwf	dtoa@i,w,c
  1205  000822  6ED9               	movwf	fsr2l,c
  1206  000824  0E00               	movlw	high _dbuf
  1207  000826  203F               	addwfc	dtoa@i+1,w,c
  1208  000828  6EDA               	movwf	fsr2h,c
  1209  00082A  C02E  FFDF         	movff	_dtoa$85,indf2
  1210  00082E                     l1265:
  1211                           
  1212                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 314:     re
      +                          turn pad(fp, &dbuf[i], w);
  1213  00082E  C01C  F011         	movff	dtoa@fp,pad@fp
  1214  000832  C01D  F012         	movff	dtoa@fp+1,pad@fp+1
  1215  000836  0E80               	movlw	low _dbuf
  1216  000838  243E               	addwf	dtoa@i,w,c
  1217  00083A  6E13               	movwf	pad@buf,c
  1218  00083C  0E00               	movlw	high _dbuf
  1219  00083E  203F               	addwfc	dtoa@i+1,w,c
  1220  000840  6E14               	movwf	pad@buf+1,c
  1221  000842  C032  F015         	movff	dtoa@w,pad@p
  1222  000846  C033  F016         	movff	dtoa@w+1,pad@p+1
  1223  00084A  EC72  F006         	call	_pad	;wreg free
  1224  00084E  C011  F01C         	movff	?_pad,?_dtoa
  1225  000852  C012  F01D         	movff	?_pad+1,?_dtoa+1
  1226  000856  0012               	return		;funcret
  1227  000858                     __end_of_dtoa:
  1228                           	opt callstack 0
  1229                           
  1230 ;; *************** function _pad *****************
  1231 ;; Defined at:
  1232 ;;		line 72 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c"
  1233 ;; Parameters:    Size  Location     Type
  1234 ;;  fp              2   16[COMRAM] PTR struct _IO_FILE
  1235 ;;		 -> sprintf@f(6), 
  1236 ;;  buf             2   18[COMRAM] PTR unsigned char 
  1237 ;;		 -> dbuf(32), 
  1238 ;;  p               2   20[COMRAM] int 
  1239 ;; Auto vars:     Size  Location     Type
  1240 ;;  w               2   25[COMRAM] int 
  1241 ;;  i               2   23[COMRAM] int 
  1242 ;; Return value:  Size  Location     Type
  1243 ;;                  2   16[COMRAM] int 
  1244 ;; Registers used:
  1245 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  1246 ;; Tracked objects:
  1247 ;;		On entry : 0/0
  1248 ;;		On exit  : 0/0
  1249 ;;		Unchanged: 0/0
  1250 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1251 ;;      Params:         6       0       0       0       0       0       0
  1252 ;;      Locals:         4       0       0       0       0       0       0
  1253 ;;      Temps:          1       0       0       0       0       0       0
  1254 ;;      Totals:        11       0       0       0       0       0       0
  1255 ;;Total ram usage:       11 bytes
  1256 ;; Hardware stack levels used:    1
  1257 ;; Hardware stack levels required when called:    3
  1258 ;; This function calls:
  1259 ;;		_fputc
  1260 ;;		_fputs
  1261 ;;		_strlen
  1262 ;; This function is called by:
  1263 ;;		_dtoa
  1264 ;; This function uses a non-reentrant model
  1265 ;;
  1266                           
  1267                           	psect	text5
  1268  000CE4                     __ptext5:
  1269                           	opt callstack 0
  1270  000CE4                     _pad:
  1271                           	opt callstack 23
  1272                           
  1273                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 72: static 
      +                          int pad(FILE *fp, char *buf, int p);C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sourc
      +                          es\c99\common\doprnt.c: 73: {;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99
      +                          \common\doprnt.c: 74:     int i, w;;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sourc
      +                          es\c99\common\doprnt.c: 77:     if (flags & (1 << 0)) {
  1274                           
  1275                           ;incstack = 0
  1276  000CE4  A06E               	btfss	_flags,0,c
  1277  000CE6  D00A               	goto	l1105
  1278                           
  1279                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 78:        
      +                           fputs((const char *)buf, fp);
  1280  000CE8  C013  F00A         	movff	pad@buf,fputs@s
  1281  000CEC  C014  F00B         	movff	pad@buf+1,fputs@s+1
  1282  000CF0  C011  F00C         	movff	pad@fp,fputs@fp
  1283  000CF4  C012  F00D         	movff	pad@fp+1,fputs@fp+1
  1284  000CF8  EC2C  F007         	call	_fputs	;wreg free
  1285  000CFC                     l1105:
  1286                           
  1287                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 82:     w =
      +                           (p < 0) ? 0 : p;
  1288  000CFC  BE16               	btfsc	pad@p+1,7,c
  1289  000CFE  D005               	goto	l1109
  1290  000D00  C015  F01A         	movff	pad@p,pad@w
  1291  000D04  C016  F01B         	movff	pad@p+1,pad@w+1
  1292  000D08  D004               	goto	l41
  1293  000D0A                     l1109:
  1294  000D0A  0E00               	movlw	0
  1295  000D0C  6E1B               	movwf	pad@w+1,c
  1296  000D0E  0E00               	movlw	0
  1297  000D10  6E1A               	movwf	pad@w,c
  1298  000D12                     l41:
  1299                           
  1300                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 83:     i =
      +                           0;
  1301  000D12  0E00               	movlw	0
  1302  000D14  6E19               	movwf	pad@i+1,c
  1303  000D16  0E00               	movlw	0
  1304  000D18  6E18               	movwf	pad@i,c
  1305                           
  1306                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 84:     whi
      +                          le (i < w) {
  1307  000D1A  D00C               	goto	l1115
  1308  000D1C                     l1111:
  1309                           
  1310                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 85:        
      +                           fputc(' ', fp);
  1311  000D1C  0E00               	movlw	0
  1312  000D1E  6E02               	movwf	fputc@c+1,c
  1313  000D20  0E20               	movlw	32
  1314  000D22  6E01               	movwf	fputc@c,c
  1315  000D24  C011  F003         	movff	pad@fp,fputc@fp
  1316  000D28  C012  F004         	movff	pad@fp+1,fputc@fp+1
  1317  000D2C  EC22  F006         	call	_fputc	;wreg free
  1318                           
  1319                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 86:        
      +                           ++i;
  1320  000D30  4A18               	infsnz	pad@i,f,c
  1321  000D32  2A19               	incf	pad@i+1,f,c
  1322  000D34                     l1115:
  1323                           
  1324                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 84:     whi
      +                          le (i < w) {
  1325  000D34  501A               	movf	pad@w,w,c
  1326  000D36  5C18               	subwf	pad@i,w,c
  1327  000D38  5019               	movf	pad@i+1,w,c
  1328  000D3A  0A80               	xorlw	128
  1329  000D3C  6E17               	movwf	??_pad& (0+255),c
  1330  000D3E  501B               	movf	pad@w+1,w,c
  1331  000D40  0A80               	xorlw	128
  1332  000D42  5817               	subwfb	??_pad& (0+255),w,c
  1333  000D44  A0D8               	btfss	status,0,c
  1334  000D46  D7EA               	goto	l1111
  1335                           
  1336                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 90:     if 
      +                          (!(flags & (1 << 0))) {
  1337  000D48  B06E               	btfsc	_flags,0,c
  1338  000D4A  D00A               	goto	l1119
  1339                           
  1340                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 91:        
      +                           fputs((const char *)buf, fp);
  1341  000D4C  C013  F00A         	movff	pad@buf,fputs@s
  1342  000D50  C014  F00B         	movff	pad@buf+1,fputs@s+1
  1343  000D54  C011  F00C         	movff	pad@fp,fputs@fp
  1344  000D58  C012  F00D         	movff	pad@fp+1,fputs@fp+1
  1345  000D5C  EC2C  F007         	call	_fputs	;wreg free
  1346  000D60                     l1119:
  1347                           
  1348                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 94:     ret
      +                          urn strlen(buf) + w;
  1349  000D60  C013  F001         	movff	pad@buf,strlen@s
  1350  000D64  C014  F002         	movff	pad@buf+1,strlen@s+1
  1351  000D68  EC61  F007         	call	_strlen	;wreg free
  1352  000D6C  501A               	movf	pad@w,w,c
  1353  000D6E  2401               	addwf	?_strlen,w,c
  1354  000D70  6E11               	movwf	?_pad,c
  1355  000D72  501B               	movf	pad@w+1,w,c
  1356  000D74  2002               	addwfc	?_strlen+1,w,c
  1357  000D76  6E12               	movwf	?_pad+1,c
  1358  000D78  0012               	return		;funcret
  1359  000D7A                     __end_of_pad:
  1360                           	opt callstack 0
  1361                           
  1362 ;; *************** function _strlen *****************
  1363 ;; Defined at:
  1364 ;;		line 12 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\strlen.c"
  1365 ;; Parameters:    Size  Location     Type
  1366 ;;  s               2    0[COMRAM] PTR const unsigned char 
  1367 ;;		 -> dbuf(32), 
  1368 ;; Auto vars:     Size  Location     Type
  1369 ;;  a               2    2[COMRAM] PTR const unsigned char 
  1370 ;;		 -> dbuf(32), 
  1371 ;; Return value:  Size  Location     Type
  1372 ;;                  2    0[COMRAM] unsigned int 
  1373 ;; Registers used:
  1374 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  1375 ;; Tracked objects:
  1376 ;;		On entry : 0/0
  1377 ;;		On exit  : 0/0
  1378 ;;		Unchanged: 0/0
  1379 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1380 ;;      Params:         2       0       0       0       0       0       0
  1381 ;;      Locals:         2       0       0       0       0       0       0
  1382 ;;      Temps:          0       0       0       0       0       0       0
  1383 ;;      Totals:         4       0       0       0       0       0       0
  1384 ;;Total ram usage:        4 bytes
  1385 ;; Hardware stack levels used:    1
  1386 ;; This function calls:
  1387 ;;		Nothing
  1388 ;; This function is called by:
  1389 ;;		_pad
  1390 ;; This function uses a non-reentrant model
  1391 ;;
  1392                           
  1393                           	psect	text6
  1394  000EC2                     __ptext6:
  1395                           	opt callstack 0
  1396  000EC2                     _strlen:
  1397                           	opt callstack 25
  1398                           
  1399                           ;incstack = 0
  1400  000EC2  C001  F003         	movff	strlen@s,strlen@a
  1401  000EC6  C002  F004         	movff	strlen@s+1,strlen@a+1
  1402  000ECA  D002               	goto	l1095
  1403  000ECC                     l1093:
  1404  000ECC  4A01               	infsnz	strlen@s,f,c
  1405  000ECE  2A02               	incf	strlen@s+1,f,c
  1406  000ED0                     l1095:
  1407  000ED0  C001  FFD9         	movff	strlen@s,fsr2l
  1408  000ED4  C002  FFDA         	movff	strlen@s+1,fsr2h
  1409  000ED8  50DF               	movf	indf2,w,c
  1410  000EDA  A4D8               	btfss	status,2,c
  1411  000EDC  D7F7               	goto	l1093
  1412  000EDE  5003               	movf	strlen@a,w,c
  1413  000EE0  5C01               	subwf	strlen@s,w,c
  1414  000EE2  6E01               	movwf	?_strlen,c
  1415  000EE4  5004               	movf	strlen@a+1,w,c
  1416  000EE6  5802               	subwfb	strlen@s+1,w,c
  1417  000EE8  6E02               	movwf	?_strlen+1,c
  1418  000EEA  0012               	return		;funcret
  1419  000EEC                     __end_of_strlen:
  1420                           	opt callstack 0
  1421                           
  1422 ;; *************** function _fputs *****************
  1423 ;; Defined at:
  1424 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\nf_fputs.c"
  1425 ;; Parameters:    Size  Location     Type
  1426 ;;  s               2    9[COMRAM] PTR const unsigned char 
  1427 ;;		 -> dbuf(32), 
  1428 ;;  fp              2   11[COMRAM] PTR struct _IO_FILE
  1429 ;;		 -> sprintf@f(6), 
  1430 ;; Auto vars:     Size  Location     Type
  1431 ;;  i               2   14[COMRAM] int 
  1432 ;;  c               1   13[COMRAM] unsigned char 
  1433 ;; Return value:  Size  Location     Type
  1434 ;;                  2    9[COMRAM] int 
  1435 ;; Registers used:
  1436 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  1437 ;; Tracked objects:
  1438 ;;		On entry : 0/0
  1439 ;;		On exit  : 0/0
  1440 ;;		Unchanged: 0/0
  1441 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1442 ;;      Params:         4       0       0       0       0       0       0
  1443 ;;      Locals:         3       0       0       0       0       0       0
  1444 ;;      Temps:          0       0       0       0       0       0       0
  1445 ;;      Totals:         7       0       0       0       0       0       0
  1446 ;;Total ram usage:        7 bytes
  1447 ;; Hardware stack levels used:    1
  1448 ;; Hardware stack levels required when called:    2
  1449 ;; This function calls:
  1450 ;;		_fputc
  1451 ;; This function is called by:
  1452 ;;		_pad
  1453 ;; This function uses a non-reentrant model
  1454 ;;
  1455                           
  1456                           	psect	text7
  1457  000E58                     __ptext7:
  1458                           	opt callstack 0
  1459  000E58                     _fputs:
  1460                           	opt callstack 23
  1461                           
  1462                           ;incstack = 0
  1463  000E58  0E00               	movlw	0
  1464  000E5A  6E10               	movwf	fputs@i+1,c
  1465  000E5C  0E00               	movlw	0
  1466  000E5E  6E0F               	movwf	fputs@i,c
  1467  000E60  D00B               	goto	l1089
  1468  000E62                     l1085:
  1469  000E62  C00E  F001         	movff	fputs@c,fputc@c
  1470  000E66  6A02               	clrf	fputc@c+1,c
  1471  000E68  C00C  F003         	movff	fputs@fp,fputc@fp
  1472  000E6C  C00D  F004         	movff	fputs@fp+1,fputc@fp+1
  1473  000E70  EC22  F006         	call	_fputc	;wreg free
  1474  000E74  4A0F               	infsnz	fputs@i,f,c
  1475  000E76  2A10               	incf	fputs@i+1,f,c
  1476  000E78                     l1089:
  1477  000E78  500F               	movf	fputs@i,w,c
  1478  000E7A  240A               	addwf	fputs@s,w,c
  1479  000E7C  6ED9               	movwf	fsr2l,c
  1480  000E7E  5010               	movf	fputs@i+1,w,c
  1481  000E80  200B               	addwfc	fputs@s+1,w,c
  1482  000E82  6EDA               	movwf	fsr2h,c
  1483  000E84  50DF               	movf	indf2,w,c
  1484  000E86  6E0E               	movwf	fputs@c,c
  1485  000E88  500E               	movf	fputs@c,w,c
  1486  000E8A  B4D8               	btfsc	status,2,c
  1487  000E8C  0012               	return	
  1488  000E8E  D7E9               	goto	l1085
  1489  000E90                     __end_of_fputs:
  1490                           	opt callstack 0
  1491                           
  1492 ;; *************** function _fputc *****************
  1493 ;; Defined at:
  1494 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\nf_fputc.c"
  1495 ;; Parameters:    Size  Location     Type
  1496 ;;  c               2    0[COMRAM] int 
  1497 ;;  fp              2    2[COMRAM] PTR struct _IO_FILE
  1498 ;;		 -> sprintf@f(6), 
  1499 ;; Auto vars:     Size  Location     Type
  1500 ;;		None
  1501 ;; Return value:  Size  Location     Type
  1502 ;;                  2    0[COMRAM] int 
  1503 ;; Registers used:
  1504 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  1505 ;; Tracked objects:
  1506 ;;		On entry : 0/0
  1507 ;;		On exit  : 0/0
  1508 ;;		Unchanged: 0/0
  1509 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1510 ;;      Params:         4       0       0       0       0       0       0
  1511 ;;      Locals:         0       0       0       0       0       0       0
  1512 ;;      Temps:          5       0       0       0       0       0       0
  1513 ;;      Totals:         9       0       0       0       0       0       0
  1514 ;;Total ram usage:        9 bytes
  1515 ;; Hardware stack levels used:    1
  1516 ;; Hardware stack levels required when called:    1
  1517 ;; This function calls:
  1518 ;;		_putch
  1519 ;; This function is called by:
  1520 ;;		_pad
  1521 ;;		_vfpfcnvrt
  1522 ;;		_fputs
  1523 ;; This function uses a non-reentrant model
  1524 ;;
  1525                           
  1526                           	psect	text8
  1527  000C44                     __ptext8:
  1528                           	opt callstack 0
  1529  000C44                     _fputc:
  1530                           	opt callstack 26
  1531                           
  1532                           ;incstack = 0
  1533  000C44  5003               	movf	fputc@fp,w,c
  1534  000C46  1004               	iorwf	fputc@fp+1,w,c
  1535  000C48  B4D8               	btfsc	status,2,c
  1536  000C4A  D004               	goto	u460
  1537  000C4C  5003               	movf	fputc@fp,w,c
  1538  000C4E  1004               	iorwf	fputc@fp+1,w,c
  1539  000C50  A4D8               	btfss	status,2,c
  1540  000C52  D004               	goto	l1075
  1541  000C54                     u460:
  1542  000C54  5001               	movf	fputc@c,w,c
  1543  000C56  EC86  F007         	call	_putch
  1544  000C5A  0012               	return	
  1545  000C5C                     l1075:
  1546  000C5C  EE20 F004          	lfsr	2,4
  1547  000C60  5003               	movf	fputc@fp,w,c
  1548  000C62  26D9               	addwf	fsr2l,f,c
  1549  000C64  5004               	movf	fputc@fp+1,w,c
  1550  000C66  22DA               	addwfc	fsr2h,f,c
  1551  000C68  50DE               	movf	postinc2,w,c
  1552  000C6A  10DE               	iorwf	postinc2,w,c
  1553  000C6C  B4D8               	btfsc	status,2,c
  1554  000C6E  D016               	goto	u480
  1555  000C70  EE20 F004          	lfsr	2,4
  1556  000C74  5003               	movf	fputc@fp,w,c
  1557  000C76  26D9               	addwf	fsr2l,f,c
  1558  000C78  5004               	movf	fputc@fp+1,w,c
  1559  000C7A  22DA               	addwfc	fsr2h,f,c
  1560  000C7C  EE10 F002          	lfsr	1,2
  1561  000C80  5003               	movf	fputc@fp,w,c
  1562  000C82  26E1               	addwf	fsr1l,f,c
  1563  000C84  5004               	movf	fputc@fp+1,w,c
  1564  000C86  22E2               	addwfc	fsr1h,f,c
  1565  000C88  50DE               	movf	postinc2,w,c
  1566  000C8A  5CE6               	subwf	postinc1,w,c
  1567  000C8C  50E6               	movf	postinc1,w,c
  1568  000C8E  0A80               	xorlw	128
  1569  000C90  6E09               	movwf	(??_fputc+4)& (0+255),c
  1570  000C92  50DE               	movf	postinc2,w,c
  1571  000C94  0A80               	xorlw	128
  1572  000C96  5809               	subwfb	(??_fputc+4)& (0+255),w,c
  1573  000C98  B0D8               	btfsc	status,0,c
  1574  000C9A  0012               	return	
  1575  000C9C                     u480:
  1576  000C9C  EE20 F002          	lfsr	2,2
  1577  000CA0  5003               	movf	fputc@fp,w,c
  1578  000CA2  26D9               	addwf	fsr2l,f,c
  1579  000CA4  5004               	movf	fputc@fp+1,w,c
  1580  000CA6  22DA               	addwfc	fsr2h,f,c
  1581  000CA8  CFDE F005          	movff	postinc2,??_fputc
  1582  000CAC  CFDD F006          	movff	postdec2,??_fputc+1
  1583  000CB0  C003  FFD9         	movff	fputc@fp,fsr2l
  1584  000CB4  C004  FFDA         	movff	fputc@fp+1,fsr2h
  1585  000CB8  CFDE F007          	movff	postinc2,??_fputc+2
  1586  000CBC  CFDD F008          	movff	postdec2,??_fputc+3
  1587  000CC0  5005               	movf	??_fputc,w,c
  1588  000CC2  2407               	addwf	??_fputc+2,w,c
  1589  000CC4  6ED9               	movwf	fsr2l,c
  1590  000CC6  5006               	movf	??_fputc+1,w,c
  1591  000CC8  2008               	addwfc	??_fputc+3,w,c
  1592  000CCA  6EDA               	movwf	fsr2h,c
  1593  000CCC  C001  FFDF         	movff	fputc@c,indf2
  1594  000CD0  EE20 F002          	lfsr	2,2
  1595  000CD4  5003               	movf	fputc@fp,w,c
  1596  000CD6  26D9               	addwf	fsr2l,f,c
  1597  000CD8  5004               	movf	fputc@fp+1,w,c
  1598  000CDA  22DA               	addwfc	fsr2h,f,c
  1599  000CDC  2ADE               	incf	postinc2,f,c
  1600  000CDE  0E00               	movlw	0
  1601  000CE0  22DD               	addwfc	postdec2,f,c
  1602  000CE2  0012               	return		;funcret
  1603  000CE4                     __end_of_fputc:
  1604                           	opt callstack 0
  1605                           
  1606 ;; *************** function _putch *****************
  1607 ;; Defined at:
  1608 ;;		line 7 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\putch.c"
  1609 ;; Parameters:    Size  Location     Type
  1610 ;;  c               1    wreg     unsigned char 
  1611 ;; Auto vars:     Size  Location     Type
  1612 ;;  c               1    0[COMRAM] unsigned char 
  1613 ;; Return value:  Size  Location     Type
  1614 ;;                  1    wreg      void 
  1615 ;; Registers used:
  1616 ;;		wreg
  1617 ;; Tracked objects:
  1618 ;;		On entry : 0/0
  1619 ;;		On exit  : 0/0
  1620 ;;		Unchanged: 0/0
  1621 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1622 ;;      Params:         0       0       0       0       0       0       0
  1623 ;;      Locals:         0       0       0       0       0       0       0
  1624 ;;      Temps:          0       0       0       0       0       0       0
  1625 ;;      Totals:         0       0       0       0       0       0       0
  1626 ;;Total ram usage:        0 bytes
  1627 ;; Hardware stack levels used:    1
  1628 ;; This function calls:
  1629 ;;		Nothing
  1630 ;; This function is called by:
  1631 ;;		_fputc
  1632 ;; This function uses a non-reentrant model
  1633 ;;
  1634                           
  1635                           	psect	text9
  1636  000F0C                     __ptext9:
  1637                           	opt callstack 0
  1638  000F0C                     _putch:
  1639                           	opt callstack 26
  1640                           
  1641                           ;incstack = 0
  1642  000F0C  0012               	return		;funcret
  1643  000F0E                     __end_of_putch:
  1644                           	opt callstack 0
  1645                           
  1646 ;; *************** function _abs *****************
  1647 ;; Defined at:
  1648 ;;		line 1 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\abs.c"
  1649 ;; Parameters:    Size  Location     Type
  1650 ;;  a               2   18[COMRAM] int 
  1651 ;; Auto vars:     Size  Location     Type
  1652 ;;		None
  1653 ;; Return value:  Size  Location     Type
  1654 ;;                  2   18[COMRAM] int 
  1655 ;; Registers used:
  1656 ;;		wreg, status,2, status,0
  1657 ;; Tracked objects:
  1658 ;;		On entry : 0/0
  1659 ;;		On exit  : 0/0
  1660 ;;		Unchanged: 0/0
  1661 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1662 ;;      Params:         2       0       0       0       0       0       0
  1663 ;;      Locals:         0       0       0       0       0       0       0
  1664 ;;      Temps:          2       0       0       0       0       0       0
  1665 ;;      Totals:         4       0       0       0       0       0       0
  1666 ;;Total ram usage:        4 bytes
  1667 ;; Hardware stack levels used:    1
  1668 ;; This function calls:
  1669 ;;		Nothing
  1670 ;; This function is called by:
  1671 ;;		_dtoa
  1672 ;; This function uses a non-reentrant model
  1673 ;;
  1674                           
  1675                           	psect	text10
  1676  000E90                     __ptext10:
  1677                           	opt callstack 0
  1678  000E90                     _abs:
  1679                           	opt callstack 26
  1680                           
  1681                           ;incstack = 0
  1682  000E90  BE14               	btfsc	abs@a+1,7,c
  1683  000E92  D005               	goto	u550
  1684  000E94  5014               	movf	abs@a+1,w,c
  1685  000E96  E110               	bnz	l764
  1686  000E98  0413               	decf	abs@a,w,c
  1687  000E9A  B0D8               	btfsc	status,0,c
  1688  000E9C  D00D               	goto	l764
  1689  000E9E                     u550:
  1690  000E9E  C013  F015         	movff	abs@a,??_abs
  1691  000EA2  C014  F016         	movff	abs@a+1,??_abs+1
  1692  000EA6  1E15               	comf	??_abs,f,c
  1693  000EA8  1E16               	comf	??_abs+1,f,c
  1694  000EAA  4A15               	infsnz	??_abs,f,c
  1695  000EAC  2A16               	incf	??_abs+1,f,c
  1696  000EAE  C015  F013         	movff	??_abs,?_abs
  1697  000EB2  C016  F014         	movff	??_abs+1,?_abs+1
  1698  000EB6  0012               	return	
  1699  000EB8                     l764:
  1700  000EB8  C013  F013         	movff	abs@a,?_abs
  1701  000EBC  C014  F014         	movff	abs@a+1,?_abs+1
  1702  000EC0  0012               	return		;funcret
  1703  000EC2                     __end_of_abs:
  1704                           	opt callstack 0
  1705                           
  1706 ;; *************** function ___aomod *****************
  1707 ;; Defined at:
  1708 ;;		line 9 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\aomod.c"
  1709 ;; Parameters:    Size  Location     Type
  1710 ;;  dividend        8    0[COMRAM] long long 
  1711 ;;  divisor         8    8[COMRAM] long long 
  1712 ;; Auto vars:     Size  Location     Type
  1713 ;;  sign            1   17[COMRAM] unsigned char 
  1714 ;;  counter         1   16[COMRAM] unsigned char 
  1715 ;; Return value:  Size  Location     Type
  1716 ;;                  8    0[COMRAM] long long 
  1717 ;; Registers used:
  1718 ;;		wreg, status,2, status,0
  1719 ;; Tracked objects:
  1720 ;;		On entry : 0/0
  1721 ;;		On exit  : 0/0
  1722 ;;		Unchanged: 0/0
  1723 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1724 ;;      Params:        16       0       0       0       0       0       0
  1725 ;;      Locals:         2       0       0       0       0       0       0
  1726 ;;      Temps:          0       0       0       0       0       0       0
  1727 ;;      Totals:        18       0       0       0       0       0       0
  1728 ;;Total ram usage:       18 bytes
  1729 ;; Hardware stack levels used:    1
  1730 ;; This function calls:
  1731 ;;		Nothing
  1732 ;; This function is called by:
  1733 ;;		_dtoa
  1734 ;; This function uses a non-reentrant model
  1735 ;;
  1736                           
  1737                           	psect	text11
  1738  000B20                     __ptext11:
  1739                           	opt callstack 0
  1740  000B20                     ___aomod:
  1741                           	opt callstack 26
  1742                           
  1743                           ;incstack = 0
  1744  000B20  0E00               	movlw	0
  1745  000B22  6E12               	movwf	___aomod@sign,c
  1746  000B24  AE08               	btfss	___aomod@dividend+7,7,c
  1747  000B26  D012               	goto	l1179
  1748  000B28  1E08               	comf	___aomod@dividend+7,f,c
  1749  000B2A  1E07               	comf	___aomod@dividend+6,f,c
  1750  000B2C  1E06               	comf	___aomod@dividend+5,f,c
  1751  000B2E  1E05               	comf	___aomod@dividend+4,f,c
  1752  000B30  1E04               	comf	___aomod@dividend+3,f,c
  1753  000B32  1E03               	comf	___aomod@dividend+2,f,c
  1754  000B34  1E02               	comf	___aomod@dividend+1,f,c
  1755  000B36  6C01               	negf	___aomod@dividend,c
  1756  000B38  0E00               	movlw	0
  1757  000B3A  2202               	addwfc	___aomod@dividend+1,f,c
  1758  000B3C  2203               	addwfc	___aomod@dividend+2,f,c
  1759  000B3E  2204               	addwfc	___aomod@dividend+3,f,c
  1760  000B40  2205               	addwfc	___aomod@dividend+4,f,c
  1761  000B42  2206               	addwfc	___aomod@dividend+5,f,c
  1762  000B44  2207               	addwfc	___aomod@dividend+6,f,c
  1763  000B46  2208               	addwfc	___aomod@dividend+7,f,c
  1764  000B48  0E01               	movlw	1
  1765  000B4A  6E12               	movwf	___aomod@sign,c
  1766  000B4C                     l1179:
  1767  000B4C  AE10               	btfss	___aomod@divisor+7,7,c
  1768  000B4E  D010               	goto	l1183
  1769  000B50  1E10               	comf	___aomod@divisor+7,f,c
  1770  000B52  1E0F               	comf	___aomod@divisor+6,f,c
  1771  000B54  1E0E               	comf	___aomod@divisor+5,f,c
  1772  000B56  1E0D               	comf	___aomod@divisor+4,f,c
  1773  000B58  1E0C               	comf	___aomod@divisor+3,f,c
  1774  000B5A  1E0B               	comf	___aomod@divisor+2,f,c
  1775  000B5C  1E0A               	comf	___aomod@divisor+1,f,c
  1776  000B5E  6C09               	negf	___aomod@divisor,c
  1777  000B60  0E00               	movlw	0
  1778  000B62  220A               	addwfc	___aomod@divisor+1,f,c
  1779  000B64  220B               	addwfc	___aomod@divisor+2,f,c
  1780  000B66  220C               	addwfc	___aomod@divisor+3,f,c
  1781  000B68  220D               	addwfc	___aomod@divisor+4,f,c
  1782  000B6A  220E               	addwfc	___aomod@divisor+5,f,c
  1783  000B6C  220F               	addwfc	___aomod@divisor+6,f,c
  1784  000B6E  2210               	addwfc	___aomod@divisor+7,f,c
  1785  000B70                     l1183:
  1786  000B70  5009               	movf	___aomod@divisor,w,c
  1787  000B72  100A               	iorwf	___aomod@divisor+1,w,c
  1788  000B74  100B               	iorwf	___aomod@divisor+2,w,c
  1789  000B76  100C               	iorwf	___aomod@divisor+3,w,c
  1790  000B78  100D               	iorwf	___aomod@divisor+4,w,c
  1791  000B7A  100E               	iorwf	___aomod@divisor+5,w,c
  1792  000B7C  100F               	iorwf	___aomod@divisor+6,w,c
  1793  000B7E  1010               	iorwf	___aomod@divisor+7,w,c
  1794  000B80  B4D8               	btfsc	status,2,c
  1795  000B82  D03C               	goto	l1199
  1796  000B84  0E01               	movlw	1
  1797  000B86  6E11               	movwf	___aomod@counter,c
  1798  000B88  D00A               	goto	l1189
  1799  000B8A                     l1187:
  1800  000B8A  90D8               	bcf	status,0,c
  1801  000B8C  3609               	rlcf	___aomod@divisor,f,c
  1802  000B8E  360A               	rlcf	___aomod@divisor+1,f,c
  1803  000B90  360B               	rlcf	___aomod@divisor+2,f,c
  1804  000B92  360C               	rlcf	___aomod@divisor+3,f,c
  1805  000B94  360D               	rlcf	___aomod@divisor+4,f,c
  1806  000B96  360E               	rlcf	___aomod@divisor+5,f,c
  1807  000B98  360F               	rlcf	___aomod@divisor+6,f,c
  1808  000B9A  3610               	rlcf	___aomod@divisor+7,f,c
  1809  000B9C  2A11               	incf	___aomod@counter,f,c
  1810  000B9E                     l1189:
  1811  000B9E  AE10               	btfss	___aomod@divisor+7,7,c
  1812  000BA0  D7F4               	goto	l1187
  1813  000BA2                     u660:
  1814  000BA2  5009               	movf	___aomod@divisor,w,c
  1815  000BA4  5C01               	subwf	___aomod@dividend,w,c
  1816  000BA6  500A               	movf	___aomod@divisor+1,w,c
  1817  000BA8  5802               	subwfb	___aomod@dividend+1,w,c
  1818  000BAA  500B               	movf	___aomod@divisor+2,w,c
  1819  000BAC  5803               	subwfb	___aomod@dividend+2,w,c
  1820  000BAE  500C               	movf	___aomod@divisor+3,w,c
  1821  000BB0  5804               	subwfb	___aomod@dividend+3,w,c
  1822  000BB2  500D               	movf	___aomod@divisor+4,w,c
  1823  000BB4  5805               	subwfb	___aomod@dividend+4,w,c
  1824  000BB6  500E               	movf	___aomod@divisor+5,w,c
  1825  000BB8  5806               	subwfb	___aomod@dividend+5,w,c
  1826  000BBA  500F               	movf	___aomod@divisor+6,w,c
  1827  000BBC  5807               	subwfb	___aomod@dividend+6,w,c
  1828  000BBE  5010               	movf	___aomod@divisor+7,w,c
  1829  000BC0  5808               	subwfb	___aomod@dividend+7,w,c
  1830  000BC2  A0D8               	btfss	status,0,c
  1831  000BC4  D010               	goto	l1195
  1832  000BC6  5009               	movf	___aomod@divisor,w,c
  1833  000BC8  5E01               	subwf	___aomod@dividend,f,c
  1834  000BCA  500A               	movf	___aomod@divisor+1,w,c
  1835  000BCC  5A02               	subwfb	___aomod@dividend+1,f,c
  1836  000BCE  500B               	movf	___aomod@divisor+2,w,c
  1837  000BD0  5A03               	subwfb	___aomod@dividend+2,f,c
  1838  000BD2  500C               	movf	___aomod@divisor+3,w,c
  1839  000BD4  5A04               	subwfb	___aomod@dividend+3,f,c
  1840  000BD6  500D               	movf	___aomod@divisor+4,w,c
  1841  000BD8  5A05               	subwfb	___aomod@dividend+4,f,c
  1842  000BDA  500E               	movf	___aomod@divisor+5,w,c
  1843  000BDC  5A06               	subwfb	___aomod@dividend+5,f,c
  1844  000BDE  500F               	movf	___aomod@divisor+6,w,c
  1845  000BE0  5A07               	subwfb	___aomod@dividend+6,f,c
  1846  000BE2  5010               	movf	___aomod@divisor+7,w,c
  1847  000BE4  5A08               	subwfb	___aomod@dividend+7,f,c
  1848  000BE6                     l1195:
  1849  000BE6  90D8               	bcf	status,0,c
  1850  000BE8  3210               	rrcf	___aomod@divisor+7,f,c
  1851  000BEA  320F               	rrcf	___aomod@divisor+6,f,c
  1852  000BEC  320E               	rrcf	___aomod@divisor+5,f,c
  1853  000BEE  320D               	rrcf	___aomod@divisor+4,f,c
  1854  000BF0  320C               	rrcf	___aomod@divisor+3,f,c
  1855  000BF2  320B               	rrcf	___aomod@divisor+2,f,c
  1856  000BF4  320A               	rrcf	___aomod@divisor+1,f,c
  1857  000BF6  3209               	rrcf	___aomod@divisor,f,c
  1858  000BF8  2E11               	decfsz	___aomod@counter,f,c
  1859  000BFA  D7D3               	goto	u660
  1860  000BFC                     l1199:
  1861  000BFC  5012               	movf	___aomod@sign,w,c
  1862  000BFE  B4D8               	btfsc	status,2,c
  1863  000C00  D010               	goto	l1203
  1864  000C02  1E08               	comf	___aomod@dividend+7,f,c
  1865  000C04  1E07               	comf	___aomod@dividend+6,f,c
  1866  000C06  1E06               	comf	___aomod@dividend+5,f,c
  1867  000C08  1E05               	comf	___aomod@dividend+4,f,c
  1868  000C0A  1E04               	comf	___aomod@dividend+3,f,c
  1869  000C0C  1E03               	comf	___aomod@dividend+2,f,c
  1870  000C0E  1E02               	comf	___aomod@dividend+1,f,c
  1871  000C10  6C01               	negf	___aomod@dividend,c
  1872  000C12  0E00               	movlw	0
  1873  000C14  2202               	addwfc	___aomod@dividend+1,f,c
  1874  000C16  2203               	addwfc	___aomod@dividend+2,f,c
  1875  000C18  2204               	addwfc	___aomod@dividend+3,f,c
  1876  000C1A  2205               	addwfc	___aomod@dividend+4,f,c
  1877  000C1C  2206               	addwfc	___aomod@dividend+5,f,c
  1878  000C1E  2207               	addwfc	___aomod@dividend+6,f,c
  1879  000C20  2208               	addwfc	___aomod@dividend+7,f,c
  1880  000C22                     l1203:
  1881  000C22  C001  F001         	movff	___aomod@dividend,?___aomod
  1882  000C26  C002  F002         	movff	___aomod@dividend+1,?___aomod+1
  1883  000C2A  C003  F003         	movff	___aomod@dividend+2,?___aomod+2
  1884  000C2E  C004  F004         	movff	___aomod@dividend+3,?___aomod+3
  1885  000C32  C005  F005         	movff	___aomod@dividend+4,?___aomod+4
  1886  000C36  C006  F006         	movff	___aomod@dividend+5,?___aomod+5
  1887  000C3A  C007  F007         	movff	___aomod@dividend+6,?___aomod+6
  1888  000C3E  C008  F008         	movff	___aomod@dividend+7,?___aomod+7
  1889  000C42  0012               	return		;funcret
  1890  000C44                     __end_of___aomod:
  1891                           	opt callstack 0
  1892                           
  1893 ;; *************** function ___aodiv *****************
  1894 ;; Defined at:
  1895 ;;		line 9 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\aodiv.c"
  1896 ;; Parameters:    Size  Location     Type
  1897 ;;  dividend        8    0[COMRAM] long long 
  1898 ;;  divisor         8    8[COMRAM] long long 
  1899 ;; Auto vars:     Size  Location     Type
  1900 ;;  quotient        8   18[COMRAM] long long 
  1901 ;;  sign            1   17[COMRAM] unsigned char 
  1902 ;;  counter         1   16[COMRAM] unsigned char 
  1903 ;; Return value:  Size  Location     Type
  1904 ;;                  8    0[COMRAM] long long 
  1905 ;; Registers used:
  1906 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  1907 ;; Tracked objects:
  1908 ;;		On entry : 0/0
  1909 ;;		On exit  : 0/0
  1910 ;;		Unchanged: 0/0
  1911 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1912 ;;      Params:        16       0       0       0       0       0       0
  1913 ;;      Locals:        10       0       0       0       0       0       0
  1914 ;;      Temps:          0       0       0       0       0       0       0
  1915 ;;      Totals:        26       0       0       0       0       0       0
  1916 ;;Total ram usage:       26 bytes
  1917 ;; Hardware stack levels used:    1
  1918 ;; This function calls:
  1919 ;;		Nothing
  1920 ;; This function is called by:
  1921 ;;		_dtoa
  1922 ;; This function uses a non-reentrant model
  1923 ;;
  1924                           
  1925                           	psect	text12
  1926  0009D8                     __ptext12:
  1927                           	opt callstack 0
  1928  0009D8                     ___aodiv:
  1929                           	opt callstack 26
  1930                           
  1931                           ;incstack = 0
  1932  0009D8  0E00               	movlw	0
  1933  0009DA  6E12               	movwf	___aodiv@sign,c
  1934  0009DC  AE10               	btfss	___aodiv@divisor+7,7,c
  1935  0009DE  D012               	goto	l1135
  1936  0009E0  1E10               	comf	___aodiv@divisor+7,f,c
  1937  0009E2  1E0F               	comf	___aodiv@divisor+6,f,c
  1938  0009E4  1E0E               	comf	___aodiv@divisor+5,f,c
  1939  0009E6  1E0D               	comf	___aodiv@divisor+4,f,c
  1940  0009E8  1E0C               	comf	___aodiv@divisor+3,f,c
  1941  0009EA  1E0B               	comf	___aodiv@divisor+2,f,c
  1942  0009EC  1E0A               	comf	___aodiv@divisor+1,f,c
  1943  0009EE  6C09               	negf	___aodiv@divisor,c
  1944  0009F0  0E00               	movlw	0
  1945  0009F2  220A               	addwfc	___aodiv@divisor+1,f,c
  1946  0009F4  220B               	addwfc	___aodiv@divisor+2,f,c
  1947  0009F6  220C               	addwfc	___aodiv@divisor+3,f,c
  1948  0009F8  220D               	addwfc	___aodiv@divisor+4,f,c
  1949  0009FA  220E               	addwfc	___aodiv@divisor+5,f,c
  1950  0009FC  220F               	addwfc	___aodiv@divisor+6,f,c
  1951  0009FE  2210               	addwfc	___aodiv@divisor+7,f,c
  1952  000A00  0E01               	movlw	1
  1953  000A02  6E12               	movwf	___aodiv@sign,c
  1954  000A04                     l1135:
  1955  000A04  AE08               	btfss	___aodiv@dividend+7,7,c
  1956  000A06  D012               	goto	l1141
  1957  000A08  1E08               	comf	___aodiv@dividend+7,f,c
  1958  000A0A  1E07               	comf	___aodiv@dividend+6,f,c
  1959  000A0C  1E06               	comf	___aodiv@dividend+5,f,c
  1960  000A0E  1E05               	comf	___aodiv@dividend+4,f,c
  1961  000A10  1E04               	comf	___aodiv@dividend+3,f,c
  1962  000A12  1E03               	comf	___aodiv@dividend+2,f,c
  1963  000A14  1E02               	comf	___aodiv@dividend+1,f,c
  1964  000A16  6C01               	negf	___aodiv@dividend,c
  1965  000A18  0E00               	movlw	0
  1966  000A1A  2202               	addwfc	___aodiv@dividend+1,f,c
  1967  000A1C  2203               	addwfc	___aodiv@dividend+2,f,c
  1968  000A1E  2204               	addwfc	___aodiv@dividend+3,f,c
  1969  000A20  2205               	addwfc	___aodiv@dividend+4,f,c
  1970  000A22  2206               	addwfc	___aodiv@dividend+5,f,c
  1971  000A24  2207               	addwfc	___aodiv@dividend+6,f,c
  1972  000A26  2208               	addwfc	___aodiv@dividend+7,f,c
  1973  000A28  0E01               	movlw	1
  1974  000A2A  1A12               	xorwf	___aodiv@sign,f,c
  1975  000A2C                     l1141:
  1976  000A2C  EE20  F013         	lfsr	2,___aodiv@quotient
  1977  000A30  0E07               	movlw	7
  1978  000A32                     u581:
  1979  000A32  6ADE               	clrf	postinc2,c
  1980  000A34  06E8               	decf	wreg,f,c
  1981  000A36  E2FD               	bc	u581
  1982  000A38  5009               	movf	___aodiv@divisor,w,c
  1983  000A3A  100A               	iorwf	___aodiv@divisor+1,w,c
  1984  000A3C  100B               	iorwf	___aodiv@divisor+2,w,c
  1985  000A3E  100C               	iorwf	___aodiv@divisor+3,w,c
  1986  000A40  100D               	iorwf	___aodiv@divisor+4,w,c
  1987  000A42  100E               	iorwf	___aodiv@divisor+5,w,c
  1988  000A44  100F               	iorwf	___aodiv@divisor+6,w,c
  1989  000A46  1010               	iorwf	___aodiv@divisor+7,w,c
  1990  000A48  B4D8               	btfsc	status,2,c
  1991  000A4A  D046               	goto	l1163
  1992  000A4C  0E01               	movlw	1
  1993  000A4E  6E11               	movwf	___aodiv@counter,c
  1994  000A50  D00A               	goto	l1149
  1995  000A52                     l1147:
  1996  000A52  90D8               	bcf	status,0,c
  1997  000A54  3609               	rlcf	___aodiv@divisor,f,c
  1998  000A56  360A               	rlcf	___aodiv@divisor+1,f,c
  1999  000A58  360B               	rlcf	___aodiv@divisor+2,f,c
  2000  000A5A  360C               	rlcf	___aodiv@divisor+3,f,c
  2001  000A5C  360D               	rlcf	___aodiv@divisor+4,f,c
  2002  000A5E  360E               	rlcf	___aodiv@divisor+5,f,c
  2003  000A60  360F               	rlcf	___aodiv@divisor+6,f,c
  2004  000A62  3610               	rlcf	___aodiv@divisor+7,f,c
  2005  000A64  2A11               	incf	___aodiv@counter,f,c
  2006  000A66                     l1149:
  2007  000A66  AE10               	btfss	___aodiv@divisor+7,7,c
  2008  000A68  D7F4               	goto	l1147
  2009  000A6A                     u600:
  2010  000A6A  90D8               	bcf	status,0,c
  2011  000A6C  3613               	rlcf	___aodiv@quotient,f,c
  2012  000A6E  3614               	rlcf	___aodiv@quotient+1,f,c
  2013  000A70  3615               	rlcf	___aodiv@quotient+2,f,c
  2014  000A72  3616               	rlcf	___aodiv@quotient+3,f,c
  2015  000A74  3617               	rlcf	___aodiv@quotient+4,f,c
  2016  000A76  3618               	rlcf	___aodiv@quotient+5,f,c
  2017  000A78  3619               	rlcf	___aodiv@quotient+6,f,c
  2018  000A7A  361A               	rlcf	___aodiv@quotient+7,f,c
  2019  000A7C  5009               	movf	___aodiv@divisor,w,c
  2020  000A7E  5C01               	subwf	___aodiv@dividend,w,c
  2021  000A80  500A               	movf	___aodiv@divisor+1,w,c
  2022  000A82  5802               	subwfb	___aodiv@dividend+1,w,c
  2023  000A84  500B               	movf	___aodiv@divisor+2,w,c
  2024  000A86  5803               	subwfb	___aodiv@dividend+2,w,c
  2025  000A88  500C               	movf	___aodiv@divisor+3,w,c
  2026  000A8A  5804               	subwfb	___aodiv@dividend+3,w,c
  2027  000A8C  500D               	movf	___aodiv@divisor+4,w,c
  2028  000A8E  5805               	subwfb	___aodiv@dividend+4,w,c
  2029  000A90  500E               	movf	___aodiv@divisor+5,w,c
  2030  000A92  5806               	subwfb	___aodiv@dividend+5,w,c
  2031  000A94  500F               	movf	___aodiv@divisor+6,w,c
  2032  000A96  5807               	subwfb	___aodiv@dividend+6,w,c
  2033  000A98  5010               	movf	___aodiv@divisor+7,w,c
  2034  000A9A  5808               	subwfb	___aodiv@dividend+7,w,c
  2035  000A9C  A0D8               	btfss	status,0,c
  2036  000A9E  D011               	goto	l1159
  2037  000AA0  5009               	movf	___aodiv@divisor,w,c
  2038  000AA2  5E01               	subwf	___aodiv@dividend,f,c
  2039  000AA4  500A               	movf	___aodiv@divisor+1,w,c
  2040  000AA6  5A02               	subwfb	___aodiv@dividend+1,f,c
  2041  000AA8  500B               	movf	___aodiv@divisor+2,w,c
  2042  000AAA  5A03               	subwfb	___aodiv@dividend+2,f,c
  2043  000AAC  500C               	movf	___aodiv@divisor+3,w,c
  2044  000AAE  5A04               	subwfb	___aodiv@dividend+3,f,c
  2045  000AB0  500D               	movf	___aodiv@divisor+4,w,c
  2046  000AB2  5A05               	subwfb	___aodiv@dividend+4,f,c
  2047  000AB4  500E               	movf	___aodiv@divisor+5,w,c
  2048  000AB6  5A06               	subwfb	___aodiv@dividend+5,f,c
  2049  000AB8  500F               	movf	___aodiv@divisor+6,w,c
  2050  000ABA  5A07               	subwfb	___aodiv@dividend+6,f,c
  2051  000ABC  5010               	movf	___aodiv@divisor+7,w,c
  2052  000ABE  5A08               	subwfb	___aodiv@dividend+7,f,c
  2053  000AC0  8013               	bsf	___aodiv@quotient,0,c
  2054  000AC2                     l1159:
  2055  000AC2  90D8               	bcf	status,0,c
  2056  000AC4  3210               	rrcf	___aodiv@divisor+7,f,c
  2057  000AC6  320F               	rrcf	___aodiv@divisor+6,f,c
  2058  000AC8  320E               	rrcf	___aodiv@divisor+5,f,c
  2059  000ACA  320D               	rrcf	___aodiv@divisor+4,f,c
  2060  000ACC  320C               	rrcf	___aodiv@divisor+3,f,c
  2061  000ACE  320B               	rrcf	___aodiv@divisor+2,f,c
  2062  000AD0  320A               	rrcf	___aodiv@divisor+1,f,c
  2063  000AD2  3209               	rrcf	___aodiv@divisor,f,c
  2064  000AD4  2E11               	decfsz	___aodiv@counter,f,c
  2065  000AD6  D7C9               	goto	u600
  2066  000AD8                     l1163:
  2067  000AD8  5012               	movf	___aodiv@sign,w,c
  2068  000ADA  B4D8               	btfsc	status,2,c
  2069  000ADC  D010               	goto	l1167
  2070  000ADE  1E1A               	comf	___aodiv@quotient+7,f,c
  2071  000AE0  1E19               	comf	___aodiv@quotient+6,f,c
  2072  000AE2  1E18               	comf	___aodiv@quotient+5,f,c
  2073  000AE4  1E17               	comf	___aodiv@quotient+4,f,c
  2074  000AE6  1E16               	comf	___aodiv@quotient+3,f,c
  2075  000AE8  1E15               	comf	___aodiv@quotient+2,f,c
  2076  000AEA  1E14               	comf	___aodiv@quotient+1,f,c
  2077  000AEC  6C13               	negf	___aodiv@quotient,c
  2078  000AEE  0E00               	movlw	0
  2079  000AF0  2214               	addwfc	___aodiv@quotient+1,f,c
  2080  000AF2  2215               	addwfc	___aodiv@quotient+2,f,c
  2081  000AF4  2216               	addwfc	___aodiv@quotient+3,f,c
  2082  000AF6  2217               	addwfc	___aodiv@quotient+4,f,c
  2083  000AF8  2218               	addwfc	___aodiv@quotient+5,f,c
  2084  000AFA  2219               	addwfc	___aodiv@quotient+6,f,c
  2085  000AFC  221A               	addwfc	___aodiv@quotient+7,f,c
  2086  000AFE                     l1167:
  2087  000AFE  C013  F001         	movff	___aodiv@quotient,?___aodiv
  2088  000B02  C014  F002         	movff	___aodiv@quotient+1,?___aodiv+1
  2089  000B06  C015  F003         	movff	___aodiv@quotient+2,?___aodiv+2
  2090  000B0A  C016  F004         	movff	___aodiv@quotient+3,?___aodiv+3
  2091  000B0E  C017  F005         	movff	___aodiv@quotient+4,?___aodiv+4
  2092  000B12  C018  F006         	movff	___aodiv@quotient+5,?___aodiv+5
  2093  000B16  C019  F007         	movff	___aodiv@quotient+6,?___aodiv+6
  2094  000B1A  C01A  F008         	movff	___aodiv@quotient+7,?___aodiv+7
  2095  000B1E  0012               	return		;funcret
  2096  000B20                     __end_of___aodiv:
  2097                           	opt callstack 0
  2098                           
  2099                           	psect	rparam
  2100  0000                     tosu	equ	0xFFF
  2101                           tosh	equ	0xFFE
  2102                           tosl	equ	0xFFD
  2103                           stkptr	equ	0xFFC
  2104                           pclatu	equ	0xFFB
  2105                           pclath	equ	0xFFA
  2106                           pcl	equ	0xFF9
  2107                           tblptru	equ	0xFF8
  2108                           tblptrh	equ	0xFF7
  2109                           tblptrl	equ	0xFF6
  2110                           tablat	equ	0xFF5
  2111                           prodh	equ	0xFF4
  2112                           prodl	equ	0xFF3
  2113                           indf0	equ	0xFEF
  2114                           postinc0	equ	0xFEE
  2115                           postdec0	equ	0xFED
  2116                           preinc0	equ	0xFEC
  2117                           plusw0	equ	0xFEB
  2118                           fsr0h	equ	0xFEA
  2119                           fsr0l	equ	0xFE9
  2120                           wreg	equ	0xFE8
  2121                           indf1	equ	0xFE7
  2122                           postinc1	equ	0xFE6
  2123                           postdec1	equ	0xFE5
  2124                           preinc1	equ	0xFE4
  2125                           plusw1	equ	0xFE3
  2126                           fsr1h	equ	0xFE2
  2127                           fsr1l	equ	0xFE1
  2128                           bsr	equ	0xFE0
  2129                           indf2	equ	0xFDF
  2130                           postinc2	equ	0xFDE
  2131                           postdec2	equ	0xFDD
  2132                           preinc2	equ	0xFDC
  2133                           plusw2	equ	0xFDB
  2134                           fsr2h	equ	0xFDA
  2135                           fsr2l	equ	0xFD9
  2136                           status	equ	0xFD8


Data Sizes:
    Strings     20
    Constant    0
    Data        2
    BSS         65
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          127    103     113
    BANK0           128      0      57
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0

Pointer List with Targets:

    strlen@s	PTR const unsigned char  size(2) Largest target is 32
		 -> dbuf(BANK0[32]), 

    strlen@a	PTR const unsigned char  size(2) Largest target is 32
		 -> dbuf(BANK0[32]), 

    sprintf@fmt	PTR const unsigned char  size(2) Largest target is 20
		 -> STR_1(CODE[20]), 

    sprintf@s	PTR unsigned char  size(2) Largest target is 25
		 -> buffer(BANK0[25]), 

    sprintf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_sprintf(COMRAM[2]), 

    f.buffer	PTR unsigned char  size(2) Largest target is 25
		 -> buffer(BANK0[25]), 

    fputs@s	PTR const unsigned char  size(2) Largest target is 32
		 -> dbuf(BANK0[32]), 

    fputs@fp	PTR struct _IO_FILE size(2) Largest target is 7
		 -> sprintf@f(COMRAM[6]), 

    S546_IO_FILE$buffer	PTR unsigned char  size(2) Largest target is 25
		 -> buffer(BANK0[25]), 

    fputc@fp.buffer	PTR unsigned char  size(2) Largest target is 25
		 -> buffer(BANK0[25]), 

    fputc@fp	PTR struct _IO_FILE size(2) Largest target is 7
		 -> sprintf@f(COMRAM[6]), 

    vfprintf@ap	PTR PTR void  size(2) Largest target is 2
		 -> sprintf@ap(COMRAM[2]), 

    vfprintf@fp	PTR struct _IO_FILE size(2) Largest target is 7
		 -> sprintf@f(COMRAM[6]), 

    vfprintf@fmt	PTR const unsigned char  size(2) Largest target is 20
		 -> STR_1(CODE[20]), 

    vfprintf@cfmt	PTR unsigned char  size(2) Largest target is 20
		 -> STR_1(CODE[20]), 

    vfpfcnvrt@fp	PTR struct _IO_FILE size(2) Largest target is 7
		 -> sprintf@f(COMRAM[6]), 

    vfpfcnvrt@ap	PTR PTR void  size(2) Largest target is 2
		 -> sprintf@ap(COMRAM[2]), 

    vfpfcnvrt@fmt	PTR PTR unsigned char  size(2) Largest target is 2
		 -> vfprintf@cfmt(COMRAM[2]), 

    dtoa@fp	PTR struct _IO_FILE size(2) Largest target is 7
		 -> sprintf@f(COMRAM[6]), 

    pad@fp	PTR struct _IO_FILE size(2) Largest target is 7
		 -> sprintf@f(COMRAM[6]), 

    pad@buf	PTR unsigned char  size(2) Largest target is 32
		 -> dbuf(BANK0[32]), 


Critical Paths under _main in COMRAM

    _main->_sprintf
    _sprintf->_vfprintf
    _vfprintf->_vfpfcnvrt
    _vfpfcnvrt->_dtoa
    _dtoa->_pad
    _pad->_fputs
    _fputs->_fputc
    _abs->___aomod

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0    6456
                            _sprintf
 ---------------------------------------------------------------------------------
 (1) _sprintf                                             16    10      6    6456
                                             87 COMRAM    16    10      6
                           _vfprintf
 ---------------------------------------------------------------------------------
 (2) _vfprintf                                             8     2      6    6105
                                             79 COMRAM     8     2      6
                          _vfpfcnvrt
 ---------------------------------------------------------------------------------
 (3) _vfpfcnvrt                                           42    36      6    5751
                                             63 COMRAM    16    10      6
                               _dtoa
                              _fputc
 ---------------------------------------------------------------------------------
 (4) _dtoa                                                36    26     10    4358
                                             27 COMRAM    36    26     10
                            ___aodiv
                            ___aomod
                                _abs
                                _pad
 ---------------------------------------------------------------------------------
 (5) _pad                                                 11     5      6    2709
                                             16 COMRAM    11     5      6
                              _fputc
                              _fputs
                             _strlen
 ---------------------------------------------------------------------------------
 (6) _strlen                                               4     2      2     166
                                              0 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (6) _fputs                                                7     3      4    1235
                                              9 COMRAM     7     3      4
                              _fputc
 ---------------------------------------------------------------------------------
 (4) _fputc                                                9     5      4     834
                                              0 COMRAM     9     5      4
                              _putch
 ---------------------------------------------------------------------------------
 (5) _putch                                                1     1      0       0
 ---------------------------------------------------------------------------------
 (5) _abs                                                  4     2      2     142
                                             18 COMRAM     4     2      2
                            ___aomod (ARG)
 ---------------------------------------------------------------------------------
 (5) ___aomod                                             18     2     16     448
                                              0 COMRAM    18     2     16
 ---------------------------------------------------------------------------------
 (5) ___aodiv                                             26    10     16     452
                                              0 COMRAM    26    10     16
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _sprintf
     _vfprintf
       _vfpfcnvrt
         _dtoa
           ___aodiv
           ___aomod
           _abs
             ___aomod (ARG)
           _pad
             _fputc
               _putch
             _fputs
               _fputc
                 _putch
             _strlen
         _fputc
           _putch

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             5FF      0       0      17        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK5           100      0       0      16        0.0%
BANK5              100      0       0      14        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80      0      39       5       44.5%
BITCOMRAM           7F      0       0       0        0.0%
COMRAM              7F     67      71       1       89.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      AA      15        0.0%
DATA                 0      0      AA       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.05 build -831301201 
Symbol Table                                                                                   Sat Apr 13 18:07:03 2019

                     l11 0F08                       l41 0D12                       l52 0688  
                     l54 0690                      l764 0EB8                      u600 0A6A  
                    u460 0C54                      u700 0640                      u550 0E9E  
                    u480 0C9C                      u800 07F4                      u730 067E  
                    u660 0BA2                      u820 0800                      u581 0A32  
                    u750 06A4                      u760 07C0                      u690 063E  
                    u780 07E2                      u860 08C8                      u781 07E0  
                    u790 07F0                      _abs 0E90                      _pad 0CE4  
                    wreg 000FE8                     l1111 0D1C                     l1105 0CFC  
                   l1203 0C22                     l1115 0D34                     ?_abs 0013  
                   l1141 0A2C                     l1109 0D0A                     l1213 066C  
                   l1135 0A04                     l1119 0D60                     l1231 06BA  
                   l1303 09A4                     l1241 07B2                     l1147 0A52  
                   l1163 0AD8                     l1075 0C5C                     l1227 06AA  
                   l1315 0D8C                     l1149 0A66                     l1085 0E62  
                   l1093 0ECC                     l1261 0816                     l1317 0DB0  
                   l1167 0AFE                     l1159 0AC2                     l1183 0B70  
                   l1095 0ED0                     l1089 0E78                     l1265 082E  
                   l1195 0BE6                     l1187 0B8A                     l1179 0B4C  
                   l1189 0B9E                     l1293 0982                     l1199 0BFC  
                   l1287 0946                     l1297 098C                     ?_pad 0011  
                   STR_1 0601                     abs@a 0013                     _dbuf 0080  
                   _main 0EEC                     _dtoa 0616                     _prec 006C  
                   _nout 0068                     pad@i 0018                     pad@p 0015  
                   fsr1h 000FE2                     fsr2h 000FDA                     indf2 000FDF  
                   fsr1l 000FE1                     pad@w 001A                     fsr2l 000FD9  
                   start 0000             ___param_bank 000000                    ??_abs 0015  
                  ??_pad 0017          __end_of___aodiv 0B20                    ?_main 0001  
                  ?_dtoa 001C          __end_of___aomod 0C44             vfpfcnvrt@fmt 0042  
                  _flags 006E                    _fputc 0C44                    _fputs 0E58  
                  _teste 0070                    pad@fp 0011                    _width 006A  
                  _putch 0F0C                    dtoa@d 001E                    dtoa@i 003E  
                  dtoa@n 0036                    dtoa@p 0030                    dtoa@s 0034  
                  dtoa@w 0032                    tablat 000FF5                    status 000FD8  
        __end_of_sprintf 0E1A          __initialization 0E1A             __end_of_main 0F0A  
           __end_of_dtoa 0858                   ??_main 0068                   ??_dtoa 0026  
          __activetblptr 000001                   ?_fputc 0001                   ?_fputs 000A  
                 ?_putch 0001             vfprintf@cfmt 0056                ??___aodiv 0011  
              ??___aomod 0011                   _buffer 00A0                   clear_0 0E38  
                 clear_1 0E44                   pad@buf 0013                   dtoa@fp 001C  
                 _strlen 0EC2                   fputc@c 0001                   fputs@c 000E  
                 fputs@i 000F             __pdataCOMRAM 0070                   fputs@s 000A  
           __mediumconst 0000                   tblptrh 000FF7                   tblptrl 000FF6  
                 tblptru 000FF8                   putch@c 0001         __end_of_vfprintf 0DCC  
              ??_sprintf 005E               __accesstop 0080  __end_of__initialization 0E4A  
          ___rparam_used 000001           __pcstackCOMRAM 0001            __end_of_fputc 0CE4  
          __end_of_fputs 0E90            __end_of_putch 0F0E                  ??_fputc 0005  
                ??_fputs 000E                  ??_putch 0001               __pbssBANK0 0080  
                ?_strlen 0001       __size_of_vfpfcnvrt 0180                  __Hparam 0000  
                __Lparam 0000                  ___aodiv 09D8                  ___aomod 0B20  
              ?_vfprintf 0050             __psmallconst 0600                  __pcinit 0E1A  
                __ramtop 0600                  _dtoa$85 002E                  __ptext0 0EEC  
                __ptext1 0DCC                  __ptext2 0D7A                  __ptext3 0858  
                __ptext4 0616                  __ptext5 0CE4                  __ptext6 0EC2  
                __ptext7 0E58                  __ptext8 0C44                  __ptext9 0F0C  
        __size_of_strlen 002A             __size_of_abs 0032             __size_of_pad 0096  
                _sprintf 0DCC     end_of_initialization 0E4A                  fputc@fp 0003  
                fputs@fp 000C        __end_of_vfpfcnvrt 09D8                  postdec2 000FDD  
                postinc0 000FEE                  postinc1 000FE6                  postinc2 000FDE  
             ??_vfprintf 0056                  strlen@a 0003                  strlen@s 0001  
            vfpfcnvrt@ap 0044              vfpfcnvrt@fp 0040              vfpfcnvrt@ll 0048  
          __pidataCOMRAM 0F0A           __end_of_strlen 0EEC      start_initialization 0E1A  
            __end_of_abs 0EC2              __end_of_pad 0D7A              vfprintf@fmt 0052  
               ??_strlen 0003              __pbssCOMRAM 0068         ___aodiv@dividend 0001  
               ?___aodiv 0001                 ?___aomod 0001         ___aodiv@quotient 0013  
      __size_of_vfprintf 0052              __smallconst 0600                 ?_sprintf 0058  
         __size_of_fputc 00A0           __size_of_fputs 0038           __size_of_putch 0002  
              _vfpfcnvrt 0858                 __Hrparam 0000               vfprintf@ap 0054  
               __Lrparam 0000               vfprintf@fp 0050             __Lsmallconst 0600  
       __size_of___aodiv 0148         __size_of___aomod 0124               ?_vfpfcnvrt 0040  
        ___aodiv@divisor 0009          ___aodiv@counter 0011               sprintf@fmt 005A  
               __ptext10 0E90                 __ptext11 0B20                 __ptext12 09D8  
       __size_of_sprintf 004E            __size_of_main 001E            __size_of_dtoa 0242  
               _vfprintf 0D7A         ___aomod@dividend 0001                sprintf@ap 0060  
        ___aomod@divisor 0009              ??_vfpfcnvrt 0046          ___aomod@counter 0011  
               sprintf@f 0062                 sprintf@s 0058             ___aodiv@sign 0012  
           ___aomod@sign 0012  
