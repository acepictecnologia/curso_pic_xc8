

Microchip MPLAB XC8 Assembler V2.05 build -831301201 
                                                                                               Fri Apr 19 17:33:52 2019

Microchip MPLAB XC8 C Compiler v2.05 (Free license) build 20181220022703 Og1 
     1                           	processor	18F4520
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	flic
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
     9                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    10                           	psect	text0,global,reloc=2,class=CODE,delta=1
    11                           	psect	text1,global,reloc=2,class=CODE,delta=1,group=2
    12                           	psect	text2,global,reloc=2,class=CODE,delta=1
    13                           	psect	text3,global,reloc=2,class=CODE,delta=1
    14                           	psect	text4,global,reloc=2,class=CODE,delta=1
    15                           	psect	text5,global,reloc=2,class=CODE,delta=1
    16                           	psect	text6,global,reloc=2,class=CODE,delta=1,group=2
    17                           	psect	text7,global,reloc=2,class=CODE,delta=1,group=2
    18                           	psect	text8,global,reloc=2,class=CODE,delta=1,group=2
    19                           	psect	text9,global,reloc=2,class=CODE,delta=1,group=2
    20                           	psect	text10,global,reloc=2,class=CODE,delta=1,group=2
    21                           	psect	text11,global,reloc=2,class=CODE,delta=1,group=1
    22                           	psect	text12,global,reloc=2,class=CODE,delta=1,group=1
    23                           	psect	text13,global,reloc=2,class=CODE,delta=1,group=2
    24                           	psect	text14,global,reloc=2,class=CODE,delta=1,group=2
    25                           	psect	text15,global,reloc=2,class=CODE,delta=1,group=2
    26                           	psect	text16,global,reloc=2,class=CODE,delta=1,group=1
    27                           	psect	text17,global,reloc=2,class=CODE,delta=1
    28                           	psect	text18,global,reloc=2,class=CODE,delta=1
    29                           	psect	text19,global,reloc=2,class=CODE,delta=1
    30                           	psect	text20,global,reloc=2,class=CODE,delta=1
    31                           	psect	text21,global,reloc=2,class=CODE,delta=1
    32                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    33                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    34                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    35                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    36                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    37  0000                     
    38                           ; Version 2.05
    39                           ; Generated 20/12/2018 GMT
    40                           ; 
    41                           ; Copyright Â© 2018, Microchip Technology Inc. and its subsidiaries ("Microchip")
    42                           ; All rights reserved.
    43                           ; 
    44                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    45                           ; 
    46                           ; Redistribution and use in source and binary forms, with or without modification, are
    47                           ; permitted provided that the following conditions are met:
    48                           ; 
    49                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    50                           ;        conditions and the following disclaimer.
    51                           ; 
    52                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    53                           ;        of conditions and the following disclaimer in the documentation and/or other
    54                           ;        materials provided with the distribution.
    55                           ; 
    56                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    57                           ;        software without specific prior written permission.
    58                           ; 
    59                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    60                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    61                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    62                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    63                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    64                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    65                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    66                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    67                           ; 
    68                           ; 
    69                           ; Code-generator required, PIC18F4520 Definitions
    70                           ; 
    71                           ; SFR Addresses
    72  0000                     _TMR0	set	4054
    73  0000                     _LATDbits	set	3980
    74  0000                     _LATEbits	set	3981
    75  0000                     _LATD	set	3980
    76  0000                     _TRISEbits	set	3990
    77  0000                     _TRISD	set	3989
    78  0000                     _T0CON	set	4053
    79  0000                     _INTCON	set	4082
    80  0000                     _ADCON1	set	4033
    81  0000                     _PORTBbits	set	3969
    82  0000                     _TRISBbits	set	3987
    83  0000                     _TMR0IF	set	32658
    84                           
    85                           	psect	smallconst
    86  000600                     __psmallconst:
    87                           	opt callstack 0
    88  000600  00                 	db	0
    89  000601                     STR_1:
    90  000601  43                 	db	67	;'C'
    91  000602  4F                 	db	79	;'O'
    92  000603  4E                 	db	78	;'N'
    93  000604  54                 	db	84	;'T'
    94  000605  41                 	db	65	;'A'
    95  000606  20                 	db	32
    96  000607  35                 	db	53	;'5'
    97  000608  73                 	db	115	;'s'
    98  000609  20                 	db	32
    99  00060A  3A                 	db	58	;':'
   100  00060B  20                 	db	32
   101  00060C  30                 	db	48	;'0'
   102  00060D  30                 	db	48	;'0'
   103  00060E  00                 	db	0
   104  00060F                     STR_2:
   105  00060F  43                 	db	67	;'C'
   106  000610  4F                 	db	79	;'O'
   107  000611  4E                 	db	78	;'N'
   108  000612  54                 	db	84	;'T'
   109  000613  41                 	db	65	;'A'
   110  000614  20                 	db	32
   111  000615  31                 	db	49	;'1'
   112  000616  30                 	db	48	;'0'
   113  000617  73                 	db	115	;'s'
   114  000618  3A                 	db	58	;':'
   115  000619  20                 	db	32
   116  00061A  30                 	db	48	;'0'
   117  00061B  30                 	db	48	;'0'
   118  00061C  00                 	db	0
   119  00061D                     STR_3:
   120  00061D  25                 	db	37
   121  00061E  30                 	db	48	;'0'
   122  00061F  32                 	db	50	;'2'
   123  000620  64                 	db	100	;'d'
   124  000621  00                 	db	0
   125  0000                     
   126                           ; #config settings
   127  000622  00                 	db	0	; dummy byte at the end
   128  0000                     
   129                           	psect	cinit
   130  0014E2                     __pcinit:
   131                           	opt callstack 0
   132  0014E2                     start_initialization:
   133                           	opt callstack 0
   134  0014E2                     __initialization:
   135                           	opt callstack 0
   136                           
   137                           ; Clear objects allocated to BANK0 (48 bytes)
   138  0014E2  EE00  F080         	lfsr	0,__pbssBANK0
   139  0014E6  0E30               	movlw	48
   140  0014E8                     clear_0:
   141  0014E8  6AEE               	clrf	postinc0,c
   142  0014EA  06E8               	decf	wreg,f,c
   143  0014EC  E1FD               	bnz	clear_0
   144                           
   145                           ; Clear objects allocated to COMRAM (14 bytes)
   146  0014EE  EE00  F070         	lfsr	0,__pbssCOMRAM
   147  0014F2  0E0E               	movlw	14
   148  0014F4                     clear_1:
   149  0014F4  6AEE               	clrf	postinc0,c
   150  0014F6  06E8               	decf	wreg,f,c
   151  0014F8  E1FD               	bnz	clear_1
   152  0014FA                     end_of_initialization:
   153                           	opt callstack 0
   154  0014FA                     __end_of__initialization:
   155                           	opt callstack 0
   156  0014FA  907E               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   157  0014FC  927E               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   158  0014FE  0E00               	movlw	low (__Lmediumconst shr (0+16))
   159  001500  6EF8               	movwf	tblptru,c
   160  001502  0100               	movlb	0
   161  001504  EFE5  F007         	goto	_main	;jump to C main() function
   162                           
   163                           	psect	bssCOMRAM
   164  000070                     __pbssCOMRAM:
   165                           	opt callstack 0
   166  000070                     _nout:
   167                           	opt callstack 0
   168  000070                     	ds	2
   169  000072                     _width:
   170                           	opt callstack 0
   171  000072                     	ds	2
   172  000074                     _prec:
   173                           	opt callstack 0
   174  000074                     	ds	2
   175  000076                     _flags:
   176                           	opt callstack 0
   177  000076                     	ds	2
   178  000078                     _conta10s:
   179                           	opt callstack 0
   180  000078                     	ds	2
   181  00007A                     _conta5s:
   182                           	opt callstack 0
   183  00007A                     	ds	2
   184  00007C                     _T0_10s:
   185                           	opt callstack 0
   186  00007C                     	ds	2
   187                           
   188                           	psect	bssBANK0
   189  000080                     __pbssBANK0:
   190                           	opt callstack 0
   191  000080                     _dbuf:
   192                           	opt callstack 0
   193  000080                     	ds	32
   194  0000A0                     _bufferLCD:
   195                           	opt callstack 0
   196  0000A0                     	ds	16
   197                           
   198                           	psect	cstackCOMRAM
   199  000001                     __pcstackCOMRAM:
   200                           	opt callstack 0
   201  000001                     ?_strlen:
   202                           	opt callstack 0
   203  000001                     ?_isdigit:
   204                           	opt callstack 0
   205  000001                     ?_isspace:
   206                           	opt callstack 0
   207  000001                     ?___wmul:
   208                           	opt callstack 0
   209  000001                     ?___aodiv:
   210                           	opt callstack 0
   211  000001                     ?___aomod:
   212                           	opt callstack 0
   213  000001                     set_bit@comp:
   214                           	opt callstack 0
   215  000001                     ___wmul@multiplier:
   216                           	opt callstack 0
   217  000001                     isdigit@c:
   218                           	opt callstack 0
   219  000001                     isspace@c:
   220                           	opt callstack 0
   221  000001                     fputc@c:
   222                           	opt callstack 0
   223  000001                     strlen@s:
   224                           	opt callstack 0
   225  000001                     ___aodiv@dividend:
   226                           	opt callstack 0
   227  000001                     ___aomod@dividend:
   228                           	opt callstack 0
   229                           
   230                           ; 8 bytes @ 0x0
   231  000001                     	ds	1
   232  000002                     set_bit@cmd:
   233                           	opt callstack 0
   234                           
   235                           ; 1 bytes @ 0x1
   236  000002                     	ds	1
   237  000003                     ??_lcd_cmd:
   238  000003                     ??_isdigit:
   239  000003                     ??_isspace:
   240  000003                     ___wmul@multiplicand:
   241                           	opt callstack 0
   242  000003                     fputc@fp:
   243                           	opt callstack 0
   244  000003                     strlen@a:
   245                           	opt callstack 0
   246                           
   247                           ; 2 bytes @ 0x2
   248  000003                     	ds	1
   249  000004                     lcd_cmd@cmd:
   250                           	opt callstack 0
   251                           
   252                           ; 1 bytes @ 0x3
   253  000004                     	ds	1
   254  000005                     ??_lcd_ini:
   255  000005                     ??_fputc:
   256  000005                     lcd_envia_byte@dado:
   257                           	opt callstack 0
   258  000005                     ___wmul@product:
   259                           	opt callstack 0
   260                           
   261                           ; 2 bytes @ 0x4
   262  000005                     	ds	1
   263  000006                     lcd_ini@i:
   264                           	opt callstack 0
   265  000006                     lcd_envia_byte@nivel:
   266                           	opt callstack 0
   267                           
   268                           ; 1 bytes @ 0x5
   269  000006                     	ds	1
   270  000007                     lcd_escreve_bf@col:
   271                           	opt callstack 0
   272  000007                     _isspace$881:
   273                           	opt callstack 0
   274                           
   275                           ; 1 bytes @ 0x6
   276  000007                     	ds	1
   277  000008                     ?_atoi:
   278                           	opt callstack 0
   279  000008                     lcd_escreve_bf@str:
   280                           	opt callstack 0
   281  000008                     atoi@s:
   282                           	opt callstack 0
   283                           
   284                           ; 2 bytes @ 0x7
   285  000008                     	ds	1
   286  000009                     ___aodiv@divisor:
   287                           	opt callstack 0
   288  000009                     ___aomod@divisor:
   289                           	opt callstack 0
   290                           
   291                           ; 8 bytes @ 0x8
   292  000009                     	ds	1
   293  00000A                     ??_atoi:
   294  00000A                     lcd_escreve_bf@end:
   295                           	opt callstack 0
   296  00000A                     fputs@s:
   297                           	opt callstack 0
   298                           
   299                           ; 2 bytes @ 0x9
   300  00000A                     	ds	1
   301  00000B                     lcd_escreve_bf@lin:
   302                           	opt callstack 0
   303                           
   304                           ; 1 bytes @ 0xA
   305  00000B                     	ds	1
   306  00000C                     fputs@fp:
   307                           	opt callstack 0
   308                           
   309                           ; 2 bytes @ 0xB
   310  00000C                     	ds	2
   311  00000E                     fputs@c:
   312                           	opt callstack 0
   313  00000E                     atoi@neg:
   314                           	opt callstack 0
   315                           
   316                           ; 2 bytes @ 0xD
   317  00000E                     	ds	1
   318  00000F                     fputs@i:
   319                           	opt callstack 0
   320                           
   321                           ; 2 bytes @ 0xE
   322  00000F                     	ds	1
   323  000010                     _atoi$863:
   324                           	opt callstack 0
   325                           
   326                           ; 2 bytes @ 0xF
   327  000010                     	ds	1
   328  000011                     ?_pad:
   329                           	opt callstack 0
   330  000011                     ___aodiv@counter:
   331                           	opt callstack 0
   332  000011                     ___aomod@counter:
   333                           	opt callstack 0
   334  000011                     pad@fp:
   335                           	opt callstack 0
   336                           
   337                           ; 2 bytes @ 0x10
   338  000011                     	ds	1
   339  000012                     ___aodiv@sign:
   340                           	opt callstack 0
   341  000012                     ___aomod@sign:
   342                           	opt callstack 0
   343  000012                     _atoi$865:
   344                           	opt callstack 0
   345                           
   346                           ; 2 bytes @ 0x11
   347  000012                     	ds	1
   348  000013                     ?_abs:
   349                           	opt callstack 0
   350  000013                     pad@buf:
   351                           	opt callstack 0
   352  000013                     abs@a:
   353                           	opt callstack 0
   354  000013                     ___aodiv@quotient:
   355                           	opt callstack 0
   356                           
   357                           ; 8 bytes @ 0x12
   358  000013                     	ds	1
   359  000014                     _atoi$864:
   360                           	opt callstack 0
   361                           
   362                           ; 1 bytes @ 0x13
   363  000014                     	ds	1
   364  000015                     ??_abs:
   365  000015                     pad@p:
   366                           	opt callstack 0
   367  000015                     atoi@n:
   368                           	opt callstack 0
   369                           
   370                           ; 2 bytes @ 0x14
   371  000015                     	ds	2
   372  000017                     ??_pad:
   373                           
   374                           ; 1 bytes @ 0x16
   375  000017                     	ds	1
   376  000018                     pad@i:
   377                           	opt callstack 0
   378                           
   379                           ; 2 bytes @ 0x17
   380  000018                     	ds	2
   381  00001A                     pad@w:
   382                           	opt callstack 0
   383                           
   384                           ; 2 bytes @ 0x19
   385  00001A                     	ds	2
   386  00001C                     ?_dtoa:
   387                           	opt callstack 0
   388  00001C                     dtoa@fp:
   389                           	opt callstack 0
   390                           
   391                           ; 2 bytes @ 0x1B
   392  00001C                     	ds	2
   393  00001E                     dtoa@d:
   394                           	opt callstack 0
   395                           
   396                           ; 8 bytes @ 0x1D
   397  00001E                     	ds	8
   398  000026                     ??_dtoa:
   399                           
   400                           ; 1 bytes @ 0x25
   401  000026                     	ds	8
   402  00002E                     _dtoa$391:
   403                           	opt callstack 0
   404                           
   405                           ; 2 bytes @ 0x2D
   406  00002E                     	ds	2
   407  000030                     dtoa@p:
   408                           	opt callstack 0
   409                           
   410                           ; 2 bytes @ 0x2F
   411  000030                     	ds	2
   412  000032                     dtoa@w:
   413                           	opt callstack 0
   414                           
   415                           ; 2 bytes @ 0x31
   416  000032                     	ds	2
   417  000034                     dtoa@s:
   418                           	opt callstack 0
   419                           
   420                           ; 2 bytes @ 0x33
   421  000034                     	ds	2
   422  000036                     dtoa@n:
   423                           	opt callstack 0
   424                           
   425                           ; 8 bytes @ 0x35
   426  000036                     	ds	8
   427  00003E                     dtoa@i:
   428                           	opt callstack 0
   429                           
   430                           ; 2 bytes @ 0x3D
   431  00003E                     	ds	2
   432  000040                     ?_vfpfcnvrt:
   433                           	opt callstack 0
   434  000040                     vfpfcnvrt@fp:
   435                           	opt callstack 0
   436                           
   437                           ; 2 bytes @ 0x3F
   438  000040                     	ds	2
   439  000042                     vfpfcnvrt@fmt:
   440                           	opt callstack 0
   441                           
   442                           ; 2 bytes @ 0x41
   443  000042                     	ds	2
   444  000044                     vfpfcnvrt@ap:
   445                           	opt callstack 0
   446                           
   447                           ; 2 bytes @ 0x43
   448  000044                     	ds	2
   449  000046                     ??_vfpfcnvrt:
   450                           
   451                           ; 1 bytes @ 0x45
   452  000046                     	ds	4
   453  00004A                     vfpfcnvrt@ll:
   454                           	opt callstack 0
   455                           
   456                           ; 8 bytes @ 0x49
   457  00004A                     	ds	8
   458  000052                     vfpfcnvrt@done:
   459                           	opt callstack 0
   460                           
   461                           ; 2 bytes @ 0x51
   462  000052                     	ds	2
   463  000054                     _vfpfcnvrt$406:
   464                           	opt callstack 0
   465                           
   466                           ; 2 bytes @ 0x53
   467  000054                     	ds	2
   468  000056                     ?_vfprintf:
   469                           	opt callstack 0
   470  000056                     vfprintf@fp:
   471                           	opt callstack 0
   472                           
   473                           ; 2 bytes @ 0x55
   474  000056                     	ds	2
   475  000058                     vfprintf@fmt:
   476                           	opt callstack 0
   477                           
   478                           ; 2 bytes @ 0x57
   479  000058                     	ds	2
   480  00005A                     vfprintf@ap:
   481                           	opt callstack 0
   482                           
   483                           ; 2 bytes @ 0x59
   484  00005A                     	ds	2
   485  00005C                     vfprintf@cfmt:
   486                           	opt callstack 0
   487                           
   488                           ; 2 bytes @ 0x5B
   489  00005C                     	ds	2
   490  00005E                     ?_sprintf:
   491                           	opt callstack 0
   492  00005E                     sprintf@s:
   493                           	opt callstack 0
   494                           
   495                           ; 2 bytes @ 0x5D
   496  00005E                     	ds	2
   497  000060                     sprintf@fmt:
   498                           	opt callstack 0
   499                           
   500                           ; 2 bytes @ 0x5F
   501  000060                     	ds	4
   502  000064                     
   503                           ; 1 bytes @ 0x63
   504  000064                     	ds	2
   505  000066                     sprintf@ap:
   506                           	opt callstack 0
   507                           
   508                           ; 2 bytes @ 0x65
   509  000066                     	ds	2
   510  000068                     sprintf@f:
   511                           	opt callstack 0
   512                           
   513                           ; 6 bytes @ 0x67
   514  000068                     	ds	6
   515  00006E                     ??_main:
   516                           
   517                           ; 1 bytes @ 0x6D
   518  00006E                     	ds	2
   519                           
   520 ;;
   521 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   522 ;;
   523 ;; *************** function _main *****************
   524 ;; Defined at:
   525 ;;		line 32 in file "EX15.c"
   526 ;; Parameters:    Size  Location     Type
   527 ;;		None
   528 ;; Auto vars:     Size  Location     Type
   529 ;;		None
   530 ;; Return value:  Size  Location     Type
   531 ;;                  1    wreg      void 
   532 ;; Registers used:
   533 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   534 ;; Tracked objects:
   535 ;;		On entry : 0/0
   536 ;;		On exit  : 0/0
   537 ;;		Unchanged: 0/0
   538 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   539 ;;      Params:         0       0       0       0       0       0       0
   540 ;;      Locals:         0       0       0       0       0       0       0
   541 ;;      Temps:          2       0       0       0       0       0       0
   542 ;;      Totals:         2       0       0       0       0       0       0
   543 ;;Total ram usage:        2 bytes
   544 ;; Hardware stack levels required when called:    9
   545 ;; This function calls:
   546 ;;		_lcd_escreve_bf
   547 ;;		_lcd_ini
   548 ;;		_sprintf
   549 ;; This function is called by:
   550 ;;		Startup code after reset
   551 ;; This function uses a non-reentrant model
   552 ;;
   553                           
   554                           	psect	text0
   555  000FCA                     __ptext0:
   556                           	opt callstack 0
   557  000FCA                     _main:
   558                           	opt callstack 22
   559                           
   560                           ;EX15.c: 33:     TRISBbits.TRISB0 = 0;
   561                           
   562                           ;incstack = 0
   563  000FCA  9093               	bcf	3987,0,c	;volatile
   564                           
   565                           ;EX15.c: 34:     PORTBbits.RB0 = 0;
   566  000FCC  9081               	bcf	3969,0,c	;volatile
   567                           
   568                           ;EX15.c: 35:     ADCON1 = 0x0F;
   569  000FCE  0E0F               	movlw	15
   570  000FD0  6EC1               	movwf	4033,c	;volatile
   571                           
   572                           ;EX15.c: 37:     INTCON = 0b10100000;
   573  000FD2  0EA0               	movlw	160
   574  000FD4  6EF2               	movwf	4082,c	;volatile
   575                           
   576                           ;EX15.c: 45:     T0CON = 0b10000111;
   577  000FD6  0E87               	movlw	135
   578  000FD8  6ED5               	movwf	4053,c	;volatile
   579                           
   580                           ;EX15.c: 52:     TMR0 = 26474;
   581  000FDA  0E67               	movlw	103
   582  000FDC  6ED7               	movwf	4055,c	;volatile
   583  000FDE  0E6A               	movlw	106
   584  000FE0  6ED6               	movwf	4054,c	;volatile
   585                           
   586                           ;EX15.c: 54:     lcd_ini();
   587  000FE2  ECE6  F008         	call	_lcd_ini	;wreg free
   588                           
   589                           ;EX15.c: 57:     lcd_escreve_bf(1, 1, "CONTA 5s : 00");
   590  000FE6  0E01               	movlw	1
   591  000FE8  6E07               	movwf	lcd_escreve_bf@col,c
   592  000FEA  0E01               	movlw	low STR_1
   593  000FEC  6E08               	movwf	lcd_escreve_bf@str,c
   594  000FEE  0E06               	movlw	high STR_1
   595  000FF0  6E09               	movwf	lcd_escreve_bf@str+1,c
   596  000FF2  0E01               	movlw	1
   597  000FF4  EC2E  F009         	call	_lcd_escreve_bf
   598                           
   599                           ;EX15.c: 60:     lcd_escreve_bf(2, 1, "CONTA 10s: 00");
   600  000FF8  0E01               	movlw	1
   601  000FFA  6E07               	movwf	lcd_escreve_bf@col,c
   602  000FFC  0E0F               	movlw	low STR_2
   603  000FFE  6E08               	movwf	lcd_escreve_bf@str,c
   604  001000  0E06               	movlw	high STR_2
   605  001002  6E09               	movwf	lcd_escreve_bf@str+1,c
   606  001004  0E02               	movlw	2
   607  001006  EC2E  F009         	call	_lcd_escreve_bf
   608  00100A                     l1960:
   609                           
   610                           ;EX15.c: 63:     {;EX15.c: 64:         _delay((unsigned long)((1000)*(8000000/4000.0)));
   611  00100A  0E0B               	movlw	11
   612  00100C  6E6F               	movwf	(??_main+1)& (0+255),c
   613  00100E  0E26               	movlw	38
   614  001010  6E6E               	movwf	??_main& (0+255),c
   615  001012  0E5E               	movlw	94
   616  001014                     u1477:
   617  001014  2EE8               	decfsz	wreg,f,c
   618  001016  D7FE               	bra	u1477
   619  001018  2E6E               	decfsz	??_main& (0+255),f,c
   620  00101A  D7FC               	bra	u1477
   621  00101C  2E6F               	decfsz	(??_main+1)& (0+255),f,c
   622  00101E  D7FA               	bra	u1477
   623                           
   624                           ;EX15.c: 66:         PORTBbits.RB0 = ~PORTBbits.RB0;
   625  001020  A081               	btfss	3969,0,c	;volatile
   626  001022  D002               	goto	u1460
   627  001024  0E01               	movlw	1
   628  001026  D001               	goto	u1466
   629  001028                     u1460:
   630  001028  0E00               	movlw	0
   631  00102A                     u1466:
   632  00102A  0AFF               	xorlw	255
   633  00102C  6E6E               	movwf	??_main& (0+255),c
   634  00102E  5081               	movf	3969,w,c	;volatile
   635  001030  186E               	xorwf	??_main,w,c
   636  001032  0BFE               	andlw	-2
   637  001034  186E               	xorwf	??_main,w,c
   638  001036  6E81               	movwf	3969,c	;volatile
   639                           
   640                           ;EX15.c: 69:         sprintf(bufferLCD, "%02d", conta5s);
   641  001038  0EA0               	movlw	low _bufferLCD
   642  00103A  6E5E               	movwf	sprintf@s,c
   643  00103C  0E00               	movlw	high _bufferLCD
   644  00103E  6E5F               	movwf	sprintf@s+1,c
   645  001040  0E1D               	movlw	low STR_3
   646  001042  6E60               	movwf	sprintf@fmt,c
   647  001044  0E06               	movlw	high STR_3
   648  001046  6E61               	movwf	sprintf@fmt+1,c
   649  001048  C07A  F062         	movff	_conta5s,?_sprintf+4
   650  00104C  C07B  F063         	movff	_conta5s+1,?_sprintf+5
   651  001050  ECC9  F009         	call	_sprintf	;wreg free
   652                           
   653                           ;EX15.c: 72:         lcd_escreve_bf(1, 12, bufferLCD);
   654  001054  0E0C               	movlw	12
   655  001056  6E07               	movwf	lcd_escreve_bf@col,c
   656  001058  0EA0               	movlw	low _bufferLCD
   657  00105A  6E08               	movwf	lcd_escreve_bf@str,c
   658  00105C  0E00               	movlw	high _bufferLCD
   659  00105E  6E09               	movwf	lcd_escreve_bf@str+1,c
   660  001060  0E01               	movlw	1
   661  001062  EC2E  F009         	call	_lcd_escreve_bf
   662                           
   663                           ;EX15.c: 75:         sprintf(bufferLCD, "%02d", conta10s);
   664  001066  0EA0               	movlw	low _bufferLCD
   665  001068  6E5E               	movwf	sprintf@s,c
   666  00106A  0E00               	movlw	high _bufferLCD
   667  00106C  6E5F               	movwf	sprintf@s+1,c
   668  00106E  0E1D               	movlw	low STR_3
   669  001070  6E60               	movwf	sprintf@fmt,c
   670  001072  0E06               	movlw	high STR_3
   671  001074  6E61               	movwf	sprintf@fmt+1,c
   672  001076  C078  F062         	movff	_conta10s,?_sprintf+4
   673  00107A  C079  F063         	movff	_conta10s+1,?_sprintf+5
   674  00107E  ECC9  F009         	call	_sprintf	;wreg free
   675                           
   676                           ;EX15.c: 78:         lcd_escreve_bf(2, 12, bufferLCD);
   677  001082  0E0C               	movlw	12
   678  001084  6E07               	movwf	lcd_escreve_bf@col,c
   679  001086  0EA0               	movlw	low _bufferLCD
   680  001088  6E08               	movwf	lcd_escreve_bf@str,c
   681  00108A  0E00               	movlw	high _bufferLCD
   682  00108C  6E09               	movwf	lcd_escreve_bf@str+1,c
   683  00108E  0E02               	movlw	2
   684  001090  EC2E  F009         	call	_lcd_escreve_bf
   685  001094  D7BA               	goto	l1960
   686  001096                     __end_of_main:
   687                           	opt callstack 0
   688                           
   689 ;; *************** function _sprintf *****************
   690 ;; Defined at:
   691 ;;		line 9 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\nf_sprintf.c"
   692 ;; Parameters:    Size  Location     Type
   693 ;;  s               2   93[COMRAM] PTR unsigned char 
   694 ;;		 -> bufferLCD(16), 
   695 ;;  fmt             2   95[COMRAM] PTR const unsigned char 
   696 ;;		 -> STR_4(5), STR_3(5), 
   697 ;; Auto vars:     Size  Location     Type
   698 ;;  f               6  103[COMRAM] struct _IO_FILE
   699 ;;  ap              2  101[COMRAM] PTR void [1]
   700 ;;		 -> ?_sprintf(2), 
   701 ;;  ret             2    0        int 
   702 ;; Return value:  Size  Location     Type
   703 ;;                  2   93[COMRAM] int 
   704 ;; Registers used:
   705 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   706 ;; Tracked objects:
   707 ;;		On entry : 0/0
   708 ;;		On exit  : 0/0
   709 ;;		Unchanged: 0/0
   710 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   711 ;;      Params:         6       0       0       0       0       0       0
   712 ;;      Locals:        10       0       0       0       0       0       0
   713 ;;      Temps:          0       0       0       0       0       0       0
   714 ;;      Totals:        16       0       0       0       0       0       0
   715 ;;Total ram usage:       16 bytes
   716 ;; Hardware stack levels used:    1
   717 ;; Hardware stack levels required when called:    8
   718 ;; This function calls:
   719 ;;		_vfprintf
   720 ;; This function is called by:
   721 ;;		_main
   722 ;; This function uses a non-reentrant model
   723 ;;
   724                           
   725                           	psect	text1
   726  001392                     __ptext1:
   727                           	opt callstack 0
   728  001392                     _sprintf:
   729                           	opt callstack 22
   730                           
   731                           ;incstack = 0
   732  001392  0E62               	movlw	low (?_sprintf+4)
   733  001394  6E66               	movwf	sprintf@ap,c
   734  001396  0E00               	movlw	high (?_sprintf+4)
   735  001398  6E67               	movwf	sprintf@ap+1,c
   736  00139A  C05E  F068         	movff	sprintf@s,sprintf@f
   737  00139E  C05F  F069         	movff	sprintf@s+1,sprintf@f+1
   738  0013A2  0E00               	movlw	0
   739  0013A4  6E6B               	movwf	sprintf@f+3,c
   740  0013A6  0E00               	movlw	0
   741  0013A8  6E6A               	movwf	sprintf@f+2,c
   742  0013AA  0E00               	movlw	0
   743  0013AC  6E6D               	movwf	sprintf@f+5,c
   744  0013AE  0E00               	movlw	0
   745  0013B0  6E6C               	movwf	sprintf@f+4,c
   746  0013B2  0E68               	movlw	low sprintf@f
   747  0013B4  6E56               	movwf	vfprintf@fp,c
   748  0013B6  0E00               	movlw	high sprintf@f
   749  0013B8  6E57               	movwf	vfprintf@fp+1,c
   750  0013BA  C060  F058         	movff	sprintf@fmt,vfprintf@fmt
   751  0013BE  C061  F059         	movff	sprintf@fmt+1,vfprintf@fmt+1
   752  0013C2  0E66               	movlw	low sprintf@ap
   753  0013C4  6E5A               	movwf	vfprintf@ap,c
   754  0013C6  0E00               	movlw	high sprintf@ap
   755  0013C8  6E5B               	movwf	vfprintf@ap+1,c
   756  0013CA  ECA0  F009         	call	_vfprintf	;wreg free
   757  0013CE  506A               	movf	sprintf@f+2,w,c
   758  0013D0  245E               	addwf	sprintf@s,w,c
   759  0013D2  6ED9               	movwf	fsr2l,c
   760  0013D4  506B               	movf	sprintf@f+3,w,c
   761  0013D6  205F               	addwfc	sprintf@s+1,w,c
   762  0013D8  6EDA               	movwf	fsr2h,c
   763  0013DA  0E00               	movlw	0
   764  0013DC  6EDF               	movwf	indf2,c
   765  0013DE  0012               	return		;funcret
   766  0013E0                     __end_of_sprintf:
   767                           	opt callstack 0
   768                           
   769 ;; *************** function _vfprintf *****************
   770 ;; Defined at:
   771 ;;		line 1368 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c"
   772 ;; Parameters:    Size  Location     Type
   773 ;;  fp              2   85[COMRAM] PTR struct _IO_FILE
   774 ;;		 -> sprintf@f(6), 
   775 ;;  fmt             2   87[COMRAM] PTR const unsigned char 
   776 ;;		 -> STR_4(5), STR_3(5), 
   777 ;;  ap              2   89[COMRAM] PTR PTR void 
   778 ;;		 -> sprintf@ap(2), 
   779 ;; Auto vars:     Size  Location     Type
   780 ;;  cfmt            2   91[COMRAM] PTR unsigned char 
   781 ;;		 -> STR_4(5), STR_3(5), 
   782 ;; Return value:  Size  Location     Type
   783 ;;                  2   85[COMRAM] int 
   784 ;; Registers used:
   785 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   786 ;; Tracked objects:
   787 ;;		On entry : 0/0
   788 ;;		On exit  : 0/0
   789 ;;		Unchanged: 0/0
   790 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   791 ;;      Params:         6       0       0       0       0       0       0
   792 ;;      Locals:         2       0       0       0       0       0       0
   793 ;;      Temps:          0       0       0       0       0       0       0
   794 ;;      Totals:         8       0       0       0       0       0       0
   795 ;;Total ram usage:        8 bytes
   796 ;; Hardware stack levels used:    1
   797 ;; Hardware stack levels required when called:    7
   798 ;; This function calls:
   799 ;;		_vfpfcnvrt
   800 ;; This function is called by:
   801 ;;		_sprintf
   802 ;; This function uses a non-reentrant model
   803 ;;
   804                           
   805                           	psect	text2
   806  001340                     __ptext2:
   807                           	opt callstack 0
   808  001340                     _vfprintf:
   809                           	opt callstack 22
   810                           
   811                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1368: int v
      +                          fprintf(FILE *fp, const char *fmt, va_list ap);C:\Program Files (x86)\Microchip\xc8\v2.0
      +                          5\pic\sources\c99\common\doprnt.c: 1369: {;C:\Program Files (x86)\Microchip\xc8\v2.05\pi
      +                          c\sources\c99\common\doprnt.c: 1371:     char *cfmt;;C:\Program Files (x86)\Microchip\xc
      +                          8\v2.05\pic\sources\c99\common\doprnt.c: 1373:     cfmt = (char *)fmt;
   812                           
   813                           ;incstack = 0
   814  001340  C058  F05C         	movff	vfprintf@fmt,vfprintf@cfmt
   815  001344  C059  F05D         	movff	vfprintf@fmt+1,vfprintf@cfmt+1
   816                           
   817                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1374:     n
      +                          out = 0;
   818  001348  0E00               	movlw	0
   819  00134A  6E71               	movwf	_nout+1,c
   820  00134C  0E00               	movlw	0
   821  00134E  6E70               	movwf	_nout,c
   822                           
   823                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1375:     w
      +                          hile (*cfmt) {
   824  001350  D012               	goto	l1880
   825  001352                     l1878:
   826                           
   827                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1376:      
      +                             nout += vfpfcnvrt(fp, &cfmt, ap);
   828  001352  C056  F040         	movff	vfprintf@fp,vfpfcnvrt@fp
   829  001356  C057  F041         	movff	vfprintf@fp+1,vfpfcnvrt@fp+1
   830  00135A  0E5C               	movlw	low vfprintf@cfmt
   831  00135C  6E42               	movwf	vfpfcnvrt@fmt,c
   832  00135E  0E00               	movlw	high vfprintf@cfmt
   833  001360  6E43               	movwf	vfpfcnvrt@fmt+1,c
   834  001362  C05A  F044         	movff	vfprintf@ap,vfpfcnvrt@ap
   835  001366  C05B  F045         	movff	vfprintf@ap+1,vfpfcnvrt@ap+1
   836  00136A  EC12  F003         	call	_vfpfcnvrt	;wreg free
   837  00136E  5040               	movf	?_vfpfcnvrt,w,c
   838  001370  2670               	addwf	_nout,f,c
   839  001372  5041               	movf	?_vfpfcnvrt+1,w,c
   840  001374  2271               	addwfc	_nout+1,f,c
   841  001376                     l1880:
   842                           
   843                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1375:     w
      +                          hile (*cfmt) {
   844  001376  C05C  FFF6         	movff	vfprintf@cfmt,tblptrl
   845  00137A  C05D  FFF7         	movff	vfprintf@cfmt+1,tblptrh
   846  00137E                     	if	0	;tblptru may be non-zero
   847  00137E                     	endif
   848  00137E                     	if	0	;tblptru may be non-zero
   849  00137E                     	endif
   850  00137E  0008               	tblrd		*
   851  001380  50F5               	movf	tablat,w,c
   852  001382  0900               	iorlw	0
   853  001384  A4D8               	btfss	status,2,c
   854  001386  D7E5               	goto	l1878
   855                           
   856                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1378:     r
      +                          eturn nout;
   857  001388  C070  F056         	movff	_nout,?_vfprintf
   858  00138C  C071  F057         	movff	_nout+1,?_vfprintf+1
   859  001390  0012               	return		;funcret
   860  001392                     __end_of_vfprintf:
   861                           	opt callstack 0
   862                           
   863 ;; *************** function _vfpfcnvrt *****************
   864 ;; Defined at:
   865 ;;		line 670 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c"
   866 ;; Parameters:    Size  Location     Type
   867 ;;  fp              2   63[COMRAM] PTR struct _IO_FILE
   868 ;;		 -> sprintf@f(6), 
   869 ;;  fmt             2   65[COMRAM] PTR PTR unsigned char 
   870 ;;		 -> vfprintf@cfmt(2), 
   871 ;;  ap              2   67[COMRAM] PTR PTR void 
   872 ;;		 -> sprintf@ap(2), 
   873 ;; Auto vars:     Size  Location     Type
   874 ;;  ll              8   73[COMRAM] long long 
   875 ;;  llu             8    0        unsigned long long 
   876 ;;  f               4    0        unsigned long long 
   877 ;;  vp              3    0        PTR void 
   878 ;;  ct              3    0        unsigned char [3]
   879 ;;  cp              3    0        PTR unsigned char 
   880 ;;  done            2   81[COMRAM] int 
   881 ;;  i               2    0        int 
   882 ;;  c               1    0        unsigned char 
   883 ;; Return value:  Size  Location     Type
   884 ;;                  2   63[COMRAM] int 
   885 ;; Registers used:
   886 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   887 ;; Tracked objects:
   888 ;;		On entry : 0/0
   889 ;;		On exit  : 0/0
   890 ;;		Unchanged: 0/0
   891 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   892 ;;      Params:         6       0       0       0       0       0       0
   893 ;;      Locals:        12       0       0       0       0       0       0
   894 ;;      Temps:          4       0       0       0       0       0       0
   895 ;;      Totals:        22       0       0       0       0       0       0
   896 ;;Total ram usage:       22 bytes
   897 ;; Hardware stack levels used:    1
   898 ;; Hardware stack levels required when called:    6
   899 ;; This function calls:
   900 ;;		_atoi
   901 ;;		_dtoa
   902 ;;		_fputc
   903 ;;		_isdigit
   904 ;; This function is called by:
   905 ;;		_vfprintf
   906 ;; This function uses a non-reentrant model
   907 ;;
   908                           
   909                           	psect	text3
   910  000624                     __ptext3:
   911                           	opt callstack 0
   912  000624                     _vfpfcnvrt:
   913                           	opt callstack 22
   914                           
   915                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 670: static
      +                           int vfpfcnvrt(FILE *fp, char *fmt[], va_list ap);C:\Program Files (x86)\Microchip\xc8\v
      +                          2.05\pic\sources\c99\common\doprnt.c: 671: {;C:\Program Files (x86)\Microchip\xc8\v2.05\
      +                          pic\sources\c99\common\doprnt.c: 672:     char c, *cp, ct[3];;C:\Program Files (x86)\Mic
      +                          rochip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 673:     int done, i;;C:\Program Files
      +                           (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 674:     long long ll;
   916                           
   917                           ;incstack = 0
   918  000624  C042  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
   919  000628  C043  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
   920  00062C  CFDE FFF6          	movff	postinc2,tblptrl
   921  000630  CFDD FFF7          	movff	postdec2,tblptrh
   922  000634                     	if	0	;tblptru may be non-zero
   923  000634                     	endif
   924  000634                     	if	0	;tblptru may be non-zero
   925  000634                     	endif
   926  000634  0008               	tblrd		*
   927  000636  50F5               	movf	tablat,w,c
   928  000638  0A25               	xorlw	37
   929  00063A  A4D8               	btfss	status,2,c
   930  00063C  D143               	goto	l1854
   931                           
   932                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 681:       
      +                            ++*fmt;
   933  00063E  C042  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
   934  000642  C043  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
   935  000646  2ADE               	incf	postinc2,f,c
   936  000648  0E00               	movlw	0
   937  00064A  22DD               	addwfc	postdec2,f,c
   938                           
   939                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 683:       
      +                            flags = width = 0;
   940  00064C  0E00               	movlw	0
   941  00064E  6E73               	movwf	_width+1,c
   942  000650  0E00               	movlw	0
   943  000652  6E72               	movwf	_width,c
   944  000654  C072  F076         	movff	_width,_flags
   945  000658  C073  F077         	movff	_width+1,_flags+1
   946                           
   947                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 684:       
      +                            prec = -1;
   948  00065C  6874               	setf	_prec,c
   949  00065E  6875               	setf	_prec+1,c
   950                           
   951                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 688:       
      +                            done = 0;
   952  000660  0E00               	movlw	0
   953  000662  6E53               	movwf	vfpfcnvrt@done+1,c
   954  000664  0E00               	movlw	0
   955  000666  D014               	goto	L1
   956  000668                     l1780:
   957                           
   958                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 692:       
      +                                        flags |= (1 << 0);
   959  000668  8076               	bsf	_flags,0,c
   960  00066A                     l1782:
   961                           
   962                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 693:       
      +                                        ++*fmt;
   963  00066A  C042  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
   964  00066E  C043  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
   965  000672  2ADE               	incf	postinc2,f,c
   966  000674  0E00               	movlw	0
   967  000676  22DD               	addwfc	postdec2,f,c
   968                           
   969                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 694:       
      +                                        break;
   970  000678  D02E               	goto	l1806
   971  00067A                     l1784:
   972                           
   973                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 696:       
      +                                        flags |= (1 << 1);
   974  00067A  8276               	bsf	_flags,1,c
   975  00067C  D7F6               	goto	l1782
   976  00067E                     l1788:
   977                           
   978                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 700:       
      +                                        flags |= (1 << 2);
   979  00067E  8476               	bsf	_flags,2,c
   980  000680  D7F4               	goto	l1782
   981  000682                     l1792:
   982                           
   983                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 704:       
      +                                        flags |= (1 << 3);
   984  000682  8676               	bsf	_flags,3,c
   985  000684  D7F2               	goto	l1782
   986  000686                     l1796:
   987                           
   988                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 708:       
      +                                        flags |= (1 << 4);
   989  000686  8876               	bsf	_flags,4,c
   990  000688  D7F0               	goto	l1782
   991  00068A                     l1800:
   992                           
   993                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 712:       
      +                                        done = 1;
   994  00068A  0E00               	movlw	0
   995  00068C  6E53               	movwf	vfpfcnvrt@done+1,c
   996  00068E  0E01               	movlw	1
   997  000690                     L1:
   998  000690  6E52               	movwf	vfpfcnvrt@done,c
   999                           
  1000                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 713:       
      +                                        break;
  1001  000692  D021               	goto	l1806
  1002  000694                     l1804:
  1003  000694  C042  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1004  000698  C043  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1005  00069C  CFDE FFF6          	movff	postinc2,tblptrl
  1006  0006A0  CFDD FFF7          	movff	postdec2,tblptrh
  1007  0006A4                     	if	0	;tblptru may be non-zero
  1008  0006A4                     	endif
  1009  0006A4                     	if	0	;tblptru may be non-zero
  1010  0006A4                     	endif
  1011  0006A4  0008               	tblrd		*
  1012  0006A6  50F5               	movf	tablat,w,c
  1013  0006A8  6E46               	movwf	??_vfpfcnvrt& (0+255),c
  1014  0006AA  6A47               	clrf	(??_vfpfcnvrt+1)& (0+255),c
  1015                           
  1016                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1017                           ; Switch size 1, requested type "simple"
  1018                           ; Number of cases is 1, Range of values is 0 to 0
  1019                           ; switch strategies available:
  1020                           ; Name         Instructions Cycles
  1021                           ; simple_byte            4     3 (average)
  1022                           ;	Chosen strategy is simple_byte
  1023  0006AC  5047               	movf	??_vfpfcnvrt+1,w,c
  1024  0006AE  0A00               	xorlw	0	; case 0
  1025  0006B0  A4D8               	btfss	status,2,c
  1026  0006B2  D7EB               	goto	l1800
  1027                           
  1028                           ; Switch size 1, requested type "simple"
  1029                           ; Number of cases is 5, Range of values is 32 to 48
  1030                           ; switch strategies available:
  1031                           ; Name         Instructions Cycles
  1032                           ; simple_byte           16     9 (average)
  1033                           ;	Chosen strategy is simple_byte
  1034  0006B4  5046               	movf	??_vfpfcnvrt,w,c
  1035  0006B6  0A20               	xorlw	32	; case 32
  1036  0006B8  B4D8               	btfsc	status,2,c
  1037  0006BA  D7E3               	goto	l1792
  1038  0006BC  0A03               	xorlw	3	; case 35
  1039  0006BE  B4D8               	btfsc	status,2,c
  1040  0006C0  D7E2               	goto	l1796
  1041  0006C2  0A08               	xorlw	8	; case 43
  1042  0006C4  B4D8               	btfsc	status,2,c
  1043  0006C6  D7DB               	goto	l1788
  1044  0006C8  0A06               	xorlw	6	; case 45
  1045  0006CA  B4D8               	btfsc	status,2,c
  1046  0006CC  D7CD               	goto	l1780
  1047  0006CE  0A1D               	xorlw	29	; case 48
  1048  0006D0  B4D8               	btfsc	status,2,c
  1049  0006D2  D7D3               	goto	l1784
  1050  0006D4  D7DA               	goto	l1800
  1051  0006D6                     l1806:
  1052                           
  1053                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 689:       
      +                            while (!done) {
  1054  0006D6  5052               	movf	vfpfcnvrt@done,w,c
  1055  0006D8  1053               	iorwf	vfpfcnvrt@done+1,w,c
  1056  0006DA  B4D8               	btfsc	status,2,c
  1057  0006DC  D7DB               	goto	l1804
  1058                           
  1059                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 716:       
      +                            if (flags & (1 << 0)) {
  1060  0006DE  B076               	btfsc	_flags,0,c
  1061                           
  1062                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 717:       
      +                                flags &= ~(1 << 1);
  1063  0006E0  9276               	bcf	_flags,1,c
  1064                           
  1065                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 723:       
      +                            if ((*fmt)[0] == '*') {
  1066  0006E2  C042  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1067  0006E6  C043  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1068  0006EA  CFDE FFF6          	movff	postinc2,tblptrl
  1069  0006EE  CFDD FFF7          	movff	postdec2,tblptrh
  1070  0006F2                     	if	0	;tblptru may be non-zero
  1071  0006F2                     	endif
  1072  0006F2                     	if	0	;tblptru may be non-zero
  1073  0006F2                     	endif
  1074  0006F2  0008               	tblrd		*
  1075  0006F4  50F5               	movf	tablat,w,c
  1076  0006F6  0A2A               	xorlw	42
  1077  0006F8  A4D8               	btfss	status,2,c
  1078  0006FA  D023               	goto	l1818
  1079                           
  1080                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 724:       
      +                                ++*fmt;
  1081  0006FC  C042  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1082  000700  C043  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1083  000704  2ADE               	incf	postinc2,f,c
  1084  000706  0E00               	movlw	0
  1085  000708  22DD               	addwfc	postdec2,f,c
  1086                           
  1087                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 725:       
      +                                width = (*(int *)__va_arg(*(int **)ap, (int)0));
  1088  00070A  C044  FFD9         	movff	vfpfcnvrt@ap,fsr2l
  1089  00070E  C045  FFDA         	movff	vfpfcnvrt@ap+1,fsr2h
  1090  000712  CFDF F046          	movff	indf2,??_vfpfcnvrt
  1091  000716  0E02               	movlw	2
  1092  000718  26DE               	addwf	postinc2,f,c
  1093  00071A  CFDF F047          	movff	indf2,??_vfpfcnvrt+1
  1094  00071E  0E00               	movlw	0
  1095  000720  22DD               	addwfc	postdec2,f,c
  1096  000722  C046  FFD9         	movff	??_vfpfcnvrt,fsr2l
  1097  000726  C047  FFDA         	movff	??_vfpfcnvrt+1,fsr2h
  1098  00072A  CFDE F072          	movff	postinc2,_width
  1099  00072E  CFDD F073          	movff	postdec2,_width+1
  1100                           
  1101                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 726:       
      +                                if (width < 0) {
  1102  000732  AE73               	btfss	_width+1,7,c
  1103  000734  D03F               	goto	u1340
  1104                           
  1105                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 727:       
      +                                    flags |= (1 << 0);
  1106  000736  8076               	bsf	_flags,0,c
  1107                           
  1108                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 728:       
      +                                    width = -width;
  1109  000738  6C72               	negf	_width,c
  1110  00073A  1E73               	comf	_width+1,f,c
  1111  00073C  B0D8               	btfsc	status,0,c
  1112  00073E  2A73               	incf	_width+1,f,c
  1113  000740  D039               	goto	u1340
  1114  000742                     l1818:
  1115                           
  1116                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 731:       
      +                                width = atoi(*fmt);
  1117  000742  C042  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1118  000746  C043  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1119  00074A  CFDE F008          	movff	postinc2,atoi@s
  1120  00074E  CFDD F009          	movff	postdec2,atoi@s+1
  1121  000752  EC41  F006         	call	_atoi	;wreg free
  1122  000756  C008  F072         	movff	?_atoi,_width
  1123  00075A  C009  F073         	movff	?_atoi+1,_width+1
  1124                           
  1125                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 732:       
      +                                while ((0 ? isdigit((*fmt)[0]) : ((unsigned)((*fmt)[0])-'0') < 10)) {
  1126  00075E  D007               	goto	l1822
  1127  000760                     l1820:
  1128                           
  1129                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 733:       
      +                                    ++*fmt;
  1130  000760  C042  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1131  000764  C043  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1132  000768  2ADE               	incf	postinc2,f,c
  1133  00076A  0E00               	movlw	0
  1134  00076C  22DD               	addwfc	postdec2,f,c
  1135  00076E                     l1822:
  1136  00076E  0ED0               	movlw	208
  1137  000770  6E46               	movwf	??_vfpfcnvrt& (0+255),c
  1138  000772  0EFF               	movlw	255
  1139  000774  6E47               	movwf	(??_vfpfcnvrt+1)& (0+255),c
  1140  000776  C042  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1141  00077A  C043  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1142  00077E  CFDE FFF6          	movff	postinc2,tblptrl
  1143  000782  CFDD FFF7          	movff	postdec2,tblptrh
  1144  000786                     	if	0	;tblptru may be non-zero
  1145  000786                     	endif
  1146  000786                     	if	0	;tblptru may be non-zero
  1147  000786                     	endif
  1148  000786  0008               	tblrd		*
  1149  000788  50F5               	movf	tablat,w,c
  1150  00078A  6E48               	movwf	(??_vfpfcnvrt+2)& (0+255),c
  1151  00078C  6A49               	clrf	(??_vfpfcnvrt+3)& (0+255),c
  1152  00078E  5046               	movf	??_vfpfcnvrt,w,c
  1153  000790  2648               	addwf	??_vfpfcnvrt+2,f,c
  1154  000792  5047               	movf	??_vfpfcnvrt+1,w,c
  1155  000794  2249               	addwfc	??_vfpfcnvrt+3,f,c
  1156  000796  5049               	movf	??_vfpfcnvrt+3,w,c
  1157  000798  E106               	bnz	u1320
  1158  00079A  0E0A               	movlw	10
  1159  00079C  5C48               	subwf	??_vfpfcnvrt+2,w,c
  1160  00079E  B0D8               	btfsc	status,0,c
  1161  0007A0  D002               	goto	u1320
  1162  0007A2  0E01               	movlw	1
  1163  0007A4  D001               	goto	u1330
  1164  0007A6                     u1320:
  1165  0007A6  0E00               	movlw	0
  1166  0007A8                     u1330:
  1167  0007A8  6E54               	movwf	_vfpfcnvrt$406,c
  1168  0007AA  6A55               	clrf	_vfpfcnvrt$406+1,c
  1169  0007AC  5054               	movf	_vfpfcnvrt$406,w,c
  1170  0007AE  1055               	iorwf	_vfpfcnvrt$406+1,w,c
  1171  0007B0  A4D8               	btfss	status,2,c
  1172  0007B2  D7D6               	goto	l1820
  1173  0007B4                     u1340:
  1174                           
  1175                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 825:       
      +                            if ((*fmt[0] == 'd') || (*fmt[0] == 'i')) {
  1176  0007B4  C042  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1177  0007B8  C043  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1178  0007BC  CFDE FFF6          	movff	postinc2,tblptrl
  1179  0007C0  CFDD FFF7          	movff	postdec2,tblptrh
  1180  0007C4                     	if	0	;tblptru may be non-zero
  1181  0007C4                     	endif
  1182  0007C4                     	if	0	;tblptru may be non-zero
  1183  0007C4                     	endif
  1184  0007C4  0008               	tblrd		*
  1185  0007C6  50F5               	movf	tablat,w,c
  1186  0007C8  0A64               	xorlw	100
  1187  0007CA  B4D8               	btfsc	status,2,c
  1188  0007CC  D00D               	goto	u1360
  1189  0007CE  C042  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1190  0007D2  C043  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1191  0007D6  CFDE FFF6          	movff	postinc2,tblptrl
  1192  0007DA  CFDD FFF7          	movff	postdec2,tblptrh
  1193  0007DE                     	if	0	;tblptru may be non-zero
  1194  0007DE                     	endif
  1195  0007DE                     	if	0	;tblptru may be non-zero
  1196  0007DE                     	endif
  1197  0007DE  0008               	tblrd		*
  1198  0007E0  50F5               	movf	tablat,w,c
  1199  0007E2  0A69               	xorlw	105
  1200  0007E4  A4D8               	btfss	status,2,c
  1201  0007E6  D03F               	goto	l1838
  1202  0007E8                     u1360:
  1203                           
  1204                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 827:       
      +                                ++*fmt;
  1205  0007E8  C042  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1206  0007EC  C043  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1207  0007F0  2ADE               	incf	postinc2,f,c
  1208  0007F2  0E00               	movlw	0
  1209  0007F4  22DD               	addwfc	postdec2,f,c
  1210                           
  1211                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 828:       
      +                                ll = (long long)(*(int *)__va_arg(*(int **)ap, (int)0));
  1212  0007F6  C044  FFD9         	movff	vfpfcnvrt@ap,fsr2l
  1213  0007FA  C045  FFDA         	movff	vfpfcnvrt@ap+1,fsr2h
  1214  0007FE  CFDF F046          	movff	indf2,??_vfpfcnvrt
  1215  000802  0E02               	movlw	2
  1216  000804  26DE               	addwf	postinc2,f,c
  1217  000806  CFDF F047          	movff	indf2,??_vfpfcnvrt+1
  1218  00080A  0E00               	movlw	0
  1219  00080C  22DD               	addwfc	postdec2,f,c
  1220  00080E  C046  FFD9         	movff	??_vfpfcnvrt,fsr2l
  1221  000812  C047  FFDA         	movff	??_vfpfcnvrt+1,fsr2h
  1222  000816  CFDE F04A          	movff	postinc2,vfpfcnvrt@ll
  1223  00081A  CFDD F04B          	movff	postdec2,vfpfcnvrt@ll+1
  1224  00081E  0E00               	movlw	0
  1225  000820  BE4B               	btfsc	vfpfcnvrt@ll+1,7,c
  1226  000822  0EFF               	movlw	-1
  1227  000824  6E4C               	movwf	vfpfcnvrt@ll+2,c
  1228  000826  6E4D               	movwf	vfpfcnvrt@ll+3,c
  1229  000828  6E4E               	movwf	vfpfcnvrt@ll+4,c
  1230  00082A  6E4F               	movwf	vfpfcnvrt@ll+5,c
  1231  00082C  6E50               	movwf	vfpfcnvrt@ll+6,c
  1232  00082E  6E51               	movwf	vfpfcnvrt@ll+7,c
  1233                           
  1234                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 830:       
      +                                return dtoa(fp, ll);
  1235  000830  C040  F01C         	movff	vfpfcnvrt@fp,dtoa@fp
  1236  000834  C041  F01D         	movff	vfpfcnvrt@fp+1,dtoa@fp+1
  1237  000838  C04A  F01E         	movff	vfpfcnvrt@ll,dtoa@d
  1238  00083C  C04B  F01F         	movff	vfpfcnvrt@ll+1,dtoa@d+1
  1239  000840  C04C  F020         	movff	vfpfcnvrt@ll+2,dtoa@d+2
  1240  000844  C04D  F021         	movff	vfpfcnvrt@ll+3,dtoa@d+3
  1241  000848  C04E  F022         	movff	vfpfcnvrt@ll+4,dtoa@d+4
  1242  00084C  C04F  F023         	movff	vfpfcnvrt@ll+5,dtoa@d+5
  1243  000850  C050  F024         	movff	vfpfcnvrt@ll+6,dtoa@d+6
  1244  000854  C051  F025         	movff	vfpfcnvrt@ll+7,dtoa@d+7
  1245  000858  EC7C  F004         	call	_dtoa	;wreg free
  1246  00085C  C01C  F040         	movff	?_dtoa,?_vfpfcnvrt
  1247  000860  C01D  F041         	movff	?_dtoa+1,?_vfpfcnvrt+1
  1248  000864  0012               	return	
  1249  000866                     l1838:
  1250                           
  1251                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1350:      
      +                             if ((*fmt)[0] == '%') {
  1252  000866  C042  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1253  00086A  C043  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1254  00086E  CFDE FFF6          	movff	postinc2,tblptrl
  1255  000872  CFDD FFF7          	movff	postdec2,tblptrh
  1256  000876                     	if	0	;tblptru may be non-zero
  1257  000876                     	endif
  1258  000876                     	if	0	;tblptru may be non-zero
  1259  000876                     	endif
  1260  000876  0008               	tblrd		*
  1261  000878  50F5               	movf	tablat,w,c
  1262  00087A  0A25               	xorlw	37
  1263  00087C  A4D8               	btfss	status,2,c
  1264  00087E  D016               	goto	l1848
  1265                           
  1266                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1351:      
      +                                 ++*fmt;
  1267  000880  C042  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1268  000884  C043  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1269  000888  2ADE               	incf	postinc2,f,c
  1270  00088A  0E00               	movlw	0
  1271  00088C  22DD               	addwfc	postdec2,f,c
  1272                           
  1273                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1352:      
      +                                 fputc((int)'%', fp);
  1274  00088E  0E00               	movlw	0
  1275  000890  6E02               	movwf	fputc@c+1,c
  1276  000892  0E25               	movlw	37
  1277  000894  6E01               	movwf	fputc@c,c
  1278  000896  C040  F003         	movff	vfpfcnvrt@fp,fputc@fp
  1279  00089A  C041  F004         	movff	vfpfcnvrt@fp+1,fputc@fp+1
  1280  00089E  EC4B  F008         	call	_fputc	;wreg free
  1281  0008A2                     l1844:
  1282                           
  1283                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1353:      
      +                                 return 1;
  1284  0008A2  0E00               	movlw	0
  1285  0008A4  6E41               	movwf	?_vfpfcnvrt+1,c
  1286  0008A6  0E01               	movlw	1
  1287  0008A8  6E40               	movwf	?_vfpfcnvrt,c
  1288  0008AA  0012               	return	
  1289  0008AC                     l1848:
  1290                           
  1291                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1357:      
      +                             ++*fmt;
  1292  0008AC  C042  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1293  0008B0  C043  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1294  0008B4  2ADE               	incf	postinc2,f,c
  1295  0008B6  0E00               	movlw	0
  1296  0008B8  22DD               	addwfc	postdec2,f,c
  1297                           
  1298                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1358:      
      +                             return 0;
  1299  0008BA  0E00               	movlw	0
  1300  0008BC  6E41               	movwf	?_vfpfcnvrt+1,c
  1301  0008BE  0E00               	movlw	0
  1302  0008C0  6E40               	movwf	?_vfpfcnvrt,c
  1303  0008C2  0012               	return	
  1304  0008C4                     l1854:
  1305                           
  1306                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1362:     f
      +                          putc((int)(*fmt)[0], fp);
  1307  0008C4  C042  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1308  0008C8  C043  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1309  0008CC  CFDE FFF6          	movff	postinc2,tblptrl
  1310  0008D0  CFDD FFF7          	movff	postdec2,tblptrh
  1311  0008D4                     	if	0	;tblptru may be non-zero
  1312  0008D4                     	endif
  1313  0008D4                     	if	0	;tblptru may be non-zero
  1314  0008D4                     	endif
  1315  0008D4  0008               	tblrd		*
  1316  0008D6  50F5               	movf	tablat,w,c
  1317  0008D8  6E01               	movwf	fputc@c,c
  1318  0008DA  6A02               	clrf	fputc@c+1,c
  1319  0008DC  C040  F003         	movff	vfpfcnvrt@fp,fputc@fp
  1320  0008E0  C041  F004         	movff	vfpfcnvrt@fp+1,fputc@fp+1
  1321  0008E4  EC4B  F008         	call	_fputc	;wreg free
  1322                           
  1323                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1363:     +
      +                          +*fmt;
  1324  0008E8  C042  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1325  0008EC  C043  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1326  0008F0  2ADE               	incf	postinc2,f,c
  1327  0008F2  0E00               	movlw	0
  1328  0008F4  22DD               	addwfc	postdec2,f,c
  1329  0008F6  D7D5               	goto	l1844
  1330  0008F8                     __end_of_vfpfcnvrt:
  1331                           	opt callstack 0
  1332                           
  1333 ;; *************** function _dtoa *****************
  1334 ;; Defined at:
  1335 ;;		line 274 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c"
  1336 ;; Parameters:    Size  Location     Type
  1337 ;;  fp              2   27[COMRAM] PTR struct _IO_FILE
  1338 ;;		 -> sprintf@f(6), 
  1339 ;;  d               8   29[COMRAM] long long 
  1340 ;; Auto vars:     Size  Location     Type
  1341 ;;  n               8   53[COMRAM] long long 
  1342 ;;  i               2   61[COMRAM] int 
  1343 ;;  s               2   51[COMRAM] int 
  1344 ;;  w               2   49[COMRAM] int 
  1345 ;;  p               2   47[COMRAM] int 
  1346 ;; Return value:  Size  Location     Type
  1347 ;;                  2   27[COMRAM] int 
  1348 ;; Registers used:
  1349 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  1350 ;; Tracked objects:
  1351 ;;		On entry : 0/0
  1352 ;;		On exit  : 0/0
  1353 ;;		Unchanged: 0/0
  1354 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1355 ;;      Params:        10       0       0       0       0       0       0
  1356 ;;      Locals:        18       0       0       0       0       0       0
  1357 ;;      Temps:          8       0       0       0       0       0       0
  1358 ;;      Totals:        36       0       0       0       0       0       0
  1359 ;;Total ram usage:       36 bytes
  1360 ;; Hardware stack levels used:    1
  1361 ;; Hardware stack levels required when called:    5
  1362 ;; This function calls:
  1363 ;;		___aodiv
  1364 ;;		___aomod
  1365 ;;		_abs
  1366 ;;		_pad
  1367 ;; This function is called by:
  1368 ;;		_vfpfcnvrt
  1369 ;; This function uses a non-reentrant model
  1370 ;;
  1371                           
  1372                           	psect	text4
  1373  0008F8                     __ptext4:
  1374                           	opt callstack 0
  1375  0008F8                     _dtoa:
  1376                           	opt callstack 22
  1377                           
  1378                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 274: static
      +                           int dtoa(FILE *fp, long long d);C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\
      +                          c99\common\doprnt.c: 275: {;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\c
      +                          ommon\doprnt.c: 276:     int i, p, s, w;;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\
      +                          sources\c99\common\doprnt.c: 277:     long long n;;C:\Program Files (x86)\Microchip\xc8\
      +                          v2.05\pic\sources\c99\common\doprnt.c: 280:     n = d;
  1379                           
  1380                           ;incstack = 0
  1381  0008F8  C01E  F036         	movff	dtoa@d,dtoa@n
  1382  0008FC  C01F  F037         	movff	dtoa@d+1,dtoa@n+1
  1383  000900  C020  F038         	movff	dtoa@d+2,dtoa@n+2
  1384  000904  C021  F039         	movff	dtoa@d+3,dtoa@n+3
  1385  000908  C022  F03A         	movff	dtoa@d+4,dtoa@n+4
  1386  00090C  C023  F03B         	movff	dtoa@d+5,dtoa@n+5
  1387  000910  C024  F03C         	movff	dtoa@d+6,dtoa@n+6
  1388  000914  C025  F03D         	movff	dtoa@d+7,dtoa@n+7
  1389                           
  1390                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 281:     s 
      +                          = n < 0 ? 1 : 0;
  1391  000918  AE3D               	btfss	dtoa@n+7,7,c
  1392  00091A  D002               	goto	u1050
  1393  00091C  0E01               	movlw	1
  1394  00091E  D001               	goto	u1060
  1395  000920                     u1050:
  1396  000920  0E00               	movlw	0
  1397  000922                     u1060:
  1398  000922  6E34               	movwf	dtoa@s,c
  1399  000924  6A35               	clrf	dtoa@s+1,c
  1400                           
  1401                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 282:     if
      +                           (s) {
  1402  000926  5034               	movf	dtoa@s,w,c
  1403  000928  1035               	iorwf	dtoa@s+1,w,c
  1404  00092A  B4D8               	btfsc	status,2,c
  1405  00092C  D010               	goto	l1652
  1406                           
  1407                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 283:       
      +                            n = -n;
  1408  00092E  1E3D               	comf	dtoa@n+7,f,c
  1409  000930  1E3C               	comf	dtoa@n+6,f,c
  1410  000932  1E3B               	comf	dtoa@n+5,f,c
  1411  000934  1E3A               	comf	dtoa@n+4,f,c
  1412  000936  1E39               	comf	dtoa@n+3,f,c
  1413  000938  1E38               	comf	dtoa@n+2,f,c
  1414  00093A  1E37               	comf	dtoa@n+1,f,c
  1415  00093C  6C36               	negf	dtoa@n,c
  1416  00093E  0E00               	movlw	0
  1417  000940  2237               	addwfc	dtoa@n+1,f,c
  1418  000942  2238               	addwfc	dtoa@n+2,f,c
  1419  000944  2239               	addwfc	dtoa@n+3,f,c
  1420  000946  223A               	addwfc	dtoa@n+4,f,c
  1421  000948  223B               	addwfc	dtoa@n+5,f,c
  1422  00094A  223C               	addwfc	dtoa@n+6,f,c
  1423  00094C  223D               	addwfc	dtoa@n+7,f,c
  1424  00094E                     l1652:
  1425                           
  1426                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 287:     if
      +                           (!(prec < 0)) {
  1427  00094E  AE75               	btfss	_prec+1,7,c
  1428                           
  1429                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 288:       
      +                            flags &= ~(1 << 1);
  1430  000950  9276               	bcf	_flags,1,c
  1431                           
  1432                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 290:     p 
      +                          = (0 < prec) ? prec : 1;
  1433  000952  BE75               	btfsc	_prec+1,7,c
  1434  000954  D005               	goto	u1090
  1435  000956  5075               	movf	_prec+1,w,c
  1436  000958  E108               	bnz	l128
  1437  00095A  0474               	decf	_prec,w,c
  1438  00095C  B0D8               	btfsc	status,0,c
  1439  00095E  D005               	goto	l128
  1440  000960                     u1090:
  1441  000960  0E00               	movlw	0
  1442  000962  6E31               	movwf	dtoa@p+1,c
  1443  000964  0E01               	movlw	1
  1444  000966  6E30               	movwf	dtoa@p,c
  1445  000968  D004               	goto	l130
  1446  00096A                     l128:
  1447  00096A  C074  F030         	movff	_prec,dtoa@p
  1448  00096E  C075  F031         	movff	_prec+1,dtoa@p+1
  1449  000972                     l130:
  1450                           
  1451                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 291:     w 
      +                          = width;
  1452  000972  C072  F032         	movff	_width,dtoa@w
  1453  000976  C073  F033         	movff	_width+1,dtoa@w+1
  1454                           
  1455                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 292:     if
      +                           (s || (flags & (1 << 2))) {
  1456  00097A  5034               	movf	dtoa@s,w,c
  1457  00097C  1035               	iorwf	dtoa@s+1,w,c
  1458  00097E  A4D8               	btfss	status,2,c
  1459  000980  D002               	goto	u1110
  1460  000982  A476               	btfss	_flags,2,c
  1461  000984  D003               	goto	l1666
  1462  000986                     u1110:
  1463                           
  1464                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 293:       
      +                            --w;
  1465  000986  0632               	decf	dtoa@w,f,c
  1466  000988  A0D8               	btfss	status,0,c
  1467  00098A  0633               	decf	dtoa@w+1,f,c
  1468  00098C                     l1666:
  1469                           
  1470                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 297:     i 
      +                          = sizeof(dbuf) - 1;
  1471  00098C  0E00               	movlw	0
  1472  00098E  6E3F               	movwf	dtoa@i+1,c
  1473  000990  0E1F               	movlw	31
  1474  000992  6E3E               	movwf	dtoa@i,c
  1475                           
  1476                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 298:     db
      +                          uf[i] = '\0';
  1477  000994  0E00               	movlw	0
  1478  000996  0100               	movlb	0	; () banked
  1479  000998  6F9F               	movwf	(_dbuf+31)& (0+255),b
  1480                           
  1481                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 299:     wh
      +                          ile (!(i < 1) && (n || (0 < p) || ((0 < w) && (flags & (1 << 1))))) {
  1482  00099A  D07C               	goto	l1680
  1483  00099C                     l1670:
  1484                           
  1485                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 300:       
      +                            --i;
  1486  00099C  063E               	decf	dtoa@i,f,c
  1487  00099E  A0D8               	btfss	status,0,c
  1488  0009A0  063F               	decf	dtoa@i+1,f,c
  1489                           
  1490                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 301:       
      +                            dbuf[i] = '0' + abs(n % 10);
  1491  0009A2  0E80               	movlw	low _dbuf
  1492  0009A4  243E               	addwf	dtoa@i,w,c
  1493  0009A6  6ED9               	movwf	fsr2l,c
  1494  0009A8  0E00               	movlw	high _dbuf
  1495  0009AA  203F               	addwfc	dtoa@i+1,w,c
  1496  0009AC  6EDA               	movwf	fsr2h,c
  1497  0009AE  C036  F001         	movff	dtoa@n,___aomod@dividend
  1498  0009B2  C037  F002         	movff	dtoa@n+1,___aomod@dividend+1
  1499  0009B6  C038  F003         	movff	dtoa@n+2,___aomod@dividend+2
  1500  0009BA  C039  F004         	movff	dtoa@n+3,___aomod@dividend+3
  1501  0009BE  C03A  F005         	movff	dtoa@n+4,___aomod@dividend+4
  1502  0009C2  C03B  F006         	movff	dtoa@n+5,___aomod@dividend+5
  1503  0009C6  C03C  F007         	movff	dtoa@n+6,___aomod@dividend+6
  1504  0009CA  C03D  F008         	movff	dtoa@n+7,___aomod@dividend+7
  1505  0009CE  0E0A               	movlw	10
  1506  0009D0  6E09               	movwf	___aomod@divisor,c
  1507  0009D2  0E00               	movlw	0
  1508  0009D4  6E0A               	movwf	___aomod@divisor+1,c
  1509  0009D6  0E00               	movlw	0
  1510  0009D8  6E0B               	movwf	___aomod@divisor+2,c
  1511  0009DA  0E00               	movlw	0
  1512  0009DC  6E0C               	movwf	___aomod@divisor+3,c
  1513  0009DE  0E00               	movlw	0
  1514  0009E0  6E0D               	movwf	___aomod@divisor+4,c
  1515  0009E2  0E00               	movlw	0
  1516  0009E4  6E0E               	movwf	___aomod@divisor+5,c
  1517  0009E6  0E00               	movlw	0
  1518  0009E8  6E0F               	movwf	___aomod@divisor+6,c
  1519  0009EA  0E00               	movlw	0
  1520  0009EC  6E10               	movwf	___aomod@divisor+7,c
  1521  0009EE  ECE1  F006         	call	___aomod	;wreg free
  1522  0009F2  C001  F026         	movff	?___aomod,??_dtoa
  1523  0009F6  C002  F027         	movff	?___aomod+1,??_dtoa+1
  1524  0009FA  C003  F028         	movff	?___aomod+2,??_dtoa+2
  1525  0009FE  C004  F029         	movff	?___aomod+3,??_dtoa+3
  1526  000A02  C005  F02A         	movff	?___aomod+4,??_dtoa+4
  1527  000A06  C006  F02B         	movff	?___aomod+5,??_dtoa+5
  1528  000A0A  C007  F02C         	movff	?___aomod+6,??_dtoa+6
  1529  000A0E  C008  F02D         	movff	?___aomod+7,??_dtoa+7
  1530  000A12  C026  F013         	movff	??_dtoa,abs@a
  1531  000A16  C028  F014         	movff	??_dtoa+2,abs@a+1
  1532  000A1A  EC2B  F00A         	call	_abs	;wreg free
  1533  000A1E  5013               	movf	?_abs,w,c
  1534  000A20  0F30               	addlw	48
  1535  000A22  6EDF               	movwf	indf2,c
  1536                           
  1537                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 302:       
      +                            --p;
  1538  000A24  0630               	decf	dtoa@p,f,c
  1539  000A26  A0D8               	btfss	status,0,c
  1540  000A28  0631               	decf	dtoa@p+1,f,c
  1541                           
  1542                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 303:       
      +                            --w;
  1543  000A2A  0632               	decf	dtoa@w,f,c
  1544  000A2C  A0D8               	btfss	status,0,c
  1545  000A2E  0633               	decf	dtoa@w+1,f,c
  1546                           
  1547                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 304:       
      +                            n = n / 10;
  1548  000A30  C036  F001         	movff	dtoa@n,___aodiv@dividend
  1549  000A34  C037  F002         	movff	dtoa@n+1,___aodiv@dividend+1
  1550  000A38  C038  F003         	movff	dtoa@n+2,___aodiv@dividend+2
  1551  000A3C  C039  F004         	movff	dtoa@n+3,___aodiv@dividend+3
  1552  000A40  C03A  F005         	movff	dtoa@n+4,___aodiv@dividend+4
  1553  000A44  C03B  F006         	movff	dtoa@n+5,___aodiv@dividend+5
  1554  000A48  C03C  F007         	movff	dtoa@n+6,___aodiv@dividend+6
  1555  000A4C  C03D  F008         	movff	dtoa@n+7,___aodiv@dividend+7
  1556  000A50  0E0A               	movlw	10
  1557  000A52  6E09               	movwf	___aodiv@divisor,c
  1558  000A54  0E00               	movlw	0
  1559  000A56  6E0A               	movwf	___aodiv@divisor+1,c
  1560  000A58  0E00               	movlw	0
  1561  000A5A  6E0B               	movwf	___aodiv@divisor+2,c
  1562  000A5C  0E00               	movlw	0
  1563  000A5E  6E0C               	movwf	___aodiv@divisor+3,c
  1564  000A60  0E00               	movlw	0
  1565  000A62  6E0D               	movwf	___aodiv@divisor+4,c
  1566  000A64  0E00               	movlw	0
  1567  000A66  6E0E               	movwf	___aodiv@divisor+5,c
  1568  000A68  0E00               	movlw	0
  1569  000A6A  6E0F               	movwf	___aodiv@divisor+6,c
  1570  000A6C  0E00               	movlw	0
  1571  000A6E  6E10               	movwf	___aodiv@divisor+7,c
  1572  000A70  EC9D  F005         	call	___aodiv	;wreg free
  1573  000A74  C001  F036         	movff	?___aodiv,dtoa@n
  1574  000A78  C002  F037         	movff	?___aodiv+1,dtoa@n+1
  1575  000A7C  C003  F038         	movff	?___aodiv+2,dtoa@n+2
  1576  000A80  C004  F039         	movff	?___aodiv+3,dtoa@n+3
  1577  000A84  C005  F03A         	movff	?___aodiv+4,dtoa@n+4
  1578  000A88  C006  F03B         	movff	?___aodiv+5,dtoa@n+5
  1579  000A8C  C007  F03C         	movff	?___aodiv+6,dtoa@n+6
  1580  000A90  C008  F03D         	movff	?___aodiv+7,dtoa@n+7
  1581  000A94                     l1680:
  1582                           
  1583                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 299:     wh
      +                          ile (!(i < 1) && (n || (0 < p) || ((0 < w) && (flags & (1 << 1))))) {
  1584  000A94  BE3F               	btfsc	dtoa@i+1,7,c
  1585  000A96  D01F               	goto	u1160
  1586  000A98  503F               	movf	dtoa@i+1,w,c
  1587  000A9A  E103               	bnz	u1120
  1588  000A9C  043E               	decf	dtoa@i,w,c
  1589  000A9E  A0D8               	btfss	status,0,c
  1590  000AA0  D01A               	goto	u1160
  1591  000AA2                     u1120:
  1592  000AA2  5036               	movf	dtoa@n,w,c
  1593  000AA4  1037               	iorwf	dtoa@n+1,w,c
  1594  000AA6  1038               	iorwf	dtoa@n+2,w,c
  1595  000AA8  1039               	iorwf	dtoa@n+3,w,c
  1596  000AAA  103A               	iorwf	dtoa@n+4,w,c
  1597  000AAC  103B               	iorwf	dtoa@n+5,w,c
  1598  000AAE  103C               	iorwf	dtoa@n+6,w,c
  1599  000AB0  103D               	iorwf	dtoa@n+7,w,c
  1600  000AB2  A4D8               	btfss	status,2,c
  1601  000AB4  D773               	goto	l1670
  1602  000AB6  BE31               	btfsc	dtoa@p+1,7,c
  1603  000AB8  D005               	goto	u1140
  1604  000ABA  5031               	movf	dtoa@p+1,w,c
  1605  000ABC  E102               	bnz	u1141
  1606  000ABE  0430               	decf	dtoa@p,w,c
  1607  000AC0  B0D8               	btfsc	status,0,c
  1608  000AC2                     u1141:
  1609  000AC2  D76C               	goto	l1670
  1610  000AC4                     u1140:
  1611  000AC4  BE33               	btfsc	dtoa@w+1,7,c
  1612  000AC6  D007               	goto	u1160
  1613  000AC8  5033               	movf	dtoa@w+1,w,c
  1614  000ACA  E103               	bnz	u1150
  1615  000ACC  0432               	decf	dtoa@w,w,c
  1616  000ACE  A0D8               	btfss	status,0,c
  1617  000AD0  D002               	goto	u1160
  1618  000AD2                     u1150:
  1619  000AD2  B276               	btfsc	_flags,1,c
  1620  000AD4  D763               	goto	l1670
  1621  000AD6                     u1160:
  1622                           
  1623                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 308:     if
      +                           (s || (flags & (1 << 2))) {
  1624  000AD6  5034               	movf	dtoa@s,w,c
  1625  000AD8  1035               	iorwf	dtoa@s+1,w,c
  1626  000ADA  A4D8               	btfss	status,2,c
  1627  000ADC  D002               	goto	u1180
  1628  000ADE  A476               	btfss	_flags,2,c
  1629  000AE0  D017               	goto	l1704
  1630  000AE2                     u1180:
  1631                           
  1632                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 309:       
      +                            --i;
  1633  000AE2  063E               	decf	dtoa@i,f,c
  1634  000AE4  A0D8               	btfss	status,0,c
  1635  000AE6  063F               	decf	dtoa@i+1,f,c
  1636                           
  1637                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 310:       
      +                            dbuf[i] = s ? '-' : '+';
  1638  000AE8  5034               	movf	dtoa@s,w,c
  1639  000AEA  1035               	iorwf	dtoa@s+1,w,c
  1640  000AEC  A4D8               	btfss	status,2,c
  1641  000AEE  D004               	goto	l1700
  1642  000AF0  0E00               	movlw	0
  1643  000AF2  6E2F               	movwf	_dtoa$391+1,c
  1644  000AF4  0E2B               	movlw	43
  1645  000AF6  D003               	goto	L2
  1646  000AF8                     l1700:
  1647  000AF8  0E00               	movlw	0
  1648  000AFA  6E2F               	movwf	_dtoa$391+1,c
  1649  000AFC  0E2D               	movlw	45
  1650  000AFE                     L2:
  1651  000AFE  6E2E               	movwf	_dtoa$391,c
  1652  000B00  0E80               	movlw	low _dbuf
  1653  000B02  243E               	addwf	dtoa@i,w,c
  1654  000B04  6ED9               	movwf	fsr2l,c
  1655  000B06  0E00               	movlw	high _dbuf
  1656  000B08  203F               	addwfc	dtoa@i+1,w,c
  1657  000B0A  6EDA               	movwf	fsr2h,c
  1658  000B0C  C02E  FFDF         	movff	_dtoa$391,indf2
  1659  000B10                     l1704:
  1660                           
  1661                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 314:     re
      +                          turn pad(fp, &dbuf[i], w);
  1662  000B10  C01C  F011         	movff	dtoa@fp,pad@fp
  1663  000B14  C01D  F012         	movff	dtoa@fp+1,pad@fp+1
  1664  000B18  0E80               	movlw	low _dbuf
  1665  000B1A  243E               	addwf	dtoa@i,w,c
  1666  000B1C  6E13               	movwf	pad@buf,c
  1667  000B1E  0E00               	movlw	high _dbuf
  1668  000B20  203F               	addwfc	dtoa@i+1,w,c
  1669  000B22  6E14               	movwf	pad@buf+1,c
  1670  000B24  C032  F015         	movff	dtoa@w,pad@p
  1671  000B28  C033  F016         	movff	dtoa@w+1,pad@p+1
  1672  000B2C  EC9B  F008         	call	_pad	;wreg free
  1673  000B30  C011  F01C         	movff	?_pad,?_dtoa
  1674  000B34  C012  F01D         	movff	?_pad+1,?_dtoa+1
  1675  000B38  0012               	return		;funcret
  1676  000B3A                     __end_of_dtoa:
  1677                           	opt callstack 0
  1678                           
  1679 ;; *************** function _pad *****************
  1680 ;; Defined at:
  1681 ;;		line 72 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c"
  1682 ;; Parameters:    Size  Location     Type
  1683 ;;  fp              2   16[COMRAM] PTR struct _IO_FILE
  1684 ;;		 -> sprintf@f(6), 
  1685 ;;  buf             2   18[COMRAM] PTR unsigned char 
  1686 ;;		 -> dbuf(32), 
  1687 ;;  p               2   20[COMRAM] int 
  1688 ;; Auto vars:     Size  Location     Type
  1689 ;;  w               2   25[COMRAM] int 
  1690 ;;  i               2   23[COMRAM] int 
  1691 ;; Return value:  Size  Location     Type
  1692 ;;                  2   16[COMRAM] int 
  1693 ;; Registers used:
  1694 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  1695 ;; Tracked objects:
  1696 ;;		On entry : 0/0
  1697 ;;		On exit  : 0/0
  1698 ;;		Unchanged: 0/0
  1699 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1700 ;;      Params:         6       0       0       0       0       0       0
  1701 ;;      Locals:         4       0       0       0       0       0       0
  1702 ;;      Temps:          1       0       0       0       0       0       0
  1703 ;;      Totals:        11       0       0       0       0       0       0
  1704 ;;Total ram usage:       11 bytes
  1705 ;; Hardware stack levels used:    1
  1706 ;; Hardware stack levels required when called:    4
  1707 ;; This function calls:
  1708 ;;		_fputc
  1709 ;;		_fputs
  1710 ;;		_strlen
  1711 ;; This function is called by:
  1712 ;;		_dtoa
  1713 ;; This function uses a non-reentrant model
  1714 ;;
  1715                           
  1716                           	psect	text5
  1717  001136                     __ptext5:
  1718                           	opt callstack 0
  1719  001136                     _pad:
  1720                           	opt callstack 22
  1721                           
  1722                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 72: static 
      +                          int pad(FILE *fp, char *buf, int p);C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sourc
      +                          es\c99\common\doprnt.c: 73: {;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99
      +                          \common\doprnt.c: 74:     int i, w;;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sourc
      +                          es\c99\common\doprnt.c: 77:     if (flags & (1 << 0)) {
  1723                           
  1724                           ;incstack = 0
  1725  001136  A076               	btfss	_flags,0,c
  1726  001138  D00A               	goto	l1510
  1727                           
  1728                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 78:        
      +                           fputs((const char *)buf, fp);
  1729  00113A  C013  F00A         	movff	pad@buf,fputs@s
  1730  00113E  C014  F00B         	movff	pad@buf+1,fputs@s+1
  1731  001142  C011  F00C         	movff	pad@fp,fputs@fp
  1732  001146  C012  F00D         	movff	pad@fp+1,fputs@fp+1
  1733  00114A  EC0F  F00A         	call	_fputs	;wreg free
  1734  00114E                     l1510:
  1735                           
  1736                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 82:     w =
      +                           (p < 0) ? 0 : p;
  1737  00114E  BE16               	btfsc	pad@p+1,7,c
  1738  001150  D005               	goto	l1514
  1739  001152  C015  F01A         	movff	pad@p,pad@w
  1740  001156  C016  F01B         	movff	pad@p+1,pad@w+1
  1741  00115A  D004               	goto	l117
  1742  00115C                     l1514:
  1743  00115C  0E00               	movlw	0
  1744  00115E  6E1B               	movwf	pad@w+1,c
  1745  001160  0E00               	movlw	0
  1746  001162  6E1A               	movwf	pad@w,c
  1747  001164                     l117:
  1748                           
  1749                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 83:     i =
      +                           0;
  1750  001164  0E00               	movlw	0
  1751  001166  6E19               	movwf	pad@i+1,c
  1752  001168  0E00               	movlw	0
  1753  00116A  6E18               	movwf	pad@i,c
  1754                           
  1755                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 84:     whi
      +                          le (i < w) {
  1756  00116C  D00C               	goto	l1520
  1757  00116E                     l1516:
  1758                           
  1759                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 85:        
      +                           fputc(' ', fp);
  1760  00116E  0E00               	movlw	0
  1761  001170  6E02               	movwf	fputc@c+1,c
  1762  001172  0E20               	movlw	32
  1763  001174  6E01               	movwf	fputc@c,c
  1764  001176  C011  F003         	movff	pad@fp,fputc@fp
  1765  00117A  C012  F004         	movff	pad@fp+1,fputc@fp+1
  1766  00117E  EC4B  F008         	call	_fputc	;wreg free
  1767                           
  1768                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 86:        
      +                           ++i;
  1769  001182  4A18               	infsnz	pad@i,f,c
  1770  001184  2A19               	incf	pad@i+1,f,c
  1771  001186                     l1520:
  1772                           
  1773                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 84:     whi
      +                          le (i < w) {
  1774  001186  501A               	movf	pad@w,w,c
  1775  001188  5C18               	subwf	pad@i,w,c
  1776  00118A  5019               	movf	pad@i+1,w,c
  1777  00118C  0A80               	xorlw	128
  1778  00118E  6E17               	movwf	??_pad& (0+255),c
  1779  001190  501B               	movf	pad@w+1,w,c
  1780  001192  0A80               	xorlw	128
  1781  001194  5817               	subwfb	??_pad& (0+255),w,c
  1782  001196  A0D8               	btfss	status,0,c
  1783  001198  D7EA               	goto	l1516
  1784                           
  1785                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 90:     if 
      +                          (!(flags & (1 << 0))) {
  1786  00119A  B076               	btfsc	_flags,0,c
  1787  00119C  D00A               	goto	l1524
  1788                           
  1789                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 91:        
      +                           fputs((const char *)buf, fp);
  1790  00119E  C013  F00A         	movff	pad@buf,fputs@s
  1791  0011A2  C014  F00B         	movff	pad@buf+1,fputs@s+1
  1792  0011A6  C011  F00C         	movff	pad@fp,fputs@fp
  1793  0011AA  C012  F00D         	movff	pad@fp+1,fputs@fp+1
  1794  0011AE  EC0F  F00A         	call	_fputs	;wreg free
  1795  0011B2                     l1524:
  1796                           
  1797                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 94:     ret
      +                          urn strlen(buf) + w;
  1798  0011B2  C013  F001         	movff	pad@buf,strlen@s
  1799  0011B6  C014  F002         	movff	pad@buf+1,strlen@s+1
  1800  0011BA  EC5C  F00A         	call	_strlen	;wreg free
  1801  0011BE  501A               	movf	pad@w,w,c
  1802  0011C0  2401               	addwf	?_strlen,w,c
  1803  0011C2  6E11               	movwf	?_pad,c
  1804  0011C4  501B               	movf	pad@w+1,w,c
  1805  0011C6  2002               	addwfc	?_strlen+1,w,c
  1806  0011C8  6E12               	movwf	?_pad+1,c
  1807  0011CA  0012               	return		;funcret
  1808  0011CC                     __end_of_pad:
  1809                           	opt callstack 0
  1810                           
  1811 ;; *************** function _strlen *****************
  1812 ;; Defined at:
  1813 ;;		line 12 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\strlen.c"
  1814 ;; Parameters:    Size  Location     Type
  1815 ;;  s               2    0[COMRAM] PTR const unsigned char 
  1816 ;;		 -> dbuf(32), 
  1817 ;; Auto vars:     Size  Location     Type
  1818 ;;  a               2    2[COMRAM] PTR const unsigned char 
  1819 ;;		 -> dbuf(32), 
  1820 ;; Return value:  Size  Location     Type
  1821 ;;                  2    0[COMRAM] unsigned int 
  1822 ;; Registers used:
  1823 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  1824 ;; Tracked objects:
  1825 ;;		On entry : 0/0
  1826 ;;		On exit  : 0/0
  1827 ;;		Unchanged: 0/0
  1828 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1829 ;;      Params:         2       0       0       0       0       0       0
  1830 ;;      Locals:         2       0       0       0       0       0       0
  1831 ;;      Temps:          0       0       0       0       0       0       0
  1832 ;;      Totals:         4       0       0       0       0       0       0
  1833 ;;Total ram usage:        4 bytes
  1834 ;; Hardware stack levels used:    1
  1835 ;; Hardware stack levels required when called:    1
  1836 ;; This function calls:
  1837 ;;		Nothing
  1838 ;; This function is called by:
  1839 ;;		_pad
  1840 ;; This function uses a non-reentrant model
  1841 ;;
  1842                           
  1843                           	psect	text6
  1844  0014B8                     __ptext6:
  1845                           	opt callstack 0
  1846  0014B8                     _strlen:
  1847                           	opt callstack 24
  1848                           
  1849                           ;incstack = 0
  1850  0014B8  C001  F003         	movff	strlen@s,strlen@a
  1851  0014BC  C002  F004         	movff	strlen@s+1,strlen@a+1
  1852  0014C0  D002               	goto	l1500
  1853  0014C2                     l1498:
  1854  0014C2  4A01               	infsnz	strlen@s,f,c
  1855  0014C4  2A02               	incf	strlen@s+1,f,c
  1856  0014C6                     l1500:
  1857  0014C6  C001  FFD9         	movff	strlen@s,fsr2l
  1858  0014CA  C002  FFDA         	movff	strlen@s+1,fsr2h
  1859  0014CE  50DF               	movf	indf2,w,c
  1860  0014D0  A4D8               	btfss	status,2,c
  1861  0014D2  D7F7               	goto	l1498
  1862  0014D4  5003               	movf	strlen@a,w,c
  1863  0014D6  5C01               	subwf	strlen@s,w,c
  1864  0014D8  6E01               	movwf	?_strlen,c
  1865  0014DA  5004               	movf	strlen@a+1,w,c
  1866  0014DC  5802               	subwfb	strlen@s+1,w,c
  1867  0014DE  6E02               	movwf	?_strlen+1,c
  1868  0014E0  0012               	return		;funcret
  1869  0014E2                     __end_of_strlen:
  1870                           	opt callstack 0
  1871                           
  1872 ;; *************** function _fputs *****************
  1873 ;; Defined at:
  1874 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\nf_fputs.c"
  1875 ;; Parameters:    Size  Location     Type
  1876 ;;  s               2    9[COMRAM] PTR const unsigned char 
  1877 ;;		 -> dbuf(32), 
  1878 ;;  fp              2   11[COMRAM] PTR struct _IO_FILE
  1879 ;;		 -> sprintf@f(6), 
  1880 ;; Auto vars:     Size  Location     Type
  1881 ;;  i               2   14[COMRAM] int 
  1882 ;;  c               1   13[COMRAM] unsigned char 
  1883 ;; Return value:  Size  Location     Type
  1884 ;;                  2    9[COMRAM] int 
  1885 ;; Registers used:
  1886 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  1887 ;; Tracked objects:
  1888 ;;		On entry : 0/0
  1889 ;;		On exit  : 0/0
  1890 ;;		Unchanged: 0/0
  1891 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1892 ;;      Params:         4       0       0       0       0       0       0
  1893 ;;      Locals:         3       0       0       0       0       0       0
  1894 ;;      Temps:          0       0       0       0       0       0       0
  1895 ;;      Totals:         7       0       0       0       0       0       0
  1896 ;;Total ram usage:        7 bytes
  1897 ;; Hardware stack levels used:    1
  1898 ;; Hardware stack levels required when called:    3
  1899 ;; This function calls:
  1900 ;;		_fputc
  1901 ;; This function is called by:
  1902 ;;		_pad
  1903 ;; This function uses a non-reentrant model
  1904 ;;
  1905                           
  1906                           	psect	text7
  1907  00141E                     __ptext7:
  1908                           	opt callstack 0
  1909  00141E                     _fputs:
  1910                           	opt callstack 22
  1911                           
  1912                           ;incstack = 0
  1913  00141E  0E00               	movlw	0
  1914  001420  6E10               	movwf	fputs@i+1,c
  1915  001422  0E00               	movlw	0
  1916  001424  6E0F               	movwf	fputs@i,c
  1917  001426  D00B               	goto	l1494
  1918  001428                     l1490:
  1919  001428  C00E  F001         	movff	fputs@c,fputc@c
  1920  00142C  6A02               	clrf	fputc@c+1,c
  1921  00142E  C00C  F003         	movff	fputs@fp,fputc@fp
  1922  001432  C00D  F004         	movff	fputs@fp+1,fputc@fp+1
  1923  001436  EC4B  F008         	call	_fputc	;wreg free
  1924  00143A  4A0F               	infsnz	fputs@i,f,c
  1925  00143C  2A10               	incf	fputs@i+1,f,c
  1926  00143E                     l1494:
  1927  00143E  500F               	movf	fputs@i,w,c
  1928  001440  240A               	addwf	fputs@s,w,c
  1929  001442  6ED9               	movwf	fsr2l,c
  1930  001444  5010               	movf	fputs@i+1,w,c
  1931  001446  200B               	addwfc	fputs@s+1,w,c
  1932  001448  6EDA               	movwf	fsr2h,c
  1933  00144A  50DF               	movf	indf2,w,c
  1934  00144C  6E0E               	movwf	fputs@c,c
  1935  00144E  500E               	movf	fputs@c,w,c
  1936  001450  B4D8               	btfsc	status,2,c
  1937  001452  0012               	return	
  1938  001454  D7E9               	goto	l1490
  1939  001456                     __end_of_fputs:
  1940                           	opt callstack 0
  1941                           
  1942 ;; *************** function _fputc *****************
  1943 ;; Defined at:
  1944 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\nf_fputc.c"
  1945 ;; Parameters:    Size  Location     Type
  1946 ;;  c               2    0[COMRAM] int 
  1947 ;;  fp              2    2[COMRAM] PTR struct _IO_FILE
  1948 ;;		 -> sprintf@f(6), 
  1949 ;; Auto vars:     Size  Location     Type
  1950 ;;		None
  1951 ;; Return value:  Size  Location     Type
  1952 ;;                  2    0[COMRAM] int 
  1953 ;; Registers used:
  1954 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  1955 ;; Tracked objects:
  1956 ;;		On entry : 0/0
  1957 ;;		On exit  : 0/0
  1958 ;;		Unchanged: 0/0
  1959 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1960 ;;      Params:         4       0       0       0       0       0       0
  1961 ;;      Locals:         0       0       0       0       0       0       0
  1962 ;;      Temps:          5       0       0       0       0       0       0
  1963 ;;      Totals:         9       0       0       0       0       0       0
  1964 ;;Total ram usage:        9 bytes
  1965 ;; Hardware stack levels used:    1
  1966 ;; Hardware stack levels required when called:    2
  1967 ;; This function calls:
  1968 ;;		_putch
  1969 ;; This function is called by:
  1970 ;;		_pad
  1971 ;;		_vfpfcnvrt
  1972 ;;		_fputs
  1973 ;; This function uses a non-reentrant model
  1974 ;;
  1975                           
  1976                           	psect	text8
  1977  001096                     __ptext8:
  1978                           	opt callstack 0
  1979  001096                     _fputc:
  1980                           	opt callstack 25
  1981                           
  1982                           ;incstack = 0
  1983  001096  5003               	movf	fputc@fp,w,c
  1984  001098  1004               	iorwf	fputc@fp+1,w,c
  1985  00109A  B4D8               	btfsc	status,2,c
  1986  00109C  D004               	goto	u770
  1987  00109E  5003               	movf	fputc@fp,w,c
  1988  0010A0  1004               	iorwf	fputc@fp+1,w,c
  1989  0010A2  A4D8               	btfss	status,2,c
  1990  0010A4  D004               	goto	l1480
  1991  0010A6                     u770:
  1992  0010A6  5001               	movf	fputc@c,w,c
  1993  0010A8  ECB0  F00A         	call	_putch
  1994  0010AC  0012               	return	
  1995  0010AE                     l1480:
  1996  0010AE  EE20 F004          	lfsr	2,4
  1997  0010B2  5003               	movf	fputc@fp,w,c
  1998  0010B4  26D9               	addwf	fsr2l,f,c
  1999  0010B6  5004               	movf	fputc@fp+1,w,c
  2000  0010B8  22DA               	addwfc	fsr2h,f,c
  2001  0010BA  50DE               	movf	postinc2,w,c
  2002  0010BC  10DE               	iorwf	postinc2,w,c
  2003  0010BE  B4D8               	btfsc	status,2,c
  2004  0010C0  D016               	goto	u790
  2005  0010C2  EE20 F004          	lfsr	2,4
  2006  0010C6  5003               	movf	fputc@fp,w,c
  2007  0010C8  26D9               	addwf	fsr2l,f,c
  2008  0010CA  5004               	movf	fputc@fp+1,w,c
  2009  0010CC  22DA               	addwfc	fsr2h,f,c
  2010  0010CE  EE10 F002          	lfsr	1,2
  2011  0010D2  5003               	movf	fputc@fp,w,c
  2012  0010D4  26E1               	addwf	fsr1l,f,c
  2013  0010D6  5004               	movf	fputc@fp+1,w,c
  2014  0010D8  22E2               	addwfc	fsr1h,f,c
  2015  0010DA  50DE               	movf	postinc2,w,c
  2016  0010DC  5CE6               	subwf	postinc1,w,c
  2017  0010DE  50E6               	movf	postinc1,w,c
  2018  0010E0  0A80               	xorlw	128
  2019  0010E2  6E09               	movwf	(??_fputc+4)& (0+255),c
  2020  0010E4  50DE               	movf	postinc2,w,c
  2021  0010E6  0A80               	xorlw	128
  2022  0010E8  5809               	subwfb	(??_fputc+4)& (0+255),w,c
  2023  0010EA  B0D8               	btfsc	status,0,c
  2024  0010EC  0012               	return	
  2025  0010EE                     u790:
  2026  0010EE  EE20 F002          	lfsr	2,2
  2027  0010F2  5003               	movf	fputc@fp,w,c
  2028  0010F4  26D9               	addwf	fsr2l,f,c
  2029  0010F6  5004               	movf	fputc@fp+1,w,c
  2030  0010F8  22DA               	addwfc	fsr2h,f,c
  2031  0010FA  CFDE F005          	movff	postinc2,??_fputc
  2032  0010FE  CFDD F006          	movff	postdec2,??_fputc+1
  2033  001102  C003  FFD9         	movff	fputc@fp,fsr2l
  2034  001106  C004  FFDA         	movff	fputc@fp+1,fsr2h
  2035  00110A  CFDE F007          	movff	postinc2,??_fputc+2
  2036  00110E  CFDD F008          	movff	postdec2,??_fputc+3
  2037  001112  5005               	movf	??_fputc,w,c
  2038  001114  2407               	addwf	??_fputc+2,w,c
  2039  001116  6ED9               	movwf	fsr2l,c
  2040  001118  5006               	movf	??_fputc+1,w,c
  2041  00111A  2008               	addwfc	??_fputc+3,w,c
  2042  00111C  6EDA               	movwf	fsr2h,c
  2043  00111E  C001  FFDF         	movff	fputc@c,indf2
  2044  001122  EE20 F002          	lfsr	2,2
  2045  001126  5003               	movf	fputc@fp,w,c
  2046  001128  26D9               	addwf	fsr2l,f,c
  2047  00112A  5004               	movf	fputc@fp+1,w,c
  2048  00112C  22DA               	addwfc	fsr2h,f,c
  2049  00112E  2ADE               	incf	postinc2,f,c
  2050  001130  0E00               	movlw	0
  2051  001132  22DD               	addwfc	postdec2,f,c
  2052  001134  0012               	return		;funcret
  2053  001136                     __end_of_fputc:
  2054                           	opt callstack 0
  2055                           
  2056 ;; *************** function _putch *****************
  2057 ;; Defined at:
  2058 ;;		line 7 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\putch.c"
  2059 ;; Parameters:    Size  Location     Type
  2060 ;;  c               1    wreg     unsigned char 
  2061 ;; Auto vars:     Size  Location     Type
  2062 ;;  c               1    0[COMRAM] unsigned char 
  2063 ;; Return value:  Size  Location     Type
  2064 ;;                  1    wreg      void 
  2065 ;; Registers used:
  2066 ;;		wreg
  2067 ;; Tracked objects:
  2068 ;;		On entry : 0/0
  2069 ;;		On exit  : 0/0
  2070 ;;		Unchanged: 0/0
  2071 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2072 ;;      Params:         0       0       0       0       0       0       0
  2073 ;;      Locals:         0       0       0       0       0       0       0
  2074 ;;      Temps:          0       0       0       0       0       0       0
  2075 ;;      Totals:         0       0       0       0       0       0       0
  2076 ;;Total ram usage:        0 bytes
  2077 ;; Hardware stack levels used:    1
  2078 ;; Hardware stack levels required when called:    1
  2079 ;; This function calls:
  2080 ;;		Nothing
  2081 ;; This function is called by:
  2082 ;;		_fputc
  2083 ;; This function uses a non-reentrant model
  2084 ;;
  2085                           
  2086                           	psect	text9
  2087  001560                     __ptext9:
  2088                           	opt callstack 0
  2089  001560                     _putch:
  2090                           	opt callstack 25
  2091                           
  2092                           ;incstack = 0
  2093  001560  0012               	return		;funcret
  2094  001562                     __end_of_putch:
  2095                           	opt callstack 0
  2096                           
  2097 ;; *************** function _abs *****************
  2098 ;; Defined at:
  2099 ;;		line 1 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\abs.c"
  2100 ;; Parameters:    Size  Location     Type
  2101 ;;  a               2   18[COMRAM] int 
  2102 ;; Auto vars:     Size  Location     Type
  2103 ;;		None
  2104 ;; Return value:  Size  Location     Type
  2105 ;;                  2   18[COMRAM] int 
  2106 ;; Registers used:
  2107 ;;		wreg, status,2, status,0
  2108 ;; Tracked objects:
  2109 ;;		On entry : 0/0
  2110 ;;		On exit  : 0/0
  2111 ;;		Unchanged: 0/0
  2112 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2113 ;;      Params:         2       0       0       0       0       0       0
  2114 ;;      Locals:         0       0       0       0       0       0       0
  2115 ;;      Temps:          2       0       0       0       0       0       0
  2116 ;;      Totals:         4       0       0       0       0       0       0
  2117 ;;Total ram usage:        4 bytes
  2118 ;; Hardware stack levels used:    1
  2119 ;; Hardware stack levels required when called:    1
  2120 ;; This function calls:
  2121 ;;		Nothing
  2122 ;; This function is called by:
  2123 ;;		_dtoa
  2124 ;; This function uses a non-reentrant model
  2125 ;;
  2126                           
  2127                           	psect	text10
  2128  001456                     __ptext10:
  2129                           	opt callstack 0
  2130  001456                     _abs:
  2131                           	opt callstack 25
  2132                           
  2133                           ;incstack = 0
  2134  001456  BE14               	btfsc	abs@a+1,7,c
  2135  001458  D005               	goto	u860
  2136  00145A  5014               	movf	abs@a+1,w,c
  2137  00145C  E110               	bnz	l862
  2138  00145E  0413               	decf	abs@a,w,c
  2139  001460  B0D8               	btfsc	status,0,c
  2140  001462  D00D               	goto	l862
  2141  001464                     u860:
  2142  001464  C013  F015         	movff	abs@a,??_abs
  2143  001468  C014  F016         	movff	abs@a+1,??_abs+1
  2144  00146C  1E15               	comf	??_abs,f,c
  2145  00146E  1E16               	comf	??_abs+1,f,c
  2146  001470  4A15               	infsnz	??_abs,f,c
  2147  001472  2A16               	incf	??_abs+1,f,c
  2148  001474  C015  F013         	movff	??_abs,?_abs
  2149  001478  C016  F014         	movff	??_abs+1,?_abs+1
  2150  00147C  0012               	return	
  2151  00147E                     l862:
  2152  00147E  C013  F013         	movff	abs@a,?_abs
  2153  001482  C014  F014         	movff	abs@a+1,?_abs+1
  2154  001486  0012               	return		;funcret
  2155  001488                     __end_of_abs:
  2156                           	opt callstack 0
  2157                           
  2158 ;; *************** function ___aomod *****************
  2159 ;; Defined at:
  2160 ;;		line 9 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\aomod.c"
  2161 ;; Parameters:    Size  Location     Type
  2162 ;;  dividend        8    0[COMRAM] long long 
  2163 ;;  divisor         8    8[COMRAM] long long 
  2164 ;; Auto vars:     Size  Location     Type
  2165 ;;  sign            1   17[COMRAM] unsigned char 
  2166 ;;  counter         1   16[COMRAM] unsigned char 
  2167 ;; Return value:  Size  Location     Type
  2168 ;;                  8    0[COMRAM] long long 
  2169 ;; Registers used:
  2170 ;;		wreg, status,2, status,0
  2171 ;; Tracked objects:
  2172 ;;		On entry : 0/0
  2173 ;;		On exit  : 0/0
  2174 ;;		Unchanged: 0/0
  2175 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2176 ;;      Params:        16       0       0       0       0       0       0
  2177 ;;      Locals:         2       0       0       0       0       0       0
  2178 ;;      Temps:          0       0       0       0       0       0       0
  2179 ;;      Totals:        18       0       0       0       0       0       0
  2180 ;;Total ram usage:       18 bytes
  2181 ;; Hardware stack levels used:    1
  2182 ;; Hardware stack levels required when called:    1
  2183 ;; This function calls:
  2184 ;;		Nothing
  2185 ;; This function is called by:
  2186 ;;		_dtoa
  2187 ;; This function uses a non-reentrant model
  2188 ;;
  2189                           
  2190                           	psect	text11
  2191  000DC2                     __ptext11:
  2192                           	opt callstack 0
  2193  000DC2                     ___aomod:
  2194                           	opt callstack 25
  2195                           
  2196                           ;incstack = 0
  2197  000DC2  0E00               	movlw	0
  2198  000DC4  6E12               	movwf	___aomod@sign,c
  2199  000DC6  AE08               	btfss	___aomod@dividend+7,7,c
  2200  000DC8  D012               	goto	l1594
  2201  000DCA  1E08               	comf	___aomod@dividend+7,f,c
  2202  000DCC  1E07               	comf	___aomod@dividend+6,f,c
  2203  000DCE  1E06               	comf	___aomod@dividend+5,f,c
  2204  000DD0  1E05               	comf	___aomod@dividend+4,f,c
  2205  000DD2  1E04               	comf	___aomod@dividend+3,f,c
  2206  000DD4  1E03               	comf	___aomod@dividend+2,f,c
  2207  000DD6  1E02               	comf	___aomod@dividend+1,f,c
  2208  000DD8  6C01               	negf	___aomod@dividend,c
  2209  000DDA  0E00               	movlw	0
  2210  000DDC  2202               	addwfc	___aomod@dividend+1,f,c
  2211  000DDE  2203               	addwfc	___aomod@dividend+2,f,c
  2212  000DE0  2204               	addwfc	___aomod@dividend+3,f,c
  2213  000DE2  2205               	addwfc	___aomod@dividend+4,f,c
  2214  000DE4  2206               	addwfc	___aomod@dividend+5,f,c
  2215  000DE6  2207               	addwfc	___aomod@dividend+6,f,c
  2216  000DE8  2208               	addwfc	___aomod@dividend+7,f,c
  2217  000DEA  0E01               	movlw	1
  2218  000DEC  6E12               	movwf	___aomod@sign,c
  2219  000DEE                     l1594:
  2220  000DEE  AE10               	btfss	___aomod@divisor+7,7,c
  2221  000DF0  D010               	goto	l1598
  2222  000DF2  1E10               	comf	___aomod@divisor+7,f,c
  2223  000DF4  1E0F               	comf	___aomod@divisor+6,f,c
  2224  000DF6  1E0E               	comf	___aomod@divisor+5,f,c
  2225  000DF8  1E0D               	comf	___aomod@divisor+4,f,c
  2226  000DFA  1E0C               	comf	___aomod@divisor+3,f,c
  2227  000DFC  1E0B               	comf	___aomod@divisor+2,f,c
  2228  000DFE  1E0A               	comf	___aomod@divisor+1,f,c
  2229  000E00  6C09               	negf	___aomod@divisor,c
  2230  000E02  0E00               	movlw	0
  2231  000E04  220A               	addwfc	___aomod@divisor+1,f,c
  2232  000E06  220B               	addwfc	___aomod@divisor+2,f,c
  2233  000E08  220C               	addwfc	___aomod@divisor+3,f,c
  2234  000E0A  220D               	addwfc	___aomod@divisor+4,f,c
  2235  000E0C  220E               	addwfc	___aomod@divisor+5,f,c
  2236  000E0E  220F               	addwfc	___aomod@divisor+6,f,c
  2237  000E10  2210               	addwfc	___aomod@divisor+7,f,c
  2238  000E12                     l1598:
  2239  000E12  5009               	movf	___aomod@divisor,w,c
  2240  000E14  100A               	iorwf	___aomod@divisor+1,w,c
  2241  000E16  100B               	iorwf	___aomod@divisor+2,w,c
  2242  000E18  100C               	iorwf	___aomod@divisor+3,w,c
  2243  000E1A  100D               	iorwf	___aomod@divisor+4,w,c
  2244  000E1C  100E               	iorwf	___aomod@divisor+5,w,c
  2245  000E1E  100F               	iorwf	___aomod@divisor+6,w,c
  2246  000E20  1010               	iorwf	___aomod@divisor+7,w,c
  2247  000E22  B4D8               	btfsc	status,2,c
  2248  000E24  D03C               	goto	l1614
  2249  000E26  0E01               	movlw	1
  2250  000E28  6E11               	movwf	___aomod@counter,c
  2251  000E2A  D00A               	goto	l1604
  2252  000E2C                     l1602:
  2253  000E2C  90D8               	bcf	status,0,c
  2254  000E2E  3609               	rlcf	___aomod@divisor,f,c
  2255  000E30  360A               	rlcf	___aomod@divisor+1,f,c
  2256  000E32  360B               	rlcf	___aomod@divisor+2,f,c
  2257  000E34  360C               	rlcf	___aomod@divisor+3,f,c
  2258  000E36  360D               	rlcf	___aomod@divisor+4,f,c
  2259  000E38  360E               	rlcf	___aomod@divisor+5,f,c
  2260  000E3A  360F               	rlcf	___aomod@divisor+6,f,c
  2261  000E3C  3610               	rlcf	___aomod@divisor+7,f,c
  2262  000E3E  2A11               	incf	___aomod@counter,f,c
  2263  000E40                     l1604:
  2264  000E40  AE10               	btfss	___aomod@divisor+7,7,c
  2265  000E42  D7F4               	goto	l1602
  2266  000E44                     u990:
  2267  000E44  5009               	movf	___aomod@divisor,w,c
  2268  000E46  5C01               	subwf	___aomod@dividend,w,c
  2269  000E48  500A               	movf	___aomod@divisor+1,w,c
  2270  000E4A  5802               	subwfb	___aomod@dividend+1,w,c
  2271  000E4C  500B               	movf	___aomod@divisor+2,w,c
  2272  000E4E  5803               	subwfb	___aomod@dividend+2,w,c
  2273  000E50  500C               	movf	___aomod@divisor+3,w,c
  2274  000E52  5804               	subwfb	___aomod@dividend+3,w,c
  2275  000E54  500D               	movf	___aomod@divisor+4,w,c
  2276  000E56  5805               	subwfb	___aomod@dividend+4,w,c
  2277  000E58  500E               	movf	___aomod@divisor+5,w,c
  2278  000E5A  5806               	subwfb	___aomod@dividend+5,w,c
  2279  000E5C  500F               	movf	___aomod@divisor+6,w,c
  2280  000E5E  5807               	subwfb	___aomod@dividend+6,w,c
  2281  000E60  5010               	movf	___aomod@divisor+7,w,c
  2282  000E62  5808               	subwfb	___aomod@dividend+7,w,c
  2283  000E64  A0D8               	btfss	status,0,c
  2284  000E66  D010               	goto	l1610
  2285  000E68  5009               	movf	___aomod@divisor,w,c
  2286  000E6A  5E01               	subwf	___aomod@dividend,f,c
  2287  000E6C  500A               	movf	___aomod@divisor+1,w,c
  2288  000E6E  5A02               	subwfb	___aomod@dividend+1,f,c
  2289  000E70  500B               	movf	___aomod@divisor+2,w,c
  2290  000E72  5A03               	subwfb	___aomod@dividend+2,f,c
  2291  000E74  500C               	movf	___aomod@divisor+3,w,c
  2292  000E76  5A04               	subwfb	___aomod@dividend+3,f,c
  2293  000E78  500D               	movf	___aomod@divisor+4,w,c
  2294  000E7A  5A05               	subwfb	___aomod@dividend+4,f,c
  2295  000E7C  500E               	movf	___aomod@divisor+5,w,c
  2296  000E7E  5A06               	subwfb	___aomod@dividend+5,f,c
  2297  000E80  500F               	movf	___aomod@divisor+6,w,c
  2298  000E82  5A07               	subwfb	___aomod@dividend+6,f,c
  2299  000E84  5010               	movf	___aomod@divisor+7,w,c
  2300  000E86  5A08               	subwfb	___aomod@dividend+7,f,c
  2301  000E88                     l1610:
  2302  000E88  90D8               	bcf	status,0,c
  2303  000E8A  3210               	rrcf	___aomod@divisor+7,f,c
  2304  000E8C  320F               	rrcf	___aomod@divisor+6,f,c
  2305  000E8E  320E               	rrcf	___aomod@divisor+5,f,c
  2306  000E90  320D               	rrcf	___aomod@divisor+4,f,c
  2307  000E92  320C               	rrcf	___aomod@divisor+3,f,c
  2308  000E94  320B               	rrcf	___aomod@divisor+2,f,c
  2309  000E96  320A               	rrcf	___aomod@divisor+1,f,c
  2310  000E98  3209               	rrcf	___aomod@divisor,f,c
  2311  000E9A  2E11               	decfsz	___aomod@counter,f,c
  2312  000E9C  D7D3               	goto	u990
  2313  000E9E                     l1614:
  2314  000E9E  5012               	movf	___aomod@sign,w,c
  2315  000EA0  B4D8               	btfsc	status,2,c
  2316  000EA2  D010               	goto	l1618
  2317  000EA4  1E08               	comf	___aomod@dividend+7,f,c
  2318  000EA6  1E07               	comf	___aomod@dividend+6,f,c
  2319  000EA8  1E06               	comf	___aomod@dividend+5,f,c
  2320  000EAA  1E05               	comf	___aomod@dividend+4,f,c
  2321  000EAC  1E04               	comf	___aomod@dividend+3,f,c
  2322  000EAE  1E03               	comf	___aomod@dividend+2,f,c
  2323  000EB0  1E02               	comf	___aomod@dividend+1,f,c
  2324  000EB2  6C01               	negf	___aomod@dividend,c
  2325  000EB4  0E00               	movlw	0
  2326  000EB6  2202               	addwfc	___aomod@dividend+1,f,c
  2327  000EB8  2203               	addwfc	___aomod@dividend+2,f,c
  2328  000EBA  2204               	addwfc	___aomod@dividend+3,f,c
  2329  000EBC  2205               	addwfc	___aomod@dividend+4,f,c
  2330  000EBE  2206               	addwfc	___aomod@dividend+5,f,c
  2331  000EC0  2207               	addwfc	___aomod@dividend+6,f,c
  2332  000EC2  2208               	addwfc	___aomod@dividend+7,f,c
  2333  000EC4                     l1618:
  2334  000EC4  C001  F001         	movff	___aomod@dividend,?___aomod
  2335  000EC8  C002  F002         	movff	___aomod@dividend+1,?___aomod+1
  2336  000ECC  C003  F003         	movff	___aomod@dividend+2,?___aomod+2
  2337  000ED0  C004  F004         	movff	___aomod@dividend+3,?___aomod+3
  2338  000ED4  C005  F005         	movff	___aomod@dividend+4,?___aomod+4
  2339  000ED8  C006  F006         	movff	___aomod@dividend+5,?___aomod+5
  2340  000EDC  C007  F007         	movff	___aomod@dividend+6,?___aomod+6
  2341  000EE0  C008  F008         	movff	___aomod@dividend+7,?___aomod+7
  2342  000EE4  0012               	return		;funcret
  2343  000EE6                     __end_of___aomod:
  2344                           	opt callstack 0
  2345                           
  2346 ;; *************** function ___aodiv *****************
  2347 ;; Defined at:
  2348 ;;		line 9 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\aodiv.c"
  2349 ;; Parameters:    Size  Location     Type
  2350 ;;  dividend        8    0[COMRAM] long long 
  2351 ;;  divisor         8    8[COMRAM] long long 
  2352 ;; Auto vars:     Size  Location     Type
  2353 ;;  quotient        8   18[COMRAM] long long 
  2354 ;;  sign            1   17[COMRAM] unsigned char 
  2355 ;;  counter         1   16[COMRAM] unsigned char 
  2356 ;; Return value:  Size  Location     Type
  2357 ;;                  8    0[COMRAM] long long 
  2358 ;; Registers used:
  2359 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  2360 ;; Tracked objects:
  2361 ;;		On entry : 0/0
  2362 ;;		On exit  : 0/0
  2363 ;;		Unchanged: 0/0
  2364 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2365 ;;      Params:        16       0       0       0       0       0       0
  2366 ;;      Locals:        10       0       0       0       0       0       0
  2367 ;;      Temps:          0       0       0       0       0       0       0
  2368 ;;      Totals:        26       0       0       0       0       0       0
  2369 ;;Total ram usage:       26 bytes
  2370 ;; Hardware stack levels used:    1
  2371 ;; Hardware stack levels required when called:    1
  2372 ;; This function calls:
  2373 ;;		Nothing
  2374 ;; This function is called by:
  2375 ;;		_dtoa
  2376 ;; This function uses a non-reentrant model
  2377 ;;
  2378                           
  2379                           	psect	text12
  2380  000B3A                     __ptext12:
  2381                           	opt callstack 0
  2382  000B3A                     ___aodiv:
  2383                           	opt callstack 25
  2384                           
  2385                           ;incstack = 0
  2386  000B3A  0E00               	movlw	0
  2387  000B3C  6E12               	movwf	___aodiv@sign,c
  2388  000B3E  AE10               	btfss	___aodiv@divisor+7,7,c
  2389  000B40  D012               	goto	l1550
  2390  000B42  1E10               	comf	___aodiv@divisor+7,f,c
  2391  000B44  1E0F               	comf	___aodiv@divisor+6,f,c
  2392  000B46  1E0E               	comf	___aodiv@divisor+5,f,c
  2393  000B48  1E0D               	comf	___aodiv@divisor+4,f,c
  2394  000B4A  1E0C               	comf	___aodiv@divisor+3,f,c
  2395  000B4C  1E0B               	comf	___aodiv@divisor+2,f,c
  2396  000B4E  1E0A               	comf	___aodiv@divisor+1,f,c
  2397  000B50  6C09               	negf	___aodiv@divisor,c
  2398  000B52  0E00               	movlw	0
  2399  000B54  220A               	addwfc	___aodiv@divisor+1,f,c
  2400  000B56  220B               	addwfc	___aodiv@divisor+2,f,c
  2401  000B58  220C               	addwfc	___aodiv@divisor+3,f,c
  2402  000B5A  220D               	addwfc	___aodiv@divisor+4,f,c
  2403  000B5C  220E               	addwfc	___aodiv@divisor+5,f,c
  2404  000B5E  220F               	addwfc	___aodiv@divisor+6,f,c
  2405  000B60  2210               	addwfc	___aodiv@divisor+7,f,c
  2406  000B62  0E01               	movlw	1
  2407  000B64  6E12               	movwf	___aodiv@sign,c
  2408  000B66                     l1550:
  2409  000B66  AE08               	btfss	___aodiv@dividend+7,7,c
  2410  000B68  D012               	goto	l1556
  2411  000B6A  1E08               	comf	___aodiv@dividend+7,f,c
  2412  000B6C  1E07               	comf	___aodiv@dividend+6,f,c
  2413  000B6E  1E06               	comf	___aodiv@dividend+5,f,c
  2414  000B70  1E05               	comf	___aodiv@dividend+4,f,c
  2415  000B72  1E04               	comf	___aodiv@dividend+3,f,c
  2416  000B74  1E03               	comf	___aodiv@dividend+2,f,c
  2417  000B76  1E02               	comf	___aodiv@dividend+1,f,c
  2418  000B78  6C01               	negf	___aodiv@dividend,c
  2419  000B7A  0E00               	movlw	0
  2420  000B7C  2202               	addwfc	___aodiv@dividend+1,f,c
  2421  000B7E  2203               	addwfc	___aodiv@dividend+2,f,c
  2422  000B80  2204               	addwfc	___aodiv@dividend+3,f,c
  2423  000B82  2205               	addwfc	___aodiv@dividend+4,f,c
  2424  000B84  2206               	addwfc	___aodiv@dividend+5,f,c
  2425  000B86  2207               	addwfc	___aodiv@dividend+6,f,c
  2426  000B88  2208               	addwfc	___aodiv@dividend+7,f,c
  2427  000B8A  0E01               	movlw	1
  2428  000B8C  1A12               	xorwf	___aodiv@sign,f,c
  2429  000B8E                     l1556:
  2430  000B8E  EE20  F013         	lfsr	2,___aodiv@quotient
  2431  000B92  0E07               	movlw	7
  2432  000B94                     u911:
  2433  000B94  6ADE               	clrf	postinc2,c
  2434  000B96  06E8               	decf	wreg,f,c
  2435  000B98  E2FD               	bc	u911
  2436  000B9A  5009               	movf	___aodiv@divisor,w,c
  2437  000B9C  100A               	iorwf	___aodiv@divisor+1,w,c
  2438  000B9E  100B               	iorwf	___aodiv@divisor+2,w,c
  2439  000BA0  100C               	iorwf	___aodiv@divisor+3,w,c
  2440  000BA2  100D               	iorwf	___aodiv@divisor+4,w,c
  2441  000BA4  100E               	iorwf	___aodiv@divisor+5,w,c
  2442  000BA6  100F               	iorwf	___aodiv@divisor+6,w,c
  2443  000BA8  1010               	iorwf	___aodiv@divisor+7,w,c
  2444  000BAA  B4D8               	btfsc	status,2,c
  2445  000BAC  D046               	goto	l1578
  2446  000BAE  0E01               	movlw	1
  2447  000BB0  6E11               	movwf	___aodiv@counter,c
  2448  000BB2  D00A               	goto	l1564
  2449  000BB4                     l1562:
  2450  000BB4  90D8               	bcf	status,0,c
  2451  000BB6  3609               	rlcf	___aodiv@divisor,f,c
  2452  000BB8  360A               	rlcf	___aodiv@divisor+1,f,c
  2453  000BBA  360B               	rlcf	___aodiv@divisor+2,f,c
  2454  000BBC  360C               	rlcf	___aodiv@divisor+3,f,c
  2455  000BBE  360D               	rlcf	___aodiv@divisor+4,f,c
  2456  000BC0  360E               	rlcf	___aodiv@divisor+5,f,c
  2457  000BC2  360F               	rlcf	___aodiv@divisor+6,f,c
  2458  000BC4  3610               	rlcf	___aodiv@divisor+7,f,c
  2459  000BC6  2A11               	incf	___aodiv@counter,f,c
  2460  000BC8                     l1564:
  2461  000BC8  AE10               	btfss	___aodiv@divisor+7,7,c
  2462  000BCA  D7F4               	goto	l1562
  2463  000BCC                     u930:
  2464  000BCC  90D8               	bcf	status,0,c
  2465  000BCE  3613               	rlcf	___aodiv@quotient,f,c
  2466  000BD0  3614               	rlcf	___aodiv@quotient+1,f,c
  2467  000BD2  3615               	rlcf	___aodiv@quotient+2,f,c
  2468  000BD4  3616               	rlcf	___aodiv@quotient+3,f,c
  2469  000BD6  3617               	rlcf	___aodiv@quotient+4,f,c
  2470  000BD8  3618               	rlcf	___aodiv@quotient+5,f,c
  2471  000BDA  3619               	rlcf	___aodiv@quotient+6,f,c
  2472  000BDC  361A               	rlcf	___aodiv@quotient+7,f,c
  2473  000BDE  5009               	movf	___aodiv@divisor,w,c
  2474  000BE0  5C01               	subwf	___aodiv@dividend,w,c
  2475  000BE2  500A               	movf	___aodiv@divisor+1,w,c
  2476  000BE4  5802               	subwfb	___aodiv@dividend+1,w,c
  2477  000BE6  500B               	movf	___aodiv@divisor+2,w,c
  2478  000BE8  5803               	subwfb	___aodiv@dividend+2,w,c
  2479  000BEA  500C               	movf	___aodiv@divisor+3,w,c
  2480  000BEC  5804               	subwfb	___aodiv@dividend+3,w,c
  2481  000BEE  500D               	movf	___aodiv@divisor+4,w,c
  2482  000BF0  5805               	subwfb	___aodiv@dividend+4,w,c
  2483  000BF2  500E               	movf	___aodiv@divisor+5,w,c
  2484  000BF4  5806               	subwfb	___aodiv@dividend+5,w,c
  2485  000BF6  500F               	movf	___aodiv@divisor+6,w,c
  2486  000BF8  5807               	subwfb	___aodiv@dividend+6,w,c
  2487  000BFA  5010               	movf	___aodiv@divisor+7,w,c
  2488  000BFC  5808               	subwfb	___aodiv@dividend+7,w,c
  2489  000BFE  A0D8               	btfss	status,0,c
  2490  000C00  D011               	goto	l1574
  2491  000C02  5009               	movf	___aodiv@divisor,w,c
  2492  000C04  5E01               	subwf	___aodiv@dividend,f,c
  2493  000C06  500A               	movf	___aodiv@divisor+1,w,c
  2494  000C08  5A02               	subwfb	___aodiv@dividend+1,f,c
  2495  000C0A  500B               	movf	___aodiv@divisor+2,w,c
  2496  000C0C  5A03               	subwfb	___aodiv@dividend+2,f,c
  2497  000C0E  500C               	movf	___aodiv@divisor+3,w,c
  2498  000C10  5A04               	subwfb	___aodiv@dividend+3,f,c
  2499  000C12  500D               	movf	___aodiv@divisor+4,w,c
  2500  000C14  5A05               	subwfb	___aodiv@dividend+4,f,c
  2501  000C16  500E               	movf	___aodiv@divisor+5,w,c
  2502  000C18  5A06               	subwfb	___aodiv@dividend+5,f,c
  2503  000C1A  500F               	movf	___aodiv@divisor+6,w,c
  2504  000C1C  5A07               	subwfb	___aodiv@dividend+6,f,c
  2505  000C1E  5010               	movf	___aodiv@divisor+7,w,c
  2506  000C20  5A08               	subwfb	___aodiv@dividend+7,f,c
  2507  000C22  8013               	bsf	___aodiv@quotient,0,c
  2508  000C24                     l1574:
  2509  000C24  90D8               	bcf	status,0,c
  2510  000C26  3210               	rrcf	___aodiv@divisor+7,f,c
  2511  000C28  320F               	rrcf	___aodiv@divisor+6,f,c
  2512  000C2A  320E               	rrcf	___aodiv@divisor+5,f,c
  2513  000C2C  320D               	rrcf	___aodiv@divisor+4,f,c
  2514  000C2E  320C               	rrcf	___aodiv@divisor+3,f,c
  2515  000C30  320B               	rrcf	___aodiv@divisor+2,f,c
  2516  000C32  320A               	rrcf	___aodiv@divisor+1,f,c
  2517  000C34  3209               	rrcf	___aodiv@divisor,f,c
  2518  000C36  2E11               	decfsz	___aodiv@counter,f,c
  2519  000C38  D7C9               	goto	u930
  2520  000C3A                     l1578:
  2521  000C3A  5012               	movf	___aodiv@sign,w,c
  2522  000C3C  B4D8               	btfsc	status,2,c
  2523  000C3E  D010               	goto	l1582
  2524  000C40  1E1A               	comf	___aodiv@quotient+7,f,c
  2525  000C42  1E19               	comf	___aodiv@quotient+6,f,c
  2526  000C44  1E18               	comf	___aodiv@quotient+5,f,c
  2527  000C46  1E17               	comf	___aodiv@quotient+4,f,c
  2528  000C48  1E16               	comf	___aodiv@quotient+3,f,c
  2529  000C4A  1E15               	comf	___aodiv@quotient+2,f,c
  2530  000C4C  1E14               	comf	___aodiv@quotient+1,f,c
  2531  000C4E  6C13               	negf	___aodiv@quotient,c
  2532  000C50  0E00               	movlw	0
  2533  000C52  2214               	addwfc	___aodiv@quotient+1,f,c
  2534  000C54  2215               	addwfc	___aodiv@quotient+2,f,c
  2535  000C56  2216               	addwfc	___aodiv@quotient+3,f,c
  2536  000C58  2217               	addwfc	___aodiv@quotient+4,f,c
  2537  000C5A  2218               	addwfc	___aodiv@quotient+5,f,c
  2538  000C5C  2219               	addwfc	___aodiv@quotient+6,f,c
  2539  000C5E  221A               	addwfc	___aodiv@quotient+7,f,c
  2540  000C60                     l1582:
  2541  000C60  C013  F001         	movff	___aodiv@quotient,?___aodiv
  2542  000C64  C014  F002         	movff	___aodiv@quotient+1,?___aodiv+1
  2543  000C68  C015  F003         	movff	___aodiv@quotient+2,?___aodiv+2
  2544  000C6C  C016  F004         	movff	___aodiv@quotient+3,?___aodiv+3
  2545  000C70  C017  F005         	movff	___aodiv@quotient+4,?___aodiv+4
  2546  000C74  C018  F006         	movff	___aodiv@quotient+5,?___aodiv+5
  2547  000C78  C019  F007         	movff	___aodiv@quotient+6,?___aodiv+6
  2548  000C7C  C01A  F008         	movff	___aodiv@quotient+7,?___aodiv+7
  2549  000C80  0012               	return		;funcret
  2550  000C82                     __end_of___aodiv:
  2551                           	opt callstack 0
  2552                           
  2553 ;; *************** function _atoi *****************
  2554 ;; Defined at:
  2555 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\atoi.c"
  2556 ;; Parameters:    Size  Location     Type
  2557 ;;  s               2    7[COMRAM] PTR const unsigned char 
  2558 ;;		 -> STR_4(5), STR_3(5), 
  2559 ;; Auto vars:     Size  Location     Type
  2560 ;;  n               2   20[COMRAM] int 
  2561 ;;  neg             2   13[COMRAM] int 
  2562 ;; Return value:  Size  Location     Type
  2563 ;;                  2    7[COMRAM] int 
  2564 ;; Registers used:
  2565 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2566 ;; Tracked objects:
  2567 ;;		On entry : 0/0
  2568 ;;		On exit  : 0/0
  2569 ;;		Unchanged: 0/0
  2570 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2571 ;;      Params:         2       0       0       0       0       0       0
  2572 ;;      Locals:         9       0       0       0       0       0       0
  2573 ;;      Temps:          4       0       0       0       0       0       0
  2574 ;;      Totals:        15       0       0       0       0       0       0
  2575 ;;Total ram usage:       15 bytes
  2576 ;; Hardware stack levels used:    1
  2577 ;; Hardware stack levels required when called:    2
  2578 ;; This function calls:
  2579 ;;		___wmul
  2580 ;;		_isdigit
  2581 ;;		_isspace
  2582 ;; This function is called by:
  2583 ;;		_vfpfcnvrt
  2584 ;; This function uses a non-reentrant model
  2585 ;;
  2586                           
  2587                           	psect	text13
  2588  000C82                     __ptext13:
  2589                           	opt callstack 0
  2590  000C82                     _atoi:
  2591                           	opt callstack 25
  2592                           
  2593                           ;incstack = 0
  2594  000C82  0E00               	movlw	0
  2595  000C84  6E16               	movwf	atoi@n+1,c
  2596  000C86  0E00               	movlw	0
  2597  000C88  6E15               	movwf	atoi@n,c
  2598  000C8A  0E00               	movlw	0
  2599  000C8C  6E0F               	movwf	atoi@neg+1,c
  2600  000C8E  0E00               	movlw	0
  2601  000C90  6E0E               	movwf	atoi@neg,c
  2602  000C92  D002               	goto	l1712
  2603  000C94                     l1710:
  2604  000C94  4A08               	infsnz	atoi@s,f,c
  2605  000C96  2A09               	incf	atoi@s+1,f,c
  2606  000C98                     l1712:
  2607  000C98  0E01               	movlw	1
  2608  000C9A  6E14               	movwf	_atoi$864,c
  2609  000C9C  C008  FFF6         	movff	atoi@s,tblptrl
  2610  000CA0  C009  FFF7         	movff	atoi@s+1,tblptrh
  2611  000CA4                     	if	0	;tblptru may be non-zero
  2612  000CA4                     	endif
  2613  000CA4                     	if	0	;tblptru may be non-zero
  2614  000CA4                     	endif
  2615  000CA4  0008               	tblrd		*
  2616  000CA6  50F5               	movf	tablat,w,c
  2617  000CA8  0A20               	xorlw	32
  2618  000CAA  B4D8               	btfsc	status,2,c
  2619  000CAC  D018               	goto	l1720
  2620  000CAE  0EF7               	movlw	247
  2621  000CB0  6E0A               	movwf	??_atoi& (0+255),c
  2622  000CB2  0EFF               	movlw	255
  2623  000CB4  6E0B               	movwf	(??_atoi+1)& (0+255),c
  2624  000CB6  C008  FFF6         	movff	atoi@s,tblptrl
  2625  000CBA  C009  FFF7         	movff	atoi@s+1,tblptrh
  2626  000CBE                     	if	0	;tblptru may be non-zero
  2627  000CBE                     	endif
  2628  000CBE                     	if	0	;tblptru may be non-zero
  2629  000CBE                     	endif
  2630  000CBE  0008               	tblrd		*
  2631  000CC0  50F5               	movf	tablat,w,c
  2632  000CC2  6E0C               	movwf	(??_atoi+2)& (0+255),c
  2633  000CC4  6A0D               	clrf	(??_atoi+3)& (0+255),c
  2634  000CC6  500A               	movf	??_atoi,w,c
  2635  000CC8  260C               	addwf	??_atoi+2,f,c
  2636  000CCA  500B               	movf	??_atoi+1,w,c
  2637  000CCC  220D               	addwfc	??_atoi+3,f,c
  2638  000CCE  500D               	movf	??_atoi+3,w,c
  2639  000CD0  E104               	bnz	u1210
  2640  000CD2  0E05               	movlw	5
  2641  000CD4  5C0C               	subwf	??_atoi+2,w,c
  2642  000CD6  A0D8               	btfss	status,0,c
  2643  000CD8  D002               	goto	l1720
  2644  000CDA                     u1210:
  2645  000CDA  0E00               	movlw	0
  2646  000CDC  6E14               	movwf	_atoi$864,c
  2647  000CDE                     l1720:
  2648  000CDE  C014  F010         	movff	_atoi$864,_atoi$863
  2649  000CE2  6A11               	clrf	_atoi$863+1,c
  2650  000CE4  5010               	movf	_atoi$863,w,c
  2651  000CE6  1011               	iorwf	_atoi$863+1,w,c
  2652  000CE8  B4D8               	btfsc	status,2,c
  2653  000CEA  D008               	goto	l1730
  2654  000CEC  D7D3               	goto	l1710
  2655  000CEE                     l1726:
  2656  000CEE  0E00               	movlw	0
  2657  000CF0  6E0F               	movwf	atoi@neg+1,c
  2658  000CF2  0E01               	movlw	1
  2659  000CF4  6E0E               	movwf	atoi@neg,c
  2660  000CF6                     l1728:
  2661  000CF6  4A08               	infsnz	atoi@s,f,c
  2662  000CF8  2A09               	incf	atoi@s+1,f,c
  2663  000CFA  D02E               	goto	l1736
  2664  000CFC                     l1730:
  2665  000CFC  C008  FFF6         	movff	atoi@s,tblptrl
  2666  000D00  C009  FFF7         	movff	atoi@s+1,tblptrh
  2667  000D04                     	if	0	;tblptru may be non-zero
  2668  000D04                     	endif
  2669  000D04                     	if	0	;tblptru may be non-zero
  2670  000D04                     	endif
  2671  000D04  0008               	tblrd		*
  2672  000D06  50F5               	movf	tablat,w,c
  2673  000D08  6E0A               	movwf	??_atoi& (0+255),c
  2674  000D0A  6A0B               	clrf	(??_atoi+1)& (0+255),c
  2675                           
  2676                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2677                           ; Switch size 1, requested type "simple"
  2678                           ; Number of cases is 1, Range of values is 0 to 0
  2679                           ; switch strategies available:
  2680                           ; Name         Instructions Cycles
  2681                           ; simple_byte            4     3 (average)
  2682                           ;	Chosen strategy is simple_byte
  2683  000D0C  500B               	movf	??_atoi+1,w,c
  2684  000D0E  0A00               	xorlw	0	; case 0
  2685  000D10  A4D8               	btfss	status,2,c
  2686  000D12  D022               	goto	l1736
  2687                           
  2688                           ; Switch size 1, requested type "simple"
  2689                           ; Number of cases is 2, Range of values is 43 to 45
  2690                           ; switch strategies available:
  2691                           ; Name         Instructions Cycles
  2692                           ; simple_byte            7     4 (average)
  2693                           ;	Chosen strategy is simple_byte
  2694  000D14  500A               	movf	??_atoi,w,c
  2695  000D16  0A2B               	xorlw	43	; case 43
  2696  000D18  B4D8               	btfsc	status,2,c
  2697  000D1A  D7ED               	goto	l1728
  2698  000D1C  0A06               	xorlw	6	; case 45
  2699  000D1E  B4D8               	btfsc	status,2,c
  2700  000D20  D7E6               	goto	l1726
  2701  000D22  D01A               	goto	l1736
  2702  000D24                     l1732:
  2703  000D24  C015  F001         	movff	atoi@n,___wmul@multiplier
  2704  000D28  C016  F002         	movff	atoi@n+1,___wmul@multiplier+1
  2705  000D2C  0E00               	movlw	0
  2706  000D2E  6E04               	movwf	___wmul@multiplicand+1,c
  2707  000D30  0E0A               	movlw	10
  2708  000D32  6E03               	movwf	___wmul@multiplicand,c
  2709  000D34  EC84  F00A         	call	___wmul	;wreg free
  2710  000D38  C008  FFF6         	movff	atoi@s,tblptrl
  2711  000D3C  C009  FFF7         	movff	atoi@s+1,tblptrh
  2712  000D40                     	if	0	;tblptru may be non-zero
  2713  000D40                     	endif
  2714  000D40                     	if	0	;tblptru may be non-zero
  2715  000D40                     	endif
  2716  000D40  0008               	tblrd		*
  2717  000D42  50F5               	movf	tablat,w,c
  2718  000D44  5E01               	subwf	?___wmul,f,c
  2719  000D46  0E00               	movlw	0
  2720  000D48  5A02               	subwfb	?___wmul+1,f,c
  2721  000D4A  0E30               	movlw	48
  2722  000D4C  2401               	addwf	?___wmul,w,c
  2723  000D4E  6E15               	movwf	atoi@n,c
  2724  000D50  0E00               	movlw	0
  2725  000D52  2002               	addwfc	?___wmul+1,w,c
  2726  000D54  6E16               	movwf	atoi@n+1,c
  2727  000D56  D7CF               	goto	l1728
  2728  000D58                     l1736:
  2729  000D58  0ED0               	movlw	208
  2730  000D5A  6E0A               	movwf	??_atoi& (0+255),c
  2731  000D5C  0EFF               	movlw	255
  2732  000D5E  6E0B               	movwf	(??_atoi+1)& (0+255),c
  2733  000D60  C008  FFF6         	movff	atoi@s,tblptrl
  2734  000D64  C009  FFF7         	movff	atoi@s+1,tblptrh
  2735  000D68                     	if	0	;tblptru may be non-zero
  2736  000D68                     	endif
  2737  000D68                     	if	0	;tblptru may be non-zero
  2738  000D68                     	endif
  2739  000D68  0008               	tblrd		*
  2740  000D6A  50F5               	movf	tablat,w,c
  2741  000D6C  6E0C               	movwf	(??_atoi+2)& (0+255),c
  2742  000D6E  6A0D               	clrf	(??_atoi+3)& (0+255),c
  2743  000D70  500A               	movf	??_atoi,w,c
  2744  000D72  260C               	addwf	??_atoi+2,f,c
  2745  000D74  500B               	movf	??_atoi+1,w,c
  2746  000D76  220D               	addwfc	??_atoi+3,f,c
  2747  000D78  500D               	movf	??_atoi+3,w,c
  2748  000D7A  E106               	bnz	u1230
  2749  000D7C  0E0A               	movlw	10
  2750  000D7E  5C0C               	subwf	??_atoi+2,w,c
  2751  000D80  B0D8               	btfsc	status,0,c
  2752  000D82  D002               	goto	u1230
  2753  000D84  0E01               	movlw	1
  2754  000D86  D001               	goto	u1240
  2755  000D88                     u1230:
  2756  000D88  0E00               	movlw	0
  2757  000D8A                     u1240:
  2758  000D8A  6E12               	movwf	_atoi$865,c
  2759  000D8C  6A13               	clrf	_atoi$865+1,c
  2760  000D8E  5012               	movf	_atoi$865,w,c
  2761  000D90  1013               	iorwf	_atoi$865+1,w,c
  2762  000D92  A4D8               	btfss	status,2,c
  2763  000D94  D7C7               	goto	l1732
  2764  000D96  500E               	movf	atoi@neg,w,c
  2765  000D98  100F               	iorwf	atoi@neg+1,w,c
  2766  000D9A  A4D8               	btfss	status,2,c
  2767  000D9C  D00D               	goto	l893
  2768  000D9E  C015  F00A         	movff	atoi@n,??_atoi
  2769  000DA2  C016  F00B         	movff	atoi@n+1,??_atoi+1
  2770  000DA6  1E0A               	comf	??_atoi,f,c
  2771  000DA8  1E0B               	comf	??_atoi+1,f,c
  2772  000DAA  4A0A               	infsnz	??_atoi,f,c
  2773  000DAC  2A0B               	incf	??_atoi+1,f,c
  2774  000DAE  C00A  F008         	movff	??_atoi,?_atoi
  2775  000DB2  C00B  F009         	movff	??_atoi+1,?_atoi+1
  2776  000DB6  0012               	return	
  2777  000DB8                     l893:
  2778  000DB8  C015  F008         	movff	atoi@n,?_atoi
  2779  000DBC  C016  F009         	movff	atoi@n+1,?_atoi+1
  2780  000DC0  0012               	return		;funcret
  2781  000DC2                     __end_of_atoi:
  2782                           	opt callstack 0
  2783                           
  2784 ;; *************** function _isspace *****************
  2785 ;; Defined at:
  2786 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\isspace.c"
  2787 ;; Parameters:    Size  Location     Type
  2788 ;;  c               2    0[COMRAM] int 
  2789 ;; Auto vars:     Size  Location     Type
  2790 ;;		None
  2791 ;; Return value:  Size  Location     Type
  2792 ;;                  2    0[COMRAM] int 
  2793 ;; Registers used:
  2794 ;;		wreg, status,2, status,0
  2795 ;; Tracked objects:
  2796 ;;		On entry : 0/0
  2797 ;;		On exit  : 0/0
  2798 ;;		Unchanged: 0/0
  2799 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2800 ;;      Params:         2       0       0       0       0       0       0
  2801 ;;      Locals:         1       0       0       0       0       0       0
  2802 ;;      Temps:          4       0       0       0       0       0       0
  2803 ;;      Totals:         7       0       0       0       0       0       0
  2804 ;;Total ram usage:        7 bytes
  2805 ;; Hardware stack levels used:    1
  2806 ;; Hardware stack levels required when called:    1
  2807 ;; This function calls:
  2808 ;;		Nothing
  2809 ;; This function is called by:
  2810 ;;		_atoi
  2811 ;; This function uses a non-reentrant model
  2812 ;;
  2813                           
  2814                           	psect	text14
  2815  0013E0                     __ptext14:
  2816                           	opt callstack 0
  2817  0013E0                     _isspace:
  2818                           	opt callstack 25
  2819                           
  2820                           ;incstack = 0
  2821  0013E0  0E01               	movlw	1
  2822  0013E2  6E07               	movwf	_isspace$881,c
  2823  0013E4  0E20               	movlw	32
  2824  0013E6  1801               	xorwf	isspace@c,w,c
  2825  0013E8  1002               	iorwf	isspace@c+1,w,c
  2826  0013EA  B4D8               	btfsc	status,2,c
  2827  0013EC  D014               	goto	l1630
  2828  0013EE  0EF7               	movlw	247
  2829  0013F0  6E03               	movwf	??_isspace& (0+255),c
  2830  0013F2  0EFF               	movlw	255
  2831  0013F4  6E04               	movwf	(??_isspace+1)& (0+255),c
  2832  0013F6  C001  F005         	movff	isspace@c,??_isspace+2
  2833  0013FA  C002  F006         	movff	isspace@c+1,??_isspace+3
  2834  0013FE  5003               	movf	??_isspace,w,c
  2835  001400  2605               	addwf	??_isspace+2,f,c
  2836  001402  5004               	movf	??_isspace+1,w,c
  2837  001404  2206               	addwfc	??_isspace+3,f,c
  2838  001406  5006               	movf	??_isspace+3,w,c
  2839  001408  E104               	bnz	u1030
  2840  00140A  0E05               	movlw	5
  2841  00140C  5C05               	subwf	??_isspace+2,w,c
  2842  00140E  A0D8               	btfss	status,0,c
  2843  001410  D002               	goto	l1630
  2844  001412                     u1030:
  2845  001412  0E00               	movlw	0
  2846  001414  6E07               	movwf	_isspace$881,c
  2847  001416                     l1630:
  2848  001416  C007  F001         	movff	_isspace$881,?_isspace
  2849  00141A  6A02               	clrf	?_isspace+1,c
  2850  00141C  0012               	return		;funcret
  2851  00141E                     __end_of_isspace:
  2852                           	opt callstack 0
  2853                           
  2854 ;; *************** function _isdigit *****************
  2855 ;; Defined at:
  2856 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\isdigit.c"
  2857 ;; Parameters:    Size  Location     Type
  2858 ;;  c               2    0[COMRAM] int 
  2859 ;; Auto vars:     Size  Location     Type
  2860 ;;		None
  2861 ;; Return value:  Size  Location     Type
  2862 ;;                  2    0[COMRAM] int 
  2863 ;; Registers used:
  2864 ;;		wreg, status,2, status,0
  2865 ;; Tracked objects:
  2866 ;;		On entry : 0/0
  2867 ;;		On exit  : 0/0
  2868 ;;		Unchanged: 0/0
  2869 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2870 ;;      Params:         2       0       0       0       0       0       0
  2871 ;;      Locals:         0       0       0       0       0       0       0
  2872 ;;      Temps:          4       0       0       0       0       0       0
  2873 ;;      Totals:         6       0       0       0       0       0       0
  2874 ;;Total ram usage:        6 bytes
  2875 ;; Hardware stack levels used:    1
  2876 ;; Hardware stack levels required when called:    1
  2877 ;; This function calls:
  2878 ;;		Nothing
  2879 ;; This function is called by:
  2880 ;;		_vfpfcnvrt
  2881 ;;		_atoi
  2882 ;; This function uses a non-reentrant model
  2883 ;;
  2884                           
  2885                           	psect	text15
  2886  001488                     __ptext15:
  2887                           	opt callstack 0
  2888  001488                     _isdigit:
  2889                           	opt callstack 26
  2890                           
  2891                           ;incstack = 0
  2892  001488  0ED0               	movlw	208
  2893  00148A  6E03               	movwf	??_isdigit& (0+255),c
  2894  00148C  0EFF               	movlw	255
  2895  00148E  6E04               	movwf	(??_isdigit+1)& (0+255),c
  2896  001490  C001  F005         	movff	isdigit@c,??_isdigit+2
  2897  001494  C002  F006         	movff	isdigit@c+1,??_isdigit+3
  2898  001498  5003               	movf	??_isdigit,w,c
  2899  00149A  2605               	addwf	??_isdigit+2,f,c
  2900  00149C  5004               	movf	??_isdigit+1,w,c
  2901  00149E  2206               	addwfc	??_isdigit+3,f,c
  2902  0014A0  5006               	movf	??_isdigit+3,w,c
  2903  0014A2  E106               	bnz	u870
  2904  0014A4  0E0A               	movlw	10
  2905  0014A6  5C05               	subwf	??_isdigit+2,w,c
  2906  0014A8  B0D8               	btfsc	status,0,c
  2907  0014AA  D002               	goto	u870
  2908  0014AC  0E01               	movlw	1
  2909  0014AE  D001               	goto	u880
  2910  0014B0                     u870:
  2911  0014B0  0E00               	movlw	0
  2912  0014B2                     u880:
  2913  0014B2  6E01               	movwf	?_isdigit,c
  2914  0014B4  6A02               	clrf	?_isdigit+1,c
  2915  0014B6  0012               	return		;funcret
  2916  0014B8                     __end_of_isdigit:
  2917                           	opt callstack 0
  2918                           
  2919 ;; *************** function ___wmul *****************
  2920 ;; Defined at:
  2921 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\Umul16.c"
  2922 ;; Parameters:    Size  Location     Type
  2923 ;;  multiplier      2    0[COMRAM] unsigned int 
  2924 ;;  multiplicand    2    2[COMRAM] unsigned int 
  2925 ;; Auto vars:     Size  Location     Type
  2926 ;;  product         2    4[COMRAM] unsigned int 
  2927 ;; Return value:  Size  Location     Type
  2928 ;;                  2    0[COMRAM] unsigned int 
  2929 ;; Registers used:
  2930 ;;		wreg, status,2, status,0, prodl, prodh
  2931 ;; Tracked objects:
  2932 ;;		On entry : 0/0
  2933 ;;		On exit  : 0/0
  2934 ;;		Unchanged: 0/0
  2935 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2936 ;;      Params:         4       0       0       0       0       0       0
  2937 ;;      Locals:         2       0       0       0       0       0       0
  2938 ;;      Temps:          0       0       0       0       0       0       0
  2939 ;;      Totals:         6       0       0       0       0       0       0
  2940 ;;Total ram usage:        6 bytes
  2941 ;; Hardware stack levels used:    1
  2942 ;; Hardware stack levels required when called:    1
  2943 ;; This function calls:
  2944 ;;		Nothing
  2945 ;; This function is called by:
  2946 ;;		_atoi
  2947 ;; This function uses a non-reentrant model
  2948 ;;
  2949                           
  2950                           	psect	text16
  2951  001508                     __ptext16:
  2952                           	opt callstack 0
  2953  001508                     ___wmul:
  2954                           	opt callstack 25
  2955                           
  2956                           ;incstack = 0
  2957  001508  5001               	movf	___wmul@multiplier,w,c
  2958  00150A  0203               	mulwf	___wmul@multiplicand,c
  2959  00150C  CFF3 F005          	movff	prodl,___wmul@product
  2960  001510  CFF4 F006          	movff	prodh,___wmul@product+1
  2961  001514  5001               	movf	___wmul@multiplier,w,c
  2962  001516  0204               	mulwf	___wmul@multiplicand+1,c
  2963  001518  50F3               	movf	prodl,w,c
  2964  00151A  2606               	addwf	___wmul@product+1,f,c
  2965  00151C  5002               	movf	___wmul@multiplier+1,w,c
  2966  00151E  0203               	mulwf	___wmul@multiplicand,c
  2967  001520  50F3               	movf	prodl,w,c
  2968  001522  2606               	addwf	___wmul@product+1,f,c
  2969  001524  C005  F001         	movff	___wmul@product,?___wmul
  2970  001528  C006  F002         	movff	___wmul@product+1,?___wmul+1
  2971  00152C  0012               	return		;funcret
  2972  00152E                     __end_of___wmul:
  2973                           	opt callstack 0
  2974                           
  2975 ;; *************** function _lcd_ini *****************
  2976 ;; Defined at:
  2977 ;;		line 3 in file "../Bibliotecas/LCD4bits.c"
  2978 ;; Parameters:    Size  Location     Type
  2979 ;;		None
  2980 ;; Auto vars:     Size  Location     Type
  2981 ;;  i               1    5[COMRAM] unsigned char 
  2982 ;; Return value:  Size  Location     Type
  2983 ;;                  1    wreg      void 
  2984 ;; Registers used:
  2985 ;;		wreg, status,2, status,0, cstack
  2986 ;; Tracked objects:
  2987 ;;		On entry : 0/0
  2988 ;;		On exit  : 0/0
  2989 ;;		Unchanged: 0/0
  2990 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2991 ;;      Params:         0       0       0       0       0       0       0
  2992 ;;      Locals:         1       0       0       0       0       0       0
  2993 ;;      Temps:          1       0       0       0       0       0       0
  2994 ;;      Totals:         2       0       0       0       0       0       0
  2995 ;;Total ram usage:        2 bytes
  2996 ;; Hardware stack levels used:    1
  2997 ;; Hardware stack levels required when called:    3
  2998 ;; This function calls:
  2999 ;;		_lcd_cmd
  3000 ;; This function is called by:
  3001 ;;		_main
  3002 ;; This function uses a non-reentrant model
  3003 ;;
  3004                           
  3005                           	psect	text17
  3006  0011CC                     __ptext17:
  3007                           	opt callstack 0
  3008  0011CC                     _lcd_ini:
  3009                           	opt callstack 27
  3010                           
  3011                           ;../Bibliotecas/LCD4bits.c: 5:     char i;;../Bibliotecas/LCD4bits.c: 7:    TRISD = 0b00
      +                          000000;
  3012                           
  3013                           ;incstack = 0
  3014  0011CC  0E00               	movlw	0
  3015  0011CE  6E95               	movwf	3989,c	;volatile
  3016                           
  3017                           ;../Bibliotecas/LCD4bits.c: 8:    TRISEbits.TRISE0 = 0;
  3018  0011D0  9096               	bcf	3990,0,c	;volatile
  3019                           
  3020                           ;../Bibliotecas/LCD4bits.c: 9:    TRISEbits.TRISE1 = 0;
  3021  0011D2  9296               	bcf	3990,1,c	;volatile
  3022                           
  3023                           ;../Bibliotecas/LCD4bits.c: 11:    LATD = 0b00000000;
  3024  0011D4  0E00               	movlw	0
  3025  0011D6  6E8C               	movwf	3980,c	;volatile
  3026                           
  3027                           ;../Bibliotecas/LCD4bits.c: 12:    LATEbits.LATE0 = 0;
  3028  0011D8  908D               	bcf	3981,0,c	;volatile
  3029                           
  3030                           ;../Bibliotecas/LCD4bits.c: 13:    LATEbits.LATE1 = 0;
  3031  0011DA  928D               	bcf	3981,1,c	;volatile
  3032                           
  3033                           ;../Bibliotecas/LCD4bits.c: 15:    _delay((unsigned long)((15)*(8000000/4000.0)));
  3034  0011DC  0E27               	movlw	39
  3035  0011DE  6E05               	movwf	??_lcd_ini& (0+255),c
  3036  0011E0  0EF5               	movlw	245
  3037  0011E2                     u1487:
  3038  0011E2  2EE8               	decfsz	wreg,f,c
  3039  0011E4  D7FE               	bra	u1487
  3040  0011E6  2E05               	decfsz	??_lcd_ini& (0+255),f,c
  3041  0011E8  D7FC               	bra	u1487
  3042  0011EA  F000               	nop	
  3043                           
  3044                           ;../Bibliotecas/LCD4bits.c: 17:    for(i = 0; i < 3; i++)
  3045  0011EC  0E00               	movlw	0
  3046  0011EE  6E06               	movwf	lcd_ini@i,c
  3047  0011F0                     l1900:
  3048                           
  3049                           ;../Bibliotecas/LCD4bits.c: 18:    {;../Bibliotecas/LCD4bits.c: 19:        lcd_cmd(0x30)
      +                          ;
  3050  0011F0  0E30               	movlw	48
  3051  0011F2  EC73  F007         	call	_lcd_cmd
  3052                           
  3053                           ;../Bibliotecas/LCD4bits.c: 20:        _delay((unsigned long)((5)*(8000000/4000.0)));
  3054  0011F6  0E0D               	movlw	13
  3055  0011F8  6E05               	movwf	??_lcd_ini& (0+255),c
  3056  0011FA  0EFC               	movlw	252
  3057  0011FC                     u1497:
  3058  0011FC  2EE8               	decfsz	wreg,f,c
  3059  0011FE  D7FE               	bra	u1497
  3060  001200  2E05               	decfsz	??_lcd_ini& (0+255),f,c
  3061  001202  D7FC               	bra	u1497
  3062                           
  3063                           ;../Bibliotecas/LCD4bits.c: 21:    }
  3064  001204  2A06               	incf	lcd_ini@i,f,c
  3065  001206  0E02               	movlw	2
  3066  001208  6406               	cpfsgt	lcd_ini@i,c
  3067  00120A  D7F2               	goto	l1900
  3068                           
  3069                           ;../Bibliotecas/LCD4bits.c: 22:    lcd_cmd(0x02);
  3070  00120C  0E02               	movlw	2
  3071  00120E  EC73  F007         	call	_lcd_cmd
  3072                           
  3073                           ;../Bibliotecas/LCD4bits.c: 23:    _delay((unsigned long)((40)*(8000000/4000000.0)));
  3074  001212  0E1A               	movlw	26
  3075  001214                     u1507:
  3076  001214  2EE8               	decfsz	wreg,f,c
  3077  001216  D7FE               	bra	u1507
  3078  001218  D000               	nop2	
  3079                           
  3080                           ;../Bibliotecas/LCD4bits.c: 24:    lcd_cmd(0x28);
  3081  00121A  0E28               	movlw	40
  3082  00121C  EC73  F007         	call	_lcd_cmd
  3083                           
  3084                           ;../Bibliotecas/LCD4bits.c: 25:    _delay((unsigned long)((40)*(8000000/4000000.0)));
  3085  001220  0E1A               	movlw	26
  3086  001222                     u1517:
  3087  001222  2EE8               	decfsz	wreg,f,c
  3088  001224  D7FE               	bra	u1517
  3089  001226  D000               	nop2	
  3090                           
  3091                           ;../Bibliotecas/LCD4bits.c: 26:    lcd_cmd(0x01);
  3092  001228  0E01               	movlw	1
  3093  00122A  EC73  F007         	call	_lcd_cmd
  3094                           
  3095                           ;../Bibliotecas/LCD4bits.c: 27:    _delay((unsigned long)((2)*(8000000/4000.0)));
  3096  00122E  0E06               	movlw	6
  3097  001230  6E05               	movwf	??_lcd_ini& (0+255),c
  3098  001232  0E30               	movlw	48
  3099  001234                     u1527:
  3100  001234  2EE8               	decfsz	wreg,f,c
  3101  001236  D7FE               	bra	u1527
  3102  001238  2E05               	decfsz	??_lcd_ini& (0+255),f,c
  3103  00123A  D7FC               	bra	u1527
  3104  00123C  D000               	nop2	
  3105                           
  3106                           ;../Bibliotecas/LCD4bits.c: 28:    lcd_cmd(0x0C);
  3107  00123E  0E0C               	movlw	12
  3108  001240  EC73  F007         	call	_lcd_cmd
  3109                           
  3110                           ;../Bibliotecas/LCD4bits.c: 29:    _delay((unsigned long)((40)*(8000000/4000000.0)));
  3111  001244  0E1A               	movlw	26
  3112  001246                     u1537:
  3113  001246  2EE8               	decfsz	wreg,f,c
  3114  001248  D7FE               	bra	u1537
  3115  00124A  D000               	nop2	
  3116                           
  3117                           ;../Bibliotecas/LCD4bits.c: 30:    lcd_cmd(0x06);
  3118  00124C  0E06               	movlw	6
  3119  00124E  EC73  F007         	call	_lcd_cmd
  3120                           
  3121                           ;../Bibliotecas/LCD4bits.c: 31:    _delay((unsigned long)((40)*(8000000/4000000.0)));
  3122  001252  0E1A               	movlw	26
  3123  001254                     u1547:
  3124  001254  2EE8               	decfsz	wreg,f,c
  3125  001256  D7FE               	bra	u1547
  3126  001258  D000               	nop2	
  3127  00125A  0012               	return		;funcret
  3128  00125C                     __end_of_lcd_ini:
  3129                           	opt callstack 0
  3130                           
  3131 ;; *************** function _lcd_escreve_bf *****************
  3132 ;; Defined at:
  3133 ;;		line 74 in file "../Bibliotecas/LCD4bits.c"
  3134 ;; Parameters:    Size  Location     Type
  3135 ;;  lin             1    wreg     unsigned char 
  3136 ;;  col             1    6[COMRAM] unsigned char 
  3137 ;;  str             2    7[COMRAM] PTR unsigned char 
  3138 ;;		 -> bufferLCD(16), STR_2(14), STR_1(14), 
  3139 ;; Auto vars:     Size  Location     Type
  3140 ;;  lin             1   10[COMRAM] unsigned char 
  3141 ;;  end             1    9[COMRAM] unsigned char 
  3142 ;; Return value:  Size  Location     Type
  3143 ;;                  1    wreg      void 
  3144 ;; Registers used:
  3145 ;;		wreg, fsr1l, fsr1h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  3146 ;; Tracked objects:
  3147 ;;		On entry : 0/0
  3148 ;;		On exit  : 0/0
  3149 ;;		Unchanged: 0/0
  3150 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3151 ;;      Params:         3       0       0       0       0       0       0
  3152 ;;      Locals:         2       0       0       0       0       0       0
  3153 ;;      Temps:          0       0       0       0       0       0       0
  3154 ;;      Totals:         5       0       0       0       0       0       0
  3155 ;;Total ram usage:        5 bytes
  3156 ;; Hardware stack levels used:    1
  3157 ;; Hardware stack levels required when called:    4
  3158 ;; This function calls:
  3159 ;;		_lcd_envia_byte
  3160 ;; This function is called by:
  3161 ;;		_main
  3162 ;; This function uses a non-reentrant model
  3163 ;;
  3164                           
  3165                           	psect	text18
  3166  00125C                     __ptext18:
  3167                           	opt callstack 0
  3168  00125C                     _lcd_escreve_bf:
  3169                           	opt callstack 26
  3170                           
  3171                           ;incstack = 0
  3172                           ;lcd_escreve_bf@lin stored from wreg
  3173  00125C  6E0B               	movwf	lcd_escreve_bf@lin,c
  3174                           
  3175                           ;../Bibliotecas/LCD4bits.c: 74: void lcd_escreve_bf(char lin, char col, char *str);../Bi
      +                          bliotecas/LCD4bits.c: 75: {;../Bibliotecas/LCD4bits.c: 76:     char end;;../Bibliotecas/
      +                          LCD4bits.c: 79:     if (lin == 1)
  3176  00125E  040B               	decf	lcd_escreve_bf@lin,w,c
  3177  001260  A4D8               	btfss	status,2,c
  3178  001262  D003               	goto	l1926
  3179                           
  3180                           ;../Bibliotecas/LCD4bits.c: 80:         end = col + 0x80 - 1;
  3181  001264  5007               	movf	lcd_escreve_bf@col,w,c
  3182  001266  0F7F               	addlw	127
  3183  001268  D006               	goto	L3
  3184  00126A                     l1926:
  3185  00126A  0E02               	movlw	2
  3186  00126C  180B               	xorwf	lcd_escreve_bf@lin,w,c
  3187  00126E  A4D8               	btfss	status,2,c
  3188  001270  D003               	goto	l1930
  3189                           
  3190                           ;../Bibliotecas/LCD4bits.c: 82:         end = col + 0xC0 - 1;
  3191  001272  5007               	movf	lcd_escreve_bf@col,w,c
  3192  001274  0FBF               	addlw	191
  3193  001276                     L3:
  3194  001276  6E0A               	movwf	lcd_escreve_bf@end,c
  3195  001278                     l1930:
  3196                           
  3197                           ;../Bibliotecas/LCD4bits.c: 84:     lcd_envia_byte(0, end);
  3198  001278  C00A  F005         	movff	lcd_escreve_bf@end,lcd_envia_byte@dado
  3199  00127C  0E00               	movlw	0
  3200  00127E  EC97  F00A         	call	_lcd_envia_byte
  3201                           
  3202                           ;../Bibliotecas/LCD4bits.c: 86:     while(*str)
  3203  001282  D016               	goto	l1936
  3204  001284                     l1932:
  3205                           
  3206                           ;../Bibliotecas/LCD4bits.c: 87:     {;../Bibliotecas/LCD4bits.c: 88:        lcd_envia_by
      +                          te(1,*str);
  3207  001284  C008  FFF6         	movff	lcd_escreve_bf@str,tblptrl
  3208  001288  C009  FFF7         	movff	lcd_escreve_bf@str+1,tblptrh
  3209  00128C  6AF8               	clrf	tblptru,c
  3210  00128E  0E05               	movlw	(high __ramtop+-1)
  3211  001290  64F7               	cpfsgt	tblptrh,c
  3212  001292  D003               	bra	u1437
  3213  001294  0008               	tblrd		*
  3214  001296  50F5               	movf	tablat,w,c
  3215  001298  D005               	bra	u1430
  3216  00129A                     u1437:
  3217  00129A  CFF6 FFE1          	movff	tblptrl,fsr1l
  3218  00129E  CFF7 FFE2          	movff	tblptrh,fsr1h
  3219  0012A2  50E7               	movf	indf1,w,c
  3220  0012A4                     u1430:
  3221  0012A4  6E05               	movwf	lcd_envia_byte@dado,c
  3222  0012A6  0E01               	movlw	1
  3223  0012A8  EC97  F00A         	call	_lcd_envia_byte
  3224                           
  3225                           ;../Bibliotecas/LCD4bits.c: 89:        str++;
  3226  0012AC  4A08               	infsnz	lcd_escreve_bf@str,f,c
  3227  0012AE  2A09               	incf	lcd_escreve_bf@str+1,f,c
  3228  0012B0                     l1936:
  3229                           
  3230                           ;../Bibliotecas/LCD4bits.c: 86:     while(*str)
  3231  0012B0  C008  FFF6         	movff	lcd_escreve_bf@str,tblptrl
  3232  0012B4  C009  FFF7         	movff	lcd_escreve_bf@str+1,tblptrh
  3233  0012B8  6AF8               	clrf	tblptru,c
  3234  0012BA  0E05               	movlw	(high __ramtop+-1)
  3235  0012BC  64F7               	cpfsgt	tblptrh,c
  3236  0012BE  D003               	bra	u1447
  3237  0012C0  0008               	tblrd		*
  3238  0012C2  50F5               	movf	tablat,w,c
  3239  0012C4  D005               	bra	u1440
  3240  0012C6                     u1447:
  3241  0012C6  CFF6 FFE1          	movff	tblptrl,fsr1l
  3242  0012CA  CFF7 FFE2          	movff	tblptrh,fsr1h
  3243  0012CE  50E7               	movf	indf1,w,c
  3244  0012D0                     u1440:
  3245  0012D0  0900               	iorlw	0
  3246  0012D2  B4D8               	btfsc	status,2,c
  3247  0012D4  0012               	return	
  3248  0012D6  D7D6               	goto	l1932
  3249  0012D8                     __end_of_lcd_escreve_bf:
  3250                           	opt callstack 0
  3251                           
  3252 ;; *************** function _lcd_envia_byte *****************
  3253 ;; Defined at:
  3254 ;;		line 66 in file "../Bibliotecas/LCD4bits.c"
  3255 ;; Parameters:    Size  Location     Type
  3256 ;;  nivel           1    wreg     unsigned char 
  3257 ;;  dado            1    4[COMRAM] unsigned char 
  3258 ;; Auto vars:     Size  Location     Type
  3259 ;;  nivel           1    5[COMRAM] unsigned char 
  3260 ;; Return value:  Size  Location     Type
  3261 ;;                  1    wreg      void 
  3262 ;; Registers used:
  3263 ;;		wreg, status,2, status,0, cstack
  3264 ;; Tracked objects:
  3265 ;;		On entry : 0/0
  3266 ;;		On exit  : 0/0
  3267 ;;		Unchanged: 0/0
  3268 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3269 ;;      Params:         1       0       0       0       0       0       0
  3270 ;;      Locals:         1       0       0       0       0       0       0
  3271 ;;      Temps:          0       0       0       0       0       0       0
  3272 ;;      Totals:         2       0       0       0       0       0       0
  3273 ;;Total ram usage:        2 bytes
  3274 ;; Hardware stack levels used:    1
  3275 ;; Hardware stack levels required when called:    3
  3276 ;; This function calls:
  3277 ;;		_lcd_cmd
  3278 ;; This function is called by:
  3279 ;;		_lcd_escreve_bf
  3280 ;; This function uses a non-reentrant model
  3281 ;;
  3282                           
  3283                           	psect	text19
  3284  00152E                     __ptext19:
  3285                           	opt callstack 0
  3286  00152E                     _lcd_envia_byte:
  3287                           	opt callstack 26
  3288                           
  3289                           ;incstack = 0
  3290                           ;lcd_envia_byte@nivel stored from wreg
  3291  00152E  6E06               	movwf	lcd_envia_byte@nivel,c
  3292                           
  3293                           ;../Bibliotecas/LCD4bits.c: 66: void lcd_envia_byte(char nivel, char dado);../Biblioteca
      +                          s/LCD4bits.c: 67: {;../Bibliotecas/LCD4bits.c: 68:     LATEbits.LATE0 = nivel;
  3294  001530  B006               	btfsc	lcd_envia_byte@nivel,0,c
  3295  001532  D002               	bra	u1385
  3296  001534  908D               	bcf	3981,0,c	;volatile
  3297  001536  D001               	bra	u1386
  3298  001538                     u1385:
  3299  001538  808D               	bsf	3981,0,c	;volatile
  3300  00153A                     u1386:
  3301                           
  3302                           ;../Bibliotecas/LCD4bits.c: 69:     _delay((unsigned long)((100)*(8000000/4000000.0)));
  3303  00153A  0E42               	movlw	66
  3304  00153C                     u1557:
  3305  00153C  2EE8               	decfsz	wreg,f,c
  3306  00153E  D7FE               	bra	u1557
  3307  001540  D000               	nop2	
  3308                           
  3309                           ;../Bibliotecas/LCD4bits.c: 70:     LATEbits.LATE1 = 0;
  3310  001542  928D               	bcf	3981,1,c	;volatile
  3311                           
  3312                           ;../Bibliotecas/LCD4bits.c: 71:     lcd_cmd(dado);
  3313  001544  5005               	movf	lcd_envia_byte@dado,w,c
  3314  001546  EC73  F007         	call	_lcd_cmd
  3315  00154A  0012               	return		;funcret
  3316  00154C                     __end_of_lcd_envia_byte:
  3317                           	opt callstack 0
  3318                           
  3319 ;; *************** function _lcd_cmd *****************
  3320 ;; Defined at:
  3321 ;;		line 45 in file "../Bibliotecas/LCD4bits.c"
  3322 ;; Parameters:    Size  Location     Type
  3323 ;;  cmd             1    wreg     unsigned char 
  3324 ;; Auto vars:     Size  Location     Type
  3325 ;;  cmd             1    3[COMRAM] unsigned char 
  3326 ;; Return value:  Size  Location     Type
  3327 ;;                  1    wreg      void 
  3328 ;; Registers used:
  3329 ;;		wreg, status,2, status,0, cstack
  3330 ;; Tracked objects:
  3331 ;;		On entry : 0/0
  3332 ;;		On exit  : 0/0
  3333 ;;		Unchanged: 0/0
  3334 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3335 ;;      Params:         0       0       0       0       0       0       0
  3336 ;;      Locals:         1       0       0       0       0       0       0
  3337 ;;      Temps:          1       0       0       0       0       0       0
  3338 ;;      Totals:         2       0       0       0       0       0       0
  3339 ;;Total ram usage:        2 bytes
  3340 ;; Hardware stack levels used:    1
  3341 ;; Hardware stack levels required when called:    2
  3342 ;; This function calls:
  3343 ;;		_set_bit
  3344 ;; This function is called by:
  3345 ;;		_lcd_ini
  3346 ;;		_lcd_envia_byte
  3347 ;; This function uses a non-reentrant model
  3348 ;;
  3349                           
  3350                           	psect	text20
  3351  000EE6                     __ptext20:
  3352                           	opt callstack 0
  3353  000EE6                     _lcd_cmd:
  3354                           	opt callstack 27
  3355                           
  3356                           ;incstack = 0
  3357                           ;lcd_cmd@cmd stored from wreg
  3358  000EE6  6E04               	movwf	lcd_cmd@cmd,c
  3359                           
  3360                           ;../Bibliotecas/LCD4bits.c: 45: void lcd_cmd(char cmd);../Bibliotecas/LCD4bits.c: 46: {;
      +                          ../Bibliotecas/LCD4bits.c: 47:     LATDbits.LATD4 = set_bit(cmd, 0b00010000);
  3361  000EE8  0E10               	movlw	16
  3362  000EEA  6E01               	movwf	set_bit@comp,c
  3363  000EEC  5004               	movf	lcd_cmd@cmd,w,c
  3364  000EEE  ECA6  F00A         	call	_set_bit
  3365  000EF2  6E03               	movwf	??_lcd_cmd& (0+255),c
  3366  000EF4  3A03               	swapf	??_lcd_cmd,f,c
  3367  000EF6  508C               	movf	3980,w,c	;volatile
  3368  000EF8  1803               	xorwf	??_lcd_cmd,w,c
  3369  000EFA  0BEF               	andlw	-17
  3370  000EFC  1803               	xorwf	??_lcd_cmd,w,c
  3371  000EFE  6E8C               	movwf	3980,c	;volatile
  3372                           
  3373                           ;../Bibliotecas/LCD4bits.c: 48:     LATDbits.LATD5 = set_bit(cmd, 0b00100000);
  3374  000F00  0E20               	movlw	32
  3375  000F02  6E01               	movwf	set_bit@comp,c
  3376  000F04  5004               	movf	lcd_cmd@cmd,w,c
  3377  000F06  ECA6  F00A         	call	_set_bit
  3378  000F0A  6E03               	movwf	??_lcd_cmd& (0+255),c
  3379  000F0C  3A03               	swapf	??_lcd_cmd,f,c
  3380  000F0E  4603               	rlncf	??_lcd_cmd,f,c
  3381  000F10  508C               	movf	3980,w,c	;volatile
  3382  000F12  1803               	xorwf	??_lcd_cmd,w,c
  3383  000F14  0BDF               	andlw	-33
  3384  000F16  1803               	xorwf	??_lcd_cmd,w,c
  3385  000F18  6E8C               	movwf	3980,c	;volatile
  3386                           
  3387                           ;../Bibliotecas/LCD4bits.c: 49:     LATDbits.LATD6 = set_bit(cmd, 0b01000000);
  3388  000F1A  0E40               	movlw	64
  3389  000F1C  6E01               	movwf	set_bit@comp,c
  3390  000F1E  5004               	movf	lcd_cmd@cmd,w,c
  3391  000F20  ECA6  F00A         	call	_set_bit
  3392  000F24  6E03               	movwf	??_lcd_cmd& (0+255),c
  3393  000F26  3A03               	swapf	??_lcd_cmd,f,c
  3394  000F28  4603               	rlncf	??_lcd_cmd,f,c
  3395  000F2A  4603               	rlncf	??_lcd_cmd,f,c
  3396  000F2C  508C               	movf	3980,w,c	;volatile
  3397  000F2E  1803               	xorwf	??_lcd_cmd,w,c
  3398  000F30  0BBF               	andlw	-65
  3399  000F32  1803               	xorwf	??_lcd_cmd,w,c
  3400  000F34  6E8C               	movwf	3980,c	;volatile
  3401                           
  3402                           ;../Bibliotecas/LCD4bits.c: 50:     LATDbits.LATD7 = set_bit(cmd, 0b10000000);
  3403  000F36  0E80               	movlw	128
  3404  000F38  6E01               	movwf	set_bit@comp,c
  3405  000F3A  5004               	movf	lcd_cmd@cmd,w,c
  3406  000F3C  ECA6  F00A         	call	_set_bit
  3407  000F40  6E03               	movwf	??_lcd_cmd& (0+255),c
  3408  000F42  3203               	rrcf	??_lcd_cmd,f,c
  3409  000F44  3203               	rrcf	??_lcd_cmd,f,c
  3410  000F46  508C               	movf	3980,w,c	;volatile
  3411  000F48  1803               	xorwf	??_lcd_cmd,w,c
  3412  000F4A  0B7F               	andlw	-129
  3413  000F4C  1803               	xorwf	??_lcd_cmd,w,c
  3414  000F4E  6E8C               	movwf	3980,c	;volatile
  3415                           
  3416                           ;../Bibliotecas/LCD4bits.c: 52:     LATEbits.LATE1 = 1;
  3417  000F50  828D               	bsf	3981,1,c	;volatile
  3418                           
  3419                           ;../Bibliotecas/LCD4bits.c: 53:     LATEbits.LATE1 = 0;
  3420  000F52  928D               	bcf	3981,1,c	;volatile
  3421                           
  3422                           ;../Bibliotecas/LCD4bits.c: 55:     _delay((unsigned long)((100)*(8000000/4000000.0)));
  3423  000F54  0E42               	movlw	66
  3424  000F56                     u1567:
  3425  000F56  2EE8               	decfsz	wreg,f,c
  3426  000F58  D7FE               	bra	u1567
  3427  000F5A  D000               	nop2	
  3428                           
  3429                           ;../Bibliotecas/LCD4bits.c: 57:     LATDbits.LATD4 = set_bit(cmd, 0b00000001);
  3430  000F5C  0E01               	movlw	1
  3431  000F5E  6E01               	movwf	set_bit@comp,c
  3432  000F60  5004               	movf	lcd_cmd@cmd,w,c
  3433  000F62  ECA6  F00A         	call	_set_bit
  3434  000F66  6E03               	movwf	??_lcd_cmd& (0+255),c
  3435  000F68  3A03               	swapf	??_lcd_cmd,f,c
  3436  000F6A  508C               	movf	3980,w,c	;volatile
  3437  000F6C  1803               	xorwf	??_lcd_cmd,w,c
  3438  000F6E  0BEF               	andlw	-17
  3439  000F70  1803               	xorwf	??_lcd_cmd,w,c
  3440  000F72  6E8C               	movwf	3980,c	;volatile
  3441                           
  3442                           ;../Bibliotecas/LCD4bits.c: 58:     LATDbits.LATD5 = set_bit(cmd, 0b00000010);
  3443  000F74  0E02               	movlw	2
  3444  000F76  6E01               	movwf	set_bit@comp,c
  3445  000F78  5004               	movf	lcd_cmd@cmd,w,c
  3446  000F7A  ECA6  F00A         	call	_set_bit
  3447  000F7E  6E03               	movwf	??_lcd_cmd& (0+255),c
  3448  000F80  3A03               	swapf	??_lcd_cmd,f,c
  3449  000F82  4603               	rlncf	??_lcd_cmd,f,c
  3450  000F84  508C               	movf	3980,w,c	;volatile
  3451  000F86  1803               	xorwf	??_lcd_cmd,w,c
  3452  000F88  0BDF               	andlw	-33
  3453  000F8A  1803               	xorwf	??_lcd_cmd,w,c
  3454  000F8C  6E8C               	movwf	3980,c	;volatile
  3455                           
  3456                           ;../Bibliotecas/LCD4bits.c: 59:     LATDbits.LATD6 = set_bit(cmd, 0b00000100);
  3457  000F8E  0E04               	movlw	4
  3458  000F90  6E01               	movwf	set_bit@comp,c
  3459  000F92  5004               	movf	lcd_cmd@cmd,w,c
  3460  000F94  ECA6  F00A         	call	_set_bit
  3461  000F98  6E03               	movwf	??_lcd_cmd& (0+255),c
  3462  000F9A  3A03               	swapf	??_lcd_cmd,f,c
  3463  000F9C  4603               	rlncf	??_lcd_cmd,f,c
  3464  000F9E  4603               	rlncf	??_lcd_cmd,f,c
  3465  000FA0  508C               	movf	3980,w,c	;volatile
  3466  000FA2  1803               	xorwf	??_lcd_cmd,w,c
  3467  000FA4  0BBF               	andlw	-65
  3468  000FA6  1803               	xorwf	??_lcd_cmd,w,c
  3469  000FA8  6E8C               	movwf	3980,c	;volatile
  3470                           
  3471                           ;../Bibliotecas/LCD4bits.c: 60:     LATDbits.LATD7 = set_bit(cmd, 0b00001000);
  3472  000FAA  0E08               	movlw	8
  3473  000FAC  6E01               	movwf	set_bit@comp,c
  3474  000FAE  5004               	movf	lcd_cmd@cmd,w,c
  3475  000FB0  ECA6  F00A         	call	_set_bit
  3476  000FB4  6E03               	movwf	??_lcd_cmd& (0+255),c
  3477  000FB6  3203               	rrcf	??_lcd_cmd,f,c
  3478  000FB8  3203               	rrcf	??_lcd_cmd,f,c
  3479  000FBA  508C               	movf	3980,w,c	;volatile
  3480  000FBC  1803               	xorwf	??_lcd_cmd,w,c
  3481  000FBE  0B7F               	andlw	-129
  3482  000FC0  1803               	xorwf	??_lcd_cmd,w,c
  3483  000FC2  6E8C               	movwf	3980,c	;volatile
  3484                           
  3485                           ;../Bibliotecas/LCD4bits.c: 62:     LATEbits.LATE1 = 1;
  3486  000FC4  828D               	bsf	3981,1,c	;volatile
  3487                           
  3488                           ;../Bibliotecas/LCD4bits.c: 63:     LATEbits.LATE1 = 0;
  3489  000FC6  928D               	bcf	3981,1,c	;volatile
  3490  000FC8  0012               	return		;funcret
  3491  000FCA                     __end_of_lcd_cmd:
  3492                           	opt callstack 0
  3493                           
  3494 ;; *************** function _set_bit *****************
  3495 ;; Defined at:
  3496 ;;		line 34 in file "../Bibliotecas/LCD4bits.c"
  3497 ;; Parameters:    Size  Location     Type
  3498 ;;  cmd             1    wreg     unsigned char 
  3499 ;;  comp            1    0[COMRAM] unsigned char 
  3500 ;; Auto vars:     Size  Location     Type
  3501 ;;  cmd             1    1[COMRAM] unsigned char 
  3502 ;; Return value:  Size  Location     Type
  3503 ;;                  1    wreg      unsigned char 
  3504 ;; Registers used:
  3505 ;;		wreg, status,2, status,0
  3506 ;; Tracked objects:
  3507 ;;		On entry : 0/0
  3508 ;;		On exit  : 0/0
  3509 ;;		Unchanged: 0/0
  3510 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3511 ;;      Params:         1       0       0       0       0       0       0
  3512 ;;      Locals:         1       0       0       0       0       0       0
  3513 ;;      Temps:          0       0       0       0       0       0       0
  3514 ;;      Totals:         2       0       0       0       0       0       0
  3515 ;;Total ram usage:        2 bytes
  3516 ;; Hardware stack levels used:    1
  3517 ;; Hardware stack levels required when called:    1
  3518 ;; This function calls:
  3519 ;;		Nothing
  3520 ;; This function is called by:
  3521 ;;		_lcd_cmd
  3522 ;; This function uses a non-reentrant model
  3523 ;;
  3524                           
  3525                           	psect	text21
  3526  00154C                     __ptext21:
  3527                           	opt callstack 0
  3528  00154C                     _set_bit:
  3529                           	opt callstack 27
  3530                           
  3531                           ;incstack = 0
  3532                           ;set_bit@cmd stored from wreg
  3533  00154C  6E02               	movwf	set_bit@cmd,c
  3534                           
  3535                           ;../Bibliotecas/LCD4bits.c: 34: char set_bit(char cmd, char comp);../Bibliotecas/LCD4bit
      +                          s.c: 35: {;../Bibliotecas/LCD4bits.c: 36:     if ((cmd & comp) >= 1)
  3536  00154E  5002               	movf	set_bit@cmd,w,c
  3537  001550  1401               	andwf	set_bit@comp,w,c
  3538  001552  0900               	iorlw	0
  3539  001554  B4D8               	btfsc	status,2,c
  3540  001556  D002               	goto	l1642
  3541                           
  3542                           ;../Bibliotecas/LCD4bits.c: 37:         return 1;
  3543  001558  0E01               	movlw	1
  3544  00155A  0012               	return	
  3545  00155C                     l1642:
  3546                           
  3547                           ;../Bibliotecas/LCD4bits.c: 39:         return 0;
  3548  00155C  0E00               	movlw	0
  3549  00155E  0012               	return		;funcret
  3550  001560                     __end_of_set_bit:
  3551                           	opt callstack 0
  3552                           
  3553 ;; *************** function _int_TMR0 *****************
  3554 ;; Defined at:
  3555 ;;		line 14 in file "EX15.c"
  3556 ;; Parameters:    Size  Location     Type
  3557 ;;		None
  3558 ;; Auto vars:     Size  Location     Type
  3559 ;;		None
  3560 ;; Return value:  Size  Location     Type
  3561 ;;                  1    wreg      void 
  3562 ;; Registers used:
  3563 ;;		wreg, status,2, status,0
  3564 ;; Tracked objects:
  3565 ;;		On entry : 0/0
  3566 ;;		On exit  : 0/0
  3567 ;;		Unchanged: 0/0
  3568 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3569 ;;      Params:         0       0       0       0       0       0       0
  3570 ;;      Locals:         0       0       0       0       0       0       0
  3571 ;;      Temps:          0       0       0       0       0       0       0
  3572 ;;      Totals:         0       0       0       0       0       0       0
  3573 ;;Total ram usage:        0 bytes
  3574 ;; Hardware stack levels used:    1
  3575 ;; This function calls:
  3576 ;;		Nothing
  3577 ;; This function is called by:
  3578 ;;		Interrupt level 2
  3579 ;; This function uses a non-reentrant model
  3580 ;;
  3581                           
  3582                           	psect	intcode
  3583  000008                     __pintcode:
  3584                           	opt callstack 0
  3585  000008                     _int_TMR0:
  3586                           	opt callstack 22
  3587                           
  3588                           ;incstack = 0
  3589  000008  827E               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  3590  00000A  ED6C  F009         	call	int_func,f	;refresh shadow registers
  3591                           
  3592                           	psect	intcode_body
  3593  0012D8                     __pintcode_body:
  3594                           	opt callstack 22
  3595  0012D8                     int_func:
  3596                           	opt callstack 22
  3597  0012D8  0006               	pop		; remove dummy address from shadow register refresh
  3598                           
  3599                           ;EX15.c: 16:     if (TMR0IF)
  3600  0012DA  A4F2               	btfss	4082,2,c	;volatile
  3601  0012DC  D02A               	goto	i2l35
  3602                           
  3603                           ;EX15.c: 17:     {;EX15.c: 18:         conta5s++;
  3604  0012DE  4A7A               	infsnz	_conta5s,f,c
  3605  0012E0  2A7B               	incf	_conta5s+1,f,c
  3606                           
  3607                           ;EX15.c: 19:         T0_10s++;
  3608  0012E2  4A7C               	infsnz	_T0_10s,f,c
  3609  0012E4  2A7D               	incf	_T0_10s+1,f,c
  3610                           
  3611                           ;EX15.c: 20:         if (T0_10s>=2)
  3612  0012E6  BE7D               	btfsc	_T0_10s+1,7,c
  3613  0012E8  D00C               	goto	i2l1434
  3614  0012EA  507D               	movf	_T0_10s+1,w,c
  3615  0012EC  E104               	bnz	i2u72_40
  3616  0012EE  0E02               	movlw	2
  3617  0012F0  5C7C               	subwf	_T0_10s,w,c
  3618  0012F2  A0D8               	btfss	status,0,c
  3619  0012F4  D006               	goto	i2l1434
  3620  0012F6                     i2u72_40:
  3621                           
  3622                           ;EX15.c: 21:         {;EX15.c: 22:             T0_10s=0;
  3623  0012F6  0E00               	movlw	0
  3624  0012F8  6E7D               	movwf	_T0_10s+1,c
  3625  0012FA  0E00               	movlw	0
  3626  0012FC  6E7C               	movwf	_T0_10s,c
  3627                           
  3628                           ;EX15.c: 23:             conta10s++;
  3629  0012FE  4A78               	infsnz	_conta10s,f,c
  3630  001300  2A79               	incf	_conta10s+1,f,c
  3631  001302                     i2l1434:
  3632                           
  3633                           ;EX15.c: 25:         if (conta5s>=100) conta5s=0;
  3634  001302  BE7B               	btfsc	_conta5s+1,7,c
  3635  001304  D00A               	goto	i2l1438
  3636  001306  507B               	movf	_conta5s+1,w,c
  3637  001308  E104               	bnz	i2u73_40
  3638  00130A  0E64               	movlw	100
  3639  00130C  5C7A               	subwf	_conta5s,w,c
  3640  00130E  A0D8               	btfss	status,0,c
  3641  001310  D004               	goto	i2l1438
  3642  001312                     i2u73_40:
  3643  001312  0E00               	movlw	0
  3644  001314  6E7B               	movwf	_conta5s+1,c
  3645  001316  0E00               	movlw	0
  3646  001318  6E7A               	movwf	_conta5s,c
  3647  00131A                     i2l1438:
  3648                           
  3649                           ;EX15.c: 26:         if (conta10s>=50) conta10s=0;
  3650  00131A  BE79               	btfsc	_conta10s+1,7,c
  3651  00131C  D00A               	goto	i2l35
  3652  00131E  5079               	movf	_conta10s+1,w,c
  3653  001320  E104               	bnz	i2u74_40
  3654  001322  0E32               	movlw	50
  3655  001324  5C78               	subwf	_conta10s,w,c
  3656  001326  A0D8               	btfss	status,0,c
  3657  001328  D004               	goto	i2l35
  3658  00132A                     i2u74_40:
  3659  00132A  0E00               	movlw	0
  3660  00132C  6E79               	movwf	_conta10s+1,c
  3661  00132E  0E00               	movlw	0
  3662  001330  6E78               	movwf	_conta10s,c
  3663  001332                     i2l35:
  3664                           
  3665                           ;EX15.c: 28:      TMR0 = 26474;
  3666  001332  0E67               	movlw	103
  3667  001334  6ED7               	movwf	4055,c	;volatile
  3668  001336  0E6A               	movlw	106
  3669  001338  6ED6               	movwf	4054,c	;volatile
  3670                           
  3671                           ;EX15.c: 29:      TMR0IF = 0;
  3672  00133A  94F2               	bcf	4082,2,c	;volatile
  3673  00133C  927E               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  3674  00133E  0011               	retfie		f
  3675  001340                     __end_of_int_TMR0:
  3676                           	opt callstack 0
  3677                           
  3678                           	psect	rparam
  3679  0000                     
  3680                           	psect	temp
  3681  00007E                     btemp:
  3682                           	opt callstack 0
  3683  00007E                     	ds	1
  3684  0000                     int$flags	set	btemp
  3685  0000                     wtemp8	set	btemp+1
  3686  0000                     ttemp5	set	btemp+1
  3687  0000                     ttemp6	set	btemp+4
  3688  0000                     ttemp7	set	btemp+8
  3689                           tosu	equ	0xFFF
  3690                           tosh	equ	0xFFE
  3691                           tosl	equ	0xFFD
  3692                           stkptr	equ	0xFFC
  3693                           pclatu	equ	0xFFB
  3694                           pclath	equ	0xFFA
  3695                           pcl	equ	0xFF9
  3696                           tblptru	equ	0xFF8
  3697                           tblptrh	equ	0xFF7
  3698                           tblptrl	equ	0xFF6
  3699                           tablat	equ	0xFF5
  3700                           prodh	equ	0xFF4
  3701                           prodl	equ	0xFF3
  3702                           indf0	equ	0xFEF
  3703                           postinc0	equ	0xFEE
  3704                           postdec0	equ	0xFED
  3705                           preinc0	equ	0xFEC
  3706                           plusw0	equ	0xFEB
  3707                           fsr0h	equ	0xFEA
  3708                           fsr0l	equ	0xFE9
  3709                           wreg	equ	0xFE8
  3710                           indf1	equ	0xFE7
  3711                           postinc1	equ	0xFE6
  3712                           postdec1	equ	0xFE5
  3713                           preinc1	equ	0xFE4
  3714                           plusw1	equ	0xFE3
  3715                           fsr1h	equ	0xFE2
  3716                           fsr1l	equ	0xFE1
  3717                           bsr	equ	0xFE0
  3718                           indf2	equ	0xFDF
  3719                           postinc2	equ	0xFDE
  3720                           postdec2	equ	0xFDD
  3721                           preinc2	equ	0xFDC
  3722                           plusw2	equ	0xFDB
  3723                           fsr2h	equ	0xFDA
  3724                           fsr2l	equ	0xFD9
  3725                           status	equ	0xFD8


Data Sizes:
    Strings     33
    Constant    0
    Data        0
    BSS         62
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          126    111     125
    BANK0           128      0      48
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0

Pointer List with Targets:

    strlen@s	PTR const unsigned char  size(2) Largest target is 32
		 -> dbuf(BANK0[32]), 

    strlen@a	PTR const unsigned char  size(2) Largest target is 32
		 -> dbuf(BANK0[32]), 

    sprintf@fmt	PTR const unsigned char  size(2) Largest target is 5
		 -> STR_4(CODE[5]), STR_3(CODE[5]), 

    sprintf@s	PTR unsigned char  size(2) Largest target is 16
		 -> bufferLCD(BANK0[16]), 

    sprintf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_sprintf(COMRAM[2]), 

    f.buffer	PTR unsigned char  size(2) Largest target is 16
		 -> bufferLCD(BANK0[16]), 

    fputs@s	PTR const unsigned char  size(2) Largest target is 32
		 -> dbuf(BANK0[32]), 

    fputs@fp	PTR struct _IO_FILE size(2) Largest target is 7
		 -> sprintf@f(COMRAM[6]), 

    S885_IO_FILE$buffer	PTR unsigned char  size(2) Largest target is 16
		 -> bufferLCD(BANK0[16]), 

    fputc@fp.buffer	PTR unsigned char  size(2) Largest target is 16
		 -> bufferLCD(BANK0[16]), 

    fputc@fp	PTR struct _IO_FILE size(2) Largest target is 7
		 -> sprintf@f(COMRAM[6]), 

    atoi@s	PTR const unsigned char  size(2) Largest target is 5
		 -> STR_4(CODE[5]), STR_3(CODE[5]), 

    vfprintf@ap	PTR PTR void  size(2) Largest target is 2
		 -> sprintf@ap(COMRAM[2]), 

    vfprintf@fp	PTR struct _IO_FILE size(2) Largest target is 7
		 -> sprintf@f(COMRAM[6]), 

    vfprintf@fmt	PTR const unsigned char  size(2) Largest target is 5
		 -> STR_4(CODE[5]), STR_3(CODE[5]), 

    vfprintf@cfmt	PTR unsigned char  size(2) Largest target is 5
		 -> STR_4(CODE[5]), STR_3(CODE[5]), 

    vfpfcnvrt@fp	PTR struct _IO_FILE size(2) Largest target is 7
		 -> sprintf@f(COMRAM[6]), 

    vfpfcnvrt@ap	PTR PTR void  size(2) Largest target is 2
		 -> sprintf@ap(COMRAM[2]), 

    vfpfcnvrt@fmt	PTR PTR unsigned char  size(2) Largest target is 2
		 -> vfprintf@cfmt(COMRAM[2]), 

    dtoa@fp	PTR struct _IO_FILE size(2) Largest target is 7
		 -> sprintf@f(COMRAM[6]), 

    pad@fp	PTR struct _IO_FILE size(2) Largest target is 7
		 -> sprintf@f(COMRAM[6]), 

    pad@buf	PTR unsigned char  size(2) Largest target is 32
		 -> dbuf(BANK0[32]), 

    lcd_escreve_bf@str	PTR unsigned char  size(2) Largest target is 16
		 -> bufferLCD(BANK0[16]), STR_2(CODE[14]), STR_1(CODE[14]), 


Critical Paths under _main in COMRAM

    _main->_sprintf
    _sprintf->_vfprintf
    _vfprintf->_vfpfcnvrt
    _vfpfcnvrt->_dtoa
    _dtoa->_pad
    _pad->_fputs
    _fputs->_fputc
    _abs->___aomod
    _atoi->_isspace
    _lcd_ini->_lcd_cmd
    _lcd_escreve_bf->_lcd_envia_byte
    _lcd_envia_byte->_lcd_cmd
    _lcd_cmd->_set_bit

Critical Paths under _int_TMR0 in COMRAM

    None.

Critical Paths under _main in BANK0

    None.

Critical Paths under _int_TMR0 in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _int_TMR0 in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _int_TMR0 in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _int_TMR0 in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _int_TMR0 in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _int_TMR0 in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0   11107
                                            109 COMRAM     2     2      0
                     _lcd_escreve_bf
                            _lcd_ini
                            _sprintf
 ---------------------------------------------------------------------------------
 (1) _sprintf                                             16    10      6    8444
                                             93 COMRAM    16    10      6
                           _vfprintf
 ---------------------------------------------------------------------------------
 (2) _vfprintf                                             8     2      6    7939
                                             85 COMRAM     8     2      6
                          _vfpfcnvrt
 ---------------------------------------------------------------------------------
 (3) _vfpfcnvrt                                           46    40      6    7566
                                             63 COMRAM    22    16      6
                               _atoi
                               _dtoa
                              _fputc
                            _isdigit
 ---------------------------------------------------------------------------------
 (4) _dtoa                                                36    26     10    4358
                                             27 COMRAM    36    26     10
                            ___aodiv
                            ___aomod
                                _abs
                                _pad
 ---------------------------------------------------------------------------------
 (5) _pad                                                 11     5      6    2709
                                             16 COMRAM    11     5      6
                              _fputc
                              _fputs
                             _strlen
 ---------------------------------------------------------------------------------
 (6) _strlen                                               4     2      2     166
                                              0 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (6) _fputs                                                7     3      4    1235
                                              9 COMRAM     7     3      4
                              _fputc
 ---------------------------------------------------------------------------------
 (4) _fputc                                                9     5      4     834
                                              0 COMRAM     9     5      4
                              _putch
 ---------------------------------------------------------------------------------
 (5) _putch                                                1     1      0       0
 ---------------------------------------------------------------------------------
 (5) _abs                                                  4     2      2     142
                                             18 COMRAM     4     2      2
                            ___aomod (ARG)
 ---------------------------------------------------------------------------------
 (5) ___aomod                                             18     2     16     448
                                              0 COMRAM    18     2     16
 ---------------------------------------------------------------------------------
 (5) ___aodiv                                             26    10     16     452
                                              0 COMRAM    26    10     16
 ---------------------------------------------------------------------------------
 (4) _atoi                                                15    13      2    1244
                                              7 COMRAM    15    13      2
                             ___wmul
                            _isdigit
                            _isspace
 ---------------------------------------------------------------------------------
 (5) _isspace                                              7     5      2     207
                                              0 COMRAM     7     5      2
 ---------------------------------------------------------------------------------
 (4) _isdigit                                              6     4      2     237
                                              0 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (5) ___wmul                                               6     2      4     403
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (1) _lcd_ini                                              2     2      0     874
                                              4 COMRAM     2     2      0
                            _lcd_cmd
 ---------------------------------------------------------------------------------
 (1) _lcd_escreve_bf                                       5     2      3    1789
                                              6 COMRAM     5     2      3
                     _lcd_envia_byte
 ---------------------------------------------------------------------------------
 (2) _lcd_envia_byte                                       2     1      1    1024
                                              4 COMRAM     2     1      1
                            _lcd_cmd
 ---------------------------------------------------------------------------------
 (2) _lcd_cmd                                              2     2      0     828
                                              2 COMRAM     2     2      0
                            _set_bit
 ---------------------------------------------------------------------------------
 (3) _set_bit                                              2     1      1     652
                                              0 COMRAM     2     1      1
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (9) _int_TMR0                                             0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 9
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _lcd_escreve_bf
     _lcd_envia_byte
       _lcd_cmd
         _set_bit
   _lcd_ini
     _lcd_cmd
       _set_bit
   _sprintf
     _vfprintf
       _vfpfcnvrt
         _atoi
           ___wmul
           _isdigit
           _isspace
         _dtoa
           ___aodiv
           ___aomod
           _abs
             ___aomod (ARG)
           _pad
             _fputc
               _putch
             _fputs
               _fputc
                 _putch
             _strlen
         _fputc
           _putch
         _isdigit

 _int_TMR0 (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             5FF      0       0      17        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK5           100      0       0      16        0.0%
BANK5              100      0       0      14        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80      0      30       5       37.5%
BITCOMRAM           7E      0       0       0        0.0%
COMRAM              7E     6F      7D       1       99.2%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      AD      15        0.0%
DATA                 0      0      AD       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.05 build -831301201 
Symbol Table                                                                                   Fri Apr 19 17:33:52 2019

    ___wmul@multiplicand 0003              __CFG_BORV$3 000000             __CFG_CP0$OFF 000000  
           __CFG_CP1$OFF 000000             __CFG_CP2$OFF 000000             __CFG_CP3$OFF 000000  
            __CFG_OSC$HS 000000                      l130 0972                      l117 1164  
                    l128 096A                      l862 147E                      l893 0DB8  
           __CFG_CPB$OFF 000000             __CFG_CPD$OFF 000000                      u911 0B94  
                    u930 0BCC                      u770 10A6                      u860 1464  
                    u870 14B0                      u790 10EE                      u880 14B2  
                    u990 0E44                      _abs 1456                      _pad 1136  
                    wreg 000FE8             __CFG_LVP$OFF 000000             __CFG_WDT$OFF 000000  
                   ?_abs 0013                     l1500 14C6                     l1510 114E  
                   l1520 1186                     l1610 0E88                     l1602 0E2C  
                   l1514 115C                     l1604 0E40                     l1524 11B2  
                   l1516 116E                     l1700 0AF8                     l1630 1416  
                   l1710 0C94                     l1550 0B66                     l1614 0E9E  
                   l1720 0CDE                     l1712 0C98                     l1480 10AE  
                   l1704 0B10                     l1800 068A                     l1642 155C  
                   l1730 0CFC                     l1562 0BB4                     l1618 0EC4  
                   l1490 1428                     l1900 11F0                     l1732 0D24  
                   l1564 0BC8                     l1556 0B8E                     l1652 094E  
                   l1820 0760                     l1804 0694                     l1726 0CEE  
                   l1582 0C60                     l1574 0C24                     l1494 143E  
                   l1670 099C                     l1822 076E                     l1806 06D6  
                   l1736 0D58                     l1728 0CF6                     l1680 0A94  
                   l1930 1278                     l1578 0C3A                     l1594 0DEE  
                   l1498 14C2                     l1666 098C                     l1818 0742  
                   l1932 1284                     l1844 08A2                     l1780 0668  
                   l1926 126A                     l1598 0E12                     l1838 0866  
                   l1782 066A                     l1854 08C4                     l1936 12B0  
                   l1848 08AC                     l1792 0682                     l1784 067A  
                   l1880 1376                     l1960 100A                     l1796 0686  
                   l1788 067E                     l1878 1352                     ?_pad 0011  
                   STR_1 0601                     STR_2 060F                     STR_3 061D  
                   STR_4 061D                     u1030 1412                     u1110 0986  
                   u1120 0AA2                     u1210 0CDA                     u1050 0920  
                   u1140 0AC4                     u1060 0922                     u1141 0AC2  
                   u1230 0D88                     u1150 0AD2                     u1240 0D8A  
                   u1160 0AD6                     u1320 07A6                     u1090 0960  
                   u1330 07A8                     u1180 0AE2                     u1340 07B4  
                   u1430 12A4                     u1440 12D0                     u1360 07E8  
                   _LATD 000F8C                     u1507 1214                     u1460 1028  
                   u1437 129A                     u1517 1222                     u1447 12C6  
                   u1527 1234                     u1385 1538                     u1537 1246  
                   u1386 153A                     u1466 102A                     u1547 1254  
                   u1557 153C                     u1477 1014                     u1567 0F56  
                   u1487 11E2                     u1497 11FC                     i2l35 1332  
                   _TMR0 000FD6             __CFG_PWRT$ON 000000                     abs@a 0013  
                   _dbuf 0080                     _atoi 0C82                     _main 0FCA  
                   _dtoa 08F8                     _prec 0074                     _nout 0070  
                   pad@i 0018                     pad@p 0015                     fsr1h 000FE2  
                   fsr2h 000FDA                     indf1 000FE7                     indf2 000FDF  
                   fsr1l 000FE1                     pad@w 001A                     fsr2l 000FD9  
                   btemp 007E                     prodh 000FF4                     prodl 000FF3  
                   start 000E            __CFG_IESO$OFF 000000            __CFG_MCLRE$ON 000000  
           ___param_bank 000000                    ??_abs 0015                    ??_pad 0017  
        __end_of___aodiv 0C82                    ?_atoi 0008                    ?_main 0001  
                  ?_dtoa 001C          __end_of___aomod 0EE6                    _T0CON 000FD5  
           vfpfcnvrt@fmt 0042                    _TRISD 000F95            __CFG_WRT0$OFF 000000  
          __CFG_WRT1$OFF 000000            __CFG_WRT2$OFF 000000            __CFG_WRT3$OFF 000000  
         __CFG_EBTR0$OFF 000000           __CFG_FCMEN$OFF 000000           __CFG_EBTR1$OFF 000000  
         __CFG_EBTR2$OFF 000000           __CFG_EBTR3$OFF 000000          __end_of_lcd_cmd 0FCA  
        __end_of_lcd_ini 125C            __CFG_WRTB$OFF 000000            __CFG_WRTC$OFF 000000  
          __CFG_WRTD$OFF 000000           __CFG_EBTRB$OFF 000000                    _flags 0076  
                  _fputc 1096                    _fputs 141E          __end_of_isdigit 14B8  
                  atoi@n 0015                    pad@fp 0011                    atoi@s 0008  
                  _width 0072                    _putch 1560                    dtoa@d 001E  
                  dtoa@i 003E                    dtoa@n 0036                    dtoa@p 0030  
                  dtoa@s 0034                    dtoa@w 0032          __end_of_isspace 141E  
         __CFG_BOREN$OFF 000000          __end_of_set_bit 1560                    tablat 000FF5  
                  ttemp5 007F                    ttemp6 0082                    ttemp7 0086  
                  status 000FD8                    wtemp8 007F          __end_of_sprintf 13E0  
        __initialization 14E2             __end_of_atoi 0DC2             __end_of_main 1096  
           __end_of_dtoa 0B3A                   ??_atoi 000A                   ??_main 006E  
                 ??_dtoa 0026            __activetblptr 000002                   _ADCON1 000FC1  
                 ?_fputc 0001                   ?_fputs 000A                   ?_putch 0001  
                 _T0_10s 007C                   i2l1434 1302                   i2l1438 131A  
                 _INTCON 000FF2            vfpfcnvrt@done 0052                   _TMR0IF 007F92  
         __CFG_XINST$OFF 000000             vfprintf@cfmt 005C                ??___aodiv 0011  
              ??___aomod 0011                   ___wmul 1508           __CFG_STVREN$ON 000000  
       __end_of_int_TMR0 1340         ??_lcd_escreve_bf 000A                   clear_0 14E8  
                 clear_1 14F4         ??_lcd_envia_byte 0006                   pad@buf 0013  
              ??_lcd_cmd 0003                   dtoa@fp 001C                ??_lcd_ini 0005  
                 _strlen 14B8                   fputc@c 0001                   fputs@c 000E  
                 fputs@i 000F                   fputs@s 000A                ??_isdigit 0003  
           __mediumconst 0000                ??_isspace 0003                ??_set_bit 0002  
                 tblptrh 000FF7                   tblptrl 000FF6                   tblptru 000FF8  
                 putch@c 0001         __end_of_vfprintf 1392                ??_sprintf 0064  
             __accesstop 0080  __end_of__initialization 14FA          __CFG_PBADEN$OFF 000000  
          ___rparam_used 000001           __pcstackCOMRAM 0001            __end_of_fputc 1136  
          __end_of_fputs 1456            __end_of_putch 1562                  ??_fputc 0005  
                ??_fputs 000E                  ??_putch 0001               __pbssBANK0 0080  
                ?___wmul 0001                  ?_strlen 0001       __size_of_vfpfcnvrt 02D4  
                i2u72_40 12F6                  i2u73_40 1312                  i2u74_40 132A  
              ?_int_TMR0 0001                  __Hparam 0000                  __Lparam 0000  
                ___aodiv 0B3A                  ___aomod 0DC2          __size_of___wmul 0026  
              ?_vfprintf 0056              set_bit@comp 0001             __psmallconst 0600  
                __pcinit 14E2                  __ramtop 0600                  __ptext0 0FCA  
                __ptext1 1392                  __ptext2 1340                  __ptext3 0624  
                __ptext4 08F8                  __ptext5 1136                  __ptext6 14B8  
                __ptext7 141E                  __ptext8 1096                  __ptext9 1560  
                _lcd_cmd 0EE6                  _conta5s 007A                  _lcd_ini 11CC  
        __size_of_strlen 002A             __size_of_abs 0032             __size_of_pad 0096  
                _isdigit 1488                  _isspace 13E0                  _set_bit 154C  
                atoi@neg 000E                  _sprintf 1392           __pintcode_body 12D8  
   end_of_initialization 14FA               ??_int_TMR0 0001       lcd_envia_byte@dado 0005  
                fputc@fp 0003            __Lmediumconst 0000                  int_func 12D8  
                fputs@fp 000C        __end_of_vfpfcnvrt 08F8                  postdec2 000FDD  
                postinc0 000FEE                  postinc1 000FE6                  postinc2 000FDE  
             ??_vfprintf 005C                  strlen@a 0003                  strlen@s 0001  
              _PORTBbits 000F81                _TRISBbits 000F93                _TRISEbits 000F96  
             lcd_cmd@cmd 0004              vfpfcnvrt@ap 0044              vfpfcnvrt@fp 0040  
            vfpfcnvrt@ll 004A           __end_of___wmul 152E           __end_of_strlen 14E2  
    start_initialization 14E2              __end_of_abs 1488              __end_of_pad 11CC  
            vfprintf@fmt 0058                 ??___wmul 0005         __CFG_LPT1OSC$OFF 000000  
               ??_strlen 0003              __pbssCOMRAM 0070         ___aodiv@dividend 0001  
__size_of_lcd_escreve_bf 007C  __size_of_lcd_envia_byte 001E        __size_of_int_TMR0 1338  
      __CFG_CCP2MX$PORTC 000000                __pintcode 0008                 ?___aodiv 0001  
               ?___aomod 0001        lcd_escreve_bf@end 000A        lcd_escreve_bf@col 0007  
      lcd_escreve_bf@lin 000B         ___aodiv@quotient 0013        lcd_escreve_bf@str 0008  
              _bufferLCD 00A0                 ?_lcd_cmd 0001        __size_of_vfprintf 0052  
               ?_lcd_ini 0001              __smallconst 0600                 ?_isdigit 0001  
               ?_isspace 0001                 ?_set_bit 0001               set_bit@cmd 0002  
               ?_sprintf 005E           __size_of_fputc 00A0           __size_of_fputs 0038  
         __size_of_putch 0002           ___wmul@product 0005                 _LATDbits 000F8C  
               _LATEbits 000F8D         __CFG_WDTPS$32768 000000                _vfpfcnvrt 0624  
      ___wmul@multiplier 0001                 __Hrparam 0000               vfprintf@ap 005A  
               __Lrparam 0000               vfprintf@fp 0056         __size_of___aodiv 0148  
       __size_of___aomod 0124               ?_vfpfcnvrt 0040          ___aodiv@divisor 0009  
        ___aodiv@counter 0011         __size_of_lcd_cmd 00E4         __size_of_lcd_ini 0090  
             sprintf@fmt 0060                 _atoi$863 0010                 _atoi$864 0014  
               _atoi$865 0012         __size_of_isdigit 0030                 _dtoa$391 002E  
         _lcd_escreve_bf 125C         __size_of_isspace 003E                 __ptext10 1456  
               __ptext11 0DC2                 __ptext20 0EE6                 __ptext12 0B3A  
               __ptext21 154C                 __ptext13 0C82                 __ptext14 13E0  
               __ptext15 1488                 __ptext16 1508                 __ptext17 11CC  
               __ptext18 125C                 __ptext19 152E         __size_of_set_bit 0014  
         _lcd_envia_byte 152E                 _conta10s 0078         __size_of_sprintf 004E  
               _int_TMR0 0008            __size_of_atoi 0140            __size_of_main 00CC  
          __size_of_dtoa 0242                 int$flags 007E                 lcd_ini@i 0006  
               _vfprintf 1340              _isspace$881 0007         ___aomod@dividend 0001  
 __end_of_lcd_escreve_bf 12D8   __end_of_lcd_envia_byte 154C      lcd_envia_byte@nivel 0006  
               isdigit@c 0001                 intlevel2 0000                sprintf@ap 0066  
               isspace@c 0001          ___aomod@divisor 0009              ??_vfpfcnvrt 0046  
          _vfpfcnvrt$406 0054          ___aomod@counter 0011                 sprintf@f 0068  
               sprintf@s 005E          ?_lcd_escreve_bf 0007          ?_lcd_envia_byte 0005  
           ___aodiv@sign 0012             ___aomod@sign 0012  
