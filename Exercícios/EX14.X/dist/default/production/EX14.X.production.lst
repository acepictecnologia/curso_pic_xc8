

Microchip MPLAB XC8 Assembler V2.05 build -831301201 
                                                                                               Fri Apr 19 16:43:00 2019

Microchip MPLAB XC8 C Compiler v2.05 (Free license) build 20181220022703 Og1 
     1                           	processor	18F4520
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	flic
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
     9                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    10                           	psect	text0,global,reloc=2,class=CODE,delta=1
    11                           	psect	text1,global,reloc=2,class=CODE,delta=1,group=2
    12                           	psect	text2,global,reloc=2,class=CODE,delta=1
    13                           	psect	text3,global,reloc=2,class=CODE,delta=1
    14                           	psect	text4,global,reloc=2,class=CODE,delta=1
    15                           	psect	text5,global,reloc=2,class=CODE,delta=1
    16                           	psect	text6,global,reloc=2,class=CODE,delta=1,group=2
    17                           	psect	text7,global,reloc=2,class=CODE,delta=1,group=2
    18                           	psect	text8,global,reloc=2,class=CODE,delta=1,group=2
    19                           	psect	text9,global,reloc=2,class=CODE,delta=1,group=2
    20                           	psect	text10,global,reloc=2,class=CODE,delta=1,group=2
    21                           	psect	text11,global,reloc=2,class=CODE,delta=1,group=1
    22                           	psect	text12,global,reloc=2,class=CODE,delta=1,group=1
    23                           	psect	text13,global,reloc=2,class=CODE,delta=1,group=2
    24                           	psect	text14,global,reloc=2,class=CODE,delta=1,group=2
    25                           	psect	text15,global,reloc=2,class=CODE,delta=1,group=2
    26                           	psect	text16,global,reloc=2,class=CODE,delta=1,group=1
    27                           	psect	text17,global,reloc=2,class=CODE,delta=1
    28                           	psect	text18,global,reloc=2,class=CODE,delta=1
    29                           	psect	text19,global,reloc=2,class=CODE,delta=1
    30                           	psect	text20,global,reloc=2,class=CODE,delta=1
    31                           	psect	text21,global,reloc=2,class=CODE,delta=1
    32                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    33                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    34                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    35                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    36                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    37  0000                     
    38                           ; Version 2.05
    39                           ; Generated 20/12/2018 GMT
    40                           ; 
    41                           ; Copyright Â© 2018, Microchip Technology Inc. and its subsidiaries ("Microchip")
    42                           ; All rights reserved.
    43                           ; 
    44                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    45                           ; 
    46                           ; Redistribution and use in source and binary forms, with or without modification, are
    47                           ; permitted provided that the following conditions are met:
    48                           ; 
    49                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    50                           ;        conditions and the following disclaimer.
    51                           ; 
    52                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    53                           ;        of conditions and the following disclaimer in the documentation and/or other
    54                           ;        materials provided with the distribution.
    55                           ; 
    56                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    57                           ;        software without specific prior written permission.
    58                           ; 
    59                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    60                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    61                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    62                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    63                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    64                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    65                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    66                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    67                           ; 
    68                           ; 
    69                           ; Code-generator required, PIC18F4520 Definitions
    70                           ; 
    71                           ; SFR Addresses
    72  0000                     _TMR0	set	4054
    73  0000                     _LATDbits	set	3980
    74  0000                     _LATEbits	set	3981
    75  0000                     _LATD	set	3980
    76  0000                     _TRISEbits	set	3990
    77  0000                     _TRISD	set	3989
    78  0000                     _T0CON	set	4053
    79  0000                     _INTCON	set	4082
    80  0000                     _ADCON1	set	4033
    81  0000                     _PORTBbits	set	3969
    82  0000                     _TRISBbits	set	3987
    83  0000                     _TMR0IF	set	32658
    84                           
    85                           	psect	smallconst
    86  000600                     __psmallconst:
    87                           	opt callstack 0
    88  000600  00                 	db	0
    89  000601                     STR_2:
    90  000601  43                 	db	67	;'C'
    91  000602  4F                 	db	79	;'O'
    92  000603  4E                 	db	78	;'N'
    93  000604  54                 	db	84	;'T'
    94  000605  41                 	db	65	;'A'
    95  000606  47                 	db	71	;'G'
    96  000607  45                 	db	69	;'E'
    97  000608  4D                 	db	77	;'M'
    98  000609  3A                 	db	58	;':'
    99  00060A  20                 	db	32
   100  00060B  30                 	db	48	;'0'
   101  00060C  30                 	db	48	;'0'
   102  00060D  00                 	db	0
   103  00060E                     STR_1:
   104  00060E  54                 	db	84	;'T'
   105  00060F  49                 	db	73	;'I'
   106  000610  4D                 	db	77	;'M'
   107  000611  45                 	db	69	;'E'
   108  000612  52                 	db	82	;'R'
   109  000613  30                 	db	48	;'0'
   110  000614  00                 	db	0
   111  000615                     STR_3:
   112  000615  25                 	db	37
   113  000616  30                 	db	48	;'0'
   114  000617  32                 	db	50	;'2'
   115  000618  64                 	db	100	;'d'
   116  000619  00                 	db	0
   117                           
   118                           ; #config settings
   119  00061A  00                 	db	0	; dummy byte at the end
   120  0000                     
   121                           	psect	cinit
   122  001474                     __pcinit:
   123                           	opt callstack 0
   124  001474                     start_initialization:
   125                           	opt callstack 0
   126  001474                     __initialization:
   127                           	opt callstack 0
   128                           
   129                           ; Clear objects allocated to BANK0 (48 bytes)
   130  001474  EE00  F080         	lfsr	0,__pbssBANK0
   131  001478  0E30               	movlw	48
   132  00147A                     clear_0:
   133  00147A  6AEE               	clrf	postinc0,c
   134  00147C  06E8               	decf	wreg,f,c
   135  00147E  E1FD               	bnz	clear_0
   136                           
   137                           ; Clear objects allocated to COMRAM (10 bytes)
   138  001480  EE00  F070         	lfsr	0,__pbssCOMRAM
   139  001484  0E0A               	movlw	10
   140  001486                     clear_1:
   141  001486  6AEE               	clrf	postinc0,c
   142  001488  06E8               	decf	wreg,f,c
   143  00148A  E1FD               	bnz	clear_1
   144  00148C                     end_of_initialization:
   145                           	opt callstack 0
   146  00148C                     __end_of__initialization:
   147                           	opt callstack 0
   148  00148C  907A               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   149  00148E  927A               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   150  001490  0E00               	movlw	low (__Lmediumconst shr (0+16))
   151  001492  6EF8               	movwf	tblptru,c
   152  001494  0100               	movlb	0
   153  001496  EF31  F008         	goto	_main	;jump to C main() function
   154                           
   155                           	psect	bssCOMRAM
   156  000070                     __pbssCOMRAM:
   157                           	opt callstack 0
   158  000070                     _nout:
   159                           	opt callstack 0
   160  000070                     	ds	2
   161  000072                     _width:
   162                           	opt callstack 0
   163  000072                     	ds	2
   164  000074                     _prec:
   165                           	opt callstack 0
   166  000074                     	ds	2
   167  000076                     _flags:
   168                           	opt callstack 0
   169  000076                     	ds	2
   170  000078                     _conta:
   171                           	opt callstack 0
   172  000078                     	ds	2
   173                           
   174                           	psect	bssBANK0
   175  000080                     __pbssBANK0:
   176                           	opt callstack 0
   177  000080                     _dbuf:
   178                           	opt callstack 0
   179  000080                     	ds	32
   180  0000A0                     _bufferLCD:
   181                           	opt callstack 0
   182  0000A0                     	ds	16
   183                           
   184                           	psect	cstackCOMRAM
   185  000001                     __pcstackCOMRAM:
   186                           	opt callstack 0
   187  000001                     ?_strlen:
   188                           	opt callstack 0
   189  000001                     ?_isdigit:
   190                           	opt callstack 0
   191  000001                     ?_isspace:
   192                           	opt callstack 0
   193  000001                     ?___wmul:
   194                           	opt callstack 0
   195  000001                     ?___aodiv:
   196                           	opt callstack 0
   197  000001                     ?___aomod:
   198                           	opt callstack 0
   199  000001                     set_bit@comp:
   200                           	opt callstack 0
   201  000001                     ___wmul@multiplier:
   202                           	opt callstack 0
   203  000001                     isdigit@c:
   204                           	opt callstack 0
   205  000001                     isspace@c:
   206                           	opt callstack 0
   207  000001                     fputc@c:
   208                           	opt callstack 0
   209  000001                     strlen@s:
   210                           	opt callstack 0
   211  000001                     ___aodiv@dividend:
   212                           	opt callstack 0
   213  000001                     ___aomod@dividend:
   214                           	opt callstack 0
   215                           
   216                           ; 8 bytes @ 0x0
   217  000001                     	ds	1
   218  000002                     set_bit@cmd:
   219                           	opt callstack 0
   220                           
   221                           ; 1 bytes @ 0x1
   222  000002                     	ds	1
   223  000003                     ??_lcd_cmd:
   224  000003                     ??_isdigit:
   225  000003                     ??_isspace:
   226  000003                     ___wmul@multiplicand:
   227                           	opt callstack 0
   228  000003                     fputc@fp:
   229                           	opt callstack 0
   230  000003                     strlen@a:
   231                           	opt callstack 0
   232                           
   233                           ; 2 bytes @ 0x2
   234  000003                     	ds	1
   235  000004                     lcd_cmd@cmd:
   236                           	opt callstack 0
   237                           
   238                           ; 1 bytes @ 0x3
   239  000004                     	ds	1
   240  000005                     ??_lcd_ini:
   241  000005                     ??_fputc:
   242  000005                     lcd_envia_byte@dado:
   243                           	opt callstack 0
   244  000005                     ___wmul@product:
   245                           	opt callstack 0
   246                           
   247                           ; 2 bytes @ 0x4
   248  000005                     	ds	1
   249  000006                     lcd_ini@i:
   250                           	opt callstack 0
   251  000006                     lcd_envia_byte@nivel:
   252                           	opt callstack 0
   253                           
   254                           ; 1 bytes @ 0x5
   255  000006                     	ds	1
   256  000007                     lcd_escreve_bf@col:
   257                           	opt callstack 0
   258  000007                     _isspace$878:
   259                           	opt callstack 0
   260                           
   261                           ; 1 bytes @ 0x6
   262  000007                     	ds	1
   263  000008                     ?_atoi:
   264                           	opt callstack 0
   265  000008                     lcd_escreve_bf@str:
   266                           	opt callstack 0
   267  000008                     atoi@s:
   268                           	opt callstack 0
   269                           
   270                           ; 2 bytes @ 0x7
   271  000008                     	ds	1
   272  000009                     ___aodiv@divisor:
   273                           	opt callstack 0
   274  000009                     ___aomod@divisor:
   275                           	opt callstack 0
   276                           
   277                           ; 8 bytes @ 0x8
   278  000009                     	ds	1
   279  00000A                     ??_atoi:
   280  00000A                     lcd_escreve_bf@end:
   281                           	opt callstack 0
   282  00000A                     fputs@s:
   283                           	opt callstack 0
   284                           
   285                           ; 2 bytes @ 0x9
   286  00000A                     	ds	1
   287  00000B                     lcd_escreve_bf@lin:
   288                           	opt callstack 0
   289                           
   290                           ; 1 bytes @ 0xA
   291  00000B                     	ds	1
   292  00000C                     fputs@fp:
   293                           	opt callstack 0
   294                           
   295                           ; 2 bytes @ 0xB
   296  00000C                     	ds	2
   297  00000E                     fputs@c:
   298                           	opt callstack 0
   299  00000E                     atoi@neg:
   300                           	opt callstack 0
   301                           
   302                           ; 2 bytes @ 0xD
   303  00000E                     	ds	1
   304  00000F                     fputs@i:
   305                           	opt callstack 0
   306                           
   307                           ; 2 bytes @ 0xE
   308  00000F                     	ds	1
   309  000010                     _atoi$860:
   310                           	opt callstack 0
   311                           
   312                           ; 2 bytes @ 0xF
   313  000010                     	ds	1
   314  000011                     ?_pad:
   315                           	opt callstack 0
   316  000011                     ___aodiv@counter:
   317                           	opt callstack 0
   318  000011                     ___aomod@counter:
   319                           	opt callstack 0
   320  000011                     pad@fp:
   321                           	opt callstack 0
   322                           
   323                           ; 2 bytes @ 0x10
   324  000011                     	ds	1
   325  000012                     ___aodiv@sign:
   326                           	opt callstack 0
   327  000012                     ___aomod@sign:
   328                           	opt callstack 0
   329  000012                     _atoi$862:
   330                           	opt callstack 0
   331                           
   332                           ; 2 bytes @ 0x11
   333  000012                     	ds	1
   334  000013                     ?_abs:
   335                           	opt callstack 0
   336  000013                     pad@buf:
   337                           	opt callstack 0
   338  000013                     abs@a:
   339                           	opt callstack 0
   340  000013                     ___aodiv@quotient:
   341                           	opt callstack 0
   342                           
   343                           ; 8 bytes @ 0x12
   344  000013                     	ds	1
   345  000014                     _atoi$861:
   346                           	opt callstack 0
   347                           
   348                           ; 1 bytes @ 0x13
   349  000014                     	ds	1
   350  000015                     ??_abs:
   351  000015                     pad@p:
   352                           	opt callstack 0
   353  000015                     atoi@n:
   354                           	opt callstack 0
   355                           
   356                           ; 2 bytes @ 0x14
   357  000015                     	ds	2
   358  000017                     ??_pad:
   359                           
   360                           ; 1 bytes @ 0x16
   361  000017                     	ds	1
   362  000018                     pad@i:
   363                           	opt callstack 0
   364                           
   365                           ; 2 bytes @ 0x17
   366  000018                     	ds	2
   367  00001A                     pad@w:
   368                           	opt callstack 0
   369                           
   370                           ; 2 bytes @ 0x19
   371  00001A                     	ds	2
   372  00001C                     ?_dtoa:
   373                           	opt callstack 0
   374  00001C                     dtoa@fp:
   375                           	opt callstack 0
   376                           
   377                           ; 2 bytes @ 0x1B
   378  00001C                     	ds	2
   379  00001E                     dtoa@d:
   380                           	opt callstack 0
   381                           
   382                           ; 8 bytes @ 0x1D
   383  00001E                     	ds	8
   384  000026                     ??_dtoa:
   385                           
   386                           ; 1 bytes @ 0x25
   387  000026                     	ds	8
   388  00002E                     _dtoa$388:
   389                           	opt callstack 0
   390                           
   391                           ; 2 bytes @ 0x2D
   392  00002E                     	ds	2
   393  000030                     dtoa@p:
   394                           	opt callstack 0
   395                           
   396                           ; 2 bytes @ 0x2F
   397  000030                     	ds	2
   398  000032                     dtoa@w:
   399                           	opt callstack 0
   400                           
   401                           ; 2 bytes @ 0x31
   402  000032                     	ds	2
   403  000034                     dtoa@s:
   404                           	opt callstack 0
   405                           
   406                           ; 2 bytes @ 0x33
   407  000034                     	ds	2
   408  000036                     dtoa@n:
   409                           	opt callstack 0
   410                           
   411                           ; 8 bytes @ 0x35
   412  000036                     	ds	8
   413  00003E                     dtoa@i:
   414                           	opt callstack 0
   415                           
   416                           ; 2 bytes @ 0x3D
   417  00003E                     	ds	2
   418  000040                     ?_vfpfcnvrt:
   419                           	opt callstack 0
   420  000040                     vfpfcnvrt@fp:
   421                           	opt callstack 0
   422                           
   423                           ; 2 bytes @ 0x3F
   424  000040                     	ds	2
   425  000042                     vfpfcnvrt@fmt:
   426                           	opt callstack 0
   427                           
   428                           ; 2 bytes @ 0x41
   429  000042                     	ds	2
   430  000044                     vfpfcnvrt@ap:
   431                           	opt callstack 0
   432                           
   433                           ; 2 bytes @ 0x43
   434  000044                     	ds	2
   435  000046                     ??_vfpfcnvrt:
   436                           
   437                           ; 1 bytes @ 0x45
   438  000046                     	ds	4
   439  00004A                     vfpfcnvrt@ll:
   440                           	opt callstack 0
   441                           
   442                           ; 8 bytes @ 0x49
   443  00004A                     	ds	8
   444  000052                     vfpfcnvrt@done:
   445                           	opt callstack 0
   446                           
   447                           ; 2 bytes @ 0x51
   448  000052                     	ds	2
   449  000054                     _vfpfcnvrt$403:
   450                           	opt callstack 0
   451                           
   452                           ; 2 bytes @ 0x53
   453  000054                     	ds	2
   454  000056                     ?_vfprintf:
   455                           	opt callstack 0
   456  000056                     vfprintf@fp:
   457                           	opt callstack 0
   458                           
   459                           ; 2 bytes @ 0x55
   460  000056                     	ds	2
   461  000058                     vfprintf@fmt:
   462                           	opt callstack 0
   463                           
   464                           ; 2 bytes @ 0x57
   465  000058                     	ds	2
   466  00005A                     vfprintf@ap:
   467                           	opt callstack 0
   468                           
   469                           ; 2 bytes @ 0x59
   470  00005A                     	ds	2
   471  00005C                     vfprintf@cfmt:
   472                           	opt callstack 0
   473                           
   474                           ; 2 bytes @ 0x5B
   475  00005C                     	ds	2
   476  00005E                     ?_sprintf:
   477                           	opt callstack 0
   478  00005E                     sprintf@s:
   479                           	opt callstack 0
   480                           
   481                           ; 2 bytes @ 0x5D
   482  00005E                     	ds	2
   483  000060                     sprintf@fmt:
   484                           	opt callstack 0
   485                           
   486                           ; 2 bytes @ 0x5F
   487  000060                     	ds	4
   488  000064                     
   489                           ; 1 bytes @ 0x63
   490  000064                     	ds	2
   491  000066                     sprintf@ap:
   492                           	opt callstack 0
   493                           
   494                           ; 2 bytes @ 0x65
   495  000066                     	ds	2
   496  000068                     sprintf@f:
   497                           	opt callstack 0
   498                           
   499                           ; 6 bytes @ 0x67
   500  000068                     	ds	6
   501  00006E                     ??_main:
   502                           
   503                           ; 1 bytes @ 0x6D
   504  00006E                     	ds	2
   505                           
   506 ;;
   507 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   508 ;;
   509 ;; *************** function _main *****************
   510 ;; Defined at:
   511 ;;		line 24 in file "EX14.c"
   512 ;; Parameters:    Size  Location     Type
   513 ;;		None
   514 ;; Auto vars:     Size  Location     Type
   515 ;;		None
   516 ;; Return value:  Size  Location     Type
   517 ;;                  1    wreg      void 
   518 ;; Registers used:
   519 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   520 ;; Tracked objects:
   521 ;;		On entry : 0/0
   522 ;;		On exit  : 0/0
   523 ;;		Unchanged: 0/0
   524 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   525 ;;      Params:         0       0       0       0       0       0       0
   526 ;;      Locals:         0       0       0       0       0       0       0
   527 ;;      Temps:          2       0       0       0       0       0       0
   528 ;;      Totals:         2       0       0       0       0       0       0
   529 ;;Total ram usage:        2 bytes
   530 ;; Hardware stack levels required when called:    9
   531 ;; This function calls:
   532 ;;		_lcd_escreve_bf
   533 ;;		_lcd_ini
   534 ;;		_sprintf
   535 ;; This function is called by:
   536 ;;		Startup code after reset
   537 ;; This function uses a non-reentrant model
   538 ;;
   539                           
   540                           	psect	text0
   541  001062                     __ptext0:
   542                           	opt callstack 0
   543  001062                     _main:
   544                           	opt callstack 22
   545                           
   546                           ;EX14.c: 25:     TRISBbits.TRISB0 = 0;
   547                           
   548                           ;incstack = 0
   549  001062  9093               	bcf	3987,0,c	;volatile
   550                           
   551                           ;EX14.c: 26:     PORTBbits.RB0 = 0;
   552  001064  9081               	bcf	3969,0,c	;volatile
   553                           
   554                           ;EX14.c: 27:     ADCON1 = 0x0F;
   555  001066  0E0F               	movlw	15
   556  001068  6EC1               	movwf	4033,c	;volatile
   557                           
   558                           ;EX14.c: 29:     INTCON = 0b10100000;
   559  00106A  0EA0               	movlw	160
   560  00106C  6EF2               	movwf	4082,c	;volatile
   561                           
   562                           ;EX14.c: 38:     T0CON = 0b11100000;
   563  00106E  0EE0               	movlw	224
   564  001070  6ED5               	movwf	4053,c	;volatile
   565                           
   566                           ;EX14.c: 45:     TMR0 = 250;
   567  001072  0E00               	movlw	0
   568  001074  6ED7               	movwf	4055,c	;volatile
   569  001076  0EFA               	movlw	250
   570  001078  6ED6               	movwf	4054,c	;volatile
   571                           
   572                           ;EX14.c: 47:     lcd_ini();
   573  00107A  ECCB  F008         	call	_lcd_ini	;wreg free
   574                           
   575                           ;EX14.c: 50:     lcd_escreve_bf(1, 6, "TIMER0");
   576  00107E  0E06               	movlw	6
   577  001080  6E07               	movwf	lcd_escreve_bf@col,c
   578  001082  0E0E               	movlw	low STR_1
   579  001084  6E08               	movwf	lcd_escreve_bf@str,c
   580  001086  0E06               	movlw	high STR_1
   581  001088  6E09               	movwf	lcd_escreve_bf@str+1,c
   582  00108A  0E01               	movlw	1
   583  00108C  EC13  F009         	call	_lcd_escreve_bf
   584                           
   585                           ;EX14.c: 53:     lcd_escreve_bf(2, 3, "CONTAGEM: 00");
   586  001090  0E03               	movlw	3
   587  001092  6E07               	movwf	lcd_escreve_bf@col,c
   588  001094  0E01               	movlw	low STR_2
   589  001096  6E08               	movwf	lcd_escreve_bf@str,c
   590  001098  0E06               	movlw	high STR_2
   591  00109A  6E09               	movwf	lcd_escreve_bf@str+1,c
   592  00109C  0E02               	movlw	2
   593  00109E  EC13  F009         	call	_lcd_escreve_bf
   594  0010A2                     l1940:
   595                           
   596                           ;EX14.c: 56:     {;EX14.c: 57:         _delay((unsigned long)((1000)*(8000000/4000.0)));
   597  0010A2  0E0B               	movlw	11
   598  0010A4  6E6F               	movwf	(??_main+1)& (0+255),c
   599  0010A6  0E26               	movlw	38
   600  0010A8  6E6E               	movwf	??_main& (0+255),c
   601  0010AA  0E5E               	movlw	94
   602  0010AC                     u1457:
   603  0010AC  2EE8               	decfsz	wreg,f,c
   604  0010AE  D7FE               	bra	u1457
   605  0010B0  2E6E               	decfsz	??_main& (0+255),f,c
   606  0010B2  D7FC               	bra	u1457
   607  0010B4  2E6F               	decfsz	(??_main+1)& (0+255),f,c
   608  0010B6  D7FA               	bra	u1457
   609                           
   610                           ;EX14.c: 59:         PORTBbits.RB0 = ~PORTBbits.RB0;
   611  0010B8  A081               	btfss	3969,0,c	;volatile
   612  0010BA  D002               	goto	u1440
   613  0010BC  0E01               	movlw	1
   614  0010BE  D001               	goto	u1446
   615  0010C0                     u1440:
   616  0010C0  0E00               	movlw	0
   617  0010C2                     u1446:
   618  0010C2  0AFF               	xorlw	255
   619  0010C4  6E6E               	movwf	??_main& (0+255),c
   620  0010C6  5081               	movf	3969,w,c	;volatile
   621  0010C8  186E               	xorwf	??_main,w,c
   622  0010CA  0BFE               	andlw	-2
   623  0010CC  186E               	xorwf	??_main,w,c
   624  0010CE  6E81               	movwf	3969,c	;volatile
   625                           
   626                           ;EX14.c: 62:         sprintf(bufferLCD, "%02d", conta);
   627  0010D0  0EA0               	movlw	low _bufferLCD
   628  0010D2  6E5E               	movwf	sprintf@s,c
   629  0010D4  0E00               	movlw	high _bufferLCD
   630  0010D6  6E5F               	movwf	sprintf@s+1,c
   631  0010D8  0E15               	movlw	low STR_3
   632  0010DA  6E60               	movwf	sprintf@fmt,c
   633  0010DC  0E06               	movlw	high STR_3
   634  0010DE  6E61               	movwf	sprintf@fmt+1,c
   635  0010E0  C078  F062         	movff	_conta,?_sprintf+4
   636  0010E4  C079  F063         	movff	_conta+1,?_sprintf+5
   637  0010E8  EC7A  F009         	call	_sprintf	;wreg free
   638                           
   639                           ;EX14.c: 65:         lcd_escreve_bf(2, 13, bufferLCD);
   640  0010EC  0E0D               	movlw	13
   641  0010EE  6E07               	movwf	lcd_escreve_bf@col,c
   642  0010F0  0EA0               	movlw	low _bufferLCD
   643  0010F2  6E08               	movwf	lcd_escreve_bf@str,c
   644  0010F4  0E00               	movlw	high _bufferLCD
   645  0010F6  6E09               	movwf	lcd_escreve_bf@str+1,c
   646  0010F8  0E02               	movlw	2
   647  0010FA  EC13  F009         	call	_lcd_escreve_bf
   648  0010FE  D7D1               	goto	l1940
   649  001100                     __end_of_main:
   650                           	opt callstack 0
   651                           
   652 ;; *************** function _sprintf *****************
   653 ;; Defined at:
   654 ;;		line 9 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\nf_sprintf.c"
   655 ;; Parameters:    Size  Location     Type
   656 ;;  s               2   93[COMRAM] PTR unsigned char 
   657 ;;		 -> bufferLCD(16), 
   658 ;;  fmt             2   95[COMRAM] PTR const unsigned char 
   659 ;;		 -> STR_3(5), 
   660 ;; Auto vars:     Size  Location     Type
   661 ;;  f               6  103[COMRAM] struct _IO_FILE
   662 ;;  ap              2  101[COMRAM] PTR void [1]
   663 ;;		 -> ?_sprintf(2), 
   664 ;;  ret             2    0        int 
   665 ;; Return value:  Size  Location     Type
   666 ;;                  2   93[COMRAM] int 
   667 ;; Registers used:
   668 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   669 ;; Tracked objects:
   670 ;;		On entry : 0/0
   671 ;;		On exit  : 0/0
   672 ;;		Unchanged: 0/0
   673 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   674 ;;      Params:         6       0       0       0       0       0       0
   675 ;;      Locals:        10       0       0       0       0       0       0
   676 ;;      Temps:          0       0       0       0       0       0       0
   677 ;;      Totals:        16       0       0       0       0       0       0
   678 ;;Total ram usage:       16 bytes
   679 ;; Hardware stack levels used:    1
   680 ;; Hardware stack levels required when called:    8
   681 ;; This function calls:
   682 ;;		_vfprintf
   683 ;; This function is called by:
   684 ;;		_main
   685 ;; This function uses a non-reentrant model
   686 ;;
   687                           
   688                           	psect	text1
   689  0012F4                     __ptext1:
   690                           	opt callstack 0
   691  0012F4                     _sprintf:
   692                           	opt callstack 22
   693                           
   694                           ;incstack = 0
   695  0012F4  0E62               	movlw	low (?_sprintf+4)
   696  0012F6  6E66               	movwf	sprintf@ap,c
   697  0012F8  0E00               	movlw	high (?_sprintf+4)
   698  0012FA  6E67               	movwf	sprintf@ap+1,c
   699  0012FC  C05E  F068         	movff	sprintf@s,sprintf@f
   700  001300  C05F  F069         	movff	sprintf@s+1,sprintf@f+1
   701  001304  0E00               	movlw	0
   702  001306  6E6B               	movwf	sprintf@f+3,c
   703  001308  0E00               	movlw	0
   704  00130A  6E6A               	movwf	sprintf@f+2,c
   705  00130C  0E00               	movlw	0
   706  00130E  6E6D               	movwf	sprintf@f+5,c
   707  001310  0E00               	movlw	0
   708  001312  6E6C               	movwf	sprintf@f+4,c
   709  001314  0E68               	movlw	low sprintf@f
   710  001316  6E56               	movwf	vfprintf@fp,c
   711  001318  0E00               	movlw	high sprintf@f
   712  00131A  6E57               	movwf	vfprintf@fp+1,c
   713  00131C  C060  F058         	movff	sprintf@fmt,vfprintf@fmt
   714  001320  C061  F059         	movff	sprintf@fmt+1,vfprintf@fmt+1
   715  001324  0E66               	movlw	low sprintf@ap
   716  001326  6E5A               	movwf	vfprintf@ap,c
   717  001328  0E00               	movlw	high sprintf@ap
   718  00132A  6E5B               	movwf	vfprintf@ap+1,c
   719  00132C  EC51  F009         	call	_vfprintf	;wreg free
   720  001330  506A               	movf	sprintf@f+2,w,c
   721  001332  245E               	addwf	sprintf@s,w,c
   722  001334  6ED9               	movwf	fsr2l,c
   723  001336  506B               	movf	sprintf@f+3,w,c
   724  001338  205F               	addwfc	sprintf@s+1,w,c
   725  00133A  6EDA               	movwf	fsr2h,c
   726  00133C  0E00               	movlw	0
   727  00133E  6EDF               	movwf	indf2,c
   728  001340  0012               	return		;funcret
   729  001342                     __end_of_sprintf:
   730                           	opt callstack 0
   731                           
   732 ;; *************** function _vfprintf *****************
   733 ;; Defined at:
   734 ;;		line 1368 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c"
   735 ;; Parameters:    Size  Location     Type
   736 ;;  fp              2   85[COMRAM] PTR struct _IO_FILE
   737 ;;		 -> sprintf@f(6), 
   738 ;;  fmt             2   87[COMRAM] PTR const unsigned char 
   739 ;;		 -> STR_3(5), 
   740 ;;  ap              2   89[COMRAM] PTR PTR void 
   741 ;;		 -> sprintf@ap(2), 
   742 ;; Auto vars:     Size  Location     Type
   743 ;;  cfmt            2   91[COMRAM] PTR unsigned char 
   744 ;;		 -> STR_3(5), 
   745 ;; Return value:  Size  Location     Type
   746 ;;                  2   85[COMRAM] int 
   747 ;; Registers used:
   748 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   749 ;; Tracked objects:
   750 ;;		On entry : 0/0
   751 ;;		On exit  : 0/0
   752 ;;		Unchanged: 0/0
   753 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   754 ;;      Params:         6       0       0       0       0       0       0
   755 ;;      Locals:         2       0       0       0       0       0       0
   756 ;;      Temps:          0       0       0       0       0       0       0
   757 ;;      Totals:         8       0       0       0       0       0       0
   758 ;;Total ram usage:        8 bytes
   759 ;; Hardware stack levels used:    1
   760 ;; Hardware stack levels required when called:    7
   761 ;; This function calls:
   762 ;;		_vfpfcnvrt
   763 ;; This function is called by:
   764 ;;		_sprintf
   765 ;; This function uses a non-reentrant model
   766 ;;
   767                           
   768                           	psect	text2
   769  0012A2                     __ptext2:
   770                           	opt callstack 0
   771  0012A2                     _vfprintf:
   772                           	opt callstack 22
   773                           
   774                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1368: int v
      +                          fprintf(FILE *fp, const char *fmt, va_list ap);C:\Program Files (x86)\Microchip\xc8\v2.0
      +                          5\pic\sources\c99\common\doprnt.c: 1369: {;C:\Program Files (x86)\Microchip\xc8\v2.05\pi
      +                          c\sources\c99\common\doprnt.c: 1371:     char *cfmt;;C:\Program Files (x86)\Microchip\xc
      +                          8\v2.05\pic\sources\c99\common\doprnt.c: 1373:     cfmt = (char *)fmt;
   775                           
   776                           ;incstack = 0
   777  0012A2  C058  F05C         	movff	vfprintf@fmt,vfprintf@cfmt
   778  0012A6  C059  F05D         	movff	vfprintf@fmt+1,vfprintf@cfmt+1
   779                           
   780                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1374:     n
      +                          out = 0;
   781  0012AA  0E00               	movlw	0
   782  0012AC  6E71               	movwf	_nout+1,c
   783  0012AE  0E00               	movlw	0
   784  0012B0  6E70               	movwf	_nout,c
   785                           
   786                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1375:     w
      +                          hile (*cfmt) {
   787  0012B2  D012               	goto	l1860
   788  0012B4                     l1858:
   789                           
   790                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1376:      
      +                             nout += vfpfcnvrt(fp, &cfmt, ap);
   791  0012B4  C056  F040         	movff	vfprintf@fp,vfpfcnvrt@fp
   792  0012B8  C057  F041         	movff	vfprintf@fp+1,vfpfcnvrt@fp+1
   793  0012BC  0E5C               	movlw	low vfprintf@cfmt
   794  0012BE  6E42               	movwf	vfpfcnvrt@fmt,c
   795  0012C0  0E00               	movlw	high vfprintf@cfmt
   796  0012C2  6E43               	movwf	vfpfcnvrt@fmt+1,c
   797  0012C4  C05A  F044         	movff	vfprintf@ap,vfpfcnvrt@ap
   798  0012C8  C05B  F045         	movff	vfprintf@ap+1,vfpfcnvrt@ap+1
   799  0012CC  EC0E  F003         	call	_vfpfcnvrt	;wreg free
   800  0012D0  5040               	movf	?_vfpfcnvrt,w,c
   801  0012D2  2670               	addwf	_nout,f,c
   802  0012D4  5041               	movf	?_vfpfcnvrt+1,w,c
   803  0012D6  2271               	addwfc	_nout+1,f,c
   804  0012D8                     l1860:
   805                           
   806                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1375:     w
      +                          hile (*cfmt) {
   807  0012D8  C05C  FFF6         	movff	vfprintf@cfmt,tblptrl
   808  0012DC  C05D  FFF7         	movff	vfprintf@cfmt+1,tblptrh
   809  0012E0                     	if	0	;tblptru may be non-zero
   810  0012E0                     	endif
   811  0012E0                     	if	0	;tblptru may be non-zero
   812  0012E0                     	endif
   813  0012E0  0008               	tblrd		*
   814  0012E2  50F5               	movf	tablat,w,c
   815  0012E4  0900               	iorlw	0
   816  0012E6  A4D8               	btfss	status,2,c
   817  0012E8  D7E5               	goto	l1858
   818                           
   819                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1378:     r
      +                          eturn nout;
   820  0012EA  C070  F056         	movff	_nout,?_vfprintf
   821  0012EE  C071  F057         	movff	_nout+1,?_vfprintf+1
   822  0012F2  0012               	return		;funcret
   823  0012F4                     __end_of_vfprintf:
   824                           	opt callstack 0
   825                           
   826 ;; *************** function _vfpfcnvrt *****************
   827 ;; Defined at:
   828 ;;		line 670 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c"
   829 ;; Parameters:    Size  Location     Type
   830 ;;  fp              2   63[COMRAM] PTR struct _IO_FILE
   831 ;;		 -> sprintf@f(6), 
   832 ;;  fmt             2   65[COMRAM] PTR PTR unsigned char 
   833 ;;		 -> vfprintf@cfmt(2), 
   834 ;;  ap              2   67[COMRAM] PTR PTR void 
   835 ;;		 -> sprintf@ap(2), 
   836 ;; Auto vars:     Size  Location     Type
   837 ;;  ll              8   73[COMRAM] long long 
   838 ;;  llu             8    0        unsigned long long 
   839 ;;  f               4    0        unsigned long long 
   840 ;;  vp              3    0        PTR void 
   841 ;;  ct              3    0        unsigned char [3]
   842 ;;  cp              3    0        PTR unsigned char 
   843 ;;  done            2   81[COMRAM] int 
   844 ;;  i               2    0        int 
   845 ;;  c               1    0        unsigned char 
   846 ;; Return value:  Size  Location     Type
   847 ;;                  2   63[COMRAM] int 
   848 ;; Registers used:
   849 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   850 ;; Tracked objects:
   851 ;;		On entry : 0/0
   852 ;;		On exit  : 0/0
   853 ;;		Unchanged: 0/0
   854 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   855 ;;      Params:         6       0       0       0       0       0       0
   856 ;;      Locals:        12       0       0       0       0       0       0
   857 ;;      Temps:          4       0       0       0       0       0       0
   858 ;;      Totals:        22       0       0       0       0       0       0
   859 ;;Total ram usage:       22 bytes
   860 ;; Hardware stack levels used:    1
   861 ;; Hardware stack levels required when called:    6
   862 ;; This function calls:
   863 ;;		_atoi
   864 ;;		_dtoa
   865 ;;		_fputc
   866 ;;		_isdigit
   867 ;; This function is called by:
   868 ;;		_vfprintf
   869 ;; This function uses a non-reentrant model
   870 ;;
   871                           
   872                           	psect	text3
   873  00061C                     __ptext3:
   874                           	opt callstack 0
   875  00061C                     _vfpfcnvrt:
   876                           	opt callstack 22
   877                           
   878                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 670: static
      +                           int vfpfcnvrt(FILE *fp, char *fmt[], va_list ap);C:\Program Files (x86)\Microchip\xc8\v
      +                          2.05\pic\sources\c99\common\doprnt.c: 671: {;C:\Program Files (x86)\Microchip\xc8\v2.05\
      +                          pic\sources\c99\common\doprnt.c: 672:     char c, *cp, ct[3];;C:\Program Files (x86)\Mic
      +                          rochip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 673:     int done, i;;C:\Program Files
      +                           (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 674:     long long ll;
   879                           
   880                           ;incstack = 0
   881  00061C  C042  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
   882  000620  C043  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
   883  000624  CFDE FFF6          	movff	postinc2,tblptrl
   884  000628  CFDD FFF7          	movff	postdec2,tblptrh
   885  00062C                     	if	0	;tblptru may be non-zero
   886  00062C                     	endif
   887  00062C                     	if	0	;tblptru may be non-zero
   888  00062C                     	endif
   889  00062C  0008               	tblrd		*
   890  00062E  50F5               	movf	tablat,w,c
   891  000630  0A25               	xorlw	37
   892  000632  A4D8               	btfss	status,2,c
   893  000634  D143               	goto	l1834
   894                           
   895                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 681:       
      +                            ++*fmt;
   896  000636  C042  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
   897  00063A  C043  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
   898  00063E  2ADE               	incf	postinc2,f,c
   899  000640  0E00               	movlw	0
   900  000642  22DD               	addwfc	postdec2,f,c
   901                           
   902                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 683:       
      +                            flags = width = 0;
   903  000644  0E00               	movlw	0
   904  000646  6E73               	movwf	_width+1,c
   905  000648  0E00               	movlw	0
   906  00064A  6E72               	movwf	_width,c
   907  00064C  C072  F076         	movff	_width,_flags
   908  000650  C073  F077         	movff	_width+1,_flags+1
   909                           
   910                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 684:       
      +                            prec = -1;
   911  000654  6874               	setf	_prec,c
   912  000656  6875               	setf	_prec+1,c
   913                           
   914                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 688:       
      +                            done = 0;
   915  000658  0E00               	movlw	0
   916  00065A  6E53               	movwf	vfpfcnvrt@done+1,c
   917  00065C  0E00               	movlw	0
   918  00065E  D014               	goto	L1
   919  000660                     l1760:
   920                           
   921                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 692:       
      +                                        flags |= (1 << 0);
   922  000660  8076               	bsf	_flags,0,c
   923  000662                     l1762:
   924                           
   925                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 693:       
      +                                        ++*fmt;
   926  000662  C042  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
   927  000666  C043  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
   928  00066A  2ADE               	incf	postinc2,f,c
   929  00066C  0E00               	movlw	0
   930  00066E  22DD               	addwfc	postdec2,f,c
   931                           
   932                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 694:       
      +                                        break;
   933  000670  D02E               	goto	l1786
   934  000672                     l1764:
   935                           
   936                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 696:       
      +                                        flags |= (1 << 1);
   937  000672  8276               	bsf	_flags,1,c
   938  000674  D7F6               	goto	l1762
   939  000676                     l1768:
   940                           
   941                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 700:       
      +                                        flags |= (1 << 2);
   942  000676  8476               	bsf	_flags,2,c
   943  000678  D7F4               	goto	l1762
   944  00067A                     l1772:
   945                           
   946                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 704:       
      +                                        flags |= (1 << 3);
   947  00067A  8676               	bsf	_flags,3,c
   948  00067C  D7F2               	goto	l1762
   949  00067E                     l1776:
   950                           
   951                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 708:       
      +                                        flags |= (1 << 4);
   952  00067E  8876               	bsf	_flags,4,c
   953  000680  D7F0               	goto	l1762
   954  000682                     l1780:
   955                           
   956                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 712:       
      +                                        done = 1;
   957  000682  0E00               	movlw	0
   958  000684  6E53               	movwf	vfpfcnvrt@done+1,c
   959  000686  0E01               	movlw	1
   960  000688                     L1:
   961  000688  6E52               	movwf	vfpfcnvrt@done,c
   962                           
   963                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 713:       
      +                                        break;
   964  00068A  D021               	goto	l1786
   965  00068C                     l1784:
   966  00068C  C042  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
   967  000690  C043  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
   968  000694  CFDE FFF6          	movff	postinc2,tblptrl
   969  000698  CFDD FFF7          	movff	postdec2,tblptrh
   970  00069C                     	if	0	;tblptru may be non-zero
   971  00069C                     	endif
   972  00069C                     	if	0	;tblptru may be non-zero
   973  00069C                     	endif
   974  00069C  0008               	tblrd		*
   975  00069E  50F5               	movf	tablat,w,c
   976  0006A0  6E46               	movwf	??_vfpfcnvrt& (0+255),c
   977  0006A2  6A47               	clrf	(??_vfpfcnvrt+1)& (0+255),c
   978                           
   979                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
   980                           ; Switch size 1, requested type "simple"
   981                           ; Number of cases is 1, Range of values is 0 to 0
   982                           ; switch strategies available:
   983                           ; Name         Instructions Cycles
   984                           ; simple_byte            4     3 (average)
   985                           ;	Chosen strategy is simple_byte
   986  0006A4  5047               	movf	??_vfpfcnvrt+1,w,c
   987  0006A6  0A00               	xorlw	0	; case 0
   988  0006A8  A4D8               	btfss	status,2,c
   989  0006AA  D7EB               	goto	l1780
   990                           
   991                           ; Switch size 1, requested type "simple"
   992                           ; Number of cases is 5, Range of values is 32 to 48
   993                           ; switch strategies available:
   994                           ; Name         Instructions Cycles
   995                           ; simple_byte           16     9 (average)
   996                           ;	Chosen strategy is simple_byte
   997  0006AC  5046               	movf	??_vfpfcnvrt,w,c
   998  0006AE  0A20               	xorlw	32	; case 32
   999  0006B0  B4D8               	btfsc	status,2,c
  1000  0006B2  D7E3               	goto	l1772
  1001  0006B4  0A03               	xorlw	3	; case 35
  1002  0006B6  B4D8               	btfsc	status,2,c
  1003  0006B8  D7E2               	goto	l1776
  1004  0006BA  0A08               	xorlw	8	; case 43
  1005  0006BC  B4D8               	btfsc	status,2,c
  1006  0006BE  D7DB               	goto	l1768
  1007  0006C0  0A06               	xorlw	6	; case 45
  1008  0006C2  B4D8               	btfsc	status,2,c
  1009  0006C4  D7CD               	goto	l1760
  1010  0006C6  0A1D               	xorlw	29	; case 48
  1011  0006C8  B4D8               	btfsc	status,2,c
  1012  0006CA  D7D3               	goto	l1764
  1013  0006CC  D7DA               	goto	l1780
  1014  0006CE                     l1786:
  1015                           
  1016                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 689:       
      +                            while (!done) {
  1017  0006CE  5052               	movf	vfpfcnvrt@done,w,c
  1018  0006D0  1053               	iorwf	vfpfcnvrt@done+1,w,c
  1019  0006D2  B4D8               	btfsc	status,2,c
  1020  0006D4  D7DB               	goto	l1784
  1021                           
  1022                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 716:       
      +                            if (flags & (1 << 0)) {
  1023  0006D6  B076               	btfsc	_flags,0,c
  1024                           
  1025                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 717:       
      +                                flags &= ~(1 << 1);
  1026  0006D8  9276               	bcf	_flags,1,c
  1027                           
  1028                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 723:       
      +                            if ((*fmt)[0] == '*') {
  1029  0006DA  C042  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1030  0006DE  C043  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1031  0006E2  CFDE FFF6          	movff	postinc2,tblptrl
  1032  0006E6  CFDD FFF7          	movff	postdec2,tblptrh
  1033  0006EA                     	if	0	;tblptru may be non-zero
  1034  0006EA                     	endif
  1035  0006EA                     	if	0	;tblptru may be non-zero
  1036  0006EA                     	endif
  1037  0006EA  0008               	tblrd		*
  1038  0006EC  50F5               	movf	tablat,w,c
  1039  0006EE  0A2A               	xorlw	42
  1040  0006F0  A4D8               	btfss	status,2,c
  1041  0006F2  D023               	goto	l1798
  1042                           
  1043                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 724:       
      +                                ++*fmt;
  1044  0006F4  C042  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1045  0006F8  C043  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1046  0006FC  2ADE               	incf	postinc2,f,c
  1047  0006FE  0E00               	movlw	0
  1048  000700  22DD               	addwfc	postdec2,f,c
  1049                           
  1050                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 725:       
      +                                width = (*(int *)__va_arg(*(int **)ap, (int)0));
  1051  000702  C044  FFD9         	movff	vfpfcnvrt@ap,fsr2l
  1052  000706  C045  FFDA         	movff	vfpfcnvrt@ap+1,fsr2h
  1053  00070A  CFDF F046          	movff	indf2,??_vfpfcnvrt
  1054  00070E  0E02               	movlw	2
  1055  000710  26DE               	addwf	postinc2,f,c
  1056  000712  CFDF F047          	movff	indf2,??_vfpfcnvrt+1
  1057  000716  0E00               	movlw	0
  1058  000718  22DD               	addwfc	postdec2,f,c
  1059  00071A  C046  FFD9         	movff	??_vfpfcnvrt,fsr2l
  1060  00071E  C047  FFDA         	movff	??_vfpfcnvrt+1,fsr2h
  1061  000722  CFDE F072          	movff	postinc2,_width
  1062  000726  CFDD F073          	movff	postdec2,_width+1
  1063                           
  1064                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 726:       
      +                                if (width < 0) {
  1065  00072A  AE73               	btfss	_width+1,7,c
  1066  00072C  D03F               	goto	u1320
  1067                           
  1068                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 727:       
      +                                    flags |= (1 << 0);
  1069  00072E  8076               	bsf	_flags,0,c
  1070                           
  1071                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 728:       
      +                                    width = -width;
  1072  000730  6C72               	negf	_width,c
  1073  000732  1E73               	comf	_width+1,f,c
  1074  000734  B0D8               	btfsc	status,0,c
  1075  000736  2A73               	incf	_width+1,f,c
  1076  000738  D039               	goto	u1320
  1077  00073A                     l1798:
  1078                           
  1079                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 731:       
      +                                width = atoi(*fmt);
  1080  00073A  C042  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1081  00073E  C043  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1082  000742  CFDE F008          	movff	postinc2,atoi@s
  1083  000746  CFDD F009          	movff	postdec2,atoi@s+1
  1084  00074A  EC3D  F006         	call	_atoi	;wreg free
  1085  00074E  C008  F072         	movff	?_atoi,_width
  1086  000752  C009  F073         	movff	?_atoi+1,_width+1
  1087                           
  1088                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 732:       
      +                                while ((0 ? isdigit((*fmt)[0]) : ((unsigned)((*fmt)[0])-'0') < 10)) {
  1089  000756  D007               	goto	l1802
  1090  000758                     l1800:
  1091                           
  1092                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 733:       
      +                                    ++*fmt;
  1093  000758  C042  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1094  00075C  C043  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1095  000760  2ADE               	incf	postinc2,f,c
  1096  000762  0E00               	movlw	0
  1097  000764  22DD               	addwfc	postdec2,f,c
  1098  000766                     l1802:
  1099  000766  0ED0               	movlw	208
  1100  000768  6E46               	movwf	??_vfpfcnvrt& (0+255),c
  1101  00076A  0EFF               	movlw	255
  1102  00076C  6E47               	movwf	(??_vfpfcnvrt+1)& (0+255),c
  1103  00076E  C042  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1104  000772  C043  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1105  000776  CFDE FFF6          	movff	postinc2,tblptrl
  1106  00077A  CFDD FFF7          	movff	postdec2,tblptrh
  1107  00077E                     	if	0	;tblptru may be non-zero
  1108  00077E                     	endif
  1109  00077E                     	if	0	;tblptru may be non-zero
  1110  00077E                     	endif
  1111  00077E  0008               	tblrd		*
  1112  000780  50F5               	movf	tablat,w,c
  1113  000782  6E48               	movwf	(??_vfpfcnvrt+2)& (0+255),c
  1114  000784  6A49               	clrf	(??_vfpfcnvrt+3)& (0+255),c
  1115  000786  5046               	movf	??_vfpfcnvrt,w,c
  1116  000788  2648               	addwf	??_vfpfcnvrt+2,f,c
  1117  00078A  5047               	movf	??_vfpfcnvrt+1,w,c
  1118  00078C  2249               	addwfc	??_vfpfcnvrt+3,f,c
  1119  00078E  5049               	movf	??_vfpfcnvrt+3,w,c
  1120  000790  E106               	bnz	u1300
  1121  000792  0E0A               	movlw	10
  1122  000794  5C48               	subwf	??_vfpfcnvrt+2,w,c
  1123  000796  B0D8               	btfsc	status,0,c
  1124  000798  D002               	goto	u1300
  1125  00079A  0E01               	movlw	1
  1126  00079C  D001               	goto	u1310
  1127  00079E                     u1300:
  1128  00079E  0E00               	movlw	0
  1129  0007A0                     u1310:
  1130  0007A0  6E54               	movwf	_vfpfcnvrt$403,c
  1131  0007A2  6A55               	clrf	_vfpfcnvrt$403+1,c
  1132  0007A4  5054               	movf	_vfpfcnvrt$403,w,c
  1133  0007A6  1055               	iorwf	_vfpfcnvrt$403+1,w,c
  1134  0007A8  A4D8               	btfss	status,2,c
  1135  0007AA  D7D6               	goto	l1800
  1136  0007AC                     u1320:
  1137                           
  1138                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 825:       
      +                            if ((*fmt[0] == 'd') || (*fmt[0] == 'i')) {
  1139  0007AC  C042  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1140  0007B0  C043  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1141  0007B4  CFDE FFF6          	movff	postinc2,tblptrl
  1142  0007B8  CFDD FFF7          	movff	postdec2,tblptrh
  1143  0007BC                     	if	0	;tblptru may be non-zero
  1144  0007BC                     	endif
  1145  0007BC                     	if	0	;tblptru may be non-zero
  1146  0007BC                     	endif
  1147  0007BC  0008               	tblrd		*
  1148  0007BE  50F5               	movf	tablat,w,c
  1149  0007C0  0A64               	xorlw	100
  1150  0007C2  B4D8               	btfsc	status,2,c
  1151  0007C4  D00D               	goto	u1340
  1152  0007C6  C042  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1153  0007CA  C043  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1154  0007CE  CFDE FFF6          	movff	postinc2,tblptrl
  1155  0007D2  CFDD FFF7          	movff	postdec2,tblptrh
  1156  0007D6                     	if	0	;tblptru may be non-zero
  1157  0007D6                     	endif
  1158  0007D6                     	if	0	;tblptru may be non-zero
  1159  0007D6                     	endif
  1160  0007D6  0008               	tblrd		*
  1161  0007D8  50F5               	movf	tablat,w,c
  1162  0007DA  0A69               	xorlw	105
  1163  0007DC  A4D8               	btfss	status,2,c
  1164  0007DE  D03F               	goto	l1818
  1165  0007E0                     u1340:
  1166                           
  1167                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 827:       
      +                                ++*fmt;
  1168  0007E0  C042  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1169  0007E4  C043  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1170  0007E8  2ADE               	incf	postinc2,f,c
  1171  0007EA  0E00               	movlw	0
  1172  0007EC  22DD               	addwfc	postdec2,f,c
  1173                           
  1174                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 828:       
      +                                ll = (long long)(*(int *)__va_arg(*(int **)ap, (int)0));
  1175  0007EE  C044  FFD9         	movff	vfpfcnvrt@ap,fsr2l
  1176  0007F2  C045  FFDA         	movff	vfpfcnvrt@ap+1,fsr2h
  1177  0007F6  CFDF F046          	movff	indf2,??_vfpfcnvrt
  1178  0007FA  0E02               	movlw	2
  1179  0007FC  26DE               	addwf	postinc2,f,c
  1180  0007FE  CFDF F047          	movff	indf2,??_vfpfcnvrt+1
  1181  000802  0E00               	movlw	0
  1182  000804  22DD               	addwfc	postdec2,f,c
  1183  000806  C046  FFD9         	movff	??_vfpfcnvrt,fsr2l
  1184  00080A  C047  FFDA         	movff	??_vfpfcnvrt+1,fsr2h
  1185  00080E  CFDE F04A          	movff	postinc2,vfpfcnvrt@ll
  1186  000812  CFDD F04B          	movff	postdec2,vfpfcnvrt@ll+1
  1187  000816  0E00               	movlw	0
  1188  000818  BE4B               	btfsc	vfpfcnvrt@ll+1,7,c
  1189  00081A  0EFF               	movlw	-1
  1190  00081C  6E4C               	movwf	vfpfcnvrt@ll+2,c
  1191  00081E  6E4D               	movwf	vfpfcnvrt@ll+3,c
  1192  000820  6E4E               	movwf	vfpfcnvrt@ll+4,c
  1193  000822  6E4F               	movwf	vfpfcnvrt@ll+5,c
  1194  000824  6E50               	movwf	vfpfcnvrt@ll+6,c
  1195  000826  6E51               	movwf	vfpfcnvrt@ll+7,c
  1196                           
  1197                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 830:       
      +                                return dtoa(fp, ll);
  1198  000828  C040  F01C         	movff	vfpfcnvrt@fp,dtoa@fp
  1199  00082C  C041  F01D         	movff	vfpfcnvrt@fp+1,dtoa@fp+1
  1200  000830  C04A  F01E         	movff	vfpfcnvrt@ll,dtoa@d
  1201  000834  C04B  F01F         	movff	vfpfcnvrt@ll+1,dtoa@d+1
  1202  000838  C04C  F020         	movff	vfpfcnvrt@ll+2,dtoa@d+2
  1203  00083C  C04D  F021         	movff	vfpfcnvrt@ll+3,dtoa@d+3
  1204  000840  C04E  F022         	movff	vfpfcnvrt@ll+4,dtoa@d+4
  1205  000844  C04F  F023         	movff	vfpfcnvrt@ll+5,dtoa@d+5
  1206  000848  C050  F024         	movff	vfpfcnvrt@ll+6,dtoa@d+6
  1207  00084C  C051  F025         	movff	vfpfcnvrt@ll+7,dtoa@d+7
  1208  000850  EC78  F004         	call	_dtoa	;wreg free
  1209  000854  C01C  F040         	movff	?_dtoa,?_vfpfcnvrt
  1210  000858  C01D  F041         	movff	?_dtoa+1,?_vfpfcnvrt+1
  1211  00085C  0012               	return	
  1212  00085E                     l1818:
  1213                           
  1214                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1350:      
      +                             if ((*fmt)[0] == '%') {
  1215  00085E  C042  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1216  000862  C043  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1217  000866  CFDE FFF6          	movff	postinc2,tblptrl
  1218  00086A  CFDD FFF7          	movff	postdec2,tblptrh
  1219  00086E                     	if	0	;tblptru may be non-zero
  1220  00086E                     	endif
  1221  00086E                     	if	0	;tblptru may be non-zero
  1222  00086E                     	endif
  1223  00086E  0008               	tblrd		*
  1224  000870  50F5               	movf	tablat,w,c
  1225  000872  0A25               	xorlw	37
  1226  000874  A4D8               	btfss	status,2,c
  1227  000876  D016               	goto	l1828
  1228                           
  1229                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1351:      
      +                                 ++*fmt;
  1230  000878  C042  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1231  00087C  C043  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1232  000880  2ADE               	incf	postinc2,f,c
  1233  000882  0E00               	movlw	0
  1234  000884  22DD               	addwfc	postdec2,f,c
  1235                           
  1236                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1352:      
      +                                 fputc((int)'%', fp);
  1237  000886  0E00               	movlw	0
  1238  000888  6E02               	movwf	fputc@c+1,c
  1239  00088A  0E25               	movlw	37
  1240  00088C  6E01               	movwf	fputc@c,c
  1241  00088E  C040  F003         	movff	vfpfcnvrt@fp,fputc@fp
  1242  000892  C041  F004         	movff	vfpfcnvrt@fp+1,fputc@fp+1
  1243  000896  ECE1  F007         	call	_fputc	;wreg free
  1244  00089A                     l1824:
  1245                           
  1246                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1353:      
      +                                 return 1;
  1247  00089A  0E00               	movlw	0
  1248  00089C  6E41               	movwf	?_vfpfcnvrt+1,c
  1249  00089E  0E01               	movlw	1
  1250  0008A0  6E40               	movwf	?_vfpfcnvrt,c
  1251  0008A2  0012               	return	
  1252  0008A4                     l1828:
  1253                           
  1254                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1357:      
      +                             ++*fmt;
  1255  0008A4  C042  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1256  0008A8  C043  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1257  0008AC  2ADE               	incf	postinc2,f,c
  1258  0008AE  0E00               	movlw	0
  1259  0008B0  22DD               	addwfc	postdec2,f,c
  1260                           
  1261                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1358:      
      +                             return 0;
  1262  0008B2  0E00               	movlw	0
  1263  0008B4  6E41               	movwf	?_vfpfcnvrt+1,c
  1264  0008B6  0E00               	movlw	0
  1265  0008B8  6E40               	movwf	?_vfpfcnvrt,c
  1266  0008BA  0012               	return	
  1267  0008BC                     l1834:
  1268                           
  1269                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1362:     f
      +                          putc((int)(*fmt)[0], fp);
  1270  0008BC  C042  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1271  0008C0  C043  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1272  0008C4  CFDE FFF6          	movff	postinc2,tblptrl
  1273  0008C8  CFDD FFF7          	movff	postdec2,tblptrh
  1274  0008CC                     	if	0	;tblptru may be non-zero
  1275  0008CC                     	endif
  1276  0008CC                     	if	0	;tblptru may be non-zero
  1277  0008CC                     	endif
  1278  0008CC  0008               	tblrd		*
  1279  0008CE  50F5               	movf	tablat,w,c
  1280  0008D0  6E01               	movwf	fputc@c,c
  1281  0008D2  6A02               	clrf	fputc@c+1,c
  1282  0008D4  C040  F003         	movff	vfpfcnvrt@fp,fputc@fp
  1283  0008D8  C041  F004         	movff	vfpfcnvrt@fp+1,fputc@fp+1
  1284  0008DC  ECE1  F007         	call	_fputc	;wreg free
  1285                           
  1286                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1363:     +
      +                          +*fmt;
  1287  0008E0  C042  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1288  0008E4  C043  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1289  0008E8  2ADE               	incf	postinc2,f,c
  1290  0008EA  0E00               	movlw	0
  1291  0008EC  22DD               	addwfc	postdec2,f,c
  1292  0008EE  D7D5               	goto	l1824
  1293  0008F0                     __end_of_vfpfcnvrt:
  1294                           	opt callstack 0
  1295                           
  1296 ;; *************** function _dtoa *****************
  1297 ;; Defined at:
  1298 ;;		line 274 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c"
  1299 ;; Parameters:    Size  Location     Type
  1300 ;;  fp              2   27[COMRAM] PTR struct _IO_FILE
  1301 ;;		 -> sprintf@f(6), 
  1302 ;;  d               8   29[COMRAM] long long 
  1303 ;; Auto vars:     Size  Location     Type
  1304 ;;  n               8   53[COMRAM] long long 
  1305 ;;  i               2   61[COMRAM] int 
  1306 ;;  s               2   51[COMRAM] int 
  1307 ;;  w               2   49[COMRAM] int 
  1308 ;;  p               2   47[COMRAM] int 
  1309 ;; Return value:  Size  Location     Type
  1310 ;;                  2   27[COMRAM] int 
  1311 ;; Registers used:
  1312 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  1313 ;; Tracked objects:
  1314 ;;		On entry : 0/0
  1315 ;;		On exit  : 0/0
  1316 ;;		Unchanged: 0/0
  1317 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1318 ;;      Params:        10       0       0       0       0       0       0
  1319 ;;      Locals:        18       0       0       0       0       0       0
  1320 ;;      Temps:          8       0       0       0       0       0       0
  1321 ;;      Totals:        36       0       0       0       0       0       0
  1322 ;;Total ram usage:       36 bytes
  1323 ;; Hardware stack levels used:    1
  1324 ;; Hardware stack levels required when called:    5
  1325 ;; This function calls:
  1326 ;;		___aodiv
  1327 ;;		___aomod
  1328 ;;		_abs
  1329 ;;		_pad
  1330 ;; This function is called by:
  1331 ;;		_vfpfcnvrt
  1332 ;; This function uses a non-reentrant model
  1333 ;;
  1334                           
  1335                           	psect	text4
  1336  0008F0                     __ptext4:
  1337                           	opt callstack 0
  1338  0008F0                     _dtoa:
  1339                           	opt callstack 22
  1340                           
  1341                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 274: static
      +                           int dtoa(FILE *fp, long long d);C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\
      +                          c99\common\doprnt.c: 275: {;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\c
      +                          ommon\doprnt.c: 276:     int i, p, s, w;;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\
      +                          sources\c99\common\doprnt.c: 277:     long long n;;C:\Program Files (x86)\Microchip\xc8\
      +                          v2.05\pic\sources\c99\common\doprnt.c: 280:     n = d;
  1342                           
  1343                           ;incstack = 0
  1344  0008F0  C01E  F036         	movff	dtoa@d,dtoa@n
  1345  0008F4  C01F  F037         	movff	dtoa@d+1,dtoa@n+1
  1346  0008F8  C020  F038         	movff	dtoa@d+2,dtoa@n+2
  1347  0008FC  C021  F039         	movff	dtoa@d+3,dtoa@n+3
  1348  000900  C022  F03A         	movff	dtoa@d+4,dtoa@n+4
  1349  000904  C023  F03B         	movff	dtoa@d+5,dtoa@n+5
  1350  000908  C024  F03C         	movff	dtoa@d+6,dtoa@n+6
  1351  00090C  C025  F03D         	movff	dtoa@d+7,dtoa@n+7
  1352                           
  1353                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 281:     s 
      +                          = n < 0 ? 1 : 0;
  1354  000910  AE3D               	btfss	dtoa@n+7,7,c
  1355  000912  D002               	goto	u1030
  1356  000914  0E01               	movlw	1
  1357  000916  D001               	goto	u1040
  1358  000918                     u1030:
  1359  000918  0E00               	movlw	0
  1360  00091A                     u1040:
  1361  00091A  6E34               	movwf	dtoa@s,c
  1362  00091C  6A35               	clrf	dtoa@s+1,c
  1363                           
  1364                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 282:     if
      +                           (s) {
  1365  00091E  5034               	movf	dtoa@s,w,c
  1366  000920  1035               	iorwf	dtoa@s+1,w,c
  1367  000922  B4D8               	btfsc	status,2,c
  1368  000924  D010               	goto	l1632
  1369                           
  1370                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 283:       
      +                            n = -n;
  1371  000926  1E3D               	comf	dtoa@n+7,f,c
  1372  000928  1E3C               	comf	dtoa@n+6,f,c
  1373  00092A  1E3B               	comf	dtoa@n+5,f,c
  1374  00092C  1E3A               	comf	dtoa@n+4,f,c
  1375  00092E  1E39               	comf	dtoa@n+3,f,c
  1376  000930  1E38               	comf	dtoa@n+2,f,c
  1377  000932  1E37               	comf	dtoa@n+1,f,c
  1378  000934  6C36               	negf	dtoa@n,c
  1379  000936  0E00               	movlw	0
  1380  000938  2237               	addwfc	dtoa@n+1,f,c
  1381  00093A  2238               	addwfc	dtoa@n+2,f,c
  1382  00093C  2239               	addwfc	dtoa@n+3,f,c
  1383  00093E  223A               	addwfc	dtoa@n+4,f,c
  1384  000940  223B               	addwfc	dtoa@n+5,f,c
  1385  000942  223C               	addwfc	dtoa@n+6,f,c
  1386  000944  223D               	addwfc	dtoa@n+7,f,c
  1387  000946                     l1632:
  1388                           
  1389                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 287:     if
      +                           (!(prec < 0)) {
  1390  000946  AE75               	btfss	_prec+1,7,c
  1391                           
  1392                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 288:       
      +                            flags &= ~(1 << 1);
  1393  000948  9276               	bcf	_flags,1,c
  1394                           
  1395                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 290:     p 
      +                          = (0 < prec) ? prec : 1;
  1396  00094A  BE75               	btfsc	_prec+1,7,c
  1397  00094C  D005               	goto	u1070
  1398  00094E  5075               	movf	_prec+1,w,c
  1399  000950  E108               	bnz	l122
  1400  000952  0474               	decf	_prec,w,c
  1401  000954  B0D8               	btfsc	status,0,c
  1402  000956  D005               	goto	l122
  1403  000958                     u1070:
  1404  000958  0E00               	movlw	0
  1405  00095A  6E31               	movwf	dtoa@p+1,c
  1406  00095C  0E01               	movlw	1
  1407  00095E  6E30               	movwf	dtoa@p,c
  1408  000960  D004               	goto	l124
  1409  000962                     l122:
  1410  000962  C074  F030         	movff	_prec,dtoa@p
  1411  000966  C075  F031         	movff	_prec+1,dtoa@p+1
  1412  00096A                     l124:
  1413                           
  1414                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 291:     w 
      +                          = width;
  1415  00096A  C072  F032         	movff	_width,dtoa@w
  1416  00096E  C073  F033         	movff	_width+1,dtoa@w+1
  1417                           
  1418                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 292:     if
      +                           (s || (flags & (1 << 2))) {
  1419  000972  5034               	movf	dtoa@s,w,c
  1420  000974  1035               	iorwf	dtoa@s+1,w,c
  1421  000976  A4D8               	btfss	status,2,c
  1422  000978  D002               	goto	u1090
  1423  00097A  A476               	btfss	_flags,2,c
  1424  00097C  D003               	goto	l1646
  1425  00097E                     u1090:
  1426                           
  1427                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 293:       
      +                            --w;
  1428  00097E  0632               	decf	dtoa@w,f,c
  1429  000980  A0D8               	btfss	status,0,c
  1430  000982  0633               	decf	dtoa@w+1,f,c
  1431  000984                     l1646:
  1432                           
  1433                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 297:     i 
      +                          = sizeof(dbuf) - 1;
  1434  000984  0E00               	movlw	0
  1435  000986  6E3F               	movwf	dtoa@i+1,c
  1436  000988  0E1F               	movlw	31
  1437  00098A  6E3E               	movwf	dtoa@i,c
  1438                           
  1439                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 298:     db
      +                          uf[i] = '\0';
  1440  00098C  0E00               	movlw	0
  1441  00098E  0100               	movlb	0	; () banked
  1442  000990  6F9F               	movwf	(_dbuf+31)& (0+255),b
  1443                           
  1444                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 299:     wh
      +                          ile (!(i < 1) && (n || (0 < p) || ((0 < w) && (flags & (1 << 1))))) {
  1445  000992  D07C               	goto	l1660
  1446  000994                     l1650:
  1447                           
  1448                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 300:       
      +                            --i;
  1449  000994  063E               	decf	dtoa@i,f,c
  1450  000996  A0D8               	btfss	status,0,c
  1451  000998  063F               	decf	dtoa@i+1,f,c
  1452                           
  1453                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 301:       
      +                            dbuf[i] = '0' + abs(n % 10);
  1454  00099A  0E80               	movlw	low _dbuf
  1455  00099C  243E               	addwf	dtoa@i,w,c
  1456  00099E  6ED9               	movwf	fsr2l,c
  1457  0009A0  0E00               	movlw	high _dbuf
  1458  0009A2  203F               	addwfc	dtoa@i+1,w,c
  1459  0009A4  6EDA               	movwf	fsr2h,c
  1460  0009A6  C036  F001         	movff	dtoa@n,___aomod@dividend
  1461  0009AA  C037  F002         	movff	dtoa@n+1,___aomod@dividend+1
  1462  0009AE  C038  F003         	movff	dtoa@n+2,___aomod@dividend+2
  1463  0009B2  C039  F004         	movff	dtoa@n+3,___aomod@dividend+3
  1464  0009B6  C03A  F005         	movff	dtoa@n+4,___aomod@dividend+4
  1465  0009BA  C03B  F006         	movff	dtoa@n+5,___aomod@dividend+5
  1466  0009BE  C03C  F007         	movff	dtoa@n+6,___aomod@dividend+6
  1467  0009C2  C03D  F008         	movff	dtoa@n+7,___aomod@dividend+7
  1468  0009C6  0E0A               	movlw	10
  1469  0009C8  6E09               	movwf	___aomod@divisor,c
  1470  0009CA  0E00               	movlw	0
  1471  0009CC  6E0A               	movwf	___aomod@divisor+1,c
  1472  0009CE  0E00               	movlw	0
  1473  0009D0  6E0B               	movwf	___aomod@divisor+2,c
  1474  0009D2  0E00               	movlw	0
  1475  0009D4  6E0C               	movwf	___aomod@divisor+3,c
  1476  0009D6  0E00               	movlw	0
  1477  0009D8  6E0D               	movwf	___aomod@divisor+4,c
  1478  0009DA  0E00               	movlw	0
  1479  0009DC  6E0E               	movwf	___aomod@divisor+5,c
  1480  0009DE  0E00               	movlw	0
  1481  0009E0  6E0F               	movwf	___aomod@divisor+6,c
  1482  0009E2  0E00               	movlw	0
  1483  0009E4  6E10               	movwf	___aomod@divisor+7,c
  1484  0009E6  ECDD  F006         	call	___aomod	;wreg free
  1485  0009EA  C001  F026         	movff	?___aomod,??_dtoa
  1486  0009EE  C002  F027         	movff	?___aomod+1,??_dtoa+1
  1487  0009F2  C003  F028         	movff	?___aomod+2,??_dtoa+2
  1488  0009F6  C004  F029         	movff	?___aomod+3,??_dtoa+3
  1489  0009FA  C005  F02A         	movff	?___aomod+4,??_dtoa+4
  1490  0009FE  C006  F02B         	movff	?___aomod+5,??_dtoa+5
  1491  000A02  C007  F02C         	movff	?___aomod+6,??_dtoa+6
  1492  000A06  C008  F02D         	movff	?___aomod+7,??_dtoa+7
  1493  000A0A  C026  F013         	movff	??_dtoa,abs@a
  1494  000A0E  C028  F014         	movff	??_dtoa+2,abs@a+1
  1495  000A12  ECDC  F009         	call	_abs	;wreg free
  1496  000A16  5013               	movf	?_abs,w,c
  1497  000A18  0F30               	addlw	48
  1498  000A1A  6EDF               	movwf	indf2,c
  1499                           
  1500                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 302:       
      +                            --p;
  1501  000A1C  0630               	decf	dtoa@p,f,c
  1502  000A1E  A0D8               	btfss	status,0,c
  1503  000A20  0631               	decf	dtoa@p+1,f,c
  1504                           
  1505                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 303:       
      +                            --w;
  1506  000A22  0632               	decf	dtoa@w,f,c
  1507  000A24  A0D8               	btfss	status,0,c
  1508  000A26  0633               	decf	dtoa@w+1,f,c
  1509                           
  1510                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 304:       
      +                            n = n / 10;
  1511  000A28  C036  F001         	movff	dtoa@n,___aodiv@dividend
  1512  000A2C  C037  F002         	movff	dtoa@n+1,___aodiv@dividend+1
  1513  000A30  C038  F003         	movff	dtoa@n+2,___aodiv@dividend+2
  1514  000A34  C039  F004         	movff	dtoa@n+3,___aodiv@dividend+3
  1515  000A38  C03A  F005         	movff	dtoa@n+4,___aodiv@dividend+4
  1516  000A3C  C03B  F006         	movff	dtoa@n+5,___aodiv@dividend+5
  1517  000A40  C03C  F007         	movff	dtoa@n+6,___aodiv@dividend+6
  1518  000A44  C03D  F008         	movff	dtoa@n+7,___aodiv@dividend+7
  1519  000A48  0E0A               	movlw	10
  1520  000A4A  6E09               	movwf	___aodiv@divisor,c
  1521  000A4C  0E00               	movlw	0
  1522  000A4E  6E0A               	movwf	___aodiv@divisor+1,c
  1523  000A50  0E00               	movlw	0
  1524  000A52  6E0B               	movwf	___aodiv@divisor+2,c
  1525  000A54  0E00               	movlw	0
  1526  000A56  6E0C               	movwf	___aodiv@divisor+3,c
  1527  000A58  0E00               	movlw	0
  1528  000A5A  6E0D               	movwf	___aodiv@divisor+4,c
  1529  000A5C  0E00               	movlw	0
  1530  000A5E  6E0E               	movwf	___aodiv@divisor+5,c
  1531  000A60  0E00               	movlw	0
  1532  000A62  6E0F               	movwf	___aodiv@divisor+6,c
  1533  000A64  0E00               	movlw	0
  1534  000A66  6E10               	movwf	___aodiv@divisor+7,c
  1535  000A68  EC99  F005         	call	___aodiv	;wreg free
  1536  000A6C  C001  F036         	movff	?___aodiv,dtoa@n
  1537  000A70  C002  F037         	movff	?___aodiv+1,dtoa@n+1
  1538  000A74  C003  F038         	movff	?___aodiv+2,dtoa@n+2
  1539  000A78  C004  F039         	movff	?___aodiv+3,dtoa@n+3
  1540  000A7C  C005  F03A         	movff	?___aodiv+4,dtoa@n+4
  1541  000A80  C006  F03B         	movff	?___aodiv+5,dtoa@n+5
  1542  000A84  C007  F03C         	movff	?___aodiv+6,dtoa@n+6
  1543  000A88  C008  F03D         	movff	?___aodiv+7,dtoa@n+7
  1544  000A8C                     l1660:
  1545                           
  1546                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 299:     wh
      +                          ile (!(i < 1) && (n || (0 < p) || ((0 < w) && (flags & (1 << 1))))) {
  1547  000A8C  BE3F               	btfsc	dtoa@i+1,7,c
  1548  000A8E  D01F               	goto	u1140
  1549  000A90  503F               	movf	dtoa@i+1,w,c
  1550  000A92  E103               	bnz	u1100
  1551  000A94  043E               	decf	dtoa@i,w,c
  1552  000A96  A0D8               	btfss	status,0,c
  1553  000A98  D01A               	goto	u1140
  1554  000A9A                     u1100:
  1555  000A9A  5036               	movf	dtoa@n,w,c
  1556  000A9C  1037               	iorwf	dtoa@n+1,w,c
  1557  000A9E  1038               	iorwf	dtoa@n+2,w,c
  1558  000AA0  1039               	iorwf	dtoa@n+3,w,c
  1559  000AA2  103A               	iorwf	dtoa@n+4,w,c
  1560  000AA4  103B               	iorwf	dtoa@n+5,w,c
  1561  000AA6  103C               	iorwf	dtoa@n+6,w,c
  1562  000AA8  103D               	iorwf	dtoa@n+7,w,c
  1563  000AAA  A4D8               	btfss	status,2,c
  1564  000AAC  D773               	goto	l1650
  1565  000AAE  BE31               	btfsc	dtoa@p+1,7,c
  1566  000AB0  D005               	goto	u1120
  1567  000AB2  5031               	movf	dtoa@p+1,w,c
  1568  000AB4  E102               	bnz	u1121
  1569  000AB6  0430               	decf	dtoa@p,w,c
  1570  000AB8  B0D8               	btfsc	status,0,c
  1571  000ABA                     u1121:
  1572  000ABA  D76C               	goto	l1650
  1573  000ABC                     u1120:
  1574  000ABC  BE33               	btfsc	dtoa@w+1,7,c
  1575  000ABE  D007               	goto	u1140
  1576  000AC0  5033               	movf	dtoa@w+1,w,c
  1577  000AC2  E103               	bnz	u1130
  1578  000AC4  0432               	decf	dtoa@w,w,c
  1579  000AC6  A0D8               	btfss	status,0,c
  1580  000AC8  D002               	goto	u1140
  1581  000ACA                     u1130:
  1582  000ACA  B276               	btfsc	_flags,1,c
  1583  000ACC  D763               	goto	l1650
  1584  000ACE                     u1140:
  1585                           
  1586                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 308:     if
      +                           (s || (flags & (1 << 2))) {
  1587  000ACE  5034               	movf	dtoa@s,w,c
  1588  000AD0  1035               	iorwf	dtoa@s+1,w,c
  1589  000AD2  A4D8               	btfss	status,2,c
  1590  000AD4  D002               	goto	u1160
  1591  000AD6  A476               	btfss	_flags,2,c
  1592  000AD8  D017               	goto	l1684
  1593  000ADA                     u1160:
  1594                           
  1595                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 309:       
      +                            --i;
  1596  000ADA  063E               	decf	dtoa@i,f,c
  1597  000ADC  A0D8               	btfss	status,0,c
  1598  000ADE  063F               	decf	dtoa@i+1,f,c
  1599                           
  1600                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 310:       
      +                            dbuf[i] = s ? '-' : '+';
  1601  000AE0  5034               	movf	dtoa@s,w,c
  1602  000AE2  1035               	iorwf	dtoa@s+1,w,c
  1603  000AE4  A4D8               	btfss	status,2,c
  1604  000AE6  D004               	goto	l1680
  1605  000AE8  0E00               	movlw	0
  1606  000AEA  6E2F               	movwf	_dtoa$388+1,c
  1607  000AEC  0E2B               	movlw	43
  1608  000AEE  D003               	goto	L2
  1609  000AF0                     l1680:
  1610  000AF0  0E00               	movlw	0
  1611  000AF2  6E2F               	movwf	_dtoa$388+1,c
  1612  000AF4  0E2D               	movlw	45
  1613  000AF6                     L2:
  1614  000AF6  6E2E               	movwf	_dtoa$388,c
  1615  000AF8  0E80               	movlw	low _dbuf
  1616  000AFA  243E               	addwf	dtoa@i,w,c
  1617  000AFC  6ED9               	movwf	fsr2l,c
  1618  000AFE  0E00               	movlw	high _dbuf
  1619  000B00  203F               	addwfc	dtoa@i+1,w,c
  1620  000B02  6EDA               	movwf	fsr2h,c
  1621  000B04  C02E  FFDF         	movff	_dtoa$388,indf2
  1622  000B08                     l1684:
  1623                           
  1624                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 314:     re
      +                          turn pad(fp, &dbuf[i], w);
  1625  000B08  C01C  F011         	movff	dtoa@fp,pad@fp
  1626  000B0C  C01D  F012         	movff	dtoa@fp+1,pad@fp+1
  1627  000B10  0E80               	movlw	low _dbuf
  1628  000B12  243E               	addwf	dtoa@i,w,c
  1629  000B14  6E13               	movwf	pad@buf,c
  1630  000B16  0E00               	movlw	high _dbuf
  1631  000B18  203F               	addwfc	dtoa@i+1,w,c
  1632  000B1A  6E14               	movwf	pad@buf+1,c
  1633  000B1C  C032  F015         	movff	dtoa@w,pad@p
  1634  000B20  C033  F016         	movff	dtoa@w+1,pad@p+1
  1635  000B24  EC80  F008         	call	_pad	;wreg free
  1636  000B28  C011  F01C         	movff	?_pad,?_dtoa
  1637  000B2C  C012  F01D         	movff	?_pad+1,?_dtoa+1
  1638  000B30  0012               	return		;funcret
  1639  000B32                     __end_of_dtoa:
  1640                           	opt callstack 0
  1641                           
  1642 ;; *************** function _pad *****************
  1643 ;; Defined at:
  1644 ;;		line 72 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c"
  1645 ;; Parameters:    Size  Location     Type
  1646 ;;  fp              2   16[COMRAM] PTR struct _IO_FILE
  1647 ;;		 -> sprintf@f(6), 
  1648 ;;  buf             2   18[COMRAM] PTR unsigned char 
  1649 ;;		 -> dbuf(32), 
  1650 ;;  p               2   20[COMRAM] int 
  1651 ;; Auto vars:     Size  Location     Type
  1652 ;;  w               2   25[COMRAM] int 
  1653 ;;  i               2   23[COMRAM] int 
  1654 ;; Return value:  Size  Location     Type
  1655 ;;                  2   16[COMRAM] int 
  1656 ;; Registers used:
  1657 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  1658 ;; Tracked objects:
  1659 ;;		On entry : 0/0
  1660 ;;		On exit  : 0/0
  1661 ;;		Unchanged: 0/0
  1662 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1663 ;;      Params:         6       0       0       0       0       0       0
  1664 ;;      Locals:         4       0       0       0       0       0       0
  1665 ;;      Temps:          1       0       0       0       0       0       0
  1666 ;;      Totals:        11       0       0       0       0       0       0
  1667 ;;Total ram usage:       11 bytes
  1668 ;; Hardware stack levels used:    1
  1669 ;; Hardware stack levels required when called:    4
  1670 ;; This function calls:
  1671 ;;		_fputc
  1672 ;;		_fputs
  1673 ;;		_strlen
  1674 ;; This function is called by:
  1675 ;;		_dtoa
  1676 ;; This function uses a non-reentrant model
  1677 ;;
  1678                           
  1679                           	psect	text5
  1680  001100                     __ptext5:
  1681                           	opt callstack 0
  1682  001100                     _pad:
  1683                           	opt callstack 22
  1684                           
  1685                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 72: static 
      +                          int pad(FILE *fp, char *buf, int p);C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sourc
      +                          es\c99\common\doprnt.c: 73: {;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99
      +                          \common\doprnt.c: 74:     int i, w;;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sourc
      +                          es\c99\common\doprnt.c: 77:     if (flags & (1 << 0)) {
  1686                           
  1687                           ;incstack = 0
  1688  001100  A076               	btfss	_flags,0,c
  1689  001102  D00A               	goto	l1490
  1690                           
  1691                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 78:        
      +                           fputs((const char *)buf, fp);
  1692  001104  C013  F00A         	movff	pad@buf,fputs@s
  1693  001108  C014  F00B         	movff	pad@buf+1,fputs@s+1
  1694  00110C  C011  F00C         	movff	pad@fp,fputs@fp
  1695  001110  C012  F00D         	movff	pad@fp+1,fputs@fp+1
  1696  001114  ECC0  F009         	call	_fputs	;wreg free
  1697  001118                     l1490:
  1698                           
  1699                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 82:     w =
      +                           (p < 0) ? 0 : p;
  1700  001118  BE16               	btfsc	pad@p+1,7,c
  1701  00111A  D005               	goto	l1494
  1702  00111C  C015  F01A         	movff	pad@p,pad@w
  1703  001120  C016  F01B         	movff	pad@p+1,pad@w+1
  1704  001124  D004               	goto	l111
  1705  001126                     l1494:
  1706  001126  0E00               	movlw	0
  1707  001128  6E1B               	movwf	pad@w+1,c
  1708  00112A  0E00               	movlw	0
  1709  00112C  6E1A               	movwf	pad@w,c
  1710  00112E                     l111:
  1711                           
  1712                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 83:     i =
      +                           0;
  1713  00112E  0E00               	movlw	0
  1714  001130  6E19               	movwf	pad@i+1,c
  1715  001132  0E00               	movlw	0
  1716  001134  6E18               	movwf	pad@i,c
  1717                           
  1718                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 84:     whi
      +                          le (i < w) {
  1719  001136  D00C               	goto	l1500
  1720  001138                     l1496:
  1721                           
  1722                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 85:        
      +                           fputc(' ', fp);
  1723  001138  0E00               	movlw	0
  1724  00113A  6E02               	movwf	fputc@c+1,c
  1725  00113C  0E20               	movlw	32
  1726  00113E  6E01               	movwf	fputc@c,c
  1727  001140  C011  F003         	movff	pad@fp,fputc@fp
  1728  001144  C012  F004         	movff	pad@fp+1,fputc@fp+1
  1729  001148  ECE1  F007         	call	_fputc	;wreg free
  1730                           
  1731                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 86:        
      +                           ++i;
  1732  00114C  4A18               	infsnz	pad@i,f,c
  1733  00114E  2A19               	incf	pad@i+1,f,c
  1734  001150                     l1500:
  1735                           
  1736                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 84:     whi
      +                          le (i < w) {
  1737  001150  501A               	movf	pad@w,w,c
  1738  001152  5C18               	subwf	pad@i,w,c
  1739  001154  5019               	movf	pad@i+1,w,c
  1740  001156  0A80               	xorlw	128
  1741  001158  6E17               	movwf	??_pad& (0+255),c
  1742  00115A  501B               	movf	pad@w+1,w,c
  1743  00115C  0A80               	xorlw	128
  1744  00115E  5817               	subwfb	??_pad& (0+255),w,c
  1745  001160  A0D8               	btfss	status,0,c
  1746  001162  D7EA               	goto	l1496
  1747                           
  1748                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 90:     if 
      +                          (!(flags & (1 << 0))) {
  1749  001164  B076               	btfsc	_flags,0,c
  1750  001166  D00A               	goto	l1504
  1751                           
  1752                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 91:        
      +                           fputs((const char *)buf, fp);
  1753  001168  C013  F00A         	movff	pad@buf,fputs@s
  1754  00116C  C014  F00B         	movff	pad@buf+1,fputs@s+1
  1755  001170  C011  F00C         	movff	pad@fp,fputs@fp
  1756  001174  C012  F00D         	movff	pad@fp+1,fputs@fp+1
  1757  001178  ECC0  F009         	call	_fputs	;wreg free
  1758  00117C                     l1504:
  1759                           
  1760                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 94:     ret
      +                          urn strlen(buf) + w;
  1761  00117C  C013  F001         	movff	pad@buf,strlen@s
  1762  001180  C014  F002         	movff	pad@buf+1,strlen@s+1
  1763  001184  EC25  F00A         	call	_strlen	;wreg free
  1764  001188  501A               	movf	pad@w,w,c
  1765  00118A  2401               	addwf	?_strlen,w,c
  1766  00118C  6E11               	movwf	?_pad,c
  1767  00118E  501B               	movf	pad@w+1,w,c
  1768  001190  2002               	addwfc	?_strlen+1,w,c
  1769  001192  6E12               	movwf	?_pad+1,c
  1770  001194  0012               	return		;funcret
  1771  001196                     __end_of_pad:
  1772                           	opt callstack 0
  1773                           
  1774 ;; *************** function _strlen *****************
  1775 ;; Defined at:
  1776 ;;		line 12 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\strlen.c"
  1777 ;; Parameters:    Size  Location     Type
  1778 ;;  s               2    0[COMRAM] PTR const unsigned char 
  1779 ;;		 -> dbuf(32), 
  1780 ;; Auto vars:     Size  Location     Type
  1781 ;;  a               2    2[COMRAM] PTR const unsigned char 
  1782 ;;		 -> dbuf(32), 
  1783 ;; Return value:  Size  Location     Type
  1784 ;;                  2    0[COMRAM] unsigned int 
  1785 ;; Registers used:
  1786 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  1787 ;; Tracked objects:
  1788 ;;		On entry : 0/0
  1789 ;;		On exit  : 0/0
  1790 ;;		Unchanged: 0/0
  1791 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1792 ;;      Params:         2       0       0       0       0       0       0
  1793 ;;      Locals:         2       0       0       0       0       0       0
  1794 ;;      Temps:          0       0       0       0       0       0       0
  1795 ;;      Totals:         4       0       0       0       0       0       0
  1796 ;;Total ram usage:        4 bytes
  1797 ;; Hardware stack levels used:    1
  1798 ;; Hardware stack levels required when called:    1
  1799 ;; This function calls:
  1800 ;;		Nothing
  1801 ;; This function is called by:
  1802 ;;		_pad
  1803 ;; This function uses a non-reentrant model
  1804 ;;
  1805                           
  1806                           	psect	text6
  1807  00144A                     __ptext6:
  1808                           	opt callstack 0
  1809  00144A                     _strlen:
  1810                           	opt callstack 24
  1811                           
  1812                           ;incstack = 0
  1813  00144A  C001  F003         	movff	strlen@s,strlen@a
  1814  00144E  C002  F004         	movff	strlen@s+1,strlen@a+1
  1815  001452  D002               	goto	l1480
  1816  001454                     l1478:
  1817  001454  4A01               	infsnz	strlen@s,f,c
  1818  001456  2A02               	incf	strlen@s+1,f,c
  1819  001458                     l1480:
  1820  001458  C001  FFD9         	movff	strlen@s,fsr2l
  1821  00145C  C002  FFDA         	movff	strlen@s+1,fsr2h
  1822  001460  50DF               	movf	indf2,w,c
  1823  001462  A4D8               	btfss	status,2,c
  1824  001464  D7F7               	goto	l1478
  1825  001466  5003               	movf	strlen@a,w,c
  1826  001468  5C01               	subwf	strlen@s,w,c
  1827  00146A  6E01               	movwf	?_strlen,c
  1828  00146C  5004               	movf	strlen@a+1,w,c
  1829  00146E  5802               	subwfb	strlen@s+1,w,c
  1830  001470  6E02               	movwf	?_strlen+1,c
  1831  001472  0012               	return		;funcret
  1832  001474                     __end_of_strlen:
  1833                           	opt callstack 0
  1834                           
  1835 ;; *************** function _fputs *****************
  1836 ;; Defined at:
  1837 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\nf_fputs.c"
  1838 ;; Parameters:    Size  Location     Type
  1839 ;;  s               2    9[COMRAM] PTR const unsigned char 
  1840 ;;		 -> dbuf(32), 
  1841 ;;  fp              2   11[COMRAM] PTR struct _IO_FILE
  1842 ;;		 -> sprintf@f(6), 
  1843 ;; Auto vars:     Size  Location     Type
  1844 ;;  i               2   14[COMRAM] int 
  1845 ;;  c               1   13[COMRAM] unsigned char 
  1846 ;; Return value:  Size  Location     Type
  1847 ;;                  2    9[COMRAM] int 
  1848 ;; Registers used:
  1849 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  1850 ;; Tracked objects:
  1851 ;;		On entry : 0/0
  1852 ;;		On exit  : 0/0
  1853 ;;		Unchanged: 0/0
  1854 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1855 ;;      Params:         4       0       0       0       0       0       0
  1856 ;;      Locals:         3       0       0       0       0       0       0
  1857 ;;      Temps:          0       0       0       0       0       0       0
  1858 ;;      Totals:         7       0       0       0       0       0       0
  1859 ;;Total ram usage:        7 bytes
  1860 ;; Hardware stack levels used:    1
  1861 ;; Hardware stack levels required when called:    3
  1862 ;; This function calls:
  1863 ;;		_fputc
  1864 ;; This function is called by:
  1865 ;;		_pad
  1866 ;; This function uses a non-reentrant model
  1867 ;;
  1868                           
  1869                           	psect	text7
  1870  001380                     __ptext7:
  1871                           	opt callstack 0
  1872  001380                     _fputs:
  1873                           	opt callstack 22
  1874                           
  1875                           ;incstack = 0
  1876  001380  0E00               	movlw	0
  1877  001382  6E10               	movwf	fputs@i+1,c
  1878  001384  0E00               	movlw	0
  1879  001386  6E0F               	movwf	fputs@i,c
  1880  001388  D00B               	goto	l1474
  1881  00138A                     l1470:
  1882  00138A  C00E  F001         	movff	fputs@c,fputc@c
  1883  00138E  6A02               	clrf	fputc@c+1,c
  1884  001390  C00C  F003         	movff	fputs@fp,fputc@fp
  1885  001394  C00D  F004         	movff	fputs@fp+1,fputc@fp+1
  1886  001398  ECE1  F007         	call	_fputc	;wreg free
  1887  00139C  4A0F               	infsnz	fputs@i,f,c
  1888  00139E  2A10               	incf	fputs@i+1,f,c
  1889  0013A0                     l1474:
  1890  0013A0  500F               	movf	fputs@i,w,c
  1891  0013A2  240A               	addwf	fputs@s,w,c
  1892  0013A4  6ED9               	movwf	fsr2l,c
  1893  0013A6  5010               	movf	fputs@i+1,w,c
  1894  0013A8  200B               	addwfc	fputs@s+1,w,c
  1895  0013AA  6EDA               	movwf	fsr2h,c
  1896  0013AC  50DF               	movf	indf2,w,c
  1897  0013AE  6E0E               	movwf	fputs@c,c
  1898  0013B0  500E               	movf	fputs@c,w,c
  1899  0013B2  B4D8               	btfsc	status,2,c
  1900  0013B4  0012               	return	
  1901  0013B6  D7E9               	goto	l1470
  1902  0013B8                     __end_of_fputs:
  1903                           	opt callstack 0
  1904                           
  1905 ;; *************** function _fputc *****************
  1906 ;; Defined at:
  1907 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\nf_fputc.c"
  1908 ;; Parameters:    Size  Location     Type
  1909 ;;  c               2    0[COMRAM] int 
  1910 ;;  fp              2    2[COMRAM] PTR struct _IO_FILE
  1911 ;;		 -> sprintf@f(6), 
  1912 ;; Auto vars:     Size  Location     Type
  1913 ;;		None
  1914 ;; Return value:  Size  Location     Type
  1915 ;;                  2    0[COMRAM] int 
  1916 ;; Registers used:
  1917 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  1918 ;; Tracked objects:
  1919 ;;		On entry : 0/0
  1920 ;;		On exit  : 0/0
  1921 ;;		Unchanged: 0/0
  1922 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1923 ;;      Params:         4       0       0       0       0       0       0
  1924 ;;      Locals:         0       0       0       0       0       0       0
  1925 ;;      Temps:          5       0       0       0       0       0       0
  1926 ;;      Totals:         9       0       0       0       0       0       0
  1927 ;;Total ram usage:        9 bytes
  1928 ;; Hardware stack levels used:    1
  1929 ;; Hardware stack levels required when called:    2
  1930 ;; This function calls:
  1931 ;;		_putch
  1932 ;; This function is called by:
  1933 ;;		_pad
  1934 ;;		_vfpfcnvrt
  1935 ;;		_fputs
  1936 ;; This function uses a non-reentrant model
  1937 ;;
  1938                           
  1939                           	psect	text8
  1940  000FC2                     __ptext8:
  1941                           	opt callstack 0
  1942  000FC2                     _fputc:
  1943                           	opt callstack 25
  1944                           
  1945                           ;incstack = 0
  1946  000FC2  5003               	movf	fputc@fp,w,c
  1947  000FC4  1004               	iorwf	fputc@fp+1,w,c
  1948  000FC6  B4D8               	btfsc	status,2,c
  1949  000FC8  D004               	goto	u750
  1950  000FCA  5003               	movf	fputc@fp,w,c
  1951  000FCC  1004               	iorwf	fputc@fp+1,w,c
  1952  000FCE  A4D8               	btfss	status,2,c
  1953  000FD0  D004               	goto	l1460
  1954  000FD2                     u750:
  1955  000FD2  5001               	movf	fputc@c,w,c
  1956  000FD4  EC79  F00A         	call	_putch
  1957  000FD8  0012               	return	
  1958  000FDA                     l1460:
  1959  000FDA  EE20 F004          	lfsr	2,4
  1960  000FDE  5003               	movf	fputc@fp,w,c
  1961  000FE0  26D9               	addwf	fsr2l,f,c
  1962  000FE2  5004               	movf	fputc@fp+1,w,c
  1963  000FE4  22DA               	addwfc	fsr2h,f,c
  1964  000FE6  50DE               	movf	postinc2,w,c
  1965  000FE8  10DE               	iorwf	postinc2,w,c
  1966  000FEA  B4D8               	btfsc	status,2,c
  1967  000FEC  D016               	goto	u770
  1968  000FEE  EE20 F004          	lfsr	2,4
  1969  000FF2  5003               	movf	fputc@fp,w,c
  1970  000FF4  26D9               	addwf	fsr2l,f,c
  1971  000FF6  5004               	movf	fputc@fp+1,w,c
  1972  000FF8  22DA               	addwfc	fsr2h,f,c
  1973  000FFA  EE10 F002          	lfsr	1,2
  1974  000FFE  5003               	movf	fputc@fp,w,c
  1975  001000  26E1               	addwf	fsr1l,f,c
  1976  001002  5004               	movf	fputc@fp+1,w,c
  1977  001004  22E2               	addwfc	fsr1h,f,c
  1978  001006  50DE               	movf	postinc2,w,c
  1979  001008  5CE6               	subwf	postinc1,w,c
  1980  00100A  50E6               	movf	postinc1,w,c
  1981  00100C  0A80               	xorlw	128
  1982  00100E  6E09               	movwf	(??_fputc+4)& (0+255),c
  1983  001010  50DE               	movf	postinc2,w,c
  1984  001012  0A80               	xorlw	128
  1985  001014  5809               	subwfb	(??_fputc+4)& (0+255),w,c
  1986  001016  B0D8               	btfsc	status,0,c
  1987  001018  0012               	return	
  1988  00101A                     u770:
  1989  00101A  EE20 F002          	lfsr	2,2
  1990  00101E  5003               	movf	fputc@fp,w,c
  1991  001020  26D9               	addwf	fsr2l,f,c
  1992  001022  5004               	movf	fputc@fp+1,w,c
  1993  001024  22DA               	addwfc	fsr2h,f,c
  1994  001026  CFDE F005          	movff	postinc2,??_fputc
  1995  00102A  CFDD F006          	movff	postdec2,??_fputc+1
  1996  00102E  C003  FFD9         	movff	fputc@fp,fsr2l
  1997  001032  C004  FFDA         	movff	fputc@fp+1,fsr2h
  1998  001036  CFDE F007          	movff	postinc2,??_fputc+2
  1999  00103A  CFDD F008          	movff	postdec2,??_fputc+3
  2000  00103E  5005               	movf	??_fputc,w,c
  2001  001040  2407               	addwf	??_fputc+2,w,c
  2002  001042  6ED9               	movwf	fsr2l,c
  2003  001044  5006               	movf	??_fputc+1,w,c
  2004  001046  2008               	addwfc	??_fputc+3,w,c
  2005  001048  6EDA               	movwf	fsr2h,c
  2006  00104A  C001  FFDF         	movff	fputc@c,indf2
  2007  00104E  EE20 F002          	lfsr	2,2
  2008  001052  5003               	movf	fputc@fp,w,c
  2009  001054  26D9               	addwf	fsr2l,f,c
  2010  001056  5004               	movf	fputc@fp+1,w,c
  2011  001058  22DA               	addwfc	fsr2h,f,c
  2012  00105A  2ADE               	incf	postinc2,f,c
  2013  00105C  0E00               	movlw	0
  2014  00105E  22DD               	addwfc	postdec2,f,c
  2015  001060  0012               	return		;funcret
  2016  001062                     __end_of_fputc:
  2017                           	opt callstack 0
  2018                           
  2019 ;; *************** function _putch *****************
  2020 ;; Defined at:
  2021 ;;		line 7 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\putch.c"
  2022 ;; Parameters:    Size  Location     Type
  2023 ;;  c               1    wreg     unsigned char 
  2024 ;; Auto vars:     Size  Location     Type
  2025 ;;  c               1    0[COMRAM] unsigned char 
  2026 ;; Return value:  Size  Location     Type
  2027 ;;                  1    wreg      void 
  2028 ;; Registers used:
  2029 ;;		wreg
  2030 ;; Tracked objects:
  2031 ;;		On entry : 0/0
  2032 ;;		On exit  : 0/0
  2033 ;;		Unchanged: 0/0
  2034 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2035 ;;      Params:         0       0       0       0       0       0       0
  2036 ;;      Locals:         0       0       0       0       0       0       0
  2037 ;;      Temps:          0       0       0       0       0       0       0
  2038 ;;      Totals:         0       0       0       0       0       0       0
  2039 ;;Total ram usage:        0 bytes
  2040 ;; Hardware stack levels used:    1
  2041 ;; Hardware stack levels required when called:    1
  2042 ;; This function calls:
  2043 ;;		Nothing
  2044 ;; This function is called by:
  2045 ;;		_fputc
  2046 ;; This function uses a non-reentrant model
  2047 ;;
  2048                           
  2049                           	psect	text9
  2050  0014F2                     __ptext9:
  2051                           	opt callstack 0
  2052  0014F2                     _putch:
  2053                           	opt callstack 25
  2054                           
  2055                           ;incstack = 0
  2056  0014F2  0012               	return		;funcret
  2057  0014F4                     __end_of_putch:
  2058                           	opt callstack 0
  2059                           
  2060 ;; *************** function _abs *****************
  2061 ;; Defined at:
  2062 ;;		line 1 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\abs.c"
  2063 ;; Parameters:    Size  Location     Type
  2064 ;;  a               2   18[COMRAM] int 
  2065 ;; Auto vars:     Size  Location     Type
  2066 ;;		None
  2067 ;; Return value:  Size  Location     Type
  2068 ;;                  2   18[COMRAM] int 
  2069 ;; Registers used:
  2070 ;;		wreg, status,2, status,0
  2071 ;; Tracked objects:
  2072 ;;		On entry : 0/0
  2073 ;;		On exit  : 0/0
  2074 ;;		Unchanged: 0/0
  2075 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2076 ;;      Params:         2       0       0       0       0       0       0
  2077 ;;      Locals:         0       0       0       0       0       0       0
  2078 ;;      Temps:          2       0       0       0       0       0       0
  2079 ;;      Totals:         4       0       0       0       0       0       0
  2080 ;;Total ram usage:        4 bytes
  2081 ;; Hardware stack levels used:    1
  2082 ;; Hardware stack levels required when called:    1
  2083 ;; This function calls:
  2084 ;;		Nothing
  2085 ;; This function is called by:
  2086 ;;		_dtoa
  2087 ;; This function uses a non-reentrant model
  2088 ;;
  2089                           
  2090                           	psect	text10
  2091  0013B8                     __ptext10:
  2092                           	opt callstack 0
  2093  0013B8                     _abs:
  2094                           	opt callstack 25
  2095                           
  2096                           ;incstack = 0
  2097  0013B8  BE14               	btfsc	abs@a+1,7,c
  2098  0013BA  D005               	goto	u840
  2099  0013BC  5014               	movf	abs@a+1,w,c
  2100  0013BE  E110               	bnz	l856
  2101  0013C0  0413               	decf	abs@a,w,c
  2102  0013C2  B0D8               	btfsc	status,0,c
  2103  0013C4  D00D               	goto	l856
  2104  0013C6                     u840:
  2105  0013C6  C013  F015         	movff	abs@a,??_abs
  2106  0013CA  C014  F016         	movff	abs@a+1,??_abs+1
  2107  0013CE  1E15               	comf	??_abs,f,c
  2108  0013D0  1E16               	comf	??_abs+1,f,c
  2109  0013D2  4A15               	infsnz	??_abs,f,c
  2110  0013D4  2A16               	incf	??_abs+1,f,c
  2111  0013D6  C015  F013         	movff	??_abs,?_abs
  2112  0013DA  C016  F014         	movff	??_abs+1,?_abs+1
  2113  0013DE  0012               	return	
  2114  0013E0                     l856:
  2115  0013E0  C013  F013         	movff	abs@a,?_abs
  2116  0013E4  C014  F014         	movff	abs@a+1,?_abs+1
  2117  0013E8  0012               	return		;funcret
  2118  0013EA                     __end_of_abs:
  2119                           	opt callstack 0
  2120                           
  2121 ;; *************** function ___aomod *****************
  2122 ;; Defined at:
  2123 ;;		line 9 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\aomod.c"
  2124 ;; Parameters:    Size  Location     Type
  2125 ;;  dividend        8    0[COMRAM] long long 
  2126 ;;  divisor         8    8[COMRAM] long long 
  2127 ;; Auto vars:     Size  Location     Type
  2128 ;;  sign            1   17[COMRAM] unsigned char 
  2129 ;;  counter         1   16[COMRAM] unsigned char 
  2130 ;; Return value:  Size  Location     Type
  2131 ;;                  8    0[COMRAM] long long 
  2132 ;; Registers used:
  2133 ;;		wreg, status,2, status,0
  2134 ;; Tracked objects:
  2135 ;;		On entry : 0/0
  2136 ;;		On exit  : 0/0
  2137 ;;		Unchanged: 0/0
  2138 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2139 ;;      Params:        16       0       0       0       0       0       0
  2140 ;;      Locals:         2       0       0       0       0       0       0
  2141 ;;      Temps:          0       0       0       0       0       0       0
  2142 ;;      Totals:        18       0       0       0       0       0       0
  2143 ;;Total ram usage:       18 bytes
  2144 ;; Hardware stack levels used:    1
  2145 ;; Hardware stack levels required when called:    1
  2146 ;; This function calls:
  2147 ;;		Nothing
  2148 ;; This function is called by:
  2149 ;;		_dtoa
  2150 ;; This function uses a non-reentrant model
  2151 ;;
  2152                           
  2153                           	psect	text11
  2154  000DBA                     __ptext11:
  2155                           	opt callstack 0
  2156  000DBA                     ___aomod:
  2157                           	opt callstack 25
  2158                           
  2159                           ;incstack = 0
  2160  000DBA  0E00               	movlw	0
  2161  000DBC  6E12               	movwf	___aomod@sign,c
  2162  000DBE  AE08               	btfss	___aomod@dividend+7,7,c
  2163  000DC0  D012               	goto	l1574
  2164  000DC2  1E08               	comf	___aomod@dividend+7,f,c
  2165  000DC4  1E07               	comf	___aomod@dividend+6,f,c
  2166  000DC6  1E06               	comf	___aomod@dividend+5,f,c
  2167  000DC8  1E05               	comf	___aomod@dividend+4,f,c
  2168  000DCA  1E04               	comf	___aomod@dividend+3,f,c
  2169  000DCC  1E03               	comf	___aomod@dividend+2,f,c
  2170  000DCE  1E02               	comf	___aomod@dividend+1,f,c
  2171  000DD0  6C01               	negf	___aomod@dividend,c
  2172  000DD2  0E00               	movlw	0
  2173  000DD4  2202               	addwfc	___aomod@dividend+1,f,c
  2174  000DD6  2203               	addwfc	___aomod@dividend+2,f,c
  2175  000DD8  2204               	addwfc	___aomod@dividend+3,f,c
  2176  000DDA  2205               	addwfc	___aomod@dividend+4,f,c
  2177  000DDC  2206               	addwfc	___aomod@dividend+5,f,c
  2178  000DDE  2207               	addwfc	___aomod@dividend+6,f,c
  2179  000DE0  2208               	addwfc	___aomod@dividend+7,f,c
  2180  000DE2  0E01               	movlw	1
  2181  000DE4  6E12               	movwf	___aomod@sign,c
  2182  000DE6                     l1574:
  2183  000DE6  AE10               	btfss	___aomod@divisor+7,7,c
  2184  000DE8  D010               	goto	l1578
  2185  000DEA  1E10               	comf	___aomod@divisor+7,f,c
  2186  000DEC  1E0F               	comf	___aomod@divisor+6,f,c
  2187  000DEE  1E0E               	comf	___aomod@divisor+5,f,c
  2188  000DF0  1E0D               	comf	___aomod@divisor+4,f,c
  2189  000DF2  1E0C               	comf	___aomod@divisor+3,f,c
  2190  000DF4  1E0B               	comf	___aomod@divisor+2,f,c
  2191  000DF6  1E0A               	comf	___aomod@divisor+1,f,c
  2192  000DF8  6C09               	negf	___aomod@divisor,c
  2193  000DFA  0E00               	movlw	0
  2194  000DFC  220A               	addwfc	___aomod@divisor+1,f,c
  2195  000DFE  220B               	addwfc	___aomod@divisor+2,f,c
  2196  000E00  220C               	addwfc	___aomod@divisor+3,f,c
  2197  000E02  220D               	addwfc	___aomod@divisor+4,f,c
  2198  000E04  220E               	addwfc	___aomod@divisor+5,f,c
  2199  000E06  220F               	addwfc	___aomod@divisor+6,f,c
  2200  000E08  2210               	addwfc	___aomod@divisor+7,f,c
  2201  000E0A                     l1578:
  2202  000E0A  5009               	movf	___aomod@divisor,w,c
  2203  000E0C  100A               	iorwf	___aomod@divisor+1,w,c
  2204  000E0E  100B               	iorwf	___aomod@divisor+2,w,c
  2205  000E10  100C               	iorwf	___aomod@divisor+3,w,c
  2206  000E12  100D               	iorwf	___aomod@divisor+4,w,c
  2207  000E14  100E               	iorwf	___aomod@divisor+5,w,c
  2208  000E16  100F               	iorwf	___aomod@divisor+6,w,c
  2209  000E18  1010               	iorwf	___aomod@divisor+7,w,c
  2210  000E1A  B4D8               	btfsc	status,2,c
  2211  000E1C  D03C               	goto	l1594
  2212  000E1E  0E01               	movlw	1
  2213  000E20  6E11               	movwf	___aomod@counter,c
  2214  000E22  D00A               	goto	l1584
  2215  000E24                     l1582:
  2216  000E24  90D8               	bcf	status,0,c
  2217  000E26  3609               	rlcf	___aomod@divisor,f,c
  2218  000E28  360A               	rlcf	___aomod@divisor+1,f,c
  2219  000E2A  360B               	rlcf	___aomod@divisor+2,f,c
  2220  000E2C  360C               	rlcf	___aomod@divisor+3,f,c
  2221  000E2E  360D               	rlcf	___aomod@divisor+4,f,c
  2222  000E30  360E               	rlcf	___aomod@divisor+5,f,c
  2223  000E32  360F               	rlcf	___aomod@divisor+6,f,c
  2224  000E34  3610               	rlcf	___aomod@divisor+7,f,c
  2225  000E36  2A11               	incf	___aomod@counter,f,c
  2226  000E38                     l1584:
  2227  000E38  AE10               	btfss	___aomod@divisor+7,7,c
  2228  000E3A  D7F4               	goto	l1582
  2229  000E3C                     u970:
  2230  000E3C  5009               	movf	___aomod@divisor,w,c
  2231  000E3E  5C01               	subwf	___aomod@dividend,w,c
  2232  000E40  500A               	movf	___aomod@divisor+1,w,c
  2233  000E42  5802               	subwfb	___aomod@dividend+1,w,c
  2234  000E44  500B               	movf	___aomod@divisor+2,w,c
  2235  000E46  5803               	subwfb	___aomod@dividend+2,w,c
  2236  000E48  500C               	movf	___aomod@divisor+3,w,c
  2237  000E4A  5804               	subwfb	___aomod@dividend+3,w,c
  2238  000E4C  500D               	movf	___aomod@divisor+4,w,c
  2239  000E4E  5805               	subwfb	___aomod@dividend+4,w,c
  2240  000E50  500E               	movf	___aomod@divisor+5,w,c
  2241  000E52  5806               	subwfb	___aomod@dividend+5,w,c
  2242  000E54  500F               	movf	___aomod@divisor+6,w,c
  2243  000E56  5807               	subwfb	___aomod@dividend+6,w,c
  2244  000E58  5010               	movf	___aomod@divisor+7,w,c
  2245  000E5A  5808               	subwfb	___aomod@dividend+7,w,c
  2246  000E5C  A0D8               	btfss	status,0,c
  2247  000E5E  D010               	goto	l1590
  2248  000E60  5009               	movf	___aomod@divisor,w,c
  2249  000E62  5E01               	subwf	___aomod@dividend,f,c
  2250  000E64  500A               	movf	___aomod@divisor+1,w,c
  2251  000E66  5A02               	subwfb	___aomod@dividend+1,f,c
  2252  000E68  500B               	movf	___aomod@divisor+2,w,c
  2253  000E6A  5A03               	subwfb	___aomod@dividend+2,f,c
  2254  000E6C  500C               	movf	___aomod@divisor+3,w,c
  2255  000E6E  5A04               	subwfb	___aomod@dividend+3,f,c
  2256  000E70  500D               	movf	___aomod@divisor+4,w,c
  2257  000E72  5A05               	subwfb	___aomod@dividend+4,f,c
  2258  000E74  500E               	movf	___aomod@divisor+5,w,c
  2259  000E76  5A06               	subwfb	___aomod@dividend+5,f,c
  2260  000E78  500F               	movf	___aomod@divisor+6,w,c
  2261  000E7A  5A07               	subwfb	___aomod@dividend+6,f,c
  2262  000E7C  5010               	movf	___aomod@divisor+7,w,c
  2263  000E7E  5A08               	subwfb	___aomod@dividend+7,f,c
  2264  000E80                     l1590:
  2265  000E80  90D8               	bcf	status,0,c
  2266  000E82  3210               	rrcf	___aomod@divisor+7,f,c
  2267  000E84  320F               	rrcf	___aomod@divisor+6,f,c
  2268  000E86  320E               	rrcf	___aomod@divisor+5,f,c
  2269  000E88  320D               	rrcf	___aomod@divisor+4,f,c
  2270  000E8A  320C               	rrcf	___aomod@divisor+3,f,c
  2271  000E8C  320B               	rrcf	___aomod@divisor+2,f,c
  2272  000E8E  320A               	rrcf	___aomod@divisor+1,f,c
  2273  000E90  3209               	rrcf	___aomod@divisor,f,c
  2274  000E92  2E11               	decfsz	___aomod@counter,f,c
  2275  000E94  D7D3               	goto	u970
  2276  000E96                     l1594:
  2277  000E96  5012               	movf	___aomod@sign,w,c
  2278  000E98  B4D8               	btfsc	status,2,c
  2279  000E9A  D010               	goto	l1598
  2280  000E9C  1E08               	comf	___aomod@dividend+7,f,c
  2281  000E9E  1E07               	comf	___aomod@dividend+6,f,c
  2282  000EA0  1E06               	comf	___aomod@dividend+5,f,c
  2283  000EA2  1E05               	comf	___aomod@dividend+4,f,c
  2284  000EA4  1E04               	comf	___aomod@dividend+3,f,c
  2285  000EA6  1E03               	comf	___aomod@dividend+2,f,c
  2286  000EA8  1E02               	comf	___aomod@dividend+1,f,c
  2287  000EAA  6C01               	negf	___aomod@dividend,c
  2288  000EAC  0E00               	movlw	0
  2289  000EAE  2202               	addwfc	___aomod@dividend+1,f,c
  2290  000EB0  2203               	addwfc	___aomod@dividend+2,f,c
  2291  000EB2  2204               	addwfc	___aomod@dividend+3,f,c
  2292  000EB4  2205               	addwfc	___aomod@dividend+4,f,c
  2293  000EB6  2206               	addwfc	___aomod@dividend+5,f,c
  2294  000EB8  2207               	addwfc	___aomod@dividend+6,f,c
  2295  000EBA  2208               	addwfc	___aomod@dividend+7,f,c
  2296  000EBC                     l1598:
  2297  000EBC  C001  F001         	movff	___aomod@dividend,?___aomod
  2298  000EC0  C002  F002         	movff	___aomod@dividend+1,?___aomod+1
  2299  000EC4  C003  F003         	movff	___aomod@dividend+2,?___aomod+2
  2300  000EC8  C004  F004         	movff	___aomod@dividend+3,?___aomod+3
  2301  000ECC  C005  F005         	movff	___aomod@dividend+4,?___aomod+4
  2302  000ED0  C006  F006         	movff	___aomod@dividend+5,?___aomod+5
  2303  000ED4  C007  F007         	movff	___aomod@dividend+6,?___aomod+6
  2304  000ED8  C008  F008         	movff	___aomod@dividend+7,?___aomod+7
  2305  000EDC  0012               	return		;funcret
  2306  000EDE                     __end_of___aomod:
  2307                           	opt callstack 0
  2308                           
  2309 ;; *************** function ___aodiv *****************
  2310 ;; Defined at:
  2311 ;;		line 9 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\aodiv.c"
  2312 ;; Parameters:    Size  Location     Type
  2313 ;;  dividend        8    0[COMRAM] long long 
  2314 ;;  divisor         8    8[COMRAM] long long 
  2315 ;; Auto vars:     Size  Location     Type
  2316 ;;  quotient        8   18[COMRAM] long long 
  2317 ;;  sign            1   17[COMRAM] unsigned char 
  2318 ;;  counter         1   16[COMRAM] unsigned char 
  2319 ;; Return value:  Size  Location     Type
  2320 ;;                  8    0[COMRAM] long long 
  2321 ;; Registers used:
  2322 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  2323 ;; Tracked objects:
  2324 ;;		On entry : 0/0
  2325 ;;		On exit  : 0/0
  2326 ;;		Unchanged: 0/0
  2327 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2328 ;;      Params:        16       0       0       0       0       0       0
  2329 ;;      Locals:        10       0       0       0       0       0       0
  2330 ;;      Temps:          0       0       0       0       0       0       0
  2331 ;;      Totals:        26       0       0       0       0       0       0
  2332 ;;Total ram usage:       26 bytes
  2333 ;; Hardware stack levels used:    1
  2334 ;; Hardware stack levels required when called:    1
  2335 ;; This function calls:
  2336 ;;		Nothing
  2337 ;; This function is called by:
  2338 ;;		_dtoa
  2339 ;; This function uses a non-reentrant model
  2340 ;;
  2341                           
  2342                           	psect	text12
  2343  000B32                     __ptext12:
  2344                           	opt callstack 0
  2345  000B32                     ___aodiv:
  2346                           	opt callstack 25
  2347                           
  2348                           ;incstack = 0
  2349  000B32  0E00               	movlw	0
  2350  000B34  6E12               	movwf	___aodiv@sign,c
  2351  000B36  AE10               	btfss	___aodiv@divisor+7,7,c
  2352  000B38  D012               	goto	l1530
  2353  000B3A  1E10               	comf	___aodiv@divisor+7,f,c
  2354  000B3C  1E0F               	comf	___aodiv@divisor+6,f,c
  2355  000B3E  1E0E               	comf	___aodiv@divisor+5,f,c
  2356  000B40  1E0D               	comf	___aodiv@divisor+4,f,c
  2357  000B42  1E0C               	comf	___aodiv@divisor+3,f,c
  2358  000B44  1E0B               	comf	___aodiv@divisor+2,f,c
  2359  000B46  1E0A               	comf	___aodiv@divisor+1,f,c
  2360  000B48  6C09               	negf	___aodiv@divisor,c
  2361  000B4A  0E00               	movlw	0
  2362  000B4C  220A               	addwfc	___aodiv@divisor+1,f,c
  2363  000B4E  220B               	addwfc	___aodiv@divisor+2,f,c
  2364  000B50  220C               	addwfc	___aodiv@divisor+3,f,c
  2365  000B52  220D               	addwfc	___aodiv@divisor+4,f,c
  2366  000B54  220E               	addwfc	___aodiv@divisor+5,f,c
  2367  000B56  220F               	addwfc	___aodiv@divisor+6,f,c
  2368  000B58  2210               	addwfc	___aodiv@divisor+7,f,c
  2369  000B5A  0E01               	movlw	1
  2370  000B5C  6E12               	movwf	___aodiv@sign,c
  2371  000B5E                     l1530:
  2372  000B5E  AE08               	btfss	___aodiv@dividend+7,7,c
  2373  000B60  D012               	goto	l1536
  2374  000B62  1E08               	comf	___aodiv@dividend+7,f,c
  2375  000B64  1E07               	comf	___aodiv@dividend+6,f,c
  2376  000B66  1E06               	comf	___aodiv@dividend+5,f,c
  2377  000B68  1E05               	comf	___aodiv@dividend+4,f,c
  2378  000B6A  1E04               	comf	___aodiv@dividend+3,f,c
  2379  000B6C  1E03               	comf	___aodiv@dividend+2,f,c
  2380  000B6E  1E02               	comf	___aodiv@dividend+1,f,c
  2381  000B70  6C01               	negf	___aodiv@dividend,c
  2382  000B72  0E00               	movlw	0
  2383  000B74  2202               	addwfc	___aodiv@dividend+1,f,c
  2384  000B76  2203               	addwfc	___aodiv@dividend+2,f,c
  2385  000B78  2204               	addwfc	___aodiv@dividend+3,f,c
  2386  000B7A  2205               	addwfc	___aodiv@dividend+4,f,c
  2387  000B7C  2206               	addwfc	___aodiv@dividend+5,f,c
  2388  000B7E  2207               	addwfc	___aodiv@dividend+6,f,c
  2389  000B80  2208               	addwfc	___aodiv@dividend+7,f,c
  2390  000B82  0E01               	movlw	1
  2391  000B84  1A12               	xorwf	___aodiv@sign,f,c
  2392  000B86                     l1536:
  2393  000B86  EE20  F013         	lfsr	2,___aodiv@quotient
  2394  000B8A  0E07               	movlw	7
  2395  000B8C                     u891:
  2396  000B8C  6ADE               	clrf	postinc2,c
  2397  000B8E  06E8               	decf	wreg,f,c
  2398  000B90  E2FD               	bc	u891
  2399  000B92  5009               	movf	___aodiv@divisor,w,c
  2400  000B94  100A               	iorwf	___aodiv@divisor+1,w,c
  2401  000B96  100B               	iorwf	___aodiv@divisor+2,w,c
  2402  000B98  100C               	iorwf	___aodiv@divisor+3,w,c
  2403  000B9A  100D               	iorwf	___aodiv@divisor+4,w,c
  2404  000B9C  100E               	iorwf	___aodiv@divisor+5,w,c
  2405  000B9E  100F               	iorwf	___aodiv@divisor+6,w,c
  2406  000BA0  1010               	iorwf	___aodiv@divisor+7,w,c
  2407  000BA2  B4D8               	btfsc	status,2,c
  2408  000BA4  D046               	goto	l1558
  2409  000BA6  0E01               	movlw	1
  2410  000BA8  6E11               	movwf	___aodiv@counter,c
  2411  000BAA  D00A               	goto	l1544
  2412  000BAC                     l1542:
  2413  000BAC  90D8               	bcf	status,0,c
  2414  000BAE  3609               	rlcf	___aodiv@divisor,f,c
  2415  000BB0  360A               	rlcf	___aodiv@divisor+1,f,c
  2416  000BB2  360B               	rlcf	___aodiv@divisor+2,f,c
  2417  000BB4  360C               	rlcf	___aodiv@divisor+3,f,c
  2418  000BB6  360D               	rlcf	___aodiv@divisor+4,f,c
  2419  000BB8  360E               	rlcf	___aodiv@divisor+5,f,c
  2420  000BBA  360F               	rlcf	___aodiv@divisor+6,f,c
  2421  000BBC  3610               	rlcf	___aodiv@divisor+7,f,c
  2422  000BBE  2A11               	incf	___aodiv@counter,f,c
  2423  000BC0                     l1544:
  2424  000BC0  AE10               	btfss	___aodiv@divisor+7,7,c
  2425  000BC2  D7F4               	goto	l1542
  2426  000BC4                     u910:
  2427  000BC4  90D8               	bcf	status,0,c
  2428  000BC6  3613               	rlcf	___aodiv@quotient,f,c
  2429  000BC8  3614               	rlcf	___aodiv@quotient+1,f,c
  2430  000BCA  3615               	rlcf	___aodiv@quotient+2,f,c
  2431  000BCC  3616               	rlcf	___aodiv@quotient+3,f,c
  2432  000BCE  3617               	rlcf	___aodiv@quotient+4,f,c
  2433  000BD0  3618               	rlcf	___aodiv@quotient+5,f,c
  2434  000BD2  3619               	rlcf	___aodiv@quotient+6,f,c
  2435  000BD4  361A               	rlcf	___aodiv@quotient+7,f,c
  2436  000BD6  5009               	movf	___aodiv@divisor,w,c
  2437  000BD8  5C01               	subwf	___aodiv@dividend,w,c
  2438  000BDA  500A               	movf	___aodiv@divisor+1,w,c
  2439  000BDC  5802               	subwfb	___aodiv@dividend+1,w,c
  2440  000BDE  500B               	movf	___aodiv@divisor+2,w,c
  2441  000BE0  5803               	subwfb	___aodiv@dividend+2,w,c
  2442  000BE2  500C               	movf	___aodiv@divisor+3,w,c
  2443  000BE4  5804               	subwfb	___aodiv@dividend+3,w,c
  2444  000BE6  500D               	movf	___aodiv@divisor+4,w,c
  2445  000BE8  5805               	subwfb	___aodiv@dividend+4,w,c
  2446  000BEA  500E               	movf	___aodiv@divisor+5,w,c
  2447  000BEC  5806               	subwfb	___aodiv@dividend+5,w,c
  2448  000BEE  500F               	movf	___aodiv@divisor+6,w,c
  2449  000BF0  5807               	subwfb	___aodiv@dividend+6,w,c
  2450  000BF2  5010               	movf	___aodiv@divisor+7,w,c
  2451  000BF4  5808               	subwfb	___aodiv@dividend+7,w,c
  2452  000BF6  A0D8               	btfss	status,0,c
  2453  000BF8  D011               	goto	l1554
  2454  000BFA  5009               	movf	___aodiv@divisor,w,c
  2455  000BFC  5E01               	subwf	___aodiv@dividend,f,c
  2456  000BFE  500A               	movf	___aodiv@divisor+1,w,c
  2457  000C00  5A02               	subwfb	___aodiv@dividend+1,f,c
  2458  000C02  500B               	movf	___aodiv@divisor+2,w,c
  2459  000C04  5A03               	subwfb	___aodiv@dividend+2,f,c
  2460  000C06  500C               	movf	___aodiv@divisor+3,w,c
  2461  000C08  5A04               	subwfb	___aodiv@dividend+3,f,c
  2462  000C0A  500D               	movf	___aodiv@divisor+4,w,c
  2463  000C0C  5A05               	subwfb	___aodiv@dividend+4,f,c
  2464  000C0E  500E               	movf	___aodiv@divisor+5,w,c
  2465  000C10  5A06               	subwfb	___aodiv@dividend+5,f,c
  2466  000C12  500F               	movf	___aodiv@divisor+6,w,c
  2467  000C14  5A07               	subwfb	___aodiv@dividend+6,f,c
  2468  000C16  5010               	movf	___aodiv@divisor+7,w,c
  2469  000C18  5A08               	subwfb	___aodiv@dividend+7,f,c
  2470  000C1A  8013               	bsf	___aodiv@quotient,0,c
  2471  000C1C                     l1554:
  2472  000C1C  90D8               	bcf	status,0,c
  2473  000C1E  3210               	rrcf	___aodiv@divisor+7,f,c
  2474  000C20  320F               	rrcf	___aodiv@divisor+6,f,c
  2475  000C22  320E               	rrcf	___aodiv@divisor+5,f,c
  2476  000C24  320D               	rrcf	___aodiv@divisor+4,f,c
  2477  000C26  320C               	rrcf	___aodiv@divisor+3,f,c
  2478  000C28  320B               	rrcf	___aodiv@divisor+2,f,c
  2479  000C2A  320A               	rrcf	___aodiv@divisor+1,f,c
  2480  000C2C  3209               	rrcf	___aodiv@divisor,f,c
  2481  000C2E  2E11               	decfsz	___aodiv@counter,f,c
  2482  000C30  D7C9               	goto	u910
  2483  000C32                     l1558:
  2484  000C32  5012               	movf	___aodiv@sign,w,c
  2485  000C34  B4D8               	btfsc	status,2,c
  2486  000C36  D010               	goto	l1562
  2487  000C38  1E1A               	comf	___aodiv@quotient+7,f,c
  2488  000C3A  1E19               	comf	___aodiv@quotient+6,f,c
  2489  000C3C  1E18               	comf	___aodiv@quotient+5,f,c
  2490  000C3E  1E17               	comf	___aodiv@quotient+4,f,c
  2491  000C40  1E16               	comf	___aodiv@quotient+3,f,c
  2492  000C42  1E15               	comf	___aodiv@quotient+2,f,c
  2493  000C44  1E14               	comf	___aodiv@quotient+1,f,c
  2494  000C46  6C13               	negf	___aodiv@quotient,c
  2495  000C48  0E00               	movlw	0
  2496  000C4A  2214               	addwfc	___aodiv@quotient+1,f,c
  2497  000C4C  2215               	addwfc	___aodiv@quotient+2,f,c
  2498  000C4E  2216               	addwfc	___aodiv@quotient+3,f,c
  2499  000C50  2217               	addwfc	___aodiv@quotient+4,f,c
  2500  000C52  2218               	addwfc	___aodiv@quotient+5,f,c
  2501  000C54  2219               	addwfc	___aodiv@quotient+6,f,c
  2502  000C56  221A               	addwfc	___aodiv@quotient+7,f,c
  2503  000C58                     l1562:
  2504  000C58  C013  F001         	movff	___aodiv@quotient,?___aodiv
  2505  000C5C  C014  F002         	movff	___aodiv@quotient+1,?___aodiv+1
  2506  000C60  C015  F003         	movff	___aodiv@quotient+2,?___aodiv+2
  2507  000C64  C016  F004         	movff	___aodiv@quotient+3,?___aodiv+3
  2508  000C68  C017  F005         	movff	___aodiv@quotient+4,?___aodiv+4
  2509  000C6C  C018  F006         	movff	___aodiv@quotient+5,?___aodiv+5
  2510  000C70  C019  F007         	movff	___aodiv@quotient+6,?___aodiv+6
  2511  000C74  C01A  F008         	movff	___aodiv@quotient+7,?___aodiv+7
  2512  000C78  0012               	return		;funcret
  2513  000C7A                     __end_of___aodiv:
  2514                           	opt callstack 0
  2515                           
  2516 ;; *************** function _atoi *****************
  2517 ;; Defined at:
  2518 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\atoi.c"
  2519 ;; Parameters:    Size  Location     Type
  2520 ;;  s               2    7[COMRAM] PTR const unsigned char 
  2521 ;;		 -> STR_3(5), 
  2522 ;; Auto vars:     Size  Location     Type
  2523 ;;  n               2   20[COMRAM] int 
  2524 ;;  neg             2   13[COMRAM] int 
  2525 ;; Return value:  Size  Location     Type
  2526 ;;                  2    7[COMRAM] int 
  2527 ;; Registers used:
  2528 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2529 ;; Tracked objects:
  2530 ;;		On entry : 0/0
  2531 ;;		On exit  : 0/0
  2532 ;;		Unchanged: 0/0
  2533 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2534 ;;      Params:         2       0       0       0       0       0       0
  2535 ;;      Locals:         9       0       0       0       0       0       0
  2536 ;;      Temps:          4       0       0       0       0       0       0
  2537 ;;      Totals:        15       0       0       0       0       0       0
  2538 ;;Total ram usage:       15 bytes
  2539 ;; Hardware stack levels used:    1
  2540 ;; Hardware stack levels required when called:    2
  2541 ;; This function calls:
  2542 ;;		___wmul
  2543 ;;		_isdigit
  2544 ;;		_isspace
  2545 ;; This function is called by:
  2546 ;;		_vfpfcnvrt
  2547 ;; This function uses a non-reentrant model
  2548 ;;
  2549                           
  2550                           	psect	text13
  2551  000C7A                     __ptext13:
  2552                           	opt callstack 0
  2553  000C7A                     _atoi:
  2554                           	opt callstack 25
  2555                           
  2556                           ;incstack = 0
  2557  000C7A  0E00               	movlw	0
  2558  000C7C  6E16               	movwf	atoi@n+1,c
  2559  000C7E  0E00               	movlw	0
  2560  000C80  6E15               	movwf	atoi@n,c
  2561  000C82  0E00               	movlw	0
  2562  000C84  6E0F               	movwf	atoi@neg+1,c
  2563  000C86  0E00               	movlw	0
  2564  000C88  6E0E               	movwf	atoi@neg,c
  2565  000C8A  D002               	goto	l1692
  2566  000C8C                     l1690:
  2567  000C8C  4A08               	infsnz	atoi@s,f,c
  2568  000C8E  2A09               	incf	atoi@s+1,f,c
  2569  000C90                     l1692:
  2570  000C90  0E01               	movlw	1
  2571  000C92  6E14               	movwf	_atoi$861,c
  2572  000C94  C008  FFF6         	movff	atoi@s,tblptrl
  2573  000C98  C009  FFF7         	movff	atoi@s+1,tblptrh
  2574  000C9C                     	if	0	;tblptru may be non-zero
  2575  000C9C                     	endif
  2576  000C9C                     	if	0	;tblptru may be non-zero
  2577  000C9C                     	endif
  2578  000C9C  0008               	tblrd		*
  2579  000C9E  50F5               	movf	tablat,w,c
  2580  000CA0  0A20               	xorlw	32
  2581  000CA2  B4D8               	btfsc	status,2,c
  2582  000CA4  D018               	goto	l1700
  2583  000CA6  0EF7               	movlw	247
  2584  000CA8  6E0A               	movwf	??_atoi& (0+255),c
  2585  000CAA  0EFF               	movlw	255
  2586  000CAC  6E0B               	movwf	(??_atoi+1)& (0+255),c
  2587  000CAE  C008  FFF6         	movff	atoi@s,tblptrl
  2588  000CB2  C009  FFF7         	movff	atoi@s+1,tblptrh
  2589  000CB6                     	if	0	;tblptru may be non-zero
  2590  000CB6                     	endif
  2591  000CB6                     	if	0	;tblptru may be non-zero
  2592  000CB6                     	endif
  2593  000CB6  0008               	tblrd		*
  2594  000CB8  50F5               	movf	tablat,w,c
  2595  000CBA  6E0C               	movwf	(??_atoi+2)& (0+255),c
  2596  000CBC  6A0D               	clrf	(??_atoi+3)& (0+255),c
  2597  000CBE  500A               	movf	??_atoi,w,c
  2598  000CC0  260C               	addwf	??_atoi+2,f,c
  2599  000CC2  500B               	movf	??_atoi+1,w,c
  2600  000CC4  220D               	addwfc	??_atoi+3,f,c
  2601  000CC6  500D               	movf	??_atoi+3,w,c
  2602  000CC8  E104               	bnz	u1190
  2603  000CCA  0E05               	movlw	5
  2604  000CCC  5C0C               	subwf	??_atoi+2,w,c
  2605  000CCE  A0D8               	btfss	status,0,c
  2606  000CD0  D002               	goto	l1700
  2607  000CD2                     u1190:
  2608  000CD2  0E00               	movlw	0
  2609  000CD4  6E14               	movwf	_atoi$861,c
  2610  000CD6                     l1700:
  2611  000CD6  C014  F010         	movff	_atoi$861,_atoi$860
  2612  000CDA  6A11               	clrf	_atoi$860+1,c
  2613  000CDC  5010               	movf	_atoi$860,w,c
  2614  000CDE  1011               	iorwf	_atoi$860+1,w,c
  2615  000CE0  B4D8               	btfsc	status,2,c
  2616  000CE2  D008               	goto	l1710
  2617  000CE4  D7D3               	goto	l1690
  2618  000CE6                     l1706:
  2619  000CE6  0E00               	movlw	0
  2620  000CE8  6E0F               	movwf	atoi@neg+1,c
  2621  000CEA  0E01               	movlw	1
  2622  000CEC  6E0E               	movwf	atoi@neg,c
  2623  000CEE                     l1708:
  2624  000CEE  4A08               	infsnz	atoi@s,f,c
  2625  000CF0  2A09               	incf	atoi@s+1,f,c
  2626  000CF2  D02E               	goto	l1716
  2627  000CF4                     l1710:
  2628  000CF4  C008  FFF6         	movff	atoi@s,tblptrl
  2629  000CF8  C009  FFF7         	movff	atoi@s+1,tblptrh
  2630  000CFC                     	if	0	;tblptru may be non-zero
  2631  000CFC                     	endif
  2632  000CFC                     	if	0	;tblptru may be non-zero
  2633  000CFC                     	endif
  2634  000CFC  0008               	tblrd		*
  2635  000CFE  50F5               	movf	tablat,w,c
  2636  000D00  6E0A               	movwf	??_atoi& (0+255),c
  2637  000D02  6A0B               	clrf	(??_atoi+1)& (0+255),c
  2638                           
  2639                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2640                           ; Switch size 1, requested type "simple"
  2641                           ; Number of cases is 1, Range of values is 0 to 0
  2642                           ; switch strategies available:
  2643                           ; Name         Instructions Cycles
  2644                           ; simple_byte            4     3 (average)
  2645                           ;	Chosen strategy is simple_byte
  2646  000D04  500B               	movf	??_atoi+1,w,c
  2647  000D06  0A00               	xorlw	0	; case 0
  2648  000D08  A4D8               	btfss	status,2,c
  2649  000D0A  D022               	goto	l1716
  2650                           
  2651                           ; Switch size 1, requested type "simple"
  2652                           ; Number of cases is 2, Range of values is 43 to 45
  2653                           ; switch strategies available:
  2654                           ; Name         Instructions Cycles
  2655                           ; simple_byte            7     4 (average)
  2656                           ;	Chosen strategy is simple_byte
  2657  000D0C  500A               	movf	??_atoi,w,c
  2658  000D0E  0A2B               	xorlw	43	; case 43
  2659  000D10  B4D8               	btfsc	status,2,c
  2660  000D12  D7ED               	goto	l1708
  2661  000D14  0A06               	xorlw	6	; case 45
  2662  000D16  B4D8               	btfsc	status,2,c
  2663  000D18  D7E6               	goto	l1706
  2664  000D1A  D01A               	goto	l1716
  2665  000D1C                     l1712:
  2666  000D1C  C015  F001         	movff	atoi@n,___wmul@multiplier
  2667  000D20  C016  F002         	movff	atoi@n+1,___wmul@multiplier+1
  2668  000D24  0E00               	movlw	0
  2669  000D26  6E04               	movwf	___wmul@multiplicand+1,c
  2670  000D28  0E0A               	movlw	10
  2671  000D2A  6E03               	movwf	___wmul@multiplicand,c
  2672  000D2C  EC4D  F00A         	call	___wmul	;wreg free
  2673  000D30  C008  FFF6         	movff	atoi@s,tblptrl
  2674  000D34  C009  FFF7         	movff	atoi@s+1,tblptrh
  2675  000D38                     	if	0	;tblptru may be non-zero
  2676  000D38                     	endif
  2677  000D38                     	if	0	;tblptru may be non-zero
  2678  000D38                     	endif
  2679  000D38  0008               	tblrd		*
  2680  000D3A  50F5               	movf	tablat,w,c
  2681  000D3C  5E01               	subwf	?___wmul,f,c
  2682  000D3E  0E00               	movlw	0
  2683  000D40  5A02               	subwfb	?___wmul+1,f,c
  2684  000D42  0E30               	movlw	48
  2685  000D44  2401               	addwf	?___wmul,w,c
  2686  000D46  6E15               	movwf	atoi@n,c
  2687  000D48  0E00               	movlw	0
  2688  000D4A  2002               	addwfc	?___wmul+1,w,c
  2689  000D4C  6E16               	movwf	atoi@n+1,c
  2690  000D4E  D7CF               	goto	l1708
  2691  000D50                     l1716:
  2692  000D50  0ED0               	movlw	208
  2693  000D52  6E0A               	movwf	??_atoi& (0+255),c
  2694  000D54  0EFF               	movlw	255
  2695  000D56  6E0B               	movwf	(??_atoi+1)& (0+255),c
  2696  000D58  C008  FFF6         	movff	atoi@s,tblptrl
  2697  000D5C  C009  FFF7         	movff	atoi@s+1,tblptrh
  2698  000D60                     	if	0	;tblptru may be non-zero
  2699  000D60                     	endif
  2700  000D60                     	if	0	;tblptru may be non-zero
  2701  000D60                     	endif
  2702  000D60  0008               	tblrd		*
  2703  000D62  50F5               	movf	tablat,w,c
  2704  000D64  6E0C               	movwf	(??_atoi+2)& (0+255),c
  2705  000D66  6A0D               	clrf	(??_atoi+3)& (0+255),c
  2706  000D68  500A               	movf	??_atoi,w,c
  2707  000D6A  260C               	addwf	??_atoi+2,f,c
  2708  000D6C  500B               	movf	??_atoi+1,w,c
  2709  000D6E  220D               	addwfc	??_atoi+3,f,c
  2710  000D70  500D               	movf	??_atoi+3,w,c
  2711  000D72  E106               	bnz	u1210
  2712  000D74  0E0A               	movlw	10
  2713  000D76  5C0C               	subwf	??_atoi+2,w,c
  2714  000D78  B0D8               	btfsc	status,0,c
  2715  000D7A  D002               	goto	u1210
  2716  000D7C  0E01               	movlw	1
  2717  000D7E  D001               	goto	u1220
  2718  000D80                     u1210:
  2719  000D80  0E00               	movlw	0
  2720  000D82                     u1220:
  2721  000D82  6E12               	movwf	_atoi$862,c
  2722  000D84  6A13               	clrf	_atoi$862+1,c
  2723  000D86  5012               	movf	_atoi$862,w,c
  2724  000D88  1013               	iorwf	_atoi$862+1,w,c
  2725  000D8A  A4D8               	btfss	status,2,c
  2726  000D8C  D7C7               	goto	l1712
  2727  000D8E  500E               	movf	atoi@neg,w,c
  2728  000D90  100F               	iorwf	atoi@neg+1,w,c
  2729  000D92  A4D8               	btfss	status,2,c
  2730  000D94  D00D               	goto	l887
  2731  000D96  C015  F00A         	movff	atoi@n,??_atoi
  2732  000D9A  C016  F00B         	movff	atoi@n+1,??_atoi+1
  2733  000D9E  1E0A               	comf	??_atoi,f,c
  2734  000DA0  1E0B               	comf	??_atoi+1,f,c
  2735  000DA2  4A0A               	infsnz	??_atoi,f,c
  2736  000DA4  2A0B               	incf	??_atoi+1,f,c
  2737  000DA6  C00A  F008         	movff	??_atoi,?_atoi
  2738  000DAA  C00B  F009         	movff	??_atoi+1,?_atoi+1
  2739  000DAE  0012               	return	
  2740  000DB0                     l887:
  2741  000DB0  C015  F008         	movff	atoi@n,?_atoi
  2742  000DB4  C016  F009         	movff	atoi@n+1,?_atoi+1
  2743  000DB8  0012               	return		;funcret
  2744  000DBA                     __end_of_atoi:
  2745                           	opt callstack 0
  2746                           
  2747 ;; *************** function _isspace *****************
  2748 ;; Defined at:
  2749 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\isspace.c"
  2750 ;; Parameters:    Size  Location     Type
  2751 ;;  c               2    0[COMRAM] int 
  2752 ;; Auto vars:     Size  Location     Type
  2753 ;;		None
  2754 ;; Return value:  Size  Location     Type
  2755 ;;                  2    0[COMRAM] int 
  2756 ;; Registers used:
  2757 ;;		wreg, status,2, status,0
  2758 ;; Tracked objects:
  2759 ;;		On entry : 0/0
  2760 ;;		On exit  : 0/0
  2761 ;;		Unchanged: 0/0
  2762 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2763 ;;      Params:         2       0       0       0       0       0       0
  2764 ;;      Locals:         1       0       0       0       0       0       0
  2765 ;;      Temps:          4       0       0       0       0       0       0
  2766 ;;      Totals:         7       0       0       0       0       0       0
  2767 ;;Total ram usage:        7 bytes
  2768 ;; Hardware stack levels used:    1
  2769 ;; Hardware stack levels required when called:    1
  2770 ;; This function calls:
  2771 ;;		Nothing
  2772 ;; This function is called by:
  2773 ;;		_atoi
  2774 ;; This function uses a non-reentrant model
  2775 ;;
  2776                           
  2777                           	psect	text14
  2778  001342                     __ptext14:
  2779                           	opt callstack 0
  2780  001342                     _isspace:
  2781                           	opt callstack 25
  2782                           
  2783                           ;incstack = 0
  2784  001342  0E01               	movlw	1
  2785  001344  6E07               	movwf	_isspace$878,c
  2786  001346  0E20               	movlw	32
  2787  001348  1801               	xorwf	isspace@c,w,c
  2788  00134A  1002               	iorwf	isspace@c+1,w,c
  2789  00134C  B4D8               	btfsc	status,2,c
  2790  00134E  D014               	goto	l1610
  2791  001350  0EF7               	movlw	247
  2792  001352  6E03               	movwf	??_isspace& (0+255),c
  2793  001354  0EFF               	movlw	255
  2794  001356  6E04               	movwf	(??_isspace+1)& (0+255),c
  2795  001358  C001  F005         	movff	isspace@c,??_isspace+2
  2796  00135C  C002  F006         	movff	isspace@c+1,??_isspace+3
  2797  001360  5003               	movf	??_isspace,w,c
  2798  001362  2605               	addwf	??_isspace+2,f,c
  2799  001364  5004               	movf	??_isspace+1,w,c
  2800  001366  2206               	addwfc	??_isspace+3,f,c
  2801  001368  5006               	movf	??_isspace+3,w,c
  2802  00136A  E104               	bnz	u1010
  2803  00136C  0E05               	movlw	5
  2804  00136E  5C05               	subwf	??_isspace+2,w,c
  2805  001370  A0D8               	btfss	status,0,c
  2806  001372  D002               	goto	l1610
  2807  001374                     u1010:
  2808  001374  0E00               	movlw	0
  2809  001376  6E07               	movwf	_isspace$878,c
  2810  001378                     l1610:
  2811  001378  C007  F001         	movff	_isspace$878,?_isspace
  2812  00137C  6A02               	clrf	?_isspace+1,c
  2813  00137E  0012               	return		;funcret
  2814  001380                     __end_of_isspace:
  2815                           	opt callstack 0
  2816                           
  2817 ;; *************** function _isdigit *****************
  2818 ;; Defined at:
  2819 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\isdigit.c"
  2820 ;; Parameters:    Size  Location     Type
  2821 ;;  c               2    0[COMRAM] int 
  2822 ;; Auto vars:     Size  Location     Type
  2823 ;;		None
  2824 ;; Return value:  Size  Location     Type
  2825 ;;                  2    0[COMRAM] int 
  2826 ;; Registers used:
  2827 ;;		wreg, status,2, status,0
  2828 ;; Tracked objects:
  2829 ;;		On entry : 0/0
  2830 ;;		On exit  : 0/0
  2831 ;;		Unchanged: 0/0
  2832 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2833 ;;      Params:         2       0       0       0       0       0       0
  2834 ;;      Locals:         0       0       0       0       0       0       0
  2835 ;;      Temps:          4       0       0       0       0       0       0
  2836 ;;      Totals:         6       0       0       0       0       0       0
  2837 ;;Total ram usage:        6 bytes
  2838 ;; Hardware stack levels used:    1
  2839 ;; Hardware stack levels required when called:    1
  2840 ;; This function calls:
  2841 ;;		Nothing
  2842 ;; This function is called by:
  2843 ;;		_vfpfcnvrt
  2844 ;;		_atoi
  2845 ;; This function uses a non-reentrant model
  2846 ;;
  2847                           
  2848                           	psect	text15
  2849  0013EA                     __ptext15:
  2850                           	opt callstack 0
  2851  0013EA                     _isdigit:
  2852                           	opt callstack 26
  2853                           
  2854                           ;incstack = 0
  2855  0013EA  0ED0               	movlw	208
  2856  0013EC  6E03               	movwf	??_isdigit& (0+255),c
  2857  0013EE  0EFF               	movlw	255
  2858  0013F0  6E04               	movwf	(??_isdigit+1)& (0+255),c
  2859  0013F2  C001  F005         	movff	isdigit@c,??_isdigit+2
  2860  0013F6  C002  F006         	movff	isdigit@c+1,??_isdigit+3
  2861  0013FA  5003               	movf	??_isdigit,w,c
  2862  0013FC  2605               	addwf	??_isdigit+2,f,c
  2863  0013FE  5004               	movf	??_isdigit+1,w,c
  2864  001400  2206               	addwfc	??_isdigit+3,f,c
  2865  001402  5006               	movf	??_isdigit+3,w,c
  2866  001404  E106               	bnz	u850
  2867  001406  0E0A               	movlw	10
  2868  001408  5C05               	subwf	??_isdigit+2,w,c
  2869  00140A  B0D8               	btfsc	status,0,c
  2870  00140C  D002               	goto	u850
  2871  00140E  0E01               	movlw	1
  2872  001410  D001               	goto	u860
  2873  001412                     u850:
  2874  001412  0E00               	movlw	0
  2875  001414                     u860:
  2876  001414  6E01               	movwf	?_isdigit,c
  2877  001416  6A02               	clrf	?_isdigit+1,c
  2878  001418  0012               	return		;funcret
  2879  00141A                     __end_of_isdigit:
  2880                           	opt callstack 0
  2881                           
  2882 ;; *************** function ___wmul *****************
  2883 ;; Defined at:
  2884 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\Umul16.c"
  2885 ;; Parameters:    Size  Location     Type
  2886 ;;  multiplier      2    0[COMRAM] unsigned int 
  2887 ;;  multiplicand    2    2[COMRAM] unsigned int 
  2888 ;; Auto vars:     Size  Location     Type
  2889 ;;  product         2    4[COMRAM] unsigned int 
  2890 ;; Return value:  Size  Location     Type
  2891 ;;                  2    0[COMRAM] unsigned int 
  2892 ;; Registers used:
  2893 ;;		wreg, status,2, status,0, prodl, prodh
  2894 ;; Tracked objects:
  2895 ;;		On entry : 0/0
  2896 ;;		On exit  : 0/0
  2897 ;;		Unchanged: 0/0
  2898 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2899 ;;      Params:         4       0       0       0       0       0       0
  2900 ;;      Locals:         2       0       0       0       0       0       0
  2901 ;;      Temps:          0       0       0       0       0       0       0
  2902 ;;      Totals:         6       0       0       0       0       0       0
  2903 ;;Total ram usage:        6 bytes
  2904 ;; Hardware stack levels used:    1
  2905 ;; Hardware stack levels required when called:    1
  2906 ;; This function calls:
  2907 ;;		Nothing
  2908 ;; This function is called by:
  2909 ;;		_atoi
  2910 ;; This function uses a non-reentrant model
  2911 ;;
  2912                           
  2913                           	psect	text16
  2914  00149A                     __ptext16:
  2915                           	opt callstack 0
  2916  00149A                     ___wmul:
  2917                           	opt callstack 25
  2918                           
  2919                           ;incstack = 0
  2920  00149A  5001               	movf	___wmul@multiplier,w,c
  2921  00149C  0203               	mulwf	___wmul@multiplicand,c
  2922  00149E  CFF3 F005          	movff	prodl,___wmul@product
  2923  0014A2  CFF4 F006          	movff	prodh,___wmul@product+1
  2924  0014A6  5001               	movf	___wmul@multiplier,w,c
  2925  0014A8  0204               	mulwf	___wmul@multiplicand+1,c
  2926  0014AA  50F3               	movf	prodl,w,c
  2927  0014AC  2606               	addwf	___wmul@product+1,f,c
  2928  0014AE  5002               	movf	___wmul@multiplier+1,w,c
  2929  0014B0  0203               	mulwf	___wmul@multiplicand,c
  2930  0014B2  50F3               	movf	prodl,w,c
  2931  0014B4  2606               	addwf	___wmul@product+1,f,c
  2932  0014B6  C005  F001         	movff	___wmul@product,?___wmul
  2933  0014BA  C006  F002         	movff	___wmul@product+1,?___wmul+1
  2934  0014BE  0012               	return		;funcret
  2935  0014C0                     __end_of___wmul:
  2936                           	opt callstack 0
  2937                           
  2938 ;; *************** function _lcd_ini *****************
  2939 ;; Defined at:
  2940 ;;		line 3 in file "../Bibliotecas/LCD4bits.c"
  2941 ;; Parameters:    Size  Location     Type
  2942 ;;		None
  2943 ;; Auto vars:     Size  Location     Type
  2944 ;;  i               1    5[COMRAM] unsigned char 
  2945 ;; Return value:  Size  Location     Type
  2946 ;;                  1    wreg      void 
  2947 ;; Registers used:
  2948 ;;		wreg, status,2, status,0, cstack
  2949 ;; Tracked objects:
  2950 ;;		On entry : 0/0
  2951 ;;		On exit  : 0/0
  2952 ;;		Unchanged: 0/0
  2953 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2954 ;;      Params:         0       0       0       0       0       0       0
  2955 ;;      Locals:         1       0       0       0       0       0       0
  2956 ;;      Temps:          1       0       0       0       0       0       0
  2957 ;;      Totals:         2       0       0       0       0       0       0
  2958 ;;Total ram usage:        2 bytes
  2959 ;; Hardware stack levels used:    1
  2960 ;; Hardware stack levels required when called:    3
  2961 ;; This function calls:
  2962 ;;		_lcd_cmd
  2963 ;; This function is called by:
  2964 ;;		_main
  2965 ;; This function uses a non-reentrant model
  2966 ;;
  2967                           
  2968                           	psect	text17
  2969  001196                     __ptext17:
  2970                           	opt callstack 0
  2971  001196                     _lcd_ini:
  2972                           	opt callstack 27
  2973                           
  2974                           ;../Bibliotecas/LCD4bits.c: 5:     char i;;../Bibliotecas/LCD4bits.c: 7:    TRISD = 0b00
      +                          000000;
  2975                           
  2976                           ;incstack = 0
  2977  001196  0E00               	movlw	0
  2978  001198  6E95               	movwf	3989,c	;volatile
  2979                           
  2980                           ;../Bibliotecas/LCD4bits.c: 8:    TRISEbits.TRISE0 = 0;
  2981  00119A  9096               	bcf	3990,0,c	;volatile
  2982                           
  2983                           ;../Bibliotecas/LCD4bits.c: 9:    TRISEbits.TRISE1 = 0;
  2984  00119C  9296               	bcf	3990,1,c	;volatile
  2985                           
  2986                           ;../Bibliotecas/LCD4bits.c: 11:    LATD = 0b00000000;
  2987  00119E  0E00               	movlw	0
  2988  0011A0  6E8C               	movwf	3980,c	;volatile
  2989                           
  2990                           ;../Bibliotecas/LCD4bits.c: 12:    LATEbits.LATE0 = 0;
  2991  0011A2  908D               	bcf	3981,0,c	;volatile
  2992                           
  2993                           ;../Bibliotecas/LCD4bits.c: 13:    LATEbits.LATE1 = 0;
  2994  0011A4  928D               	bcf	3981,1,c	;volatile
  2995                           
  2996                           ;../Bibliotecas/LCD4bits.c: 15:    _delay((unsigned long)((15)*(8000000/4000.0)));
  2997  0011A6  0E27               	movlw	39
  2998  0011A8  6E05               	movwf	??_lcd_ini& (0+255),c
  2999  0011AA  0EF5               	movlw	245
  3000  0011AC                     u1467:
  3001  0011AC  2EE8               	decfsz	wreg,f,c
  3002  0011AE  D7FE               	bra	u1467
  3003  0011B0  2E05               	decfsz	??_lcd_ini& (0+255),f,c
  3004  0011B2  D7FC               	bra	u1467
  3005  0011B4  F000               	nop	
  3006                           
  3007                           ;../Bibliotecas/LCD4bits.c: 17:    for(i = 0; i < 3; i++)
  3008  0011B6  0E00               	movlw	0
  3009  0011B8  6E06               	movwf	lcd_ini@i,c
  3010  0011BA                     l1880:
  3011                           
  3012                           ;../Bibliotecas/LCD4bits.c: 18:    {;../Bibliotecas/LCD4bits.c: 19:        lcd_cmd(0x30)
      +                          ;
  3013  0011BA  0E30               	movlw	48
  3014  0011BC  EC6F  F007         	call	_lcd_cmd
  3015                           
  3016                           ;../Bibliotecas/LCD4bits.c: 20:        _delay((unsigned long)((5)*(8000000/4000.0)));
  3017  0011C0  0E0D               	movlw	13
  3018  0011C2  6E05               	movwf	??_lcd_ini& (0+255),c
  3019  0011C4  0EFC               	movlw	252
  3020  0011C6                     u1477:
  3021  0011C6  2EE8               	decfsz	wreg,f,c
  3022  0011C8  D7FE               	bra	u1477
  3023  0011CA  2E05               	decfsz	??_lcd_ini& (0+255),f,c
  3024  0011CC  D7FC               	bra	u1477
  3025                           
  3026                           ;../Bibliotecas/LCD4bits.c: 21:    }
  3027  0011CE  2A06               	incf	lcd_ini@i,f,c
  3028  0011D0  0E02               	movlw	2
  3029  0011D2  6406               	cpfsgt	lcd_ini@i,c
  3030  0011D4  D7F2               	goto	l1880
  3031                           
  3032                           ;../Bibliotecas/LCD4bits.c: 22:    lcd_cmd(0x02);
  3033  0011D6  0E02               	movlw	2
  3034  0011D8  EC6F  F007         	call	_lcd_cmd
  3035                           
  3036                           ;../Bibliotecas/LCD4bits.c: 23:    _delay((unsigned long)((40)*(8000000/4000000.0)));
  3037  0011DC  0E1A               	movlw	26
  3038  0011DE                     u1487:
  3039  0011DE  2EE8               	decfsz	wreg,f,c
  3040  0011E0  D7FE               	bra	u1487
  3041  0011E2  D000               	nop2	
  3042                           
  3043                           ;../Bibliotecas/LCD4bits.c: 24:    lcd_cmd(0x28);
  3044  0011E4  0E28               	movlw	40
  3045  0011E6  EC6F  F007         	call	_lcd_cmd
  3046                           
  3047                           ;../Bibliotecas/LCD4bits.c: 25:    _delay((unsigned long)((40)*(8000000/4000000.0)));
  3048  0011EA  0E1A               	movlw	26
  3049  0011EC                     u1497:
  3050  0011EC  2EE8               	decfsz	wreg,f,c
  3051  0011EE  D7FE               	bra	u1497
  3052  0011F0  D000               	nop2	
  3053                           
  3054                           ;../Bibliotecas/LCD4bits.c: 26:    lcd_cmd(0x01);
  3055  0011F2  0E01               	movlw	1
  3056  0011F4  EC6F  F007         	call	_lcd_cmd
  3057                           
  3058                           ;../Bibliotecas/LCD4bits.c: 27:    _delay((unsigned long)((2)*(8000000/4000.0)));
  3059  0011F8  0E06               	movlw	6
  3060  0011FA  6E05               	movwf	??_lcd_ini& (0+255),c
  3061  0011FC  0E30               	movlw	48
  3062  0011FE                     u1507:
  3063  0011FE  2EE8               	decfsz	wreg,f,c
  3064  001200  D7FE               	bra	u1507
  3065  001202  2E05               	decfsz	??_lcd_ini& (0+255),f,c
  3066  001204  D7FC               	bra	u1507
  3067  001206  D000               	nop2	
  3068                           
  3069                           ;../Bibliotecas/LCD4bits.c: 28:    lcd_cmd(0x0C);
  3070  001208  0E0C               	movlw	12
  3071  00120A  EC6F  F007         	call	_lcd_cmd
  3072                           
  3073                           ;../Bibliotecas/LCD4bits.c: 29:    _delay((unsigned long)((40)*(8000000/4000000.0)));
  3074  00120E  0E1A               	movlw	26
  3075  001210                     u1517:
  3076  001210  2EE8               	decfsz	wreg,f,c
  3077  001212  D7FE               	bra	u1517
  3078  001214  D000               	nop2	
  3079                           
  3080                           ;../Bibliotecas/LCD4bits.c: 30:    lcd_cmd(0x06);
  3081  001216  0E06               	movlw	6
  3082  001218  EC6F  F007         	call	_lcd_cmd
  3083                           
  3084                           ;../Bibliotecas/LCD4bits.c: 31:    _delay((unsigned long)((40)*(8000000/4000000.0)));
  3085  00121C  0E1A               	movlw	26
  3086  00121E                     u1527:
  3087  00121E  2EE8               	decfsz	wreg,f,c
  3088  001220  D7FE               	bra	u1527
  3089  001222  D000               	nop2	
  3090  001224  0012               	return		;funcret
  3091  001226                     __end_of_lcd_ini:
  3092                           	opt callstack 0
  3093                           
  3094 ;; *************** function _lcd_escreve_bf *****************
  3095 ;; Defined at:
  3096 ;;		line 74 in file "../Bibliotecas/LCD4bits.c"
  3097 ;; Parameters:    Size  Location     Type
  3098 ;;  lin             1    wreg     unsigned char 
  3099 ;;  col             1    6[COMRAM] unsigned char 
  3100 ;;  str             2    7[COMRAM] PTR unsigned char 
  3101 ;;		 -> bufferLCD(16), STR_2(13), STR_1(7), 
  3102 ;; Auto vars:     Size  Location     Type
  3103 ;;  lin             1   10[COMRAM] unsigned char 
  3104 ;;  end             1    9[COMRAM] unsigned char 
  3105 ;; Return value:  Size  Location     Type
  3106 ;;                  1    wreg      void 
  3107 ;; Registers used:
  3108 ;;		wreg, fsr1l, fsr1h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  3109 ;; Tracked objects:
  3110 ;;		On entry : 0/0
  3111 ;;		On exit  : 0/0
  3112 ;;		Unchanged: 0/0
  3113 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3114 ;;      Params:         3       0       0       0       0       0       0
  3115 ;;      Locals:         2       0       0       0       0       0       0
  3116 ;;      Temps:          0       0       0       0       0       0       0
  3117 ;;      Totals:         5       0       0       0       0       0       0
  3118 ;;Total ram usage:        5 bytes
  3119 ;; Hardware stack levels used:    1
  3120 ;; Hardware stack levels required when called:    4
  3121 ;; This function calls:
  3122 ;;		_lcd_envia_byte
  3123 ;; This function is called by:
  3124 ;;		_main
  3125 ;; This function uses a non-reentrant model
  3126 ;;
  3127                           
  3128                           	psect	text18
  3129  001226                     __ptext18:
  3130                           	opt callstack 0
  3131  001226                     _lcd_escreve_bf:
  3132                           	opt callstack 26
  3133                           
  3134                           ;incstack = 0
  3135                           ;lcd_escreve_bf@lin stored from wreg
  3136  001226  6E0B               	movwf	lcd_escreve_bf@lin,c
  3137                           
  3138                           ;../Bibliotecas/LCD4bits.c: 74: void lcd_escreve_bf(char lin, char col, char *str);../Bi
      +                          bliotecas/LCD4bits.c: 75: {;../Bibliotecas/LCD4bits.c: 76:     char end;;../Bibliotecas/
      +                          LCD4bits.c: 79:     if (lin == 1)
  3139  001228  040B               	decf	lcd_escreve_bf@lin,w,c
  3140  00122A  A4D8               	btfss	status,2,c
  3141  00122C  D003               	goto	l1906
  3142                           
  3143                           ;../Bibliotecas/LCD4bits.c: 80:         end = col + 0x80 - 1;
  3144  00122E  5007               	movf	lcd_escreve_bf@col,w,c
  3145  001230  0F7F               	addlw	127
  3146  001232  D006               	goto	L3
  3147  001234                     l1906:
  3148  001234  0E02               	movlw	2
  3149  001236  180B               	xorwf	lcd_escreve_bf@lin,w,c
  3150  001238  A4D8               	btfss	status,2,c
  3151  00123A  D003               	goto	l1910
  3152                           
  3153                           ;../Bibliotecas/LCD4bits.c: 82:         end = col + 0xC0 - 1;
  3154  00123C  5007               	movf	lcd_escreve_bf@col,w,c
  3155  00123E  0FBF               	addlw	191
  3156  001240                     L3:
  3157  001240  6E0A               	movwf	lcd_escreve_bf@end,c
  3158  001242                     l1910:
  3159                           
  3160                           ;../Bibliotecas/LCD4bits.c: 84:     lcd_envia_byte(0, end);
  3161  001242  C00A  F005         	movff	lcd_escreve_bf@end,lcd_envia_byte@dado
  3162  001246  0E00               	movlw	0
  3163  001248  EC60  F00A         	call	_lcd_envia_byte
  3164                           
  3165                           ;../Bibliotecas/LCD4bits.c: 86:     while(*str)
  3166  00124C  D016               	goto	l1916
  3167  00124E                     l1912:
  3168                           
  3169                           ;../Bibliotecas/LCD4bits.c: 87:     {;../Bibliotecas/LCD4bits.c: 88:        lcd_envia_by
      +                          te(1,*str);
  3170  00124E  C008  FFF6         	movff	lcd_escreve_bf@str,tblptrl
  3171  001252  C009  FFF7         	movff	lcd_escreve_bf@str+1,tblptrh
  3172  001256  6AF8               	clrf	tblptru,c
  3173  001258  0E05               	movlw	(high __ramtop+-1)
  3174  00125A  64F7               	cpfsgt	tblptrh,c
  3175  00125C  D003               	bra	u1417
  3176  00125E  0008               	tblrd		*
  3177  001260  50F5               	movf	tablat,w,c
  3178  001262  D005               	bra	u1410
  3179  001264                     u1417:
  3180  001264  CFF6 FFE1          	movff	tblptrl,fsr1l
  3181  001268  CFF7 FFE2          	movff	tblptrh,fsr1h
  3182  00126C  50E7               	movf	indf1,w,c
  3183  00126E                     u1410:
  3184  00126E  6E05               	movwf	lcd_envia_byte@dado,c
  3185  001270  0E01               	movlw	1
  3186  001272  EC60  F00A         	call	_lcd_envia_byte
  3187                           
  3188                           ;../Bibliotecas/LCD4bits.c: 89:        str++;
  3189  001276  4A08               	infsnz	lcd_escreve_bf@str,f,c
  3190  001278  2A09               	incf	lcd_escreve_bf@str+1,f,c
  3191  00127A                     l1916:
  3192                           
  3193                           ;../Bibliotecas/LCD4bits.c: 86:     while(*str)
  3194  00127A  C008  FFF6         	movff	lcd_escreve_bf@str,tblptrl
  3195  00127E  C009  FFF7         	movff	lcd_escreve_bf@str+1,tblptrh
  3196  001282  6AF8               	clrf	tblptru,c
  3197  001284  0E05               	movlw	(high __ramtop+-1)
  3198  001286  64F7               	cpfsgt	tblptrh,c
  3199  001288  D003               	bra	u1427
  3200  00128A  0008               	tblrd		*
  3201  00128C  50F5               	movf	tablat,w,c
  3202  00128E  D005               	bra	u1420
  3203  001290                     u1427:
  3204  001290  CFF6 FFE1          	movff	tblptrl,fsr1l
  3205  001294  CFF7 FFE2          	movff	tblptrh,fsr1h
  3206  001298  50E7               	movf	indf1,w,c
  3207  00129A                     u1420:
  3208  00129A  0900               	iorlw	0
  3209  00129C  B4D8               	btfsc	status,2,c
  3210  00129E  0012               	return	
  3211  0012A0  D7D6               	goto	l1912
  3212  0012A2                     __end_of_lcd_escreve_bf:
  3213                           	opt callstack 0
  3214                           
  3215 ;; *************** function _lcd_envia_byte *****************
  3216 ;; Defined at:
  3217 ;;		line 66 in file "../Bibliotecas/LCD4bits.c"
  3218 ;; Parameters:    Size  Location     Type
  3219 ;;  nivel           1    wreg     unsigned char 
  3220 ;;  dado            1    4[COMRAM] unsigned char 
  3221 ;; Auto vars:     Size  Location     Type
  3222 ;;  nivel           1    5[COMRAM] unsigned char 
  3223 ;; Return value:  Size  Location     Type
  3224 ;;                  1    wreg      void 
  3225 ;; Registers used:
  3226 ;;		wreg, status,2, status,0, cstack
  3227 ;; Tracked objects:
  3228 ;;		On entry : 0/0
  3229 ;;		On exit  : 0/0
  3230 ;;		Unchanged: 0/0
  3231 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3232 ;;      Params:         1       0       0       0       0       0       0
  3233 ;;      Locals:         1       0       0       0       0       0       0
  3234 ;;      Temps:          0       0       0       0       0       0       0
  3235 ;;      Totals:         2       0       0       0       0       0       0
  3236 ;;Total ram usage:        2 bytes
  3237 ;; Hardware stack levels used:    1
  3238 ;; Hardware stack levels required when called:    3
  3239 ;; This function calls:
  3240 ;;		_lcd_cmd
  3241 ;; This function is called by:
  3242 ;;		_lcd_escreve_bf
  3243 ;; This function uses a non-reentrant model
  3244 ;;
  3245                           
  3246                           	psect	text19
  3247  0014C0                     __ptext19:
  3248                           	opt callstack 0
  3249  0014C0                     _lcd_envia_byte:
  3250                           	opt callstack 26
  3251                           
  3252                           ;incstack = 0
  3253                           ;lcd_envia_byte@nivel stored from wreg
  3254  0014C0  6E06               	movwf	lcd_envia_byte@nivel,c
  3255                           
  3256                           ;../Bibliotecas/LCD4bits.c: 66: void lcd_envia_byte(char nivel, char dado);../Biblioteca
      +                          s/LCD4bits.c: 67: {;../Bibliotecas/LCD4bits.c: 68:     LATEbits.LATE0 = nivel;
  3257  0014C2  B006               	btfsc	lcd_envia_byte@nivel,0,c
  3258  0014C4  D002               	bra	u1365
  3259  0014C6  908D               	bcf	3981,0,c	;volatile
  3260  0014C8  D001               	bra	u1366
  3261  0014CA                     u1365:
  3262  0014CA  808D               	bsf	3981,0,c	;volatile
  3263  0014CC                     u1366:
  3264                           
  3265                           ;../Bibliotecas/LCD4bits.c: 69:     _delay((unsigned long)((100)*(8000000/4000000.0)));
  3266  0014CC  0E42               	movlw	66
  3267  0014CE                     u1537:
  3268  0014CE  2EE8               	decfsz	wreg,f,c
  3269  0014D0  D7FE               	bra	u1537
  3270  0014D2  D000               	nop2	
  3271                           
  3272                           ;../Bibliotecas/LCD4bits.c: 70:     LATEbits.LATE1 = 0;
  3273  0014D4  928D               	bcf	3981,1,c	;volatile
  3274                           
  3275                           ;../Bibliotecas/LCD4bits.c: 71:     lcd_cmd(dado);
  3276  0014D6  5005               	movf	lcd_envia_byte@dado,w,c
  3277  0014D8  EC6F  F007         	call	_lcd_cmd
  3278  0014DC  0012               	return		;funcret
  3279  0014DE                     __end_of_lcd_envia_byte:
  3280                           	opt callstack 0
  3281                           
  3282 ;; *************** function _lcd_cmd *****************
  3283 ;; Defined at:
  3284 ;;		line 45 in file "../Bibliotecas/LCD4bits.c"
  3285 ;; Parameters:    Size  Location     Type
  3286 ;;  cmd             1    wreg     unsigned char 
  3287 ;; Auto vars:     Size  Location     Type
  3288 ;;  cmd             1    3[COMRAM] unsigned char 
  3289 ;; Return value:  Size  Location     Type
  3290 ;;                  1    wreg      void 
  3291 ;; Registers used:
  3292 ;;		wreg, status,2, status,0, cstack
  3293 ;; Tracked objects:
  3294 ;;		On entry : 0/0
  3295 ;;		On exit  : 0/0
  3296 ;;		Unchanged: 0/0
  3297 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3298 ;;      Params:         0       0       0       0       0       0       0
  3299 ;;      Locals:         1       0       0       0       0       0       0
  3300 ;;      Temps:          1       0       0       0       0       0       0
  3301 ;;      Totals:         2       0       0       0       0       0       0
  3302 ;;Total ram usage:        2 bytes
  3303 ;; Hardware stack levels used:    1
  3304 ;; Hardware stack levels required when called:    2
  3305 ;; This function calls:
  3306 ;;		_set_bit
  3307 ;; This function is called by:
  3308 ;;		_lcd_ini
  3309 ;;		_lcd_envia_byte
  3310 ;; This function uses a non-reentrant model
  3311 ;;
  3312                           
  3313                           	psect	text20
  3314  000EDE                     __ptext20:
  3315                           	opt callstack 0
  3316  000EDE                     _lcd_cmd:
  3317                           	opt callstack 27
  3318                           
  3319                           ;incstack = 0
  3320                           ;lcd_cmd@cmd stored from wreg
  3321  000EDE  6E04               	movwf	lcd_cmd@cmd,c
  3322                           
  3323                           ;../Bibliotecas/LCD4bits.c: 45: void lcd_cmd(char cmd);../Bibliotecas/LCD4bits.c: 46: {;
      +                          ../Bibliotecas/LCD4bits.c: 47:     LATDbits.LATD4 = set_bit(cmd, 0b00010000);
  3324  000EE0  0E10               	movlw	16
  3325  000EE2  6E01               	movwf	set_bit@comp,c
  3326  000EE4  5004               	movf	lcd_cmd@cmd,w,c
  3327  000EE6  EC6F  F00A         	call	_set_bit
  3328  000EEA  6E03               	movwf	??_lcd_cmd& (0+255),c
  3329  000EEC  3A03               	swapf	??_lcd_cmd,f,c
  3330  000EEE  508C               	movf	3980,w,c	;volatile
  3331  000EF0  1803               	xorwf	??_lcd_cmd,w,c
  3332  000EF2  0BEF               	andlw	-17
  3333  000EF4  1803               	xorwf	??_lcd_cmd,w,c
  3334  000EF6  6E8C               	movwf	3980,c	;volatile
  3335                           
  3336                           ;../Bibliotecas/LCD4bits.c: 48:     LATDbits.LATD5 = set_bit(cmd, 0b00100000);
  3337  000EF8  0E20               	movlw	32
  3338  000EFA  6E01               	movwf	set_bit@comp,c
  3339  000EFC  5004               	movf	lcd_cmd@cmd,w,c
  3340  000EFE  EC6F  F00A         	call	_set_bit
  3341  000F02  6E03               	movwf	??_lcd_cmd& (0+255),c
  3342  000F04  3A03               	swapf	??_lcd_cmd,f,c
  3343  000F06  4603               	rlncf	??_lcd_cmd,f,c
  3344  000F08  508C               	movf	3980,w,c	;volatile
  3345  000F0A  1803               	xorwf	??_lcd_cmd,w,c
  3346  000F0C  0BDF               	andlw	-33
  3347  000F0E  1803               	xorwf	??_lcd_cmd,w,c
  3348  000F10  6E8C               	movwf	3980,c	;volatile
  3349                           
  3350                           ;../Bibliotecas/LCD4bits.c: 49:     LATDbits.LATD6 = set_bit(cmd, 0b01000000);
  3351  000F12  0E40               	movlw	64
  3352  000F14  6E01               	movwf	set_bit@comp,c
  3353  000F16  5004               	movf	lcd_cmd@cmd,w,c
  3354  000F18  EC6F  F00A         	call	_set_bit
  3355  000F1C  6E03               	movwf	??_lcd_cmd& (0+255),c
  3356  000F1E  3A03               	swapf	??_lcd_cmd,f,c
  3357  000F20  4603               	rlncf	??_lcd_cmd,f,c
  3358  000F22  4603               	rlncf	??_lcd_cmd,f,c
  3359  000F24  508C               	movf	3980,w,c	;volatile
  3360  000F26  1803               	xorwf	??_lcd_cmd,w,c
  3361  000F28  0BBF               	andlw	-65
  3362  000F2A  1803               	xorwf	??_lcd_cmd,w,c
  3363  000F2C  6E8C               	movwf	3980,c	;volatile
  3364                           
  3365                           ;../Bibliotecas/LCD4bits.c: 50:     LATDbits.LATD7 = set_bit(cmd, 0b10000000);
  3366  000F2E  0E80               	movlw	128
  3367  000F30  6E01               	movwf	set_bit@comp,c
  3368  000F32  5004               	movf	lcd_cmd@cmd,w,c
  3369  000F34  EC6F  F00A         	call	_set_bit
  3370  000F38  6E03               	movwf	??_lcd_cmd& (0+255),c
  3371  000F3A  3203               	rrcf	??_lcd_cmd,f,c
  3372  000F3C  3203               	rrcf	??_lcd_cmd,f,c
  3373  000F3E  508C               	movf	3980,w,c	;volatile
  3374  000F40  1803               	xorwf	??_lcd_cmd,w,c
  3375  000F42  0B7F               	andlw	-129
  3376  000F44  1803               	xorwf	??_lcd_cmd,w,c
  3377  000F46  6E8C               	movwf	3980,c	;volatile
  3378                           
  3379                           ;../Bibliotecas/LCD4bits.c: 52:     LATEbits.LATE1 = 1;
  3380  000F48  828D               	bsf	3981,1,c	;volatile
  3381                           
  3382                           ;../Bibliotecas/LCD4bits.c: 53:     LATEbits.LATE1 = 0;
  3383  000F4A  928D               	bcf	3981,1,c	;volatile
  3384                           
  3385                           ;../Bibliotecas/LCD4bits.c: 55:     _delay((unsigned long)((100)*(8000000/4000000.0)));
  3386  000F4C  0E42               	movlw	66
  3387  000F4E                     u1547:
  3388  000F4E  2EE8               	decfsz	wreg,f,c
  3389  000F50  D7FE               	bra	u1547
  3390  000F52  D000               	nop2	
  3391                           
  3392                           ;../Bibliotecas/LCD4bits.c: 57:     LATDbits.LATD4 = set_bit(cmd, 0b00000001);
  3393  000F54  0E01               	movlw	1
  3394  000F56  6E01               	movwf	set_bit@comp,c
  3395  000F58  5004               	movf	lcd_cmd@cmd,w,c
  3396  000F5A  EC6F  F00A         	call	_set_bit
  3397  000F5E  6E03               	movwf	??_lcd_cmd& (0+255),c
  3398  000F60  3A03               	swapf	??_lcd_cmd,f,c
  3399  000F62  508C               	movf	3980,w,c	;volatile
  3400  000F64  1803               	xorwf	??_lcd_cmd,w,c
  3401  000F66  0BEF               	andlw	-17
  3402  000F68  1803               	xorwf	??_lcd_cmd,w,c
  3403  000F6A  6E8C               	movwf	3980,c	;volatile
  3404                           
  3405                           ;../Bibliotecas/LCD4bits.c: 58:     LATDbits.LATD5 = set_bit(cmd, 0b00000010);
  3406  000F6C  0E02               	movlw	2
  3407  000F6E  6E01               	movwf	set_bit@comp,c
  3408  000F70  5004               	movf	lcd_cmd@cmd,w,c
  3409  000F72  EC6F  F00A         	call	_set_bit
  3410  000F76  6E03               	movwf	??_lcd_cmd& (0+255),c
  3411  000F78  3A03               	swapf	??_lcd_cmd,f,c
  3412  000F7A  4603               	rlncf	??_lcd_cmd,f,c
  3413  000F7C  508C               	movf	3980,w,c	;volatile
  3414  000F7E  1803               	xorwf	??_lcd_cmd,w,c
  3415  000F80  0BDF               	andlw	-33
  3416  000F82  1803               	xorwf	??_lcd_cmd,w,c
  3417  000F84  6E8C               	movwf	3980,c	;volatile
  3418                           
  3419                           ;../Bibliotecas/LCD4bits.c: 59:     LATDbits.LATD6 = set_bit(cmd, 0b00000100);
  3420  000F86  0E04               	movlw	4
  3421  000F88  6E01               	movwf	set_bit@comp,c
  3422  000F8A  5004               	movf	lcd_cmd@cmd,w,c
  3423  000F8C  EC6F  F00A         	call	_set_bit
  3424  000F90  6E03               	movwf	??_lcd_cmd& (0+255),c
  3425  000F92  3A03               	swapf	??_lcd_cmd,f,c
  3426  000F94  4603               	rlncf	??_lcd_cmd,f,c
  3427  000F96  4603               	rlncf	??_lcd_cmd,f,c
  3428  000F98  508C               	movf	3980,w,c	;volatile
  3429  000F9A  1803               	xorwf	??_lcd_cmd,w,c
  3430  000F9C  0BBF               	andlw	-65
  3431  000F9E  1803               	xorwf	??_lcd_cmd,w,c
  3432  000FA0  6E8C               	movwf	3980,c	;volatile
  3433                           
  3434                           ;../Bibliotecas/LCD4bits.c: 60:     LATDbits.LATD7 = set_bit(cmd, 0b00001000);
  3435  000FA2  0E08               	movlw	8
  3436  000FA4  6E01               	movwf	set_bit@comp,c
  3437  000FA6  5004               	movf	lcd_cmd@cmd,w,c
  3438  000FA8  EC6F  F00A         	call	_set_bit
  3439  000FAC  6E03               	movwf	??_lcd_cmd& (0+255),c
  3440  000FAE  3203               	rrcf	??_lcd_cmd,f,c
  3441  000FB0  3203               	rrcf	??_lcd_cmd,f,c
  3442  000FB2  508C               	movf	3980,w,c	;volatile
  3443  000FB4  1803               	xorwf	??_lcd_cmd,w,c
  3444  000FB6  0B7F               	andlw	-129
  3445  000FB8  1803               	xorwf	??_lcd_cmd,w,c
  3446  000FBA  6E8C               	movwf	3980,c	;volatile
  3447                           
  3448                           ;../Bibliotecas/LCD4bits.c: 62:     LATEbits.LATE1 = 1;
  3449  000FBC  828D               	bsf	3981,1,c	;volatile
  3450                           
  3451                           ;../Bibliotecas/LCD4bits.c: 63:     LATEbits.LATE1 = 0;
  3452  000FBE  928D               	bcf	3981,1,c	;volatile
  3453  000FC0  0012               	return		;funcret
  3454  000FC2                     __end_of_lcd_cmd:
  3455                           	opt callstack 0
  3456                           
  3457 ;; *************** function _set_bit *****************
  3458 ;; Defined at:
  3459 ;;		line 34 in file "../Bibliotecas/LCD4bits.c"
  3460 ;; Parameters:    Size  Location     Type
  3461 ;;  cmd             1    wreg     unsigned char 
  3462 ;;  comp            1    0[COMRAM] unsigned char 
  3463 ;; Auto vars:     Size  Location     Type
  3464 ;;  cmd             1    1[COMRAM] unsigned char 
  3465 ;; Return value:  Size  Location     Type
  3466 ;;                  1    wreg      unsigned char 
  3467 ;; Registers used:
  3468 ;;		wreg, status,2, status,0
  3469 ;; Tracked objects:
  3470 ;;		On entry : 0/0
  3471 ;;		On exit  : 0/0
  3472 ;;		Unchanged: 0/0
  3473 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3474 ;;      Params:         1       0       0       0       0       0       0
  3475 ;;      Locals:         1       0       0       0       0       0       0
  3476 ;;      Temps:          0       0       0       0       0       0       0
  3477 ;;      Totals:         2       0       0       0       0       0       0
  3478 ;;Total ram usage:        2 bytes
  3479 ;; Hardware stack levels used:    1
  3480 ;; Hardware stack levels required when called:    1
  3481 ;; This function calls:
  3482 ;;		Nothing
  3483 ;; This function is called by:
  3484 ;;		_lcd_cmd
  3485 ;; This function uses a non-reentrant model
  3486 ;;
  3487                           
  3488                           	psect	text21
  3489  0014DE                     __ptext21:
  3490                           	opt callstack 0
  3491  0014DE                     _set_bit:
  3492                           	opt callstack 27
  3493                           
  3494                           ;incstack = 0
  3495                           ;set_bit@cmd stored from wreg
  3496  0014DE  6E02               	movwf	set_bit@cmd,c
  3497                           
  3498                           ;../Bibliotecas/LCD4bits.c: 34: char set_bit(char cmd, char comp);../Bibliotecas/LCD4bit
      +                          s.c: 35: {;../Bibliotecas/LCD4bits.c: 36:     if ((cmd & comp) >= 1)
  3499  0014E0  5002               	movf	set_bit@cmd,w,c
  3500  0014E2  1401               	andwf	set_bit@comp,w,c
  3501  0014E4  0900               	iorlw	0
  3502  0014E6  B4D8               	btfsc	status,2,c
  3503  0014E8  D002               	goto	l1622
  3504                           
  3505                           ;../Bibliotecas/LCD4bits.c: 37:         return 1;
  3506  0014EA  0E01               	movlw	1
  3507  0014EC  0012               	return	
  3508  0014EE                     l1622:
  3509                           
  3510                           ;../Bibliotecas/LCD4bits.c: 39:         return 0;
  3511  0014EE  0E00               	movlw	0
  3512  0014F0  0012               	return		;funcret
  3513  0014F2                     __end_of_set_bit:
  3514                           	opt callstack 0
  3515                           
  3516 ;; *************** function _int_TMR0 *****************
  3517 ;; Defined at:
  3518 ;;		line 13 in file "EX14.c"
  3519 ;; Parameters:    Size  Location     Type
  3520 ;;		None
  3521 ;; Auto vars:     Size  Location     Type
  3522 ;;		None
  3523 ;; Return value:  Size  Location     Type
  3524 ;;                  1    wreg      void 
  3525 ;; Registers used:
  3526 ;;		wreg, status,2, status,0
  3527 ;; Tracked objects:
  3528 ;;		On entry : 0/0
  3529 ;;		On exit  : 0/0
  3530 ;;		Unchanged: 0/0
  3531 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3532 ;;      Params:         0       0       0       0       0       0       0
  3533 ;;      Locals:         0       0       0       0       0       0       0
  3534 ;;      Temps:          0       0       0       0       0       0       0
  3535 ;;      Totals:         0       0       0       0       0       0       0
  3536 ;;Total ram usage:        0 bytes
  3537 ;; Hardware stack levels used:    1
  3538 ;; This function calls:
  3539 ;;		Nothing
  3540 ;; This function is called by:
  3541 ;;		Interrupt level 2
  3542 ;; This function uses a non-reentrant model
  3543 ;;
  3544                           
  3545                           	psect	intcode
  3546  000008                     __pintcode:
  3547                           	opt callstack 0
  3548  000008                     _int_TMR0:
  3549                           	opt callstack 22
  3550                           
  3551                           ;incstack = 0
  3552  000008  827A               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  3553  00000A  ED0D  F00A         	call	int_func,f	;refresh shadow registers
  3554                           
  3555                           	psect	intcode_body
  3556  00141A                     __pintcode_body:
  3557                           	opt callstack 22
  3558  00141A                     int_func:
  3559                           	opt callstack 22
  3560  00141A  0006               	pop		; remove dummy address from shadow register refresh
  3561                           
  3562                           ;EX14.c: 15:     if (TMR0IF)
  3563  00141C  A4F2               	btfss	4082,2,c	;volatile
  3564  00141E  D00E               	goto	i2l31
  3565                           
  3566                           ;EX14.c: 16:     {;EX14.c: 17:      conta++;
  3567  001420  4A78               	infsnz	_conta,f,c
  3568  001422  2A79               	incf	_conta+1,f,c
  3569                           
  3570                           ;EX14.c: 18:      if (conta>=100) conta = 0;
  3571  001424  BE79               	btfsc	_conta+1,7,c
  3572  001426  D00A               	goto	i2l31
  3573  001428  5079               	movf	_conta+1,w,c
  3574  00142A  E104               	bnz	i2u72_40
  3575  00142C  0E64               	movlw	100
  3576  00142E  5C78               	subwf	_conta,w,c
  3577  001430  A0D8               	btfss	status,0,c
  3578  001432  D004               	goto	i2l31
  3579  001434                     i2u72_40:
  3580  001434  0E00               	movlw	0
  3581  001436  6E79               	movwf	_conta+1,c
  3582  001438  0E00               	movlw	0
  3583  00143A  6E78               	movwf	_conta,c
  3584  00143C                     i2l31:
  3585                           
  3586                           ;EX14.c: 20:     TMR0 = 250;
  3587  00143C  0E00               	movlw	0
  3588  00143E  6ED7               	movwf	4055,c	;volatile
  3589  001440  0EFA               	movlw	250
  3590  001442  6ED6               	movwf	4054,c	;volatile
  3591                           
  3592                           ;EX14.c: 21:     TMR0IF = 0;
  3593  001444  94F2               	bcf	4082,2,c	;volatile
  3594  001446  927A               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  3595  001448  0011               	retfie		f
  3596  00144A                     __end_of_int_TMR0:
  3597                           	opt callstack 0
  3598                           
  3599                           	psect	rparam
  3600  0000                     
  3601                           	psect	temp
  3602  00007A                     btemp:
  3603                           	opt callstack 0
  3604  00007A                     	ds	1
  3605  0000                     int$flags	set	btemp
  3606  0000                     wtemp8	set	btemp+1
  3607  0000                     ttemp5	set	btemp+1
  3608  0000                     ttemp6	set	btemp+4
  3609  0000                     ttemp7	set	btemp+8
  3610                           tosu	equ	0xFFF
  3611                           tosh	equ	0xFFE
  3612                           tosl	equ	0xFFD
  3613                           stkptr	equ	0xFFC
  3614                           pclatu	equ	0xFFB
  3615                           pclath	equ	0xFFA
  3616                           pcl	equ	0xFF9
  3617                           tblptru	equ	0xFF8
  3618                           tblptrh	equ	0xFF7
  3619                           tblptrl	equ	0xFF6
  3620                           tablat	equ	0xFF5
  3621                           prodh	equ	0xFF4
  3622                           prodl	equ	0xFF3
  3623                           indf0	equ	0xFEF
  3624                           postinc0	equ	0xFEE
  3625                           postdec0	equ	0xFED
  3626                           preinc0	equ	0xFEC
  3627                           plusw0	equ	0xFEB
  3628                           fsr0h	equ	0xFEA
  3629                           fsr0l	equ	0xFE9
  3630                           wreg	equ	0xFE8
  3631                           indf1	equ	0xFE7
  3632                           postinc1	equ	0xFE6
  3633                           postdec1	equ	0xFE5
  3634                           preinc1	equ	0xFE4
  3635                           plusw1	equ	0xFE3
  3636                           fsr1h	equ	0xFE2
  3637                           fsr1l	equ	0xFE1
  3638                           bsr	equ	0xFE0
  3639                           indf2	equ	0xFDF
  3640                           postinc2	equ	0xFDE
  3641                           postdec2	equ	0xFDD
  3642                           preinc2	equ	0xFDC
  3643                           plusw2	equ	0xFDB
  3644                           fsr2h	equ	0xFDA
  3645                           fsr2l	equ	0xFD9
  3646                           status	equ	0xFD8


Data Sizes:
    Strings     25
    Constant    0
    Data        0
    BSS         58
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          126    111     121
    BANK0           128      0      48
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0

Pointer List with Targets:

    strlen@s	PTR const unsigned char  size(2) Largest target is 32
		 -> dbuf(BANK0[32]), 

    strlen@a	PTR const unsigned char  size(2) Largest target is 32
		 -> dbuf(BANK0[32]), 

    sprintf@fmt	PTR const unsigned char  size(2) Largest target is 5
		 -> STR_3(CODE[5]), 

    sprintf@s	PTR unsigned char  size(2) Largest target is 16
		 -> bufferLCD(BANK0[16]), 

    sprintf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_sprintf(COMRAM[2]), 

    f.buffer	PTR unsigned char  size(2) Largest target is 16
		 -> bufferLCD(BANK0[16]), 

    fputs@s	PTR const unsigned char  size(2) Largest target is 32
		 -> dbuf(BANK0[32]), 

    fputs@fp	PTR struct _IO_FILE size(2) Largest target is 7
		 -> sprintf@f(COMRAM[6]), 

    S882_IO_FILE$buffer	PTR unsigned char  size(2) Largest target is 16
		 -> bufferLCD(BANK0[16]), 

    fputc@fp.buffer	PTR unsigned char  size(2) Largest target is 16
		 -> bufferLCD(BANK0[16]), 

    fputc@fp	PTR struct _IO_FILE size(2) Largest target is 7
		 -> sprintf@f(COMRAM[6]), 

    atoi@s	PTR const unsigned char  size(2) Largest target is 5
		 -> STR_3(CODE[5]), 

    vfprintf@ap	PTR PTR void  size(2) Largest target is 2
		 -> sprintf@ap(COMRAM[2]), 

    vfprintf@fp	PTR struct _IO_FILE size(2) Largest target is 7
		 -> sprintf@f(COMRAM[6]), 

    vfprintf@fmt	PTR const unsigned char  size(2) Largest target is 5
		 -> STR_3(CODE[5]), 

    vfprintf@cfmt	PTR unsigned char  size(2) Largest target is 5
		 -> STR_3(CODE[5]), 

    vfpfcnvrt@fp	PTR struct _IO_FILE size(2) Largest target is 7
		 -> sprintf@f(COMRAM[6]), 

    vfpfcnvrt@ap	PTR PTR void  size(2) Largest target is 2
		 -> sprintf@ap(COMRAM[2]), 

    vfpfcnvrt@fmt	PTR PTR unsigned char  size(2) Largest target is 2
		 -> vfprintf@cfmt(COMRAM[2]), 

    dtoa@fp	PTR struct _IO_FILE size(2) Largest target is 7
		 -> sprintf@f(COMRAM[6]), 

    pad@fp	PTR struct _IO_FILE size(2) Largest target is 7
		 -> sprintf@f(COMRAM[6]), 

    pad@buf	PTR unsigned char  size(2) Largest target is 32
		 -> dbuf(BANK0[32]), 

    lcd_escreve_bf@str	PTR unsigned char  size(2) Largest target is 16
		 -> bufferLCD(BANK0[16]), STR_2(CODE[13]), STR_1(CODE[7]), 


Critical Paths under _main in COMRAM

    _main->_sprintf
    _sprintf->_vfprintf
    _vfprintf->_vfpfcnvrt
    _vfpfcnvrt->_dtoa
    _dtoa->_pad
    _pad->_fputs
    _fputs->_fputc
    _abs->___aomod
    _atoi->_isspace
    _lcd_ini->_lcd_cmd
    _lcd_escreve_bf->_lcd_envia_byte
    _lcd_envia_byte->_lcd_cmd
    _lcd_cmd->_set_bit

Critical Paths under _int_TMR0 in COMRAM

    None.

Critical Paths under _main in BANK0

    None.

Critical Paths under _int_TMR0 in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _int_TMR0 in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _int_TMR0 in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _int_TMR0 in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _int_TMR0 in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _int_TMR0 in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0   10803
                                            109 COMRAM     2     2      0
                     _lcd_escreve_bf
                            _lcd_ini
                            _sprintf
 ---------------------------------------------------------------------------------
 (1) _sprintf                                             16    10      6    8292
                                             93 COMRAM    16    10      6
                           _vfprintf
 ---------------------------------------------------------------------------------
 (2) _vfprintf                                             8     2      6    7939
                                             85 COMRAM     8     2      6
                          _vfpfcnvrt
 ---------------------------------------------------------------------------------
 (3) _vfpfcnvrt                                           46    40      6    7566
                                             63 COMRAM    22    16      6
                               _atoi
                               _dtoa
                              _fputc
                            _isdigit
 ---------------------------------------------------------------------------------
 (4) _dtoa                                                36    26     10    4358
                                             27 COMRAM    36    26     10
                            ___aodiv
                            ___aomod
                                _abs
                                _pad
 ---------------------------------------------------------------------------------
 (5) _pad                                                 11     5      6    2709
                                             16 COMRAM    11     5      6
                              _fputc
                              _fputs
                             _strlen
 ---------------------------------------------------------------------------------
 (6) _strlen                                               4     2      2     166
                                              0 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (6) _fputs                                                7     3      4    1235
                                              9 COMRAM     7     3      4
                              _fputc
 ---------------------------------------------------------------------------------
 (4) _fputc                                                9     5      4     834
                                              0 COMRAM     9     5      4
                              _putch
 ---------------------------------------------------------------------------------
 (5) _putch                                                1     1      0       0
 ---------------------------------------------------------------------------------
 (5) _abs                                                  4     2      2     142
                                             18 COMRAM     4     2      2
                            ___aomod (ARG)
 ---------------------------------------------------------------------------------
 (5) ___aomod                                             18     2     16     448
                                              0 COMRAM    18     2     16
 ---------------------------------------------------------------------------------
 (5) ___aodiv                                             26    10     16     452
                                              0 COMRAM    26    10     16
 ---------------------------------------------------------------------------------
 (4) _atoi                                                15    13      2    1244
                                              7 COMRAM    15    13      2
                             ___wmul
                            _isdigit
                            _isspace
 ---------------------------------------------------------------------------------
 (5) _isspace                                              7     5      2     207
                                              0 COMRAM     7     5      2
 ---------------------------------------------------------------------------------
 (4) _isdigit                                              6     4      2     237
                                              0 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (5) ___wmul                                               6     2      4     403
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (1) _lcd_ini                                              2     2      0     874
                                              4 COMRAM     2     2      0
                            _lcd_cmd
 ---------------------------------------------------------------------------------
 (1) _lcd_escreve_bf                                       5     2      3    1637
                                              6 COMRAM     5     2      3
                     _lcd_envia_byte
 ---------------------------------------------------------------------------------
 (2) _lcd_envia_byte                                       2     1      1    1024
                                              4 COMRAM     2     1      1
                            _lcd_cmd
 ---------------------------------------------------------------------------------
 (2) _lcd_cmd                                              2     2      0     828
                                              2 COMRAM     2     2      0
                            _set_bit
 ---------------------------------------------------------------------------------
 (3) _set_bit                                              2     1      1     652
                                              0 COMRAM     2     1      1
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (9) _int_TMR0                                             0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 9
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _lcd_escreve_bf
     _lcd_envia_byte
       _lcd_cmd
         _set_bit
   _lcd_ini
     _lcd_cmd
       _set_bit
   _sprintf
     _vfprintf
       _vfpfcnvrt
         _atoi
           ___wmul
           _isdigit
           _isspace
         _dtoa
           ___aodiv
           ___aomod
           _abs
             ___aomod (ARG)
           _pad
             _fputc
               _putch
             _fputs
               _fputc
                 _putch
             _strlen
         _fputc
           _putch
         _isdigit

 _int_TMR0 (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             5FF      0       0      17        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK5           100      0       0      16        0.0%
BANK5              100      0       0      14        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80      0      30       5       37.5%
BITCOMRAM           7E      0       0       0        0.0%
COMRAM              7E     6F      79       1       96.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      A9      15        0.0%
DATA                 0      0      A9       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.05 build -831301201 
Symbol Table                                                                                   Fri Apr 19 16:43:00 2019

    ___wmul@multiplicand 0003              __CFG_BORV$3 000000             __CFG_CP0$OFF 000000  
           __CFG_CP1$OFF 000000             __CFG_CP2$OFF 000000             __CFG_CP3$OFF 000000  
            __CFG_OSC$HS 000000                      l111 112E                      l122 0962  
                    l124 096A                      l856 13E0                      l887 0DB0  
           __CFG_CPB$OFF 000000             __CFG_CPD$OFF 000000                      u910 0BC4  
                    u750 0FD2                      u840 13C6                      u850 1412  
                    u770 101A                      u860 1414                      u970 0E3C  
                    u891 0B8C                      _abs 13B8                      _pad 1100  
                    wreg 000FE8             __CFG_LVP$OFF 000000             __CFG_WDT$OFF 000000  
                   ?_abs 0013                     l1500 1150                     l1504 117C  
                   l1610 1378                     l1530 0B5E                     l1700 0CD6  
                   l1460 0FDA                     l1622 14EE                     l1710 0CF4  
                   l1542 0BAC                     l1470 138A                     l1712 0D1C  
                   l1544 0BC0                     l1536 0B86                     l1480 1458  
                   l1632 0946                     l1800 0758                     l1706 0CE6  
                   l1562 0C58                     l1554 0C1C                     l1474 13A0  
                   l1490 1118                     l1650 0994                     l1802 0766  
                   l1716 0D50                     l1708 0CEE                     l1660 0A8C  
                   l1910 1242                     l1558 0C32                     l1590 0E80  
                   l1582 0E24                     l1574 0DE6                     l1478 1454  
                   l1494 1126                     l1646 0984                     l1912 124E  
                   l1584 0E38                     l1496 1138                     l1680 0AF0  
                   l1824 089A                     l1760 0660                     l1906 1234  
                   l1690 0C8C                     l1594 0E96                     l1578 0E0A  
                   l1818 085E                     l1762 0662                     l1834 08BC  
                   l1916 127A                     l1692 0C90                     l1684 0B08  
                   l1828 08A4                     l1780 0682                     l1772 067A  
                   l1764 0672                     l1860 12D8                     l1940 10A2  
                   l1598 0EBC                     l1880 11BA                     l1784 068C  
                   l1776 067E                     l1768 0676                     l1786 06CE  
                   l1858 12B4                     l1798 073A                     ?_pad 0011  
                   STR_1 060E                     STR_2 0601                     STR_3 0615  
                   u1010 1374                     u1100 0A9A                     u1030 0918  
                   u1120 0ABC                     u1040 091A                     u1121 0ABA  
                   u1210 0D80                     u1130 0ACA                     u1220 0D82  
                   u1140 0ACE                     u1300 079E                     u1070 0958  
                   u1310 07A0                     u1160 0ADA                     u1320 07AC  
                   u1410 126E                     u1090 097E                     u1420 129A  
                   u1340 07E0                     u1190 0CD2                     u1440 10C0  
                   _LATD 000F8C                     u1417 1264                     u1427 1290  
                   u1507 11FE                     u1365 14CA                     u1517 1210  
                   u1366 14CC                     u1446 10C2                     u1527 121E  
                   u1537 14CE                     u1457 10AC                     u1547 0F4E  
                   u1467 11AC                     u1477 11C6                     u1487 11DE  
                   u1497 11EC                     i2l31 143C                     _TMR0 000FD6  
           __CFG_PWRT$ON 000000                     abs@a 0013                     _dbuf 0080  
                   _atoi 0C7A                     _main 1062                     _dtoa 08F0  
                   _prec 0074                     _nout 0070                     pad@i 0018  
                   pad@p 0015                     fsr1h 000FE2                     fsr2h 000FDA  
                   indf1 000FE7                     indf2 000FDF                     fsr1l 000FE1  
                   pad@w 001A                     fsr2l 000FD9                     btemp 007A  
                   prodh 000FF4                     prodl 000FF3                     start 000E  
          __CFG_IESO$OFF 000000            __CFG_MCLRE$ON 000000             ___param_bank 000000  
                  ??_abs 0015                    ??_pad 0017          __end_of___aodiv 0C7A  
                  ?_atoi 0008                    ?_main 0001                    ?_dtoa 001C  
        __end_of___aomod 0EDE                    _T0CON 000FD5             vfpfcnvrt@fmt 0042  
                  _TRISD 000F95            __CFG_WRT0$OFF 000000            __CFG_WRT1$OFF 000000  
          __CFG_WRT2$OFF 000000            __CFG_WRT3$OFF 000000           __CFG_EBTR0$OFF 000000  
         __CFG_FCMEN$OFF 000000           __CFG_EBTR1$OFF 000000           __CFG_EBTR2$OFF 000000  
         __CFG_EBTR3$OFF 000000          __end_of_lcd_cmd 0FC2          __end_of_lcd_ini 1226  
          __CFG_WRTB$OFF 000000            __CFG_WRTC$OFF 000000            __CFG_WRTD$OFF 000000  
         __CFG_EBTRB$OFF 000000                    _flags 0076                    _conta 0078  
                  _fputc 0FC2                    _fputs 1380          __end_of_isdigit 141A  
                  atoi@n 0015                    pad@fp 0011                    atoi@s 0008  
                  _width 0072                    _putch 14F2                    dtoa@d 001E  
                  dtoa@i 003E                    dtoa@n 0036                    dtoa@p 0030  
                  dtoa@s 0034                    dtoa@w 0032          __end_of_isspace 1380  
         __CFG_BOREN$OFF 000000          __end_of_set_bit 14F2                    tablat 000FF5  
                  ttemp5 007B                    ttemp6 007E                    ttemp7 0082  
                  status 000FD8                    wtemp8 007B          __end_of_sprintf 1342  
        __initialization 1474             __end_of_atoi 0DBA             __end_of_main 1100  
           __end_of_dtoa 0B32                   ??_atoi 000A                   ??_main 006E  
                 ??_dtoa 0026            __activetblptr 000002                   _ADCON1 000FC1  
                 ?_fputc 0001                   ?_fputs 000A                   ?_putch 0001  
                 _INTCON 000FF2            vfpfcnvrt@done 0052                   _TMR0IF 007F92  
         __CFG_XINST$OFF 000000             vfprintf@cfmt 005C                ??___aodiv 0011  
              ??___aomod 0011                   ___wmul 149A           __CFG_STVREN$ON 000000  
       __end_of_int_TMR0 144A         ??_lcd_escreve_bf 000A                   clear_0 147A  
                 clear_1 1486         ??_lcd_envia_byte 0006                   pad@buf 0013  
              ??_lcd_cmd 0003                   dtoa@fp 001C                ??_lcd_ini 0005  
                 _strlen 144A                   fputc@c 0001                   fputs@c 000E  
                 fputs@i 000F                   fputs@s 000A                ??_isdigit 0003  
           __mediumconst 0000                ??_isspace 0003                ??_set_bit 0002  
                 tblptrh 000FF7                   tblptrl 000FF6                   tblptru 000FF8  
                 putch@c 0001         __end_of_vfprintf 12F4                ??_sprintf 0064  
             __accesstop 0080  __end_of__initialization 148C          __CFG_PBADEN$OFF 000000  
          ___rparam_used 000001           __pcstackCOMRAM 0001            __end_of_fputc 1062  
          __end_of_fputs 13B8            __end_of_putch 14F4                  ??_fputc 0005  
                ??_fputs 000E                  ??_putch 0001               __pbssBANK0 0080  
                ?___wmul 0001                  ?_strlen 0001       __size_of_vfpfcnvrt 02D4  
                i2u72_40 1434                ?_int_TMR0 0001                  __Hparam 0000  
                __Lparam 0000                  ___aodiv 0B32                  ___aomod 0DBA  
        __size_of___wmul 0026                ?_vfprintf 0056              set_bit@comp 0001  
           __psmallconst 0600                  __pcinit 1474                  __ramtop 0600  
                __ptext0 1062                  __ptext1 12F4                  __ptext2 12A2  
                __ptext3 061C                  __ptext4 08F0                  __ptext5 1100  
                __ptext6 144A                  __ptext7 1380                  __ptext8 0FC2  
                __ptext9 14F2                  _lcd_cmd 0EDE                  _lcd_ini 1196  
        __size_of_strlen 002A             __size_of_abs 0032             __size_of_pad 0096  
                _isdigit 13EA                  _isspace 1342                  _set_bit 14DE  
                atoi@neg 000E                  _sprintf 12F4           __pintcode_body 141A  
   end_of_initialization 148C               ??_int_TMR0 0001       lcd_envia_byte@dado 0005  
                fputc@fp 0003            __Lmediumconst 0000                  int_func 141A  
                fputs@fp 000C        __end_of_vfpfcnvrt 08F0                  postdec2 000FDD  
                postinc0 000FEE                  postinc1 000FE6                  postinc2 000FDE  
             ??_vfprintf 005C                  strlen@a 0003                  strlen@s 0001  
              _PORTBbits 000F81                _TRISBbits 000F93                _TRISEbits 000F96  
             lcd_cmd@cmd 0004              vfpfcnvrt@ap 0044              vfpfcnvrt@fp 0040  
            vfpfcnvrt@ll 004A           __end_of___wmul 14C0           __end_of_strlen 1474  
    start_initialization 1474              __end_of_abs 13EA              __end_of_pad 1196  
            vfprintf@fmt 0058                 ??___wmul 0005         __CFG_LPT1OSC$OFF 000000  
               ??_strlen 0003              __pbssCOMRAM 0070         ___aodiv@dividend 0001  
__size_of_lcd_escreve_bf 007C  __size_of_lcd_envia_byte 001E        __size_of_int_TMR0 1442  
      __CFG_CCP2MX$PORTC 000000                __pintcode 0008                 ?___aodiv 0001  
               ?___aomod 0001        lcd_escreve_bf@end 000A        lcd_escreve_bf@col 0007  
      lcd_escreve_bf@lin 000B         ___aodiv@quotient 0013        lcd_escreve_bf@str 0008  
              _bufferLCD 00A0                 ?_lcd_cmd 0001        __size_of_vfprintf 0052  
               ?_lcd_ini 0001              __smallconst 0600                 ?_isdigit 0001  
               ?_isspace 0001                 ?_set_bit 0001               set_bit@cmd 0002  
               ?_sprintf 005E           __size_of_fputc 00A0           __size_of_fputs 0038  
         __size_of_putch 0002           ___wmul@product 0005                 _LATDbits 000F8C  
               _LATEbits 000F8D         __CFG_WDTPS$32768 000000                _vfpfcnvrt 061C  
      ___wmul@multiplier 0001                 __Hrparam 0000               vfprintf@ap 005A  
               __Lrparam 0000               vfprintf@fp 0056         __size_of___aodiv 0148  
       __size_of___aomod 0124               ?_vfpfcnvrt 0040          ___aodiv@divisor 0009  
        ___aodiv@counter 0011         __size_of_lcd_cmd 00E4         __size_of_lcd_ini 0090  
             sprintf@fmt 0060                 _atoi$860 0010                 _atoi$861 0014  
               _atoi$862 0012         __size_of_isdigit 0030                 _dtoa$388 002E  
         _lcd_escreve_bf 1226         __size_of_isspace 003E                 __ptext10 13B8  
               __ptext11 0DBA                 __ptext20 0EDE                 __ptext12 0B32  
               __ptext21 14DE                 __ptext13 0C7A                 __ptext14 1342  
               __ptext15 13EA                 __ptext16 149A                 __ptext17 1196  
               __ptext18 1226                 __ptext19 14C0         __size_of_set_bit 0014  
         _lcd_envia_byte 14C0         __size_of_sprintf 004E                 _int_TMR0 0008  
          __size_of_atoi 0140            __size_of_main 009E            __size_of_dtoa 0242  
               int$flags 007A                 lcd_ini@i 0006                 _vfprintf 12A2  
            _isspace$878 0007         ___aomod@dividend 0001   __end_of_lcd_escreve_bf 12A2  
 __end_of_lcd_envia_byte 14DE      lcd_envia_byte@nivel 0006                 isdigit@c 0001  
               intlevel2 0000                sprintf@ap 0066                 isspace@c 0001  
        ___aomod@divisor 0009              ??_vfpfcnvrt 0046            _vfpfcnvrt$403 0054  
        ___aomod@counter 0011                 sprintf@f 0068                 sprintf@s 005E  
        ?_lcd_escreve_bf 0007          ?_lcd_envia_byte 0005             ___aodiv@sign 0012  
           ___aomod@sign 0012  
