

Microchip MPLAB XC8 Assembler V2.05 build -831301201 
                                                                                               Fri Apr 19 15:06:54 2019

Microchip MPLAB XC8 C Compiler v2.05 (Free license) build 20181220022703 Og1 
     1                           	processor	18F4520
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	flic
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
     9                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    10                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    11                           	psect	text0,global,reloc=2,class=CODE,delta=1
    12                           	psect	text1,global,reloc=2,class=CODE,delta=1,group=2
    13                           	psect	text2,global,reloc=2,class=CODE,delta=1
    14                           	psect	text3,global,reloc=2,class=CODE,delta=1
    15                           	psect	text4,global,reloc=2,class=CODE,delta=1
    16                           	psect	text5,global,reloc=2,class=CODE,delta=1
    17                           	psect	text6,global,reloc=2,class=CODE,delta=1,group=2
    18                           	psect	text7,global,reloc=2,class=CODE,delta=1,group=2
    19                           	psect	text8,global,reloc=2,class=CODE,delta=1,group=2
    20                           	psect	text9,global,reloc=2,class=CODE,delta=1,group=2
    21                           	psect	text10,global,reloc=2,class=CODE,delta=1,group=2
    22                           	psect	text11,global,reloc=2,class=CODE,delta=1,group=1
    23                           	psect	text12,global,reloc=2,class=CODE,delta=1,group=1
    24                           	psect	text13,global,reloc=2,class=CODE,delta=1,group=2
    25                           	psect	text14,global,reloc=2,class=CODE,delta=1,group=2
    26                           	psect	text15,global,reloc=2,class=CODE,delta=1,group=2
    27                           	psect	text16,global,reloc=2,class=CODE,delta=1,group=1
    28                           	psect	text17,global,reloc=2,class=CODE,delta=1
    29                           	psect	text18,global,reloc=2,class=CODE,delta=1
    30                           	psect	text19,global,reloc=2,class=CODE,delta=1
    31                           	psect	text20,global,reloc=2,class=CODE,delta=1
    32                           	psect	text21,global,reloc=2,class=CODE,delta=1
    33                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    34                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    35                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    36                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    37                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    38  0000                     
    39                           ; Version 2.05
    40                           ; Generated 20/12/2018 GMT
    41                           ; 
    42                           ; Copyright Â© 2018, Microchip Technology Inc. and its subsidiaries ("Microchip")
    43                           ; All rights reserved.
    44                           ; 
    45                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    46                           ; 
    47                           ; Redistribution and use in source and binary forms, with or without modification, are
    48                           ; permitted provided that the following conditions are met:
    49                           ; 
    50                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    51                           ;        conditions and the following disclaimer.
    52                           ; 
    53                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    54                           ;        of conditions and the following disclaimer in the documentation and/or other
    55                           ;        materials provided with the distribution.
    56                           ; 
    57                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    58                           ;        software without specific prior written permission.
    59                           ; 
    60                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    61                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    62                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    63                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    64                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    65                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    66                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    67                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    68                           ; 
    69                           ; 
    70                           ; Code-generator required, PIC18F4520 Definitions
    71                           ; 
    72                           ; SFR Addresses
    73  0000                     _LATDbits	set	3980
    74  0000                     _LATEbits	set	3981
    75  0000                     _LATD	set	3980
    76  0000                     _TRISEbits	set	3990
    77  0000                     _TRISD	set	3989
    78  0000                     _INTCON	set	4082
    79  0000                     _ADCON1	set	4033
    80  0000                     _TRISB	set	3987
    81  0000                     _PORTB	set	3969
    82  0000                     _PORTBbits	set	3969
    83  0000                     _INTEDG0	set	32654
    84  0000                     _INT0IF	set	32657
    85                           
    86                           	psect	smallconst
    87  000600                     __psmallconst:
    88                           	opt callstack 0
    89  000600  00                 	db	0
    90  000601                     STR_2:
    91  000601  43                 	db	67	;'C'
    92  000602  4F                 	db	79	;'O'
    93  000603  4E                 	db	78	;'N'
    94  000604  54                 	db	84	;'T'
    95  000605  41                 	db	65	;'A'
    96  000606  47                 	db	71	;'G'
    97  000607  45                 	db	69	;'E'
    98  000608  4D                 	db	77	;'M'
    99  000609  3A                 	db	58	;':'
   100  00060A  20                 	db	32
   101  00060B  30                 	db	48	;'0'
   102  00060C  30                 	db	48	;'0'
   103  00060D  30                 	db	48	;'0'
   104  00060E  00                 	db	0
   105  00060F                     STR_1:
   106  00060F  49                 	db	73	;'I'
   107  000610  4E                 	db	78	;'N'
   108  000611  54                 	db	84	;'T'
   109  000612  2E                 	db	46
   110  000613  20                 	db	32
   111  000614  45                 	db	69	;'E'
   112  000615  58                 	db	88	;'X'
   113  000616  54                 	db	84	;'T'
   114  000617  45                 	db	69	;'E'
   115  000618  52                 	db	82	;'R'
   116  000619  4E                 	db	78	;'N'
   117  00061A  41                 	db	65	;'A'
   118  00061B  00                 	db	0
   119  00061C                     STR_3:
   120  00061C  25                 	db	37
   121  00061D  30                 	db	48	;'0'
   122  00061E  33                 	db	51	;'3'
   123  00061F  64                 	db	100	;'d'
   124  000620  00                 	db	0
   125                           
   126                           ; #config settings
   127  000621  00                 	db	0	; dummy byte at the end
   128  0000                     
   129                           	psect	cinit
   130  0014B0                     __pcinit:
   131                           	opt callstack 0
   132  0014B0                     start_initialization:
   133                           	opt callstack 0
   134  0014B0                     __initialization:
   135                           	opt callstack 0
   136                           
   137                           ; Clear objects allocated to BANK0 (48 bytes)
   138  0014B0  EE00  F080         	lfsr	0,__pbssBANK0
   139  0014B4  0E30               	movlw	48
   140  0014B6                     clear_0:
   141  0014B6  6AEE               	clrf	postinc0,c
   142  0014B8  06E8               	decf	wreg,f,c
   143  0014BA  E1FD               	bnz	clear_0
   144                           
   145                           ; Clear objects allocated to COMRAM (12 bytes)
   146  0014BC  EE00  F070         	lfsr	0,__pbssCOMRAM
   147  0014C0  0E0C               	movlw	12
   148  0014C2                     clear_1:
   149  0014C2  6AEE               	clrf	postinc0,c
   150  0014C4  06E8               	decf	wreg,f,c
   151  0014C6  E1FD               	bnz	clear_1
   152  0014C8                     end_of_initialization:
   153                           	opt callstack 0
   154  0014C8                     __end_of__initialization:
   155                           	opt callstack 0
   156  0014C8  907C               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   157  0014CA  927C               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   158  0014CC  0E00               	movlw	low (__Lmediumconst shr (0+16))
   159  0014CE  6EF8               	movwf	tblptru,c
   160  0014D0  0100               	movlb	0
   161  0014D2  EFE4  F007         	goto	_main	;jump to C main() function
   162                           
   163                           	psect	bssCOMRAM
   164  000070                     __pbssCOMRAM:
   165                           	opt callstack 0
   166  000070                     _nout:
   167                           	opt callstack 0
   168  000070                     	ds	2
   169  000072                     _width:
   170                           	opt callstack 0
   171  000072                     	ds	2
   172  000074                     _prec:
   173                           	opt callstack 0
   174  000074                     	ds	2
   175  000076                     _flags:
   176                           	opt callstack 0
   177  000076                     	ds	2
   178  000078                     _conta:
   179                           	opt callstack 0
   180  000078                     	ds	2
   181  00007A                     _controle:
   182                           	opt callstack 0
   183  00007A                     	ds	1
   184  00007B                     _contaInt:
   185                           	opt callstack 0
   186  00007B                     	ds	1
   187                           
   188                           	psect	bssBANK0
   189  000080                     __pbssBANK0:
   190                           	opt callstack 0
   191  000080                     _dbuf:
   192                           	opt callstack 0
   193  000080                     	ds	32
   194  0000A0                     _bufferLCD:
   195                           	opt callstack 0
   196  0000A0                     	ds	16
   197                           
   198                           	psect	cstackBANK0
   199  0000B0                     __pcstackBANK0:
   200                           	opt callstack 0
   201  0000B0                     ??_main:
   202                           
   203                           ; 1 bytes @ 0x0
   204  0000B0                     	ds	2
   205                           
   206                           	psect	cstackCOMRAM
   207  000001                     __pcstackCOMRAM:
   208                           	opt callstack 0
   209  000001                     ??_int_ext:
   210  000001                     
   211                           ; 1 bytes @ 0x0
   212  000001                     	ds	2
   213  000003                     ?_strlen:
   214                           	opt callstack 0
   215  000003                     ?_isdigit:
   216                           	opt callstack 0
   217  000003                     ?_isspace:
   218                           	opt callstack 0
   219  000003                     ?___wmul:
   220                           	opt callstack 0
   221  000003                     ?___aodiv:
   222                           	opt callstack 0
   223  000003                     ?___aomod:
   224                           	opt callstack 0
   225  000003                     set_bit@comp:
   226                           	opt callstack 0
   227  000003                     ___wmul@multiplier:
   228                           	opt callstack 0
   229  000003                     isdigit@c:
   230                           	opt callstack 0
   231  000003                     isspace@c:
   232                           	opt callstack 0
   233  000003                     fputc@c:
   234                           	opt callstack 0
   235  000003                     strlen@s:
   236                           	opt callstack 0
   237  000003                     ___aodiv@dividend:
   238                           	opt callstack 0
   239  000003                     ___aomod@dividend:
   240                           	opt callstack 0
   241                           
   242                           ; 8 bytes @ 0x2
   243  000003                     	ds	1
   244  000004                     set_bit@cmd:
   245                           	opt callstack 0
   246                           
   247                           ; 1 bytes @ 0x3
   248  000004                     	ds	1
   249  000005                     ??_lcd_cmd:
   250  000005                     ??_isdigit:
   251  000005                     ??_isspace:
   252  000005                     ___wmul@multiplicand:
   253                           	opt callstack 0
   254  000005                     fputc@fp:
   255                           	opt callstack 0
   256  000005                     strlen@a:
   257                           	opt callstack 0
   258                           
   259                           ; 2 bytes @ 0x4
   260  000005                     	ds	1
   261  000006                     lcd_cmd@cmd:
   262                           	opt callstack 0
   263                           
   264                           ; 1 bytes @ 0x5
   265  000006                     	ds	1
   266  000007                     ??_lcd_ini:
   267  000007                     ??_fputc:
   268  000007                     lcd_envia_byte@dado:
   269                           	opt callstack 0
   270  000007                     ___wmul@product:
   271                           	opt callstack 0
   272                           
   273                           ; 2 bytes @ 0x6
   274  000007                     	ds	1
   275  000008                     lcd_ini@i:
   276                           	opt callstack 0
   277  000008                     lcd_envia_byte@nivel:
   278                           	opt callstack 0
   279                           
   280                           ; 1 bytes @ 0x7
   281  000008                     	ds	1
   282  000009                     lcd_escreve_bf@col:
   283                           	opt callstack 0
   284  000009                     _isspace$833:
   285                           	opt callstack 0
   286                           
   287                           ; 1 bytes @ 0x8
   288  000009                     	ds	1
   289  00000A                     ?_atoi:
   290                           	opt callstack 0
   291  00000A                     lcd_escreve_bf@str:
   292                           	opt callstack 0
   293  00000A                     atoi@s:
   294                           	opt callstack 0
   295                           
   296                           ; 2 bytes @ 0x9
   297  00000A                     	ds	1
   298  00000B                     ___aodiv@divisor:
   299                           	opt callstack 0
   300  00000B                     ___aomod@divisor:
   301                           	opt callstack 0
   302                           
   303                           ; 8 bytes @ 0xA
   304  00000B                     	ds	1
   305  00000C                     ??_atoi:
   306  00000C                     lcd_escreve_bf@end:
   307                           	opt callstack 0
   308  00000C                     fputs@s:
   309                           	opt callstack 0
   310                           
   311                           ; 2 bytes @ 0xB
   312  00000C                     	ds	1
   313  00000D                     lcd_escreve_bf@lin:
   314                           	opt callstack 0
   315                           
   316                           ; 1 bytes @ 0xC
   317  00000D                     	ds	1
   318  00000E                     fputs@fp:
   319                           	opt callstack 0
   320                           
   321                           ; 2 bytes @ 0xD
   322  00000E                     	ds	2
   323  000010                     fputs@c:
   324                           	opt callstack 0
   325  000010                     atoi@neg:
   326                           	opt callstack 0
   327                           
   328                           ; 2 bytes @ 0xF
   329  000010                     	ds	1
   330  000011                     fputs@i:
   331                           	opt callstack 0
   332                           
   333                           ; 2 bytes @ 0x10
   334  000011                     	ds	1
   335  000012                     _atoi$815:
   336                           	opt callstack 0
   337                           
   338                           ; 2 bytes @ 0x11
   339  000012                     	ds	1
   340  000013                     ?_pad:
   341                           	opt callstack 0
   342  000013                     ___aodiv@counter:
   343                           	opt callstack 0
   344  000013                     ___aomod@counter:
   345                           	opt callstack 0
   346  000013                     pad@fp:
   347                           	opt callstack 0
   348                           
   349                           ; 2 bytes @ 0x12
   350  000013                     	ds	1
   351  000014                     ___aodiv@sign:
   352                           	opt callstack 0
   353  000014                     ___aomod@sign:
   354                           	opt callstack 0
   355  000014                     _atoi$817:
   356                           	opt callstack 0
   357                           
   358                           ; 2 bytes @ 0x13
   359  000014                     	ds	1
   360  000015                     ?_abs:
   361                           	opt callstack 0
   362  000015                     pad@buf:
   363                           	opt callstack 0
   364  000015                     abs@a:
   365                           	opt callstack 0
   366  000015                     ___aodiv@quotient:
   367                           	opt callstack 0
   368                           
   369                           ; 8 bytes @ 0x14
   370  000015                     	ds	1
   371  000016                     _atoi$816:
   372                           	opt callstack 0
   373                           
   374                           ; 1 bytes @ 0x15
   375  000016                     	ds	1
   376  000017                     ??_abs:
   377  000017                     pad@p:
   378                           	opt callstack 0
   379  000017                     atoi@n:
   380                           	opt callstack 0
   381                           
   382                           ; 2 bytes @ 0x16
   383  000017                     	ds	2
   384  000019                     ??_pad:
   385                           
   386                           ; 1 bytes @ 0x18
   387  000019                     	ds	1
   388  00001A                     pad@i:
   389                           	opt callstack 0
   390                           
   391                           ; 2 bytes @ 0x19
   392  00001A                     	ds	2
   393  00001C                     pad@w:
   394                           	opt callstack 0
   395                           
   396                           ; 2 bytes @ 0x1B
   397  00001C                     	ds	2
   398  00001E                     ?_dtoa:
   399                           	opt callstack 0
   400  00001E                     dtoa@fp:
   401                           	opt callstack 0
   402                           
   403                           ; 2 bytes @ 0x1D
   404  00001E                     	ds	2
   405  000020                     dtoa@d:
   406                           	opt callstack 0
   407                           
   408                           ; 8 bytes @ 0x1F
   409  000020                     	ds	8
   410  000028                     ??_dtoa:
   411                           
   412                           ; 1 bytes @ 0x27
   413  000028                     	ds	8
   414  000030                     _dtoa$343:
   415                           	opt callstack 0
   416                           
   417                           ; 2 bytes @ 0x2F
   418  000030                     	ds	2
   419  000032                     dtoa@p:
   420                           	opt callstack 0
   421                           
   422                           ; 2 bytes @ 0x31
   423  000032                     	ds	2
   424  000034                     dtoa@w:
   425                           	opt callstack 0
   426                           
   427                           ; 2 bytes @ 0x33
   428  000034                     	ds	2
   429  000036                     dtoa@s:
   430                           	opt callstack 0
   431                           
   432                           ; 2 bytes @ 0x35
   433  000036                     	ds	2
   434  000038                     dtoa@n:
   435                           	opt callstack 0
   436                           
   437                           ; 8 bytes @ 0x37
   438  000038                     	ds	8
   439  000040                     dtoa@i:
   440                           	opt callstack 0
   441                           
   442                           ; 2 bytes @ 0x3F
   443  000040                     	ds	2
   444  000042                     ?_vfpfcnvrt:
   445                           	opt callstack 0
   446  000042                     vfpfcnvrt@fp:
   447                           	opt callstack 0
   448                           
   449                           ; 2 bytes @ 0x41
   450  000042                     	ds	2
   451  000044                     vfpfcnvrt@fmt:
   452                           	opt callstack 0
   453                           
   454                           ; 2 bytes @ 0x43
   455  000044                     	ds	2
   456  000046                     vfpfcnvrt@ap:
   457                           	opt callstack 0
   458                           
   459                           ; 2 bytes @ 0x45
   460  000046                     	ds	2
   461  000048                     ??_vfpfcnvrt:
   462                           
   463                           ; 1 bytes @ 0x47
   464  000048                     	ds	4
   465  00004C                     vfpfcnvrt@ll:
   466                           	opt callstack 0
   467                           
   468                           ; 8 bytes @ 0x4B
   469  00004C                     	ds	8
   470  000054                     vfpfcnvrt@done:
   471                           	opt callstack 0
   472                           
   473                           ; 2 bytes @ 0x53
   474  000054                     	ds	2
   475  000056                     _vfpfcnvrt$358:
   476                           	opt callstack 0
   477                           
   478                           ; 2 bytes @ 0x55
   479  000056                     	ds	2
   480  000058                     ?_vfprintf:
   481                           	opt callstack 0
   482  000058                     vfprintf@fp:
   483                           	opt callstack 0
   484                           
   485                           ; 2 bytes @ 0x57
   486  000058                     	ds	2
   487  00005A                     vfprintf@fmt:
   488                           	opt callstack 0
   489                           
   490                           ; 2 bytes @ 0x59
   491  00005A                     	ds	2
   492  00005C                     vfprintf@ap:
   493                           	opt callstack 0
   494                           
   495                           ; 2 bytes @ 0x5B
   496  00005C                     	ds	2
   497  00005E                     vfprintf@cfmt:
   498                           	opt callstack 0
   499                           
   500                           ; 2 bytes @ 0x5D
   501  00005E                     	ds	2
   502  000060                     ?_sprintf:
   503                           	opt callstack 0
   504  000060                     sprintf@s:
   505                           	opt callstack 0
   506                           
   507                           ; 2 bytes @ 0x5F
   508  000060                     	ds	2
   509  000062                     sprintf@fmt:
   510                           	opt callstack 0
   511                           
   512                           ; 2 bytes @ 0x61
   513  000062                     	ds	4
   514  000066                     
   515                           ; 1 bytes @ 0x65
   516  000066                     	ds	2
   517  000068                     sprintf@ap:
   518                           	opt callstack 0
   519                           
   520                           ; 2 bytes @ 0x67
   521  000068                     	ds	2
   522  00006A                     sprintf@f:
   523                           	opt callstack 0
   524                           
   525                           ; 6 bytes @ 0x69
   526  00006A                     	ds	6
   527                           
   528 ;;
   529 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   530 ;;
   531 ;; *************** function _main *****************
   532 ;; Defined at:
   533 ;;		line 41 in file "EX11.c"
   534 ;; Parameters:    Size  Location     Type
   535 ;;		None
   536 ;; Auto vars:     Size  Location     Type
   537 ;;		None
   538 ;; Return value:  Size  Location     Type
   539 ;;                  1    wreg      void 
   540 ;; Registers used:
   541 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   542 ;; Tracked objects:
   543 ;;		On entry : 0/0
   544 ;;		On exit  : 0/0
   545 ;;		Unchanged: 0/0
   546 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   547 ;;      Params:         0       0       0       0       0       0       0
   548 ;;      Locals:         0       0       0       0       0       0       0
   549 ;;      Temps:          0       2       0       0       0       0       0
   550 ;;      Totals:         0       2       0       0       0       0       0
   551 ;;Total ram usage:        2 bytes
   552 ;; Hardware stack levels required when called:    9
   553 ;; This function calls:
   554 ;;		_lcd_escreve_bf
   555 ;;		_lcd_ini
   556 ;;		_sprintf
   557 ;; This function is called by:
   558 ;;		Startup code after reset
   559 ;; This function uses a non-reentrant model
   560 ;;
   561                           
   562                           	psect	text0
   563  000FC8                     __ptext0:
   564                           	opt callstack 0
   565  000FC8                     _main:
   566                           	opt callstack 22
   567                           
   568                           ;EX11.c: 42:     TRISB = 0b00000001;
   569                           
   570                           ;incstack = 0
   571  000FC8  0E01               	movlw	1
   572  000FCA  6E93               	movwf	3987,c	;volatile
   573                           
   574                           ;EX11.c: 44:     PORTB = 0b00000000;
   575  000FCC  0E00               	movlw	0
   576  000FCE  6E81               	movwf	3969,c	;volatile
   577                           
   578                           ;EX11.c: 45:     ADCON1 = 0x0F;
   579  000FD0  0E0F               	movlw	15
   580  000FD2  6EC1               	movwf	4033,c	;volatile
   581                           
   582                           ;EX11.c: 47:     INTCON = 0b10010000;
   583  000FD4  0E90               	movlw	144
   584  000FD6  6EF2               	movwf	4082,c	;volatile
   585                           
   586                           ;EX11.c: 57:     INTEDG0 = 1;
   587  000FD8  8CF1               	bsf	4081,6,c	;volatile
   588                           
   589                           ;EX11.c: 59:     lcd_ini();
   590  000FDA  ECCF  F008         	call	_lcd_ini	;wreg free
   591                           
   592                           ;EX11.c: 62:     lcd_escreve_bf(1, 2, "INT. EXTERNA");
   593  000FDE  0E02               	movlw	2
   594  000FE0  6E09               	movwf	lcd_escreve_bf@col,c
   595  000FE2  0E0F               	movlw	low STR_1
   596  000FE4  6E0A               	movwf	lcd_escreve_bf@str,c
   597  000FE6  0E06               	movlw	high STR_1
   598  000FE8  6E0B               	movwf	lcd_escreve_bf@str+1,c
   599  000FEA  0E01               	movlw	1
   600  000FEC  EC17  F009         	call	_lcd_escreve_bf
   601                           
   602                           ;EX11.c: 65:     lcd_escreve_bf(2, 2, "CONTAGEM: 000");
   603  000FF0  0E02               	movlw	2
   604  000FF2  6E09               	movwf	lcd_escreve_bf@col,c
   605  000FF4  0E01               	movlw	low STR_2
   606  000FF6  6E0A               	movwf	lcd_escreve_bf@str,c
   607  000FF8  0E06               	movlw	high STR_2
   608  000FFA  6E0B               	movwf	lcd_escreve_bf@str+1,c
   609  000FFC  0E02               	movlw	2
   610  000FFE  EC17  F009         	call	_lcd_escreve_bf
   611  001002                     l2048:
   612                           
   613                           ;EX11.c: 68:     {;EX11.c: 69:         _delay((unsigned long)((1000)*(8000000/4000.0)));
   614  001002  0E0B               	movlw	11
   615  001004  0100               	movlb	0	; () banked
   616  001006  6FB1               	movwf	(??_main+1)& (0+255),b
   617  001008  0E26               	movlw	38
   618  00100A  6FB0               	movwf	??_main& (0+255),b
   619  00100C  0E5D               	movlw	93
   620  00100E                     u1467:
   621  00100E  2EE8               	decfsz	wreg,f,c
   622  001010  D7FE               	bra	u1467
   623  001012  2FB0               	decfsz	??_main& (0+255),f,b
   624  001014  D7FC               	bra	u1467
   625  001016  2FB1               	decfsz	(??_main+1)& (0+255),f,b
   626  001018  D7FA               	bra	u1467
   627  00101A  D000               	nop2	
   628                           
   629                           ;EX11.c: 71:         conta++;
   630  00101C  4A78               	infsnz	_conta,f,c
   631  00101E  2A79               	incf	_conta+1,f,c
   632                           
   633                           ;EX11.c: 73:         if (conta>999) conta = 0;
   634  001020  BE79               	btfsc	_conta+1,7,c
   635  001022  D00A               	goto	l2056
   636  001024  0EE8               	movlw	232
   637  001026  5C78               	subwf	_conta,w,c
   638  001028  0E03               	movlw	3
   639  00102A  5879               	subwfb	_conta+1,w,c
   640  00102C  A0D8               	btfss	status,0,c
   641  00102E  D004               	goto	l2056
   642  001030  0E00               	movlw	0
   643  001032  6E79               	movwf	_conta+1,c
   644  001034  0E00               	movlw	0
   645  001036  6E78               	movwf	_conta,c
   646  001038                     l2056:
   647                           
   648                           ;EX11.c: 76:         sprintf(bufferLCD, "%03d", conta);
   649  001038  0EA0               	movlw	low _bufferLCD
   650  00103A  6E60               	movwf	sprintf@s,c
   651  00103C  0E00               	movlw	high _bufferLCD
   652  00103E  6E61               	movwf	sprintf@s+1,c
   653  001040  0E1C               	movlw	low STR_3
   654  001042  6E62               	movwf	sprintf@fmt,c
   655  001044  0E06               	movlw	high STR_3
   656  001046  6E63               	movwf	sprintf@fmt+1,c
   657  001048  C078  F064         	movff	_conta,?_sprintf+4
   658  00104C  C079  F065         	movff	_conta+1,?_sprintf+5
   659  001050  ECB0  F009         	call	_sprintf	;wreg free
   660                           
   661                           ;EX11.c: 79:         lcd_escreve_bf(2, 12, bufferLCD);
   662  001054  0E0C               	movlw	12
   663  001056  6E09               	movwf	lcd_escreve_bf@col,c
   664  001058  0EA0               	movlw	low _bufferLCD
   665  00105A  6E0A               	movwf	lcd_escreve_bf@str,c
   666  00105C  0E00               	movlw	high _bufferLCD
   667  00105E  6E0B               	movwf	lcd_escreve_bf@str+1,c
   668  001060  0E02               	movlw	2
   669  001062  EC17  F009         	call	_lcd_escreve_bf
   670  001066  D7CD               	goto	l2048
   671  001068                     __end_of_main:
   672                           	opt callstack 0
   673                           
   674 ;; *************** function _sprintf *****************
   675 ;; Defined at:
   676 ;;		line 9 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\nf_sprintf.c"
   677 ;; Parameters:    Size  Location     Type
   678 ;;  s               2   95[COMRAM] PTR unsigned char 
   679 ;;		 -> bufferLCD(16), 
   680 ;;  fmt             2   97[COMRAM] PTR const unsigned char 
   681 ;;		 -> STR_3(5), 
   682 ;; Auto vars:     Size  Location     Type
   683 ;;  f               6  105[COMRAM] struct _IO_FILE
   684 ;;  ap              2  103[COMRAM] PTR void [1]
   685 ;;		 -> ?_sprintf(2), 
   686 ;;  ret             2    0        int 
   687 ;; Return value:  Size  Location     Type
   688 ;;                  2   95[COMRAM] int 
   689 ;; Registers used:
   690 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   691 ;; Tracked objects:
   692 ;;		On entry : 0/0
   693 ;;		On exit  : 0/0
   694 ;;		Unchanged: 0/0
   695 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   696 ;;      Params:         6       0       0       0       0       0       0
   697 ;;      Locals:        10       0       0       0       0       0       0
   698 ;;      Temps:          0       0       0       0       0       0       0
   699 ;;      Totals:        16       0       0       0       0       0       0
   700 ;;Total ram usage:       16 bytes
   701 ;; Hardware stack levels used:    1
   702 ;; Hardware stack levels required when called:    8
   703 ;; This function calls:
   704 ;;		_vfprintf
   705 ;; This function is called by:
   706 ;;		_main
   707 ;; This function uses a non-reentrant model
   708 ;;
   709                           
   710                           	psect	text1
   711  001360                     __ptext1:
   712                           	opt callstack 0
   713  001360                     _sprintf:
   714                           	opt callstack 22
   715                           
   716                           ;incstack = 0
   717  001360  0E64               	movlw	low (?_sprintf+4)
   718  001362  6E68               	movwf	sprintf@ap,c
   719  001364  0E00               	movlw	high (?_sprintf+4)
   720  001366  6E69               	movwf	sprintf@ap+1,c
   721  001368  C060  F06A         	movff	sprintf@s,sprintf@f
   722  00136C  C061  F06B         	movff	sprintf@s+1,sprintf@f+1
   723  001370  0E00               	movlw	0
   724  001372  6E6D               	movwf	sprintf@f+3,c
   725  001374  0E00               	movlw	0
   726  001376  6E6C               	movwf	sprintf@f+2,c
   727  001378  0E00               	movlw	0
   728  00137A  6E6F               	movwf	sprintf@f+5,c
   729  00137C  0E00               	movlw	0
   730  00137E  6E6E               	movwf	sprintf@f+4,c
   731  001380  0E6A               	movlw	low sprintf@f
   732  001382  6E58               	movwf	vfprintf@fp,c
   733  001384  0E00               	movlw	high sprintf@f
   734  001386  6E59               	movwf	vfprintf@fp+1,c
   735  001388  C062  F05A         	movff	sprintf@fmt,vfprintf@fmt
   736  00138C  C063  F05B         	movff	sprintf@fmt+1,vfprintf@fmt+1
   737  001390  0E68               	movlw	low sprintf@ap
   738  001392  6E5C               	movwf	vfprintf@ap,c
   739  001394  0E00               	movlw	high sprintf@ap
   740  001396  6E5D               	movwf	vfprintf@ap+1,c
   741  001398  EC87  F009         	call	_vfprintf	;wreg free
   742  00139C  506C               	movf	sprintf@f+2,w,c
   743  00139E  2460               	addwf	sprintf@s,w,c
   744  0013A0  6ED9               	movwf	fsr2l,c
   745  0013A2  506D               	movf	sprintf@f+3,w,c
   746  0013A4  2061               	addwfc	sprintf@s+1,w,c
   747  0013A6  6EDA               	movwf	fsr2h,c
   748  0013A8  0E00               	movlw	0
   749  0013AA  6EDF               	movwf	indf2,c
   750  0013AC  0012               	return		;funcret
   751  0013AE                     __end_of_sprintf:
   752                           	opt callstack 0
   753                           
   754 ;; *************** function _vfprintf *****************
   755 ;; Defined at:
   756 ;;		line 1368 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c"
   757 ;; Parameters:    Size  Location     Type
   758 ;;  fp              2   87[COMRAM] PTR struct _IO_FILE
   759 ;;		 -> sprintf@f(6), 
   760 ;;  fmt             2   89[COMRAM] PTR const unsigned char 
   761 ;;		 -> STR_3(5), 
   762 ;;  ap              2   91[COMRAM] PTR PTR void 
   763 ;;		 -> sprintf@ap(2), 
   764 ;; Auto vars:     Size  Location     Type
   765 ;;  cfmt            2   93[COMRAM] PTR unsigned char 
   766 ;;		 -> STR_3(5), 
   767 ;; Return value:  Size  Location     Type
   768 ;;                  2   87[COMRAM] int 
   769 ;; Registers used:
   770 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   771 ;; Tracked objects:
   772 ;;		On entry : 0/0
   773 ;;		On exit  : 0/0
   774 ;;		Unchanged: 0/0
   775 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   776 ;;      Params:         6       0       0       0       0       0       0
   777 ;;      Locals:         2       0       0       0       0       0       0
   778 ;;      Temps:          0       0       0       0       0       0       0
   779 ;;      Totals:         8       0       0       0       0       0       0
   780 ;;Total ram usage:        8 bytes
   781 ;; Hardware stack levels used:    1
   782 ;; Hardware stack levels required when called:    7
   783 ;; This function calls:
   784 ;;		_vfpfcnvrt
   785 ;; This function is called by:
   786 ;;		_sprintf
   787 ;; This function uses a non-reentrant model
   788 ;;
   789                           
   790                           	psect	text2
   791  00130E                     __ptext2:
   792                           	opt callstack 0
   793  00130E                     _vfprintf:
   794                           	opt callstack 22
   795                           
   796                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1368: int v
      +                          fprintf(FILE *fp, const char *fmt, va_list ap);C:\Program Files (x86)\Microchip\xc8\v2.0
      +                          5\pic\sources\c99\common\doprnt.c: 1369: {;C:\Program Files (x86)\Microchip\xc8\v2.05\pi
      +                          c\sources\c99\common\doprnt.c: 1371:     char *cfmt;;C:\Program Files (x86)\Microchip\xc
      +                          8\v2.05\pic\sources\c99\common\doprnt.c: 1373:     cfmt = (char *)fmt;
   797                           
   798                           ;incstack = 0
   799  00130E  C05A  F05E         	movff	vfprintf@fmt,vfprintf@cfmt
   800  001312  C05B  F05F         	movff	vfprintf@fmt+1,vfprintf@cfmt+1
   801                           
   802                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1374:     n
      +                          out = 0;
   803  001316  0E00               	movlw	0
   804  001318  6E71               	movwf	_nout+1,c
   805  00131A  0E00               	movlw	0
   806  00131C  6E70               	movwf	_nout,c
   807                           
   808                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1375:     w
      +                          hile (*cfmt) {
   809  00131E  D012               	goto	l1886
   810  001320                     l1884:
   811                           
   812                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1376:      
      +                             nout += vfpfcnvrt(fp, &cfmt, ap);
   813  001320  C058  F042         	movff	vfprintf@fp,vfpfcnvrt@fp
   814  001324  C059  F043         	movff	vfprintf@fp+1,vfpfcnvrt@fp+1
   815  001328  0E5E               	movlw	low vfprintf@cfmt
   816  00132A  6E44               	movwf	vfpfcnvrt@fmt,c
   817  00132C  0E00               	movlw	high vfprintf@cfmt
   818  00132E  6E45               	movwf	vfpfcnvrt@fmt+1,c
   819  001330  C05C  F046         	movff	vfprintf@ap,vfpfcnvrt@ap
   820  001334  C05D  F047         	movff	vfprintf@ap+1,vfpfcnvrt@ap+1
   821  001338  EC11  F003         	call	_vfpfcnvrt	;wreg free
   822  00133C  5042               	movf	?_vfpfcnvrt,w,c
   823  00133E  2670               	addwf	_nout,f,c
   824  001340  5043               	movf	?_vfpfcnvrt+1,w,c
   825  001342  2271               	addwfc	_nout+1,f,c
   826  001344                     l1886:
   827                           
   828                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1375:     w
      +                          hile (*cfmt) {
   829  001344  C05E  FFF6         	movff	vfprintf@cfmt,tblptrl
   830  001348  C05F  FFF7         	movff	vfprintf@cfmt+1,tblptrh
   831  00134C                     	if	0	;tblptru may be non-zero
   832  00134C                     	endif
   833  00134C                     	if	0	;tblptru may be non-zero
   834  00134C                     	endif
   835  00134C  0008               	tblrd		*
   836  00134E  50F5               	movf	tablat,w,c
   837  001350  0900               	iorlw	0
   838  001352  A4D8               	btfss	status,2,c
   839  001354  D7E5               	goto	l1884
   840                           
   841                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1378:     r
      +                          eturn nout;
   842  001356  C070  F058         	movff	_nout,?_vfprintf
   843  00135A  C071  F059         	movff	_nout+1,?_vfprintf+1
   844  00135E  0012               	return		;funcret
   845  001360                     __end_of_vfprintf:
   846                           	opt callstack 0
   847                           
   848 ;; *************** function _vfpfcnvrt *****************
   849 ;; Defined at:
   850 ;;		line 670 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c"
   851 ;; Parameters:    Size  Location     Type
   852 ;;  fp              2   65[COMRAM] PTR struct _IO_FILE
   853 ;;		 -> sprintf@f(6), 
   854 ;;  fmt             2   67[COMRAM] PTR PTR unsigned char 
   855 ;;		 -> vfprintf@cfmt(2), 
   856 ;;  ap              2   69[COMRAM] PTR PTR void 
   857 ;;		 -> sprintf@ap(2), 
   858 ;; Auto vars:     Size  Location     Type
   859 ;;  ll              8   75[COMRAM] long long 
   860 ;;  llu             8    0        unsigned long long 
   861 ;;  f               4    0        unsigned long long 
   862 ;;  vp              3    0        PTR void 
   863 ;;  ct              3    0        unsigned char [3]
   864 ;;  cp              3    0        PTR unsigned char 
   865 ;;  done            2   83[COMRAM] int 
   866 ;;  i               2    0        int 
   867 ;;  c               1    0        unsigned char 
   868 ;; Return value:  Size  Location     Type
   869 ;;                  2   65[COMRAM] int 
   870 ;; Registers used:
   871 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   872 ;; Tracked objects:
   873 ;;		On entry : 0/0
   874 ;;		On exit  : 0/0
   875 ;;		Unchanged: 0/0
   876 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   877 ;;      Params:         6       0       0       0       0       0       0
   878 ;;      Locals:        12       0       0       0       0       0       0
   879 ;;      Temps:          4       0       0       0       0       0       0
   880 ;;      Totals:        22       0       0       0       0       0       0
   881 ;;Total ram usage:       22 bytes
   882 ;; Hardware stack levels used:    1
   883 ;; Hardware stack levels required when called:    6
   884 ;; This function calls:
   885 ;;		_atoi
   886 ;;		_dtoa
   887 ;;		_fputc
   888 ;;		_isdigit
   889 ;; This function is called by:
   890 ;;		_vfprintf
   891 ;; This function uses a non-reentrant model
   892 ;;
   893                           
   894                           	psect	text3
   895  000622                     __ptext3:
   896                           	opt callstack 0
   897  000622                     _vfpfcnvrt:
   898                           	opt callstack 22
   899                           
   900                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 670: static
      +                           int vfpfcnvrt(FILE *fp, char *fmt[], va_list ap);C:\Program Files (x86)\Microchip\xc8\v
      +                          2.05\pic\sources\c99\common\doprnt.c: 671: {;C:\Program Files (x86)\Microchip\xc8\v2.05\
      +                          pic\sources\c99\common\doprnt.c: 672:     char c, *cp, ct[3];;C:\Program Files (x86)\Mic
      +                          rochip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 673:     int done, i;;C:\Program Files
      +                           (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 674:     long long ll;
   901                           
   902                           ;incstack = 0
   903  000622  C044  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
   904  000626  C045  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
   905  00062A  CFDE FFF6          	movff	postinc2,tblptrl
   906  00062E  CFDD FFF7          	movff	postdec2,tblptrh
   907  000632                     	if	0	;tblptru may be non-zero
   908  000632                     	endif
   909  000632                     	if	0	;tblptru may be non-zero
   910  000632                     	endif
   911  000632  0008               	tblrd		*
   912  000634  50F5               	movf	tablat,w,c
   913  000636  0A25               	xorlw	37
   914  000638  A4D8               	btfss	status,2,c
   915  00063A  D143               	goto	l1860
   916                           
   917                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 681:       
      +                            ++*fmt;
   918  00063C  C044  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
   919  000640  C045  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
   920  000644  2ADE               	incf	postinc2,f,c
   921  000646  0E00               	movlw	0
   922  000648  22DD               	addwfc	postdec2,f,c
   923                           
   924                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 683:       
      +                            flags = width = 0;
   925  00064A  0E00               	movlw	0
   926  00064C  6E73               	movwf	_width+1,c
   927  00064E  0E00               	movlw	0
   928  000650  6E72               	movwf	_width,c
   929  000652  C072  F076         	movff	_width,_flags
   930  000656  C073  F077         	movff	_width+1,_flags+1
   931                           
   932                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 684:       
      +                            prec = -1;
   933  00065A  6874               	setf	_prec,c
   934  00065C  6875               	setf	_prec+1,c
   935                           
   936                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 688:       
      +                            done = 0;
   937  00065E  0E00               	movlw	0
   938  000660  6E55               	movwf	vfpfcnvrt@done+1,c
   939  000662  0E00               	movlw	0
   940  000664  D014               	goto	L1
   941  000666                     l1786:
   942                           
   943                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 692:       
      +                                        flags |= (1 << 0);
   944  000666  8076               	bsf	_flags,0,c
   945  000668                     l1788:
   946                           
   947                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 693:       
      +                                        ++*fmt;
   948  000668  C044  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
   949  00066C  C045  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
   950  000670  2ADE               	incf	postinc2,f,c
   951  000672  0E00               	movlw	0
   952  000674  22DD               	addwfc	postdec2,f,c
   953                           
   954                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 694:       
      +                                        break;
   955  000676  D02E               	goto	l1812
   956  000678                     l1790:
   957                           
   958                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 696:       
      +                                        flags |= (1 << 1);
   959  000678  8276               	bsf	_flags,1,c
   960  00067A  D7F6               	goto	l1788
   961  00067C                     l1794:
   962                           
   963                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 700:       
      +                                        flags |= (1 << 2);
   964  00067C  8476               	bsf	_flags,2,c
   965  00067E  D7F4               	goto	l1788
   966  000680                     l1798:
   967                           
   968                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 704:       
      +                                        flags |= (1 << 3);
   969  000680  8676               	bsf	_flags,3,c
   970  000682  D7F2               	goto	l1788
   971  000684                     l1802:
   972                           
   973                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 708:       
      +                                        flags |= (1 << 4);
   974  000684  8876               	bsf	_flags,4,c
   975  000686  D7F0               	goto	l1788
   976  000688                     l1806:
   977                           
   978                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 712:       
      +                                        done = 1;
   979  000688  0E00               	movlw	0
   980  00068A  6E55               	movwf	vfpfcnvrt@done+1,c
   981  00068C  0E01               	movlw	1
   982  00068E                     L1:
   983  00068E  6E54               	movwf	vfpfcnvrt@done,c
   984                           
   985                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 713:       
      +                                        break;
   986  000690  D021               	goto	l1812
   987  000692                     l1810:
   988  000692  C044  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
   989  000696  C045  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
   990  00069A  CFDE FFF6          	movff	postinc2,tblptrl
   991  00069E  CFDD FFF7          	movff	postdec2,tblptrh
   992  0006A2                     	if	0	;tblptru may be non-zero
   993  0006A2                     	endif
   994  0006A2                     	if	0	;tblptru may be non-zero
   995  0006A2                     	endif
   996  0006A2  0008               	tblrd		*
   997  0006A4  50F5               	movf	tablat,w,c
   998  0006A6  6E48               	movwf	??_vfpfcnvrt& (0+255),c
   999  0006A8  6A49               	clrf	(??_vfpfcnvrt+1)& (0+255),c
  1000                           
  1001                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1002                           ; Switch size 1, requested type "simple"
  1003                           ; Number of cases is 1, Range of values is 0 to 0
  1004                           ; switch strategies available:
  1005                           ; Name         Instructions Cycles
  1006                           ; simple_byte            4     3 (average)
  1007                           ;	Chosen strategy is simple_byte
  1008  0006AA  5049               	movf	??_vfpfcnvrt+1,w,c
  1009  0006AC  0A00               	xorlw	0	; case 0
  1010  0006AE  A4D8               	btfss	status,2,c
  1011  0006B0  D7EB               	goto	l1806
  1012                           
  1013                           ; Switch size 1, requested type "simple"
  1014                           ; Number of cases is 5, Range of values is 32 to 48
  1015                           ; switch strategies available:
  1016                           ; Name         Instructions Cycles
  1017                           ; simple_byte           16     9 (average)
  1018                           ;	Chosen strategy is simple_byte
  1019  0006B2  5048               	movf	??_vfpfcnvrt,w,c
  1020  0006B4  0A20               	xorlw	32	; case 32
  1021  0006B6  B4D8               	btfsc	status,2,c
  1022  0006B8  D7E3               	goto	l1798
  1023  0006BA  0A03               	xorlw	3	; case 35
  1024  0006BC  B4D8               	btfsc	status,2,c
  1025  0006BE  D7E2               	goto	l1802
  1026  0006C0  0A08               	xorlw	8	; case 43
  1027  0006C2  B4D8               	btfsc	status,2,c
  1028  0006C4  D7DB               	goto	l1794
  1029  0006C6  0A06               	xorlw	6	; case 45
  1030  0006C8  B4D8               	btfsc	status,2,c
  1031  0006CA  D7CD               	goto	l1786
  1032  0006CC  0A1D               	xorlw	29	; case 48
  1033  0006CE  B4D8               	btfsc	status,2,c
  1034  0006D0  D7D3               	goto	l1790
  1035  0006D2  D7DA               	goto	l1806
  1036  0006D4                     l1812:
  1037                           
  1038                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 689:       
      +                            while (!done) {
  1039  0006D4  5054               	movf	vfpfcnvrt@done,w,c
  1040  0006D6  1055               	iorwf	vfpfcnvrt@done+1,w,c
  1041  0006D8  B4D8               	btfsc	status,2,c
  1042  0006DA  D7DB               	goto	l1810
  1043                           
  1044                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 716:       
      +                            if (flags & (1 << 0)) {
  1045  0006DC  B076               	btfsc	_flags,0,c
  1046                           
  1047                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 717:       
      +                                flags &= ~(1 << 1);
  1048  0006DE  9276               	bcf	_flags,1,c
  1049                           
  1050                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 723:       
      +                            if ((*fmt)[0] == '*') {
  1051  0006E0  C044  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1052  0006E4  C045  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1053  0006E8  CFDE FFF6          	movff	postinc2,tblptrl
  1054  0006EC  CFDD FFF7          	movff	postdec2,tblptrh
  1055  0006F0                     	if	0	;tblptru may be non-zero
  1056  0006F0                     	endif
  1057  0006F0                     	if	0	;tblptru may be non-zero
  1058  0006F0                     	endif
  1059  0006F0  0008               	tblrd		*
  1060  0006F2  50F5               	movf	tablat,w,c
  1061  0006F4  0A2A               	xorlw	42
  1062  0006F6  A4D8               	btfss	status,2,c
  1063  0006F8  D023               	goto	l1824
  1064                           
  1065                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 724:       
      +                                ++*fmt;
  1066  0006FA  C044  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1067  0006FE  C045  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1068  000702  2ADE               	incf	postinc2,f,c
  1069  000704  0E00               	movlw	0
  1070  000706  22DD               	addwfc	postdec2,f,c
  1071                           
  1072                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 725:       
      +                                width = (*(int *)__va_arg(*(int **)ap, (int)0));
  1073  000708  C046  FFD9         	movff	vfpfcnvrt@ap,fsr2l
  1074  00070C  C047  FFDA         	movff	vfpfcnvrt@ap+1,fsr2h
  1075  000710  CFDF F048          	movff	indf2,??_vfpfcnvrt
  1076  000714  0E02               	movlw	2
  1077  000716  26DE               	addwf	postinc2,f,c
  1078  000718  CFDF F049          	movff	indf2,??_vfpfcnvrt+1
  1079  00071C  0E00               	movlw	0
  1080  00071E  22DD               	addwfc	postdec2,f,c
  1081  000720  C048  FFD9         	movff	??_vfpfcnvrt,fsr2l
  1082  000724  C049  FFDA         	movff	??_vfpfcnvrt+1,fsr2h
  1083  000728  CFDE F072          	movff	postinc2,_width
  1084  00072C  CFDD F073          	movff	postdec2,_width+1
  1085                           
  1086                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 726:       
      +                                if (width < 0) {
  1087  000730  AE73               	btfss	_width+1,7,c
  1088  000732  D03F               	goto	u1320
  1089                           
  1090                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 727:       
      +                                    flags |= (1 << 0);
  1091  000734  8076               	bsf	_flags,0,c
  1092                           
  1093                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 728:       
      +                                    width = -width;
  1094  000736  6C72               	negf	_width,c
  1095  000738  1E73               	comf	_width+1,f,c
  1096  00073A  B0D8               	btfsc	status,0,c
  1097  00073C  2A73               	incf	_width+1,f,c
  1098  00073E  D039               	goto	u1320
  1099  000740                     l1824:
  1100                           
  1101                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 731:       
      +                                width = atoi(*fmt);
  1102  000740  C044  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1103  000744  C045  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1104  000748  CFDE F00A          	movff	postinc2,atoi@s
  1105  00074C  CFDD F00B          	movff	postdec2,atoi@s+1
  1106  000750  EC40  F006         	call	_atoi	;wreg free
  1107  000754  C00A  F072         	movff	?_atoi,_width
  1108  000758  C00B  F073         	movff	?_atoi+1,_width+1
  1109                           
  1110                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 732:       
      +                                while ((0 ? isdigit((*fmt)[0]) : ((unsigned)((*fmt)[0])-'0') < 10)) {
  1111  00075C  D007               	goto	l1828
  1112  00075E                     l1826:
  1113                           
  1114                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 733:       
      +                                    ++*fmt;
  1115  00075E  C044  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1116  000762  C045  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1117  000766  2ADE               	incf	postinc2,f,c
  1118  000768  0E00               	movlw	0
  1119  00076A  22DD               	addwfc	postdec2,f,c
  1120  00076C                     l1828:
  1121  00076C  0ED0               	movlw	208
  1122  00076E  6E48               	movwf	??_vfpfcnvrt& (0+255),c
  1123  000770  0EFF               	movlw	255
  1124  000772  6E49               	movwf	(??_vfpfcnvrt+1)& (0+255),c
  1125  000774  C044  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1126  000778  C045  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1127  00077C  CFDE FFF6          	movff	postinc2,tblptrl
  1128  000780  CFDD FFF7          	movff	postdec2,tblptrh
  1129  000784                     	if	0	;tblptru may be non-zero
  1130  000784                     	endif
  1131  000784                     	if	0	;tblptru may be non-zero
  1132  000784                     	endif
  1133  000784  0008               	tblrd		*
  1134  000786  50F5               	movf	tablat,w,c
  1135  000788  6E4A               	movwf	(??_vfpfcnvrt+2)& (0+255),c
  1136  00078A  6A4B               	clrf	(??_vfpfcnvrt+3)& (0+255),c
  1137  00078C  5048               	movf	??_vfpfcnvrt,w,c
  1138  00078E  264A               	addwf	??_vfpfcnvrt+2,f,c
  1139  000790  5049               	movf	??_vfpfcnvrt+1,w,c
  1140  000792  224B               	addwfc	??_vfpfcnvrt+3,f,c
  1141  000794  504B               	movf	??_vfpfcnvrt+3,w,c
  1142  000796  E106               	bnz	u1300
  1143  000798  0E0A               	movlw	10
  1144  00079A  5C4A               	subwf	??_vfpfcnvrt+2,w,c
  1145  00079C  B0D8               	btfsc	status,0,c
  1146  00079E  D002               	goto	u1300
  1147  0007A0  0E01               	movlw	1
  1148  0007A2  D001               	goto	u1310
  1149  0007A4                     u1300:
  1150  0007A4  0E00               	movlw	0
  1151  0007A6                     u1310:
  1152  0007A6  6E56               	movwf	_vfpfcnvrt$358,c
  1153  0007A8  6A57               	clrf	_vfpfcnvrt$358+1,c
  1154  0007AA  5056               	movf	_vfpfcnvrt$358,w,c
  1155  0007AC  1057               	iorwf	_vfpfcnvrt$358+1,w,c
  1156  0007AE  A4D8               	btfss	status,2,c
  1157  0007B0  D7D6               	goto	l1826
  1158  0007B2                     u1320:
  1159                           
  1160                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 825:       
      +                            if ((*fmt[0] == 'd') || (*fmt[0] == 'i')) {
  1161  0007B2  C044  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1162  0007B6  C045  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1163  0007BA  CFDE FFF6          	movff	postinc2,tblptrl
  1164  0007BE  CFDD FFF7          	movff	postdec2,tblptrh
  1165  0007C2                     	if	0	;tblptru may be non-zero
  1166  0007C2                     	endif
  1167  0007C2                     	if	0	;tblptru may be non-zero
  1168  0007C2                     	endif
  1169  0007C2  0008               	tblrd		*
  1170  0007C4  50F5               	movf	tablat,w,c
  1171  0007C6  0A64               	xorlw	100
  1172  0007C8  B4D8               	btfsc	status,2,c
  1173  0007CA  D00D               	goto	u1340
  1174  0007CC  C044  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1175  0007D0  C045  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1176  0007D4  CFDE FFF6          	movff	postinc2,tblptrl
  1177  0007D8  CFDD FFF7          	movff	postdec2,tblptrh
  1178  0007DC                     	if	0	;tblptru may be non-zero
  1179  0007DC                     	endif
  1180  0007DC                     	if	0	;tblptru may be non-zero
  1181  0007DC                     	endif
  1182  0007DC  0008               	tblrd		*
  1183  0007DE  50F5               	movf	tablat,w,c
  1184  0007E0  0A69               	xorlw	105
  1185  0007E2  A4D8               	btfss	status,2,c
  1186  0007E4  D03F               	goto	l1844
  1187  0007E6                     u1340:
  1188                           
  1189                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 827:       
      +                                ++*fmt;
  1190  0007E6  C044  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1191  0007EA  C045  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1192  0007EE  2ADE               	incf	postinc2,f,c
  1193  0007F0  0E00               	movlw	0
  1194  0007F2  22DD               	addwfc	postdec2,f,c
  1195                           
  1196                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 828:       
      +                                ll = (long long)(*(int *)__va_arg(*(int **)ap, (int)0));
  1197  0007F4  C046  FFD9         	movff	vfpfcnvrt@ap,fsr2l
  1198  0007F8  C047  FFDA         	movff	vfpfcnvrt@ap+1,fsr2h
  1199  0007FC  CFDF F048          	movff	indf2,??_vfpfcnvrt
  1200  000800  0E02               	movlw	2
  1201  000802  26DE               	addwf	postinc2,f,c
  1202  000804  CFDF F049          	movff	indf2,??_vfpfcnvrt+1
  1203  000808  0E00               	movlw	0
  1204  00080A  22DD               	addwfc	postdec2,f,c
  1205  00080C  C048  FFD9         	movff	??_vfpfcnvrt,fsr2l
  1206  000810  C049  FFDA         	movff	??_vfpfcnvrt+1,fsr2h
  1207  000814  CFDE F04C          	movff	postinc2,vfpfcnvrt@ll
  1208  000818  CFDD F04D          	movff	postdec2,vfpfcnvrt@ll+1
  1209  00081C  0E00               	movlw	0
  1210  00081E  BE4D               	btfsc	vfpfcnvrt@ll+1,7,c
  1211  000820  0EFF               	movlw	-1
  1212  000822  6E4E               	movwf	vfpfcnvrt@ll+2,c
  1213  000824  6E4F               	movwf	vfpfcnvrt@ll+3,c
  1214  000826  6E50               	movwf	vfpfcnvrt@ll+4,c
  1215  000828  6E51               	movwf	vfpfcnvrt@ll+5,c
  1216  00082A  6E52               	movwf	vfpfcnvrt@ll+6,c
  1217  00082C  6E53               	movwf	vfpfcnvrt@ll+7,c
  1218                           
  1219                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 830:       
      +                                return dtoa(fp, ll);
  1220  00082E  C042  F01E         	movff	vfpfcnvrt@fp,dtoa@fp
  1221  000832  C043  F01F         	movff	vfpfcnvrt@fp+1,dtoa@fp+1
  1222  000836  C04C  F020         	movff	vfpfcnvrt@ll,dtoa@d
  1223  00083A  C04D  F021         	movff	vfpfcnvrt@ll+1,dtoa@d+1
  1224  00083E  C04E  F022         	movff	vfpfcnvrt@ll+2,dtoa@d+2
  1225  000842  C04F  F023         	movff	vfpfcnvrt@ll+3,dtoa@d+3
  1226  000846  C050  F024         	movff	vfpfcnvrt@ll+4,dtoa@d+4
  1227  00084A  C051  F025         	movff	vfpfcnvrt@ll+5,dtoa@d+5
  1228  00084E  C052  F026         	movff	vfpfcnvrt@ll+6,dtoa@d+6
  1229  000852  C053  F027         	movff	vfpfcnvrt@ll+7,dtoa@d+7
  1230  000856  EC7B  F004         	call	_dtoa	;wreg free
  1231  00085A  C01E  F042         	movff	?_dtoa,?_vfpfcnvrt
  1232  00085E  C01F  F043         	movff	?_dtoa+1,?_vfpfcnvrt+1
  1233  000862  0012               	return	
  1234  000864                     l1844:
  1235                           
  1236                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1350:      
      +                             if ((*fmt)[0] == '%') {
  1237  000864  C044  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1238  000868  C045  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1239  00086C  CFDE FFF6          	movff	postinc2,tblptrl
  1240  000870  CFDD FFF7          	movff	postdec2,tblptrh
  1241  000874                     	if	0	;tblptru may be non-zero
  1242  000874                     	endif
  1243  000874                     	if	0	;tblptru may be non-zero
  1244  000874                     	endif
  1245  000874  0008               	tblrd		*
  1246  000876  50F5               	movf	tablat,w,c
  1247  000878  0A25               	xorlw	37
  1248  00087A  A4D8               	btfss	status,2,c
  1249  00087C  D016               	goto	l1854
  1250                           
  1251                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1351:      
      +                                 ++*fmt;
  1252  00087E  C044  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1253  000882  C045  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1254  000886  2ADE               	incf	postinc2,f,c
  1255  000888  0E00               	movlw	0
  1256  00088A  22DD               	addwfc	postdec2,f,c
  1257                           
  1258                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1352:      
      +                                 fputc((int)'%', fp);
  1259  00088C  0E00               	movlw	0
  1260  00088E  6E04               	movwf	fputc@c+1,c
  1261  000890  0E25               	movlw	37
  1262  000892  6E03               	movwf	fputc@c,c
  1263  000894  C042  F005         	movff	vfpfcnvrt@fp,fputc@fp
  1264  000898  C043  F006         	movff	vfpfcnvrt@fp+1,fputc@fp+1
  1265  00089C  EC34  F008         	call	_fputc	;wreg free
  1266  0008A0                     l1850:
  1267                           
  1268                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1353:      
      +                                 return 1;
  1269  0008A0  0E00               	movlw	0
  1270  0008A2  6E43               	movwf	?_vfpfcnvrt+1,c
  1271  0008A4  0E01               	movlw	1
  1272  0008A6  6E42               	movwf	?_vfpfcnvrt,c
  1273  0008A8  0012               	return	
  1274  0008AA                     l1854:
  1275                           
  1276                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1357:      
      +                             ++*fmt;
  1277  0008AA  C044  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1278  0008AE  C045  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1279  0008B2  2ADE               	incf	postinc2,f,c
  1280  0008B4  0E00               	movlw	0
  1281  0008B6  22DD               	addwfc	postdec2,f,c
  1282                           
  1283                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1358:      
      +                             return 0;
  1284  0008B8  0E00               	movlw	0
  1285  0008BA  6E43               	movwf	?_vfpfcnvrt+1,c
  1286  0008BC  0E00               	movlw	0
  1287  0008BE  6E42               	movwf	?_vfpfcnvrt,c
  1288  0008C0  0012               	return	
  1289  0008C2                     l1860:
  1290                           
  1291                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1362:     f
      +                          putc((int)(*fmt)[0], fp);
  1292  0008C2  C044  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1293  0008C6  C045  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1294  0008CA  CFDE FFF6          	movff	postinc2,tblptrl
  1295  0008CE  CFDD FFF7          	movff	postdec2,tblptrh
  1296  0008D2                     	if	0	;tblptru may be non-zero
  1297  0008D2                     	endif
  1298  0008D2                     	if	0	;tblptru may be non-zero
  1299  0008D2                     	endif
  1300  0008D2  0008               	tblrd		*
  1301  0008D4  50F5               	movf	tablat,w,c
  1302  0008D6  6E03               	movwf	fputc@c,c
  1303  0008D8  6A04               	clrf	fputc@c+1,c
  1304  0008DA  C042  F005         	movff	vfpfcnvrt@fp,fputc@fp
  1305  0008DE  C043  F006         	movff	vfpfcnvrt@fp+1,fputc@fp+1
  1306  0008E2  EC34  F008         	call	_fputc	;wreg free
  1307                           
  1308                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1363:     +
      +                          +*fmt;
  1309  0008E6  C044  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1310  0008EA  C045  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1311  0008EE  2ADE               	incf	postinc2,f,c
  1312  0008F0  0E00               	movlw	0
  1313  0008F2  22DD               	addwfc	postdec2,f,c
  1314  0008F4  D7D5               	goto	l1850
  1315  0008F6                     __end_of_vfpfcnvrt:
  1316                           	opt callstack 0
  1317                           
  1318 ;; *************** function _dtoa *****************
  1319 ;; Defined at:
  1320 ;;		line 274 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c"
  1321 ;; Parameters:    Size  Location     Type
  1322 ;;  fp              2   29[COMRAM] PTR struct _IO_FILE
  1323 ;;		 -> sprintf@f(6), 
  1324 ;;  d               8   31[COMRAM] long long 
  1325 ;; Auto vars:     Size  Location     Type
  1326 ;;  n               8   55[COMRAM] long long 
  1327 ;;  i               2   63[COMRAM] int 
  1328 ;;  s               2   53[COMRAM] int 
  1329 ;;  w               2   51[COMRAM] int 
  1330 ;;  p               2   49[COMRAM] int 
  1331 ;; Return value:  Size  Location     Type
  1332 ;;                  2   29[COMRAM] int 
  1333 ;; Registers used:
  1334 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  1335 ;; Tracked objects:
  1336 ;;		On entry : 0/0
  1337 ;;		On exit  : 0/0
  1338 ;;		Unchanged: 0/0
  1339 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1340 ;;      Params:        10       0       0       0       0       0       0
  1341 ;;      Locals:        18       0       0       0       0       0       0
  1342 ;;      Temps:          8       0       0       0       0       0       0
  1343 ;;      Totals:        36       0       0       0       0       0       0
  1344 ;;Total ram usage:       36 bytes
  1345 ;; Hardware stack levels used:    1
  1346 ;; Hardware stack levels required when called:    5
  1347 ;; This function calls:
  1348 ;;		___aodiv
  1349 ;;		___aomod
  1350 ;;		_abs
  1351 ;;		_pad
  1352 ;; This function is called by:
  1353 ;;		_vfpfcnvrt
  1354 ;; This function uses a non-reentrant model
  1355 ;;
  1356                           
  1357                           	psect	text4
  1358  0008F6                     __ptext4:
  1359                           	opt callstack 0
  1360  0008F6                     _dtoa:
  1361                           	opt callstack 22
  1362                           
  1363                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 274: static
      +                           int dtoa(FILE *fp, long long d);C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\
      +                          c99\common\doprnt.c: 275: {;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\c
      +                          ommon\doprnt.c: 276:     int i, p, s, w;;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\
      +                          sources\c99\common\doprnt.c: 277:     long long n;;C:\Program Files (x86)\Microchip\xc8\
      +                          v2.05\pic\sources\c99\common\doprnt.c: 280:     n = d;
  1364                           
  1365                           ;incstack = 0
  1366  0008F6  C020  F038         	movff	dtoa@d,dtoa@n
  1367  0008FA  C021  F039         	movff	dtoa@d+1,dtoa@n+1
  1368  0008FE  C022  F03A         	movff	dtoa@d+2,dtoa@n+2
  1369  000902  C023  F03B         	movff	dtoa@d+3,dtoa@n+3
  1370  000906  C024  F03C         	movff	dtoa@d+4,dtoa@n+4
  1371  00090A  C025  F03D         	movff	dtoa@d+5,dtoa@n+5
  1372  00090E  C026  F03E         	movff	dtoa@d+6,dtoa@n+6
  1373  000912  C027  F03F         	movff	dtoa@d+7,dtoa@n+7
  1374                           
  1375                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 281:     s 
      +                          = n < 0 ? 1 : 0;
  1376  000916  AE3F               	btfss	dtoa@n+7,7,c
  1377  000918  D002               	goto	u1030
  1378  00091A  0E01               	movlw	1
  1379  00091C  D001               	goto	u1040
  1380  00091E                     u1030:
  1381  00091E  0E00               	movlw	0
  1382  000920                     u1040:
  1383  000920  6E36               	movwf	dtoa@s,c
  1384  000922  6A37               	clrf	dtoa@s+1,c
  1385                           
  1386                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 282:     if
      +                           (s) {
  1387  000924  5036               	movf	dtoa@s,w,c
  1388  000926  1037               	iorwf	dtoa@s+1,w,c
  1389  000928  B4D8               	btfsc	status,2,c
  1390  00092A  D010               	goto	l1658
  1391                           
  1392                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 283:       
      +                            n = -n;
  1393  00092C  1E3F               	comf	dtoa@n+7,f,c
  1394  00092E  1E3E               	comf	dtoa@n+6,f,c
  1395  000930  1E3D               	comf	dtoa@n+5,f,c
  1396  000932  1E3C               	comf	dtoa@n+4,f,c
  1397  000934  1E3B               	comf	dtoa@n+3,f,c
  1398  000936  1E3A               	comf	dtoa@n+2,f,c
  1399  000938  1E39               	comf	dtoa@n+1,f,c
  1400  00093A  6C38               	negf	dtoa@n,c
  1401  00093C  0E00               	movlw	0
  1402  00093E  2239               	addwfc	dtoa@n+1,f,c
  1403  000940  223A               	addwfc	dtoa@n+2,f,c
  1404  000942  223B               	addwfc	dtoa@n+3,f,c
  1405  000944  223C               	addwfc	dtoa@n+4,f,c
  1406  000946  223D               	addwfc	dtoa@n+5,f,c
  1407  000948  223E               	addwfc	dtoa@n+6,f,c
  1408  00094A  223F               	addwfc	dtoa@n+7,f,c
  1409  00094C                     l1658:
  1410                           
  1411                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 287:     if
      +                           (!(prec < 0)) {
  1412  00094C  AE75               	btfss	_prec+1,7,c
  1413                           
  1414                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 288:       
      +                            flags &= ~(1 << 1);
  1415  00094E  9276               	bcf	_flags,1,c
  1416                           
  1417                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 290:     p 
      +                          = (0 < prec) ? prec : 1;
  1418  000950  BE75               	btfsc	_prec+1,7,c
  1419  000952  D005               	goto	u1070
  1420  000954  5075               	movf	_prec+1,w,c
  1421  000956  E108               	bnz	l134
  1422  000958  0474               	decf	_prec,w,c
  1423  00095A  B0D8               	btfsc	status,0,c
  1424  00095C  D005               	goto	l134
  1425  00095E                     u1070:
  1426  00095E  0E00               	movlw	0
  1427  000960  6E33               	movwf	dtoa@p+1,c
  1428  000962  0E01               	movlw	1
  1429  000964  6E32               	movwf	dtoa@p,c
  1430  000966  D004               	goto	l136
  1431  000968                     l134:
  1432  000968  C074  F032         	movff	_prec,dtoa@p
  1433  00096C  C075  F033         	movff	_prec+1,dtoa@p+1
  1434  000970                     l136:
  1435                           
  1436                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 291:     w 
      +                          = width;
  1437  000970  C072  F034         	movff	_width,dtoa@w
  1438  000974  C073  F035         	movff	_width+1,dtoa@w+1
  1439                           
  1440                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 292:     if
      +                           (s || (flags & (1 << 2))) {
  1441  000978  5036               	movf	dtoa@s,w,c
  1442  00097A  1037               	iorwf	dtoa@s+1,w,c
  1443  00097C  A4D8               	btfss	status,2,c
  1444  00097E  D002               	goto	u1090
  1445  000980  A476               	btfss	_flags,2,c
  1446  000982  D003               	goto	l1672
  1447  000984                     u1090:
  1448                           
  1449                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 293:       
      +                            --w;
  1450  000984  0634               	decf	dtoa@w,f,c
  1451  000986  A0D8               	btfss	status,0,c
  1452  000988  0635               	decf	dtoa@w+1,f,c
  1453  00098A                     l1672:
  1454                           
  1455                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 297:     i 
      +                          = sizeof(dbuf) - 1;
  1456  00098A  0E00               	movlw	0
  1457  00098C  6E41               	movwf	dtoa@i+1,c
  1458  00098E  0E1F               	movlw	31
  1459  000990  6E40               	movwf	dtoa@i,c
  1460                           
  1461                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 298:     db
      +                          uf[i] = '\0';
  1462  000992  0E00               	movlw	0
  1463  000994  0100               	movlb	0	; () banked
  1464  000996  6F9F               	movwf	(_dbuf+31)& (0+255),b
  1465                           
  1466                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 299:     wh
      +                          ile (!(i < 1) && (n || (0 < p) || ((0 < w) && (flags & (1 << 1))))) {
  1467  000998  D07C               	goto	l1686
  1468  00099A                     l1676:
  1469                           
  1470                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 300:       
      +                            --i;
  1471  00099A  0640               	decf	dtoa@i,f,c
  1472  00099C  A0D8               	btfss	status,0,c
  1473  00099E  0641               	decf	dtoa@i+1,f,c
  1474                           
  1475                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 301:       
      +                            dbuf[i] = '0' + abs(n % 10);
  1476  0009A0  0E80               	movlw	low _dbuf
  1477  0009A2  2440               	addwf	dtoa@i,w,c
  1478  0009A4  6ED9               	movwf	fsr2l,c
  1479  0009A6  0E00               	movlw	high _dbuf
  1480  0009A8  2041               	addwfc	dtoa@i+1,w,c
  1481  0009AA  6EDA               	movwf	fsr2h,c
  1482  0009AC  C038  F003         	movff	dtoa@n,___aomod@dividend
  1483  0009B0  C039  F004         	movff	dtoa@n+1,___aomod@dividend+1
  1484  0009B4  C03A  F005         	movff	dtoa@n+2,___aomod@dividend+2
  1485  0009B8  C03B  F006         	movff	dtoa@n+3,___aomod@dividend+3
  1486  0009BC  C03C  F007         	movff	dtoa@n+4,___aomod@dividend+4
  1487  0009C0  C03D  F008         	movff	dtoa@n+5,___aomod@dividend+5
  1488  0009C4  C03E  F009         	movff	dtoa@n+6,___aomod@dividend+6
  1489  0009C8  C03F  F00A         	movff	dtoa@n+7,___aomod@dividend+7
  1490  0009CC  0E0A               	movlw	10
  1491  0009CE  6E0B               	movwf	___aomod@divisor,c
  1492  0009D0  0E00               	movlw	0
  1493  0009D2  6E0C               	movwf	___aomod@divisor+1,c
  1494  0009D4  0E00               	movlw	0
  1495  0009D6  6E0D               	movwf	___aomod@divisor+2,c
  1496  0009D8  0E00               	movlw	0
  1497  0009DA  6E0E               	movwf	___aomod@divisor+3,c
  1498  0009DC  0E00               	movlw	0
  1499  0009DE  6E0F               	movwf	___aomod@divisor+4,c
  1500  0009E0  0E00               	movlw	0
  1501  0009E2  6E10               	movwf	___aomod@divisor+5,c
  1502  0009E4  0E00               	movlw	0
  1503  0009E6  6E11               	movwf	___aomod@divisor+6,c
  1504  0009E8  0E00               	movlw	0
  1505  0009EA  6E12               	movwf	___aomod@divisor+7,c
  1506  0009EC  ECE0  F006         	call	___aomod	;wreg free
  1507  0009F0  C003  F028         	movff	?___aomod,??_dtoa
  1508  0009F4  C004  F029         	movff	?___aomod+1,??_dtoa+1
  1509  0009F8  C005  F02A         	movff	?___aomod+2,??_dtoa+2
  1510  0009FC  C006  F02B         	movff	?___aomod+3,??_dtoa+3
  1511  000A00  C007  F02C         	movff	?___aomod+4,??_dtoa+4
  1512  000A04  C008  F02D         	movff	?___aomod+5,??_dtoa+5
  1513  000A08  C009  F02E         	movff	?___aomod+6,??_dtoa+6
  1514  000A0C  C00A  F02F         	movff	?___aomod+7,??_dtoa+7
  1515  000A10  C028  F015         	movff	??_dtoa,abs@a
  1516  000A14  C02A  F016         	movff	??_dtoa+2,abs@a+1
  1517  000A18  EC12  F00A         	call	_abs	;wreg free
  1518  000A1C  5015               	movf	?_abs,w,c
  1519  000A1E  0F30               	addlw	48
  1520  000A20  6EDF               	movwf	indf2,c
  1521                           
  1522                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 302:       
      +                            --p;
  1523  000A22  0632               	decf	dtoa@p,f,c
  1524  000A24  A0D8               	btfss	status,0,c
  1525  000A26  0633               	decf	dtoa@p+1,f,c
  1526                           
  1527                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 303:       
      +                            --w;
  1528  000A28  0634               	decf	dtoa@w,f,c
  1529  000A2A  A0D8               	btfss	status,0,c
  1530  000A2C  0635               	decf	dtoa@w+1,f,c
  1531                           
  1532                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 304:       
      +                            n = n / 10;
  1533  000A2E  C038  F003         	movff	dtoa@n,___aodiv@dividend
  1534  000A32  C039  F004         	movff	dtoa@n+1,___aodiv@dividend+1
  1535  000A36  C03A  F005         	movff	dtoa@n+2,___aodiv@dividend+2
  1536  000A3A  C03B  F006         	movff	dtoa@n+3,___aodiv@dividend+3
  1537  000A3E  C03C  F007         	movff	dtoa@n+4,___aodiv@dividend+4
  1538  000A42  C03D  F008         	movff	dtoa@n+5,___aodiv@dividend+5
  1539  000A46  C03E  F009         	movff	dtoa@n+6,___aodiv@dividend+6
  1540  000A4A  C03F  F00A         	movff	dtoa@n+7,___aodiv@dividend+7
  1541  000A4E  0E0A               	movlw	10
  1542  000A50  6E0B               	movwf	___aodiv@divisor,c
  1543  000A52  0E00               	movlw	0
  1544  000A54  6E0C               	movwf	___aodiv@divisor+1,c
  1545  000A56  0E00               	movlw	0
  1546  000A58  6E0D               	movwf	___aodiv@divisor+2,c
  1547  000A5A  0E00               	movlw	0
  1548  000A5C  6E0E               	movwf	___aodiv@divisor+3,c
  1549  000A5E  0E00               	movlw	0
  1550  000A60  6E0F               	movwf	___aodiv@divisor+4,c
  1551  000A62  0E00               	movlw	0
  1552  000A64  6E10               	movwf	___aodiv@divisor+5,c
  1553  000A66  0E00               	movlw	0
  1554  000A68  6E11               	movwf	___aodiv@divisor+6,c
  1555  000A6A  0E00               	movlw	0
  1556  000A6C  6E12               	movwf	___aodiv@divisor+7,c
  1557  000A6E  EC9C  F005         	call	___aodiv	;wreg free
  1558  000A72  C003  F038         	movff	?___aodiv,dtoa@n
  1559  000A76  C004  F039         	movff	?___aodiv+1,dtoa@n+1
  1560  000A7A  C005  F03A         	movff	?___aodiv+2,dtoa@n+2
  1561  000A7E  C006  F03B         	movff	?___aodiv+3,dtoa@n+3
  1562  000A82  C007  F03C         	movff	?___aodiv+4,dtoa@n+4
  1563  000A86  C008  F03D         	movff	?___aodiv+5,dtoa@n+5
  1564  000A8A  C009  F03E         	movff	?___aodiv+6,dtoa@n+6
  1565  000A8E  C00A  F03F         	movff	?___aodiv+7,dtoa@n+7
  1566  000A92                     l1686:
  1567                           
  1568                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 299:     wh
      +                          ile (!(i < 1) && (n || (0 < p) || ((0 < w) && (flags & (1 << 1))))) {
  1569  000A92  BE41               	btfsc	dtoa@i+1,7,c
  1570  000A94  D01F               	goto	u1140
  1571  000A96  5041               	movf	dtoa@i+1,w,c
  1572  000A98  E103               	bnz	u1100
  1573  000A9A  0440               	decf	dtoa@i,w,c
  1574  000A9C  A0D8               	btfss	status,0,c
  1575  000A9E  D01A               	goto	u1140
  1576  000AA0                     u1100:
  1577  000AA0  5038               	movf	dtoa@n,w,c
  1578  000AA2  1039               	iorwf	dtoa@n+1,w,c
  1579  000AA4  103A               	iorwf	dtoa@n+2,w,c
  1580  000AA6  103B               	iorwf	dtoa@n+3,w,c
  1581  000AA8  103C               	iorwf	dtoa@n+4,w,c
  1582  000AAA  103D               	iorwf	dtoa@n+5,w,c
  1583  000AAC  103E               	iorwf	dtoa@n+6,w,c
  1584  000AAE  103F               	iorwf	dtoa@n+7,w,c
  1585  000AB0  A4D8               	btfss	status,2,c
  1586  000AB2  D773               	goto	l1676
  1587  000AB4  BE33               	btfsc	dtoa@p+1,7,c
  1588  000AB6  D005               	goto	u1120
  1589  000AB8  5033               	movf	dtoa@p+1,w,c
  1590  000ABA  E102               	bnz	u1121
  1591  000ABC  0432               	decf	dtoa@p,w,c
  1592  000ABE  B0D8               	btfsc	status,0,c
  1593  000AC0                     u1121:
  1594  000AC0  D76C               	goto	l1676
  1595  000AC2                     u1120:
  1596  000AC2  BE35               	btfsc	dtoa@w+1,7,c
  1597  000AC4  D007               	goto	u1140
  1598  000AC6  5035               	movf	dtoa@w+1,w,c
  1599  000AC8  E103               	bnz	u1130
  1600  000ACA  0434               	decf	dtoa@w,w,c
  1601  000ACC  A0D8               	btfss	status,0,c
  1602  000ACE  D002               	goto	u1140
  1603  000AD0                     u1130:
  1604  000AD0  B276               	btfsc	_flags,1,c
  1605  000AD2  D763               	goto	l1676
  1606  000AD4                     u1140:
  1607                           
  1608                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 308:     if
      +                           (s || (flags & (1 << 2))) {
  1609  000AD4  5036               	movf	dtoa@s,w,c
  1610  000AD6  1037               	iorwf	dtoa@s+1,w,c
  1611  000AD8  A4D8               	btfss	status,2,c
  1612  000ADA  D002               	goto	u1160
  1613  000ADC  A476               	btfss	_flags,2,c
  1614  000ADE  D017               	goto	l1710
  1615  000AE0                     u1160:
  1616                           
  1617                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 309:       
      +                            --i;
  1618  000AE0  0640               	decf	dtoa@i,f,c
  1619  000AE2  A0D8               	btfss	status,0,c
  1620  000AE4  0641               	decf	dtoa@i+1,f,c
  1621                           
  1622                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 310:       
      +                            dbuf[i] = s ? '-' : '+';
  1623  000AE6  5036               	movf	dtoa@s,w,c
  1624  000AE8  1037               	iorwf	dtoa@s+1,w,c
  1625  000AEA  A4D8               	btfss	status,2,c
  1626  000AEC  D004               	goto	l1706
  1627  000AEE  0E00               	movlw	0
  1628  000AF0  6E31               	movwf	_dtoa$343+1,c
  1629  000AF2  0E2B               	movlw	43
  1630  000AF4  D003               	goto	L2
  1631  000AF6                     l1706:
  1632  000AF6  0E00               	movlw	0
  1633  000AF8  6E31               	movwf	_dtoa$343+1,c
  1634  000AFA  0E2D               	movlw	45
  1635  000AFC                     L2:
  1636  000AFC  6E30               	movwf	_dtoa$343,c
  1637  000AFE  0E80               	movlw	low _dbuf
  1638  000B00  2440               	addwf	dtoa@i,w,c
  1639  000B02  6ED9               	movwf	fsr2l,c
  1640  000B04  0E00               	movlw	high _dbuf
  1641  000B06  2041               	addwfc	dtoa@i+1,w,c
  1642  000B08  6EDA               	movwf	fsr2h,c
  1643  000B0A  C030  FFDF         	movff	_dtoa$343,indf2
  1644  000B0E                     l1710:
  1645                           
  1646                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 314:     re
      +                          turn pad(fp, &dbuf[i], w);
  1647  000B0E  C01E  F013         	movff	dtoa@fp,pad@fp
  1648  000B12  C01F  F014         	movff	dtoa@fp+1,pad@fp+1
  1649  000B16  0E80               	movlw	low _dbuf
  1650  000B18  2440               	addwf	dtoa@i,w,c
  1651  000B1A  6E15               	movwf	pad@buf,c
  1652  000B1C  0E00               	movlw	high _dbuf
  1653  000B1E  2041               	addwfc	dtoa@i+1,w,c
  1654  000B20  6E16               	movwf	pad@buf+1,c
  1655  000B22  C034  F017         	movff	dtoa@w,pad@p
  1656  000B26  C035  F018         	movff	dtoa@w+1,pad@p+1
  1657  000B2A  EC84  F008         	call	_pad	;wreg free
  1658  000B2E  C013  F01E         	movff	?_pad,?_dtoa
  1659  000B32  C014  F01F         	movff	?_pad+1,?_dtoa+1
  1660  000B36  0012               	return		;funcret
  1661  000B38                     __end_of_dtoa:
  1662                           	opt callstack 0
  1663                           
  1664 ;; *************** function _pad *****************
  1665 ;; Defined at:
  1666 ;;		line 72 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c"
  1667 ;; Parameters:    Size  Location     Type
  1668 ;;  fp              2   18[COMRAM] PTR struct _IO_FILE
  1669 ;;		 -> sprintf@f(6), 
  1670 ;;  buf             2   20[COMRAM] PTR unsigned char 
  1671 ;;		 -> dbuf(32), 
  1672 ;;  p               2   22[COMRAM] int 
  1673 ;; Auto vars:     Size  Location     Type
  1674 ;;  w               2   27[COMRAM] int 
  1675 ;;  i               2   25[COMRAM] int 
  1676 ;; Return value:  Size  Location     Type
  1677 ;;                  2   18[COMRAM] int 
  1678 ;; Registers used:
  1679 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  1680 ;; Tracked objects:
  1681 ;;		On entry : 0/0
  1682 ;;		On exit  : 0/0
  1683 ;;		Unchanged: 0/0
  1684 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1685 ;;      Params:         6       0       0       0       0       0       0
  1686 ;;      Locals:         4       0       0       0       0       0       0
  1687 ;;      Temps:          1       0       0       0       0       0       0
  1688 ;;      Totals:        11       0       0       0       0       0       0
  1689 ;;Total ram usage:       11 bytes
  1690 ;; Hardware stack levels used:    1
  1691 ;; Hardware stack levels required when called:    4
  1692 ;; This function calls:
  1693 ;;		_fputc
  1694 ;;		_fputs
  1695 ;;		_strlen
  1696 ;; This function is called by:
  1697 ;;		_dtoa
  1698 ;; This function uses a non-reentrant model
  1699 ;;
  1700                           
  1701                           	psect	text5
  1702  001108                     __ptext5:
  1703                           	opt callstack 0
  1704  001108                     _pad:
  1705                           	opt callstack 22
  1706                           
  1707                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 72: static 
      +                          int pad(FILE *fp, char *buf, int p);C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sourc
      +                          es\c99\common\doprnt.c: 73: {;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99
      +                          \common\doprnt.c: 74:     int i, w;;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sourc
      +                          es\c99\common\doprnt.c: 77:     if (flags & (1 << 0)) {
  1708                           
  1709                           ;incstack = 0
  1710  001108  A076               	btfss	_flags,0,c
  1711  00110A  D00A               	goto	l1516
  1712                           
  1713                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 78:        
      +                           fputs((const char *)buf, fp);
  1714  00110C  C015  F00C         	movff	pad@buf,fputs@s
  1715  001110  C016  F00D         	movff	pad@buf+1,fputs@s+1
  1716  001114  C013  F00E         	movff	pad@fp,fputs@fp
  1717  001118  C014  F00F         	movff	pad@fp+1,fputs@fp+1
  1718  00111C  ECF6  F009         	call	_fputs	;wreg free
  1719  001120                     l1516:
  1720                           
  1721                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 82:     w =
      +                           (p < 0) ? 0 : p;
  1722  001120  BE18               	btfsc	pad@p+1,7,c
  1723  001122  D005               	goto	l1520
  1724  001124  C017  F01C         	movff	pad@p,pad@w
  1725  001128  C018  F01D         	movff	pad@p+1,pad@w+1
  1726  00112C  D004               	goto	l123
  1727  00112E                     l1520:
  1728  00112E  0E00               	movlw	0
  1729  001130  6E1D               	movwf	pad@w+1,c
  1730  001132  0E00               	movlw	0
  1731  001134  6E1C               	movwf	pad@w,c
  1732  001136                     l123:
  1733                           
  1734                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 83:     i =
      +                           0;
  1735  001136  0E00               	movlw	0
  1736  001138  6E1B               	movwf	pad@i+1,c
  1737  00113A  0E00               	movlw	0
  1738  00113C  6E1A               	movwf	pad@i,c
  1739                           
  1740                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 84:     whi
      +                          le (i < w) {
  1741  00113E  D00C               	goto	l1526
  1742  001140                     l1522:
  1743                           
  1744                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 85:        
      +                           fputc(' ', fp);
  1745  001140  0E00               	movlw	0
  1746  001142  6E04               	movwf	fputc@c+1,c
  1747  001144  0E20               	movlw	32
  1748  001146  6E03               	movwf	fputc@c,c
  1749  001148  C013  F005         	movff	pad@fp,fputc@fp
  1750  00114C  C014  F006         	movff	pad@fp+1,fputc@fp+1
  1751  001150  EC34  F008         	call	_fputc	;wreg free
  1752                           
  1753                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 86:        
      +                           ++i;
  1754  001154  4A1A               	infsnz	pad@i,f,c
  1755  001156  2A1B               	incf	pad@i+1,f,c
  1756  001158                     l1526:
  1757                           
  1758                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 84:     whi
      +                          le (i < w) {
  1759  001158  501C               	movf	pad@w,w,c
  1760  00115A  5C1A               	subwf	pad@i,w,c
  1761  00115C  501B               	movf	pad@i+1,w,c
  1762  00115E  0A80               	xorlw	128
  1763  001160  6E19               	movwf	??_pad& (0+255),c
  1764  001162  501D               	movf	pad@w+1,w,c
  1765  001164  0A80               	xorlw	128
  1766  001166  5819               	subwfb	??_pad& (0+255),w,c
  1767  001168  A0D8               	btfss	status,0,c
  1768  00116A  D7EA               	goto	l1522
  1769                           
  1770                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 90:     if 
      +                          (!(flags & (1 << 0))) {
  1771  00116C  B076               	btfsc	_flags,0,c
  1772  00116E  D00A               	goto	l1530
  1773                           
  1774                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 91:        
      +                           fputs((const char *)buf, fp);
  1775  001170  C015  F00C         	movff	pad@buf,fputs@s
  1776  001174  C016  F00D         	movff	pad@buf+1,fputs@s+1
  1777  001178  C013  F00E         	movff	pad@fp,fputs@fp
  1778  00117C  C014  F00F         	movff	pad@fp+1,fputs@fp+1
  1779  001180  ECF6  F009         	call	_fputs	;wreg free
  1780  001184                     l1530:
  1781                           
  1782                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 94:     ret
      +                          urn strlen(buf) + w;
  1783  001184  C015  F003         	movff	pad@buf,strlen@s
  1784  001188  C016  F004         	movff	pad@buf+1,strlen@s+1
  1785  00118C  EC43  F00A         	call	_strlen	;wreg free
  1786  001190  501C               	movf	pad@w,w,c
  1787  001192  2403               	addwf	?_strlen,w,c
  1788  001194  6E13               	movwf	?_pad,c
  1789  001196  501D               	movf	pad@w+1,w,c
  1790  001198  2004               	addwfc	?_strlen+1,w,c
  1791  00119A  6E14               	movwf	?_pad+1,c
  1792  00119C  0012               	return		;funcret
  1793  00119E                     __end_of_pad:
  1794                           	opt callstack 0
  1795                           
  1796 ;; *************** function _strlen *****************
  1797 ;; Defined at:
  1798 ;;		line 12 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\strlen.c"
  1799 ;; Parameters:    Size  Location     Type
  1800 ;;  s               2    2[COMRAM] PTR const unsigned char 
  1801 ;;		 -> dbuf(32), 
  1802 ;; Auto vars:     Size  Location     Type
  1803 ;;  a               2    4[COMRAM] PTR const unsigned char 
  1804 ;;		 -> dbuf(32), 
  1805 ;; Return value:  Size  Location     Type
  1806 ;;                  2    2[COMRAM] unsigned int 
  1807 ;; Registers used:
  1808 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  1809 ;; Tracked objects:
  1810 ;;		On entry : 0/0
  1811 ;;		On exit  : 0/0
  1812 ;;		Unchanged: 0/0
  1813 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1814 ;;      Params:         2       0       0       0       0       0       0
  1815 ;;      Locals:         2       0       0       0       0       0       0
  1816 ;;      Temps:          0       0       0       0       0       0       0
  1817 ;;      Totals:         4       0       0       0       0       0       0
  1818 ;;Total ram usage:        4 bytes
  1819 ;; Hardware stack levels used:    1
  1820 ;; Hardware stack levels required when called:    1
  1821 ;; This function calls:
  1822 ;;		Nothing
  1823 ;; This function is called by:
  1824 ;;		_pad
  1825 ;; This function uses a non-reentrant model
  1826 ;;
  1827                           
  1828                           	psect	text6
  1829  001486                     __ptext6:
  1830                           	opt callstack 0
  1831  001486                     _strlen:
  1832                           	opt callstack 24
  1833                           
  1834                           ;incstack = 0
  1835  001486  C003  F005         	movff	strlen@s,strlen@a
  1836  00148A  C004  F006         	movff	strlen@s+1,strlen@a+1
  1837  00148E  D002               	goto	l1506
  1838  001490                     l1504:
  1839  001490  4A03               	infsnz	strlen@s,f,c
  1840  001492  2A04               	incf	strlen@s+1,f,c
  1841  001494                     l1506:
  1842  001494  C003  FFD9         	movff	strlen@s,fsr2l
  1843  001498  C004  FFDA         	movff	strlen@s+1,fsr2h
  1844  00149C  50DF               	movf	indf2,w,c
  1845  00149E  A4D8               	btfss	status,2,c
  1846  0014A0  D7F7               	goto	l1504
  1847  0014A2  5005               	movf	strlen@a,w,c
  1848  0014A4  5C03               	subwf	strlen@s,w,c
  1849  0014A6  6E03               	movwf	?_strlen,c
  1850  0014A8  5006               	movf	strlen@a+1,w,c
  1851  0014AA  5804               	subwfb	strlen@s+1,w,c
  1852  0014AC  6E04               	movwf	?_strlen+1,c
  1853  0014AE  0012               	return		;funcret
  1854  0014B0                     __end_of_strlen:
  1855                           	opt callstack 0
  1856                           
  1857 ;; *************** function _fputs *****************
  1858 ;; Defined at:
  1859 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\nf_fputs.c"
  1860 ;; Parameters:    Size  Location     Type
  1861 ;;  s               2   11[COMRAM] PTR const unsigned char 
  1862 ;;		 -> dbuf(32), 
  1863 ;;  fp              2   13[COMRAM] PTR struct _IO_FILE
  1864 ;;		 -> sprintf@f(6), 
  1865 ;; Auto vars:     Size  Location     Type
  1866 ;;  i               2   16[COMRAM] int 
  1867 ;;  c               1   15[COMRAM] unsigned char 
  1868 ;; Return value:  Size  Location     Type
  1869 ;;                  2   11[COMRAM] int 
  1870 ;; Registers used:
  1871 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  1872 ;; Tracked objects:
  1873 ;;		On entry : 0/0
  1874 ;;		On exit  : 0/0
  1875 ;;		Unchanged: 0/0
  1876 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1877 ;;      Params:         4       0       0       0       0       0       0
  1878 ;;      Locals:         3       0       0       0       0       0       0
  1879 ;;      Temps:          0       0       0       0       0       0       0
  1880 ;;      Totals:         7       0       0       0       0       0       0
  1881 ;;Total ram usage:        7 bytes
  1882 ;; Hardware stack levels used:    1
  1883 ;; Hardware stack levels required when called:    3
  1884 ;; This function calls:
  1885 ;;		_fputc
  1886 ;; This function is called by:
  1887 ;;		_pad
  1888 ;; This function uses a non-reentrant model
  1889 ;;
  1890                           
  1891                           	psect	text7
  1892  0013EC                     __ptext7:
  1893                           	opt callstack 0
  1894  0013EC                     _fputs:
  1895                           	opt callstack 22
  1896                           
  1897                           ;incstack = 0
  1898  0013EC  0E00               	movlw	0
  1899  0013EE  6E12               	movwf	fputs@i+1,c
  1900  0013F0  0E00               	movlw	0
  1901  0013F2  6E11               	movwf	fputs@i,c
  1902  0013F4  D00B               	goto	l1500
  1903  0013F6                     l1496:
  1904  0013F6  C010  F003         	movff	fputs@c,fputc@c
  1905  0013FA  6A04               	clrf	fputc@c+1,c
  1906  0013FC  C00E  F005         	movff	fputs@fp,fputc@fp
  1907  001400  C00F  F006         	movff	fputs@fp+1,fputc@fp+1
  1908  001404  EC34  F008         	call	_fputc	;wreg free
  1909  001408  4A11               	infsnz	fputs@i,f,c
  1910  00140A  2A12               	incf	fputs@i+1,f,c
  1911  00140C                     l1500:
  1912  00140C  5011               	movf	fputs@i,w,c
  1913  00140E  240C               	addwf	fputs@s,w,c
  1914  001410  6ED9               	movwf	fsr2l,c
  1915  001412  5012               	movf	fputs@i+1,w,c
  1916  001414  200D               	addwfc	fputs@s+1,w,c
  1917  001416  6EDA               	movwf	fsr2h,c
  1918  001418  50DF               	movf	indf2,w,c
  1919  00141A  6E10               	movwf	fputs@c,c
  1920  00141C  5010               	movf	fputs@c,w,c
  1921  00141E  B4D8               	btfsc	status,2,c
  1922  001420  0012               	return	
  1923  001422  D7E9               	goto	l1496
  1924  001424                     __end_of_fputs:
  1925                           	opt callstack 0
  1926                           
  1927 ;; *************** function _fputc *****************
  1928 ;; Defined at:
  1929 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\nf_fputc.c"
  1930 ;; Parameters:    Size  Location     Type
  1931 ;;  c               2    2[COMRAM] int 
  1932 ;;  fp              2    4[COMRAM] PTR struct _IO_FILE
  1933 ;;		 -> sprintf@f(6), 
  1934 ;; Auto vars:     Size  Location     Type
  1935 ;;		None
  1936 ;; Return value:  Size  Location     Type
  1937 ;;                  2    2[COMRAM] int 
  1938 ;; Registers used:
  1939 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  1940 ;; Tracked objects:
  1941 ;;		On entry : 0/0
  1942 ;;		On exit  : 0/0
  1943 ;;		Unchanged: 0/0
  1944 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1945 ;;      Params:         4       0       0       0       0       0       0
  1946 ;;      Locals:         0       0       0       0       0       0       0
  1947 ;;      Temps:          5       0       0       0       0       0       0
  1948 ;;      Totals:         9       0       0       0       0       0       0
  1949 ;;Total ram usage:        9 bytes
  1950 ;; Hardware stack levels used:    1
  1951 ;; Hardware stack levels required when called:    2
  1952 ;; This function calls:
  1953 ;;		_putch
  1954 ;; This function is called by:
  1955 ;;		_pad
  1956 ;;		_vfpfcnvrt
  1957 ;;		_fputs
  1958 ;; This function uses a non-reentrant model
  1959 ;;
  1960                           
  1961                           	psect	text8
  1962  001068                     __ptext8:
  1963                           	opt callstack 0
  1964  001068                     _fputc:
  1965                           	opt callstack 25
  1966                           
  1967                           ;incstack = 0
  1968  001068  5005               	movf	fputc@fp,w,c
  1969  00106A  1006               	iorwf	fputc@fp+1,w,c
  1970  00106C  B4D8               	btfsc	status,2,c
  1971  00106E  D004               	goto	u750
  1972  001070  5005               	movf	fputc@fp,w,c
  1973  001072  1006               	iorwf	fputc@fp+1,w,c
  1974  001074  A4D8               	btfss	status,2,c
  1975  001076  D004               	goto	l1486
  1976  001078                     u750:
  1977  001078  5003               	movf	fputc@c,w,c
  1978  00107A  EC97  F00A         	call	_putch
  1979  00107E  0012               	return	
  1980  001080                     l1486:
  1981  001080  EE20 F004          	lfsr	2,4
  1982  001084  5005               	movf	fputc@fp,w,c
  1983  001086  26D9               	addwf	fsr2l,f,c
  1984  001088  5006               	movf	fputc@fp+1,w,c
  1985  00108A  22DA               	addwfc	fsr2h,f,c
  1986  00108C  50DE               	movf	postinc2,w,c
  1987  00108E  10DE               	iorwf	postinc2,w,c
  1988  001090  B4D8               	btfsc	status,2,c
  1989  001092  D016               	goto	u770
  1990  001094  EE20 F004          	lfsr	2,4
  1991  001098  5005               	movf	fputc@fp,w,c
  1992  00109A  26D9               	addwf	fsr2l,f,c
  1993  00109C  5006               	movf	fputc@fp+1,w,c
  1994  00109E  22DA               	addwfc	fsr2h,f,c
  1995  0010A0  EE10 F002          	lfsr	1,2
  1996  0010A4  5005               	movf	fputc@fp,w,c
  1997  0010A6  26E1               	addwf	fsr1l,f,c
  1998  0010A8  5006               	movf	fputc@fp+1,w,c
  1999  0010AA  22E2               	addwfc	fsr1h,f,c
  2000  0010AC  50DE               	movf	postinc2,w,c
  2001  0010AE  5CE6               	subwf	postinc1,w,c
  2002  0010B0  50E6               	movf	postinc1,w,c
  2003  0010B2  0A80               	xorlw	128
  2004  0010B4  6E0B               	movwf	(??_fputc+4)& (0+255),c
  2005  0010B6  50DE               	movf	postinc2,w,c
  2006  0010B8  0A80               	xorlw	128
  2007  0010BA  580B               	subwfb	(??_fputc+4)& (0+255),w,c
  2008  0010BC  B0D8               	btfsc	status,0,c
  2009  0010BE  0012               	return	
  2010  0010C0                     u770:
  2011  0010C0  EE20 F002          	lfsr	2,2
  2012  0010C4  5005               	movf	fputc@fp,w,c
  2013  0010C6  26D9               	addwf	fsr2l,f,c
  2014  0010C8  5006               	movf	fputc@fp+1,w,c
  2015  0010CA  22DA               	addwfc	fsr2h,f,c
  2016  0010CC  CFDE F007          	movff	postinc2,??_fputc
  2017  0010D0  CFDD F008          	movff	postdec2,??_fputc+1
  2018  0010D4  C005  FFD9         	movff	fputc@fp,fsr2l
  2019  0010D8  C006  FFDA         	movff	fputc@fp+1,fsr2h
  2020  0010DC  CFDE F009          	movff	postinc2,??_fputc+2
  2021  0010E0  CFDD F00A          	movff	postdec2,??_fputc+3
  2022  0010E4  5007               	movf	??_fputc,w,c
  2023  0010E6  2409               	addwf	??_fputc+2,w,c
  2024  0010E8  6ED9               	movwf	fsr2l,c
  2025  0010EA  5008               	movf	??_fputc+1,w,c
  2026  0010EC  200A               	addwfc	??_fputc+3,w,c
  2027  0010EE  6EDA               	movwf	fsr2h,c
  2028  0010F0  C003  FFDF         	movff	fputc@c,indf2
  2029  0010F4  EE20 F002          	lfsr	2,2
  2030  0010F8  5005               	movf	fputc@fp,w,c
  2031  0010FA  26D9               	addwf	fsr2l,f,c
  2032  0010FC  5006               	movf	fputc@fp+1,w,c
  2033  0010FE  22DA               	addwfc	fsr2h,f,c
  2034  001100  2ADE               	incf	postinc2,f,c
  2035  001102  0E00               	movlw	0
  2036  001104  22DD               	addwfc	postdec2,f,c
  2037  001106  0012               	return		;funcret
  2038  001108                     __end_of_fputc:
  2039                           	opt callstack 0
  2040                           
  2041 ;; *************** function _putch *****************
  2042 ;; Defined at:
  2043 ;;		line 7 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\putch.c"
  2044 ;; Parameters:    Size  Location     Type
  2045 ;;  c               1    wreg     unsigned char 
  2046 ;; Auto vars:     Size  Location     Type
  2047 ;;  c               1    0[COMRAM] unsigned char 
  2048 ;; Return value:  Size  Location     Type
  2049 ;;                  1    wreg      void 
  2050 ;; Registers used:
  2051 ;;		wreg
  2052 ;; Tracked objects:
  2053 ;;		On entry : 0/0
  2054 ;;		On exit  : 0/0
  2055 ;;		Unchanged: 0/0
  2056 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2057 ;;      Params:         0       0       0       0       0       0       0
  2058 ;;      Locals:         0       0       0       0       0       0       0
  2059 ;;      Temps:          0       0       0       0       0       0       0
  2060 ;;      Totals:         0       0       0       0       0       0       0
  2061 ;;Total ram usage:        0 bytes
  2062 ;; Hardware stack levels used:    1
  2063 ;; Hardware stack levels required when called:    1
  2064 ;; This function calls:
  2065 ;;		Nothing
  2066 ;; This function is called by:
  2067 ;;		_fputc
  2068 ;; This function uses a non-reentrant model
  2069 ;;
  2070                           
  2071                           	psect	text9
  2072  00152E                     __ptext9:
  2073                           	opt callstack 0
  2074  00152E                     _putch:
  2075                           	opt callstack 25
  2076                           
  2077                           ;incstack = 0
  2078  00152E  0012               	return		;funcret
  2079  001530                     __end_of_putch:
  2080                           	opt callstack 0
  2081                           
  2082 ;; *************** function _abs *****************
  2083 ;; Defined at:
  2084 ;;		line 1 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\abs.c"
  2085 ;; Parameters:    Size  Location     Type
  2086 ;;  a               2   20[COMRAM] int 
  2087 ;; Auto vars:     Size  Location     Type
  2088 ;;		None
  2089 ;; Return value:  Size  Location     Type
  2090 ;;                  2   20[COMRAM] int 
  2091 ;; Registers used:
  2092 ;;		wreg, status,2, status,0
  2093 ;; Tracked objects:
  2094 ;;		On entry : 0/0
  2095 ;;		On exit  : 0/0
  2096 ;;		Unchanged: 0/0
  2097 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2098 ;;      Params:         2       0       0       0       0       0       0
  2099 ;;      Locals:         0       0       0       0       0       0       0
  2100 ;;      Temps:          2       0       0       0       0       0       0
  2101 ;;      Totals:         4       0       0       0       0       0       0
  2102 ;;Total ram usage:        4 bytes
  2103 ;; Hardware stack levels used:    1
  2104 ;; Hardware stack levels required when called:    1
  2105 ;; This function calls:
  2106 ;;		Nothing
  2107 ;; This function is called by:
  2108 ;;		_dtoa
  2109 ;; This function uses a non-reentrant model
  2110 ;;
  2111                           
  2112                           	psect	text10
  2113  001424                     __ptext10:
  2114                           	opt callstack 0
  2115  001424                     _abs:
  2116                           	opt callstack 25
  2117                           
  2118                           ;incstack = 0
  2119  001424  BE16               	btfsc	abs@a+1,7,c
  2120  001426  D005               	goto	u840
  2121  001428  5016               	movf	abs@a+1,w,c
  2122  00142A  E110               	bnz	l868
  2123  00142C  0415               	decf	abs@a,w,c
  2124  00142E  B0D8               	btfsc	status,0,c
  2125  001430  D00D               	goto	l868
  2126  001432                     u840:
  2127  001432  C015  F017         	movff	abs@a,??_abs
  2128  001436  C016  F018         	movff	abs@a+1,??_abs+1
  2129  00143A  1E17               	comf	??_abs,f,c
  2130  00143C  1E18               	comf	??_abs+1,f,c
  2131  00143E  4A17               	infsnz	??_abs,f,c
  2132  001440  2A18               	incf	??_abs+1,f,c
  2133  001442  C017  F015         	movff	??_abs,?_abs
  2134  001446  C018  F016         	movff	??_abs+1,?_abs+1
  2135  00144A  0012               	return	
  2136  00144C                     l868:
  2137  00144C  C015  F015         	movff	abs@a,?_abs
  2138  001450  C016  F016         	movff	abs@a+1,?_abs+1
  2139  001454  0012               	return		;funcret
  2140  001456                     __end_of_abs:
  2141                           	opt callstack 0
  2142                           
  2143 ;; *************** function ___aomod *****************
  2144 ;; Defined at:
  2145 ;;		line 9 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\aomod.c"
  2146 ;; Parameters:    Size  Location     Type
  2147 ;;  dividend        8    2[COMRAM] long long 
  2148 ;;  divisor         8   10[COMRAM] long long 
  2149 ;; Auto vars:     Size  Location     Type
  2150 ;;  sign            1   19[COMRAM] unsigned char 
  2151 ;;  counter         1   18[COMRAM] unsigned char 
  2152 ;; Return value:  Size  Location     Type
  2153 ;;                  8    2[COMRAM] long long 
  2154 ;; Registers used:
  2155 ;;		wreg, status,2, status,0
  2156 ;; Tracked objects:
  2157 ;;		On entry : 0/0
  2158 ;;		On exit  : 0/0
  2159 ;;		Unchanged: 0/0
  2160 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2161 ;;      Params:        16       0       0       0       0       0       0
  2162 ;;      Locals:         2       0       0       0       0       0       0
  2163 ;;      Temps:          0       0       0       0       0       0       0
  2164 ;;      Totals:        18       0       0       0       0       0       0
  2165 ;;Total ram usage:       18 bytes
  2166 ;; Hardware stack levels used:    1
  2167 ;; Hardware stack levels required when called:    1
  2168 ;; This function calls:
  2169 ;;		Nothing
  2170 ;; This function is called by:
  2171 ;;		_dtoa
  2172 ;; This function uses a non-reentrant model
  2173 ;;
  2174                           
  2175                           	psect	text11
  2176  000DC0                     __ptext11:
  2177                           	opt callstack 0
  2178  000DC0                     ___aomod:
  2179                           	opt callstack 25
  2180                           
  2181                           ;incstack = 0
  2182  000DC0  0E00               	movlw	0
  2183  000DC2  6E14               	movwf	___aomod@sign,c
  2184  000DC4  AE0A               	btfss	___aomod@dividend+7,7,c
  2185  000DC6  D012               	goto	l1600
  2186  000DC8  1E0A               	comf	___aomod@dividend+7,f,c
  2187  000DCA  1E09               	comf	___aomod@dividend+6,f,c
  2188  000DCC  1E08               	comf	___aomod@dividend+5,f,c
  2189  000DCE  1E07               	comf	___aomod@dividend+4,f,c
  2190  000DD0  1E06               	comf	___aomod@dividend+3,f,c
  2191  000DD2  1E05               	comf	___aomod@dividend+2,f,c
  2192  000DD4  1E04               	comf	___aomod@dividend+1,f,c
  2193  000DD6  6C03               	negf	___aomod@dividend,c
  2194  000DD8  0E00               	movlw	0
  2195  000DDA  2204               	addwfc	___aomod@dividend+1,f,c
  2196  000DDC  2205               	addwfc	___aomod@dividend+2,f,c
  2197  000DDE  2206               	addwfc	___aomod@dividend+3,f,c
  2198  000DE0  2207               	addwfc	___aomod@dividend+4,f,c
  2199  000DE2  2208               	addwfc	___aomod@dividend+5,f,c
  2200  000DE4  2209               	addwfc	___aomod@dividend+6,f,c
  2201  000DE6  220A               	addwfc	___aomod@dividend+7,f,c
  2202  000DE8  0E01               	movlw	1
  2203  000DEA  6E14               	movwf	___aomod@sign,c
  2204  000DEC                     l1600:
  2205  000DEC  AE12               	btfss	___aomod@divisor+7,7,c
  2206  000DEE  D010               	goto	l1604
  2207  000DF0  1E12               	comf	___aomod@divisor+7,f,c
  2208  000DF2  1E11               	comf	___aomod@divisor+6,f,c
  2209  000DF4  1E10               	comf	___aomod@divisor+5,f,c
  2210  000DF6  1E0F               	comf	___aomod@divisor+4,f,c
  2211  000DF8  1E0E               	comf	___aomod@divisor+3,f,c
  2212  000DFA  1E0D               	comf	___aomod@divisor+2,f,c
  2213  000DFC  1E0C               	comf	___aomod@divisor+1,f,c
  2214  000DFE  6C0B               	negf	___aomod@divisor,c
  2215  000E00  0E00               	movlw	0
  2216  000E02  220C               	addwfc	___aomod@divisor+1,f,c
  2217  000E04  220D               	addwfc	___aomod@divisor+2,f,c
  2218  000E06  220E               	addwfc	___aomod@divisor+3,f,c
  2219  000E08  220F               	addwfc	___aomod@divisor+4,f,c
  2220  000E0A  2210               	addwfc	___aomod@divisor+5,f,c
  2221  000E0C  2211               	addwfc	___aomod@divisor+6,f,c
  2222  000E0E  2212               	addwfc	___aomod@divisor+7,f,c
  2223  000E10                     l1604:
  2224  000E10  500B               	movf	___aomod@divisor,w,c
  2225  000E12  100C               	iorwf	___aomod@divisor+1,w,c
  2226  000E14  100D               	iorwf	___aomod@divisor+2,w,c
  2227  000E16  100E               	iorwf	___aomod@divisor+3,w,c
  2228  000E18  100F               	iorwf	___aomod@divisor+4,w,c
  2229  000E1A  1010               	iorwf	___aomod@divisor+5,w,c
  2230  000E1C  1011               	iorwf	___aomod@divisor+6,w,c
  2231  000E1E  1012               	iorwf	___aomod@divisor+7,w,c
  2232  000E20  B4D8               	btfsc	status,2,c
  2233  000E22  D03C               	goto	l1620
  2234  000E24  0E01               	movlw	1
  2235  000E26  6E13               	movwf	___aomod@counter,c
  2236  000E28  D00A               	goto	l1610
  2237  000E2A                     l1608:
  2238  000E2A  90D8               	bcf	status,0,c
  2239  000E2C  360B               	rlcf	___aomod@divisor,f,c
  2240  000E2E  360C               	rlcf	___aomod@divisor+1,f,c
  2241  000E30  360D               	rlcf	___aomod@divisor+2,f,c
  2242  000E32  360E               	rlcf	___aomod@divisor+3,f,c
  2243  000E34  360F               	rlcf	___aomod@divisor+4,f,c
  2244  000E36  3610               	rlcf	___aomod@divisor+5,f,c
  2245  000E38  3611               	rlcf	___aomod@divisor+6,f,c
  2246  000E3A  3612               	rlcf	___aomod@divisor+7,f,c
  2247  000E3C  2A13               	incf	___aomod@counter,f,c
  2248  000E3E                     l1610:
  2249  000E3E  AE12               	btfss	___aomod@divisor+7,7,c
  2250  000E40  D7F4               	goto	l1608
  2251  000E42                     u970:
  2252  000E42  500B               	movf	___aomod@divisor,w,c
  2253  000E44  5C03               	subwf	___aomod@dividend,w,c
  2254  000E46  500C               	movf	___aomod@divisor+1,w,c
  2255  000E48  5804               	subwfb	___aomod@dividend+1,w,c
  2256  000E4A  500D               	movf	___aomod@divisor+2,w,c
  2257  000E4C  5805               	subwfb	___aomod@dividend+2,w,c
  2258  000E4E  500E               	movf	___aomod@divisor+3,w,c
  2259  000E50  5806               	subwfb	___aomod@dividend+3,w,c
  2260  000E52  500F               	movf	___aomod@divisor+4,w,c
  2261  000E54  5807               	subwfb	___aomod@dividend+4,w,c
  2262  000E56  5010               	movf	___aomod@divisor+5,w,c
  2263  000E58  5808               	subwfb	___aomod@dividend+5,w,c
  2264  000E5A  5011               	movf	___aomod@divisor+6,w,c
  2265  000E5C  5809               	subwfb	___aomod@dividend+6,w,c
  2266  000E5E  5012               	movf	___aomod@divisor+7,w,c
  2267  000E60  580A               	subwfb	___aomod@dividend+7,w,c
  2268  000E62  A0D8               	btfss	status,0,c
  2269  000E64  D010               	goto	l1616
  2270  000E66  500B               	movf	___aomod@divisor,w,c
  2271  000E68  5E03               	subwf	___aomod@dividend,f,c
  2272  000E6A  500C               	movf	___aomod@divisor+1,w,c
  2273  000E6C  5A04               	subwfb	___aomod@dividend+1,f,c
  2274  000E6E  500D               	movf	___aomod@divisor+2,w,c
  2275  000E70  5A05               	subwfb	___aomod@dividend+2,f,c
  2276  000E72  500E               	movf	___aomod@divisor+3,w,c
  2277  000E74  5A06               	subwfb	___aomod@dividend+3,f,c
  2278  000E76  500F               	movf	___aomod@divisor+4,w,c
  2279  000E78  5A07               	subwfb	___aomod@dividend+4,f,c
  2280  000E7A  5010               	movf	___aomod@divisor+5,w,c
  2281  000E7C  5A08               	subwfb	___aomod@dividend+5,f,c
  2282  000E7E  5011               	movf	___aomod@divisor+6,w,c
  2283  000E80  5A09               	subwfb	___aomod@dividend+6,f,c
  2284  000E82  5012               	movf	___aomod@divisor+7,w,c
  2285  000E84  5A0A               	subwfb	___aomod@dividend+7,f,c
  2286  000E86                     l1616:
  2287  000E86  90D8               	bcf	status,0,c
  2288  000E88  3212               	rrcf	___aomod@divisor+7,f,c
  2289  000E8A  3211               	rrcf	___aomod@divisor+6,f,c
  2290  000E8C  3210               	rrcf	___aomod@divisor+5,f,c
  2291  000E8E  320F               	rrcf	___aomod@divisor+4,f,c
  2292  000E90  320E               	rrcf	___aomod@divisor+3,f,c
  2293  000E92  320D               	rrcf	___aomod@divisor+2,f,c
  2294  000E94  320C               	rrcf	___aomod@divisor+1,f,c
  2295  000E96  320B               	rrcf	___aomod@divisor,f,c
  2296  000E98  2E13               	decfsz	___aomod@counter,f,c
  2297  000E9A  D7D3               	goto	u970
  2298  000E9C                     l1620:
  2299  000E9C  5014               	movf	___aomod@sign,w,c
  2300  000E9E  B4D8               	btfsc	status,2,c
  2301  000EA0  D010               	goto	l1624
  2302  000EA2  1E0A               	comf	___aomod@dividend+7,f,c
  2303  000EA4  1E09               	comf	___aomod@dividend+6,f,c
  2304  000EA6  1E08               	comf	___aomod@dividend+5,f,c
  2305  000EA8  1E07               	comf	___aomod@dividend+4,f,c
  2306  000EAA  1E06               	comf	___aomod@dividend+3,f,c
  2307  000EAC  1E05               	comf	___aomod@dividend+2,f,c
  2308  000EAE  1E04               	comf	___aomod@dividend+1,f,c
  2309  000EB0  6C03               	negf	___aomod@dividend,c
  2310  000EB2  0E00               	movlw	0
  2311  000EB4  2204               	addwfc	___aomod@dividend+1,f,c
  2312  000EB6  2205               	addwfc	___aomod@dividend+2,f,c
  2313  000EB8  2206               	addwfc	___aomod@dividend+3,f,c
  2314  000EBA  2207               	addwfc	___aomod@dividend+4,f,c
  2315  000EBC  2208               	addwfc	___aomod@dividend+5,f,c
  2316  000EBE  2209               	addwfc	___aomod@dividend+6,f,c
  2317  000EC0  220A               	addwfc	___aomod@dividend+7,f,c
  2318  000EC2                     l1624:
  2319  000EC2  C003  F003         	movff	___aomod@dividend,?___aomod
  2320  000EC6  C004  F004         	movff	___aomod@dividend+1,?___aomod+1
  2321  000ECA  C005  F005         	movff	___aomod@dividend+2,?___aomod+2
  2322  000ECE  C006  F006         	movff	___aomod@dividend+3,?___aomod+3
  2323  000ED2  C007  F007         	movff	___aomod@dividend+4,?___aomod+4
  2324  000ED6  C008  F008         	movff	___aomod@dividend+5,?___aomod+5
  2325  000EDA  C009  F009         	movff	___aomod@dividend+6,?___aomod+6
  2326  000EDE  C00A  F00A         	movff	___aomod@dividend+7,?___aomod+7
  2327  000EE2  0012               	return		;funcret
  2328  000EE4                     __end_of___aomod:
  2329                           	opt callstack 0
  2330                           
  2331 ;; *************** function ___aodiv *****************
  2332 ;; Defined at:
  2333 ;;		line 9 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\aodiv.c"
  2334 ;; Parameters:    Size  Location     Type
  2335 ;;  dividend        8    2[COMRAM] long long 
  2336 ;;  divisor         8   10[COMRAM] long long 
  2337 ;; Auto vars:     Size  Location     Type
  2338 ;;  quotient        8   20[COMRAM] long long 
  2339 ;;  sign            1   19[COMRAM] unsigned char 
  2340 ;;  counter         1   18[COMRAM] unsigned char 
  2341 ;; Return value:  Size  Location     Type
  2342 ;;                  8    2[COMRAM] long long 
  2343 ;; Registers used:
  2344 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  2345 ;; Tracked objects:
  2346 ;;		On entry : 0/0
  2347 ;;		On exit  : 0/0
  2348 ;;		Unchanged: 0/0
  2349 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2350 ;;      Params:        16       0       0       0       0       0       0
  2351 ;;      Locals:        10       0       0       0       0       0       0
  2352 ;;      Temps:          0       0       0       0       0       0       0
  2353 ;;      Totals:        26       0       0       0       0       0       0
  2354 ;;Total ram usage:       26 bytes
  2355 ;; Hardware stack levels used:    1
  2356 ;; Hardware stack levels required when called:    1
  2357 ;; This function calls:
  2358 ;;		Nothing
  2359 ;; This function is called by:
  2360 ;;		_dtoa
  2361 ;; This function uses a non-reentrant model
  2362 ;;
  2363                           
  2364                           	psect	text12
  2365  000B38                     __ptext12:
  2366                           	opt callstack 0
  2367  000B38                     ___aodiv:
  2368                           	opt callstack 25
  2369                           
  2370                           ;incstack = 0
  2371  000B38  0E00               	movlw	0
  2372  000B3A  6E14               	movwf	___aodiv@sign,c
  2373  000B3C  AE12               	btfss	___aodiv@divisor+7,7,c
  2374  000B3E  D012               	goto	l1556
  2375  000B40  1E12               	comf	___aodiv@divisor+7,f,c
  2376  000B42  1E11               	comf	___aodiv@divisor+6,f,c
  2377  000B44  1E10               	comf	___aodiv@divisor+5,f,c
  2378  000B46  1E0F               	comf	___aodiv@divisor+4,f,c
  2379  000B48  1E0E               	comf	___aodiv@divisor+3,f,c
  2380  000B4A  1E0D               	comf	___aodiv@divisor+2,f,c
  2381  000B4C  1E0C               	comf	___aodiv@divisor+1,f,c
  2382  000B4E  6C0B               	negf	___aodiv@divisor,c
  2383  000B50  0E00               	movlw	0
  2384  000B52  220C               	addwfc	___aodiv@divisor+1,f,c
  2385  000B54  220D               	addwfc	___aodiv@divisor+2,f,c
  2386  000B56  220E               	addwfc	___aodiv@divisor+3,f,c
  2387  000B58  220F               	addwfc	___aodiv@divisor+4,f,c
  2388  000B5A  2210               	addwfc	___aodiv@divisor+5,f,c
  2389  000B5C  2211               	addwfc	___aodiv@divisor+6,f,c
  2390  000B5E  2212               	addwfc	___aodiv@divisor+7,f,c
  2391  000B60  0E01               	movlw	1
  2392  000B62  6E14               	movwf	___aodiv@sign,c
  2393  000B64                     l1556:
  2394  000B64  AE0A               	btfss	___aodiv@dividend+7,7,c
  2395  000B66  D012               	goto	l1562
  2396  000B68  1E0A               	comf	___aodiv@dividend+7,f,c
  2397  000B6A  1E09               	comf	___aodiv@dividend+6,f,c
  2398  000B6C  1E08               	comf	___aodiv@dividend+5,f,c
  2399  000B6E  1E07               	comf	___aodiv@dividend+4,f,c
  2400  000B70  1E06               	comf	___aodiv@dividend+3,f,c
  2401  000B72  1E05               	comf	___aodiv@dividend+2,f,c
  2402  000B74  1E04               	comf	___aodiv@dividend+1,f,c
  2403  000B76  6C03               	negf	___aodiv@dividend,c
  2404  000B78  0E00               	movlw	0
  2405  000B7A  2204               	addwfc	___aodiv@dividend+1,f,c
  2406  000B7C  2205               	addwfc	___aodiv@dividend+2,f,c
  2407  000B7E  2206               	addwfc	___aodiv@dividend+3,f,c
  2408  000B80  2207               	addwfc	___aodiv@dividend+4,f,c
  2409  000B82  2208               	addwfc	___aodiv@dividend+5,f,c
  2410  000B84  2209               	addwfc	___aodiv@dividend+6,f,c
  2411  000B86  220A               	addwfc	___aodiv@dividend+7,f,c
  2412  000B88  0E01               	movlw	1
  2413  000B8A  1A14               	xorwf	___aodiv@sign,f,c
  2414  000B8C                     l1562:
  2415  000B8C  EE20  F015         	lfsr	2,___aodiv@quotient
  2416  000B90  0E07               	movlw	7
  2417  000B92                     u891:
  2418  000B92  6ADE               	clrf	postinc2,c
  2419  000B94  06E8               	decf	wreg,f,c
  2420  000B96  E2FD               	bc	u891
  2421  000B98  500B               	movf	___aodiv@divisor,w,c
  2422  000B9A  100C               	iorwf	___aodiv@divisor+1,w,c
  2423  000B9C  100D               	iorwf	___aodiv@divisor+2,w,c
  2424  000B9E  100E               	iorwf	___aodiv@divisor+3,w,c
  2425  000BA0  100F               	iorwf	___aodiv@divisor+4,w,c
  2426  000BA2  1010               	iorwf	___aodiv@divisor+5,w,c
  2427  000BA4  1011               	iorwf	___aodiv@divisor+6,w,c
  2428  000BA6  1012               	iorwf	___aodiv@divisor+7,w,c
  2429  000BA8  B4D8               	btfsc	status,2,c
  2430  000BAA  D046               	goto	l1584
  2431  000BAC  0E01               	movlw	1
  2432  000BAE  6E13               	movwf	___aodiv@counter,c
  2433  000BB0  D00A               	goto	l1570
  2434  000BB2                     l1568:
  2435  000BB2  90D8               	bcf	status,0,c
  2436  000BB4  360B               	rlcf	___aodiv@divisor,f,c
  2437  000BB6  360C               	rlcf	___aodiv@divisor+1,f,c
  2438  000BB8  360D               	rlcf	___aodiv@divisor+2,f,c
  2439  000BBA  360E               	rlcf	___aodiv@divisor+3,f,c
  2440  000BBC  360F               	rlcf	___aodiv@divisor+4,f,c
  2441  000BBE  3610               	rlcf	___aodiv@divisor+5,f,c
  2442  000BC0  3611               	rlcf	___aodiv@divisor+6,f,c
  2443  000BC2  3612               	rlcf	___aodiv@divisor+7,f,c
  2444  000BC4  2A13               	incf	___aodiv@counter,f,c
  2445  000BC6                     l1570:
  2446  000BC6  AE12               	btfss	___aodiv@divisor+7,7,c
  2447  000BC8  D7F4               	goto	l1568
  2448  000BCA                     u910:
  2449  000BCA  90D8               	bcf	status,0,c
  2450  000BCC  3615               	rlcf	___aodiv@quotient,f,c
  2451  000BCE  3616               	rlcf	___aodiv@quotient+1,f,c
  2452  000BD0  3617               	rlcf	___aodiv@quotient+2,f,c
  2453  000BD2  3618               	rlcf	___aodiv@quotient+3,f,c
  2454  000BD4  3619               	rlcf	___aodiv@quotient+4,f,c
  2455  000BD6  361A               	rlcf	___aodiv@quotient+5,f,c
  2456  000BD8  361B               	rlcf	___aodiv@quotient+6,f,c
  2457  000BDA  361C               	rlcf	___aodiv@quotient+7,f,c
  2458  000BDC  500B               	movf	___aodiv@divisor,w,c
  2459  000BDE  5C03               	subwf	___aodiv@dividend,w,c
  2460  000BE0  500C               	movf	___aodiv@divisor+1,w,c
  2461  000BE2  5804               	subwfb	___aodiv@dividend+1,w,c
  2462  000BE4  500D               	movf	___aodiv@divisor+2,w,c
  2463  000BE6  5805               	subwfb	___aodiv@dividend+2,w,c
  2464  000BE8  500E               	movf	___aodiv@divisor+3,w,c
  2465  000BEA  5806               	subwfb	___aodiv@dividend+3,w,c
  2466  000BEC  500F               	movf	___aodiv@divisor+4,w,c
  2467  000BEE  5807               	subwfb	___aodiv@dividend+4,w,c
  2468  000BF0  5010               	movf	___aodiv@divisor+5,w,c
  2469  000BF2  5808               	subwfb	___aodiv@dividend+5,w,c
  2470  000BF4  5011               	movf	___aodiv@divisor+6,w,c
  2471  000BF6  5809               	subwfb	___aodiv@dividend+6,w,c
  2472  000BF8  5012               	movf	___aodiv@divisor+7,w,c
  2473  000BFA  580A               	subwfb	___aodiv@dividend+7,w,c
  2474  000BFC  A0D8               	btfss	status,0,c
  2475  000BFE  D011               	goto	l1580
  2476  000C00  500B               	movf	___aodiv@divisor,w,c
  2477  000C02  5E03               	subwf	___aodiv@dividend,f,c
  2478  000C04  500C               	movf	___aodiv@divisor+1,w,c
  2479  000C06  5A04               	subwfb	___aodiv@dividend+1,f,c
  2480  000C08  500D               	movf	___aodiv@divisor+2,w,c
  2481  000C0A  5A05               	subwfb	___aodiv@dividend+2,f,c
  2482  000C0C  500E               	movf	___aodiv@divisor+3,w,c
  2483  000C0E  5A06               	subwfb	___aodiv@dividend+3,f,c
  2484  000C10  500F               	movf	___aodiv@divisor+4,w,c
  2485  000C12  5A07               	subwfb	___aodiv@dividend+4,f,c
  2486  000C14  5010               	movf	___aodiv@divisor+5,w,c
  2487  000C16  5A08               	subwfb	___aodiv@dividend+5,f,c
  2488  000C18  5011               	movf	___aodiv@divisor+6,w,c
  2489  000C1A  5A09               	subwfb	___aodiv@dividend+6,f,c
  2490  000C1C  5012               	movf	___aodiv@divisor+7,w,c
  2491  000C1E  5A0A               	subwfb	___aodiv@dividend+7,f,c
  2492  000C20  8015               	bsf	___aodiv@quotient,0,c
  2493  000C22                     l1580:
  2494  000C22  90D8               	bcf	status,0,c
  2495  000C24  3212               	rrcf	___aodiv@divisor+7,f,c
  2496  000C26  3211               	rrcf	___aodiv@divisor+6,f,c
  2497  000C28  3210               	rrcf	___aodiv@divisor+5,f,c
  2498  000C2A  320F               	rrcf	___aodiv@divisor+4,f,c
  2499  000C2C  320E               	rrcf	___aodiv@divisor+3,f,c
  2500  000C2E  320D               	rrcf	___aodiv@divisor+2,f,c
  2501  000C30  320C               	rrcf	___aodiv@divisor+1,f,c
  2502  000C32  320B               	rrcf	___aodiv@divisor,f,c
  2503  000C34  2E13               	decfsz	___aodiv@counter,f,c
  2504  000C36  D7C9               	goto	u910
  2505  000C38                     l1584:
  2506  000C38  5014               	movf	___aodiv@sign,w,c
  2507  000C3A  B4D8               	btfsc	status,2,c
  2508  000C3C  D010               	goto	l1588
  2509  000C3E  1E1C               	comf	___aodiv@quotient+7,f,c
  2510  000C40  1E1B               	comf	___aodiv@quotient+6,f,c
  2511  000C42  1E1A               	comf	___aodiv@quotient+5,f,c
  2512  000C44  1E19               	comf	___aodiv@quotient+4,f,c
  2513  000C46  1E18               	comf	___aodiv@quotient+3,f,c
  2514  000C48  1E17               	comf	___aodiv@quotient+2,f,c
  2515  000C4A  1E16               	comf	___aodiv@quotient+1,f,c
  2516  000C4C  6C15               	negf	___aodiv@quotient,c
  2517  000C4E  0E00               	movlw	0
  2518  000C50  2216               	addwfc	___aodiv@quotient+1,f,c
  2519  000C52  2217               	addwfc	___aodiv@quotient+2,f,c
  2520  000C54  2218               	addwfc	___aodiv@quotient+3,f,c
  2521  000C56  2219               	addwfc	___aodiv@quotient+4,f,c
  2522  000C58  221A               	addwfc	___aodiv@quotient+5,f,c
  2523  000C5A  221B               	addwfc	___aodiv@quotient+6,f,c
  2524  000C5C  221C               	addwfc	___aodiv@quotient+7,f,c
  2525  000C5E                     l1588:
  2526  000C5E  C015  F003         	movff	___aodiv@quotient,?___aodiv
  2527  000C62  C016  F004         	movff	___aodiv@quotient+1,?___aodiv+1
  2528  000C66  C017  F005         	movff	___aodiv@quotient+2,?___aodiv+2
  2529  000C6A  C018  F006         	movff	___aodiv@quotient+3,?___aodiv+3
  2530  000C6E  C019  F007         	movff	___aodiv@quotient+4,?___aodiv+4
  2531  000C72  C01A  F008         	movff	___aodiv@quotient+5,?___aodiv+5
  2532  000C76  C01B  F009         	movff	___aodiv@quotient+6,?___aodiv+6
  2533  000C7A  C01C  F00A         	movff	___aodiv@quotient+7,?___aodiv+7
  2534  000C7E  0012               	return		;funcret
  2535  000C80                     __end_of___aodiv:
  2536                           	opt callstack 0
  2537                           
  2538 ;; *************** function _atoi *****************
  2539 ;; Defined at:
  2540 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\atoi.c"
  2541 ;; Parameters:    Size  Location     Type
  2542 ;;  s               2    9[COMRAM] PTR const unsigned char 
  2543 ;;		 -> STR_3(5), 
  2544 ;; Auto vars:     Size  Location     Type
  2545 ;;  n               2   22[COMRAM] int 
  2546 ;;  neg             2   15[COMRAM] int 
  2547 ;; Return value:  Size  Location     Type
  2548 ;;                  2    9[COMRAM] int 
  2549 ;; Registers used:
  2550 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2551 ;; Tracked objects:
  2552 ;;		On entry : 0/0
  2553 ;;		On exit  : 0/0
  2554 ;;		Unchanged: 0/0
  2555 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2556 ;;      Params:         2       0       0       0       0       0       0
  2557 ;;      Locals:         9       0       0       0       0       0       0
  2558 ;;      Temps:          4       0       0       0       0       0       0
  2559 ;;      Totals:        15       0       0       0       0       0       0
  2560 ;;Total ram usage:       15 bytes
  2561 ;; Hardware stack levels used:    1
  2562 ;; Hardware stack levels required when called:    2
  2563 ;; This function calls:
  2564 ;;		___wmul
  2565 ;;		_isdigit
  2566 ;;		_isspace
  2567 ;; This function is called by:
  2568 ;;		_vfpfcnvrt
  2569 ;; This function uses a non-reentrant model
  2570 ;;
  2571                           
  2572                           	psect	text13
  2573  000C80                     __ptext13:
  2574                           	opt callstack 0
  2575  000C80                     _atoi:
  2576                           	opt callstack 25
  2577                           
  2578                           ;incstack = 0
  2579  000C80  0E00               	movlw	0
  2580  000C82  6E18               	movwf	atoi@n+1,c
  2581  000C84  0E00               	movlw	0
  2582  000C86  6E17               	movwf	atoi@n,c
  2583  000C88  0E00               	movlw	0
  2584  000C8A  6E11               	movwf	atoi@neg+1,c
  2585  000C8C  0E00               	movlw	0
  2586  000C8E  6E10               	movwf	atoi@neg,c
  2587  000C90  D002               	goto	l1718
  2588  000C92                     l1716:
  2589  000C92  4A0A               	infsnz	atoi@s,f,c
  2590  000C94  2A0B               	incf	atoi@s+1,f,c
  2591  000C96                     l1718:
  2592  000C96  0E01               	movlw	1
  2593  000C98  6E16               	movwf	_atoi$816,c
  2594  000C9A  C00A  FFF6         	movff	atoi@s,tblptrl
  2595  000C9E  C00B  FFF7         	movff	atoi@s+1,tblptrh
  2596  000CA2                     	if	0	;tblptru may be non-zero
  2597  000CA2                     	endif
  2598  000CA2                     	if	0	;tblptru may be non-zero
  2599  000CA2                     	endif
  2600  000CA2  0008               	tblrd		*
  2601  000CA4  50F5               	movf	tablat,w,c
  2602  000CA6  0A20               	xorlw	32
  2603  000CA8  B4D8               	btfsc	status,2,c
  2604  000CAA  D018               	goto	l1726
  2605  000CAC  0EF7               	movlw	247
  2606  000CAE  6E0C               	movwf	??_atoi& (0+255),c
  2607  000CB0  0EFF               	movlw	255
  2608  000CB2  6E0D               	movwf	(??_atoi+1)& (0+255),c
  2609  000CB4  C00A  FFF6         	movff	atoi@s,tblptrl
  2610  000CB8  C00B  FFF7         	movff	atoi@s+1,tblptrh
  2611  000CBC                     	if	0	;tblptru may be non-zero
  2612  000CBC                     	endif
  2613  000CBC                     	if	0	;tblptru may be non-zero
  2614  000CBC                     	endif
  2615  000CBC  0008               	tblrd		*
  2616  000CBE  50F5               	movf	tablat,w,c
  2617  000CC0  6E0E               	movwf	(??_atoi+2)& (0+255),c
  2618  000CC2  6A0F               	clrf	(??_atoi+3)& (0+255),c
  2619  000CC4  500C               	movf	??_atoi,w,c
  2620  000CC6  260E               	addwf	??_atoi+2,f,c
  2621  000CC8  500D               	movf	??_atoi+1,w,c
  2622  000CCA  220F               	addwfc	??_atoi+3,f,c
  2623  000CCC  500F               	movf	??_atoi+3,w,c
  2624  000CCE  E104               	bnz	u1190
  2625  000CD0  0E05               	movlw	5
  2626  000CD2  5C0E               	subwf	??_atoi+2,w,c
  2627  000CD4  A0D8               	btfss	status,0,c
  2628  000CD6  D002               	goto	l1726
  2629  000CD8                     u1190:
  2630  000CD8  0E00               	movlw	0
  2631  000CDA  6E16               	movwf	_atoi$816,c
  2632  000CDC                     l1726:
  2633  000CDC  C016  F012         	movff	_atoi$816,_atoi$815
  2634  000CE0  6A13               	clrf	_atoi$815+1,c
  2635  000CE2  5012               	movf	_atoi$815,w,c
  2636  000CE4  1013               	iorwf	_atoi$815+1,w,c
  2637  000CE6  B4D8               	btfsc	status,2,c
  2638  000CE8  D008               	goto	l1736
  2639  000CEA  D7D3               	goto	l1716
  2640  000CEC                     l1732:
  2641  000CEC  0E00               	movlw	0
  2642  000CEE  6E11               	movwf	atoi@neg+1,c
  2643  000CF0  0E01               	movlw	1
  2644  000CF2  6E10               	movwf	atoi@neg,c
  2645  000CF4                     l1734:
  2646  000CF4  4A0A               	infsnz	atoi@s,f,c
  2647  000CF6  2A0B               	incf	atoi@s+1,f,c
  2648  000CF8  D02E               	goto	l1742
  2649  000CFA                     l1736:
  2650  000CFA  C00A  FFF6         	movff	atoi@s,tblptrl
  2651  000CFE  C00B  FFF7         	movff	atoi@s+1,tblptrh
  2652  000D02                     	if	0	;tblptru may be non-zero
  2653  000D02                     	endif
  2654  000D02                     	if	0	;tblptru may be non-zero
  2655  000D02                     	endif
  2656  000D02  0008               	tblrd		*
  2657  000D04  50F5               	movf	tablat,w,c
  2658  000D06  6E0C               	movwf	??_atoi& (0+255),c
  2659  000D08  6A0D               	clrf	(??_atoi+1)& (0+255),c
  2660                           
  2661                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2662                           ; Switch size 1, requested type "simple"
  2663                           ; Number of cases is 1, Range of values is 0 to 0
  2664                           ; switch strategies available:
  2665                           ; Name         Instructions Cycles
  2666                           ; simple_byte            4     3 (average)
  2667                           ;	Chosen strategy is simple_byte
  2668  000D0A  500D               	movf	??_atoi+1,w,c
  2669  000D0C  0A00               	xorlw	0	; case 0
  2670  000D0E  A4D8               	btfss	status,2,c
  2671  000D10  D022               	goto	l1742
  2672                           
  2673                           ; Switch size 1, requested type "simple"
  2674                           ; Number of cases is 2, Range of values is 43 to 45
  2675                           ; switch strategies available:
  2676                           ; Name         Instructions Cycles
  2677                           ; simple_byte            7     4 (average)
  2678                           ;	Chosen strategy is simple_byte
  2679  000D12  500C               	movf	??_atoi,w,c
  2680  000D14  0A2B               	xorlw	43	; case 43
  2681  000D16  B4D8               	btfsc	status,2,c
  2682  000D18  D7ED               	goto	l1734
  2683  000D1A  0A06               	xorlw	6	; case 45
  2684  000D1C  B4D8               	btfsc	status,2,c
  2685  000D1E  D7E6               	goto	l1732
  2686  000D20  D01A               	goto	l1742
  2687  000D22                     l1738:
  2688  000D22  C017  F003         	movff	atoi@n,___wmul@multiplier
  2689  000D26  C018  F004         	movff	atoi@n+1,___wmul@multiplier+1
  2690  000D2A  0E00               	movlw	0
  2691  000D2C  6E06               	movwf	___wmul@multiplicand+1,c
  2692  000D2E  0E0A               	movlw	10
  2693  000D30  6E05               	movwf	___wmul@multiplicand,c
  2694  000D32  EC6B  F00A         	call	___wmul	;wreg free
  2695  000D36  C00A  FFF6         	movff	atoi@s,tblptrl
  2696  000D3A  C00B  FFF7         	movff	atoi@s+1,tblptrh
  2697  000D3E                     	if	0	;tblptru may be non-zero
  2698  000D3E                     	endif
  2699  000D3E                     	if	0	;tblptru may be non-zero
  2700  000D3E                     	endif
  2701  000D3E  0008               	tblrd		*
  2702  000D40  50F5               	movf	tablat,w,c
  2703  000D42  5E03               	subwf	?___wmul,f,c
  2704  000D44  0E00               	movlw	0
  2705  000D46  5A04               	subwfb	?___wmul+1,f,c
  2706  000D48  0E30               	movlw	48
  2707  000D4A  2403               	addwf	?___wmul,w,c
  2708  000D4C  6E17               	movwf	atoi@n,c
  2709  000D4E  0E00               	movlw	0
  2710  000D50  2004               	addwfc	?___wmul+1,w,c
  2711  000D52  6E18               	movwf	atoi@n+1,c
  2712  000D54  D7CF               	goto	l1734
  2713  000D56                     l1742:
  2714  000D56  0ED0               	movlw	208
  2715  000D58  6E0C               	movwf	??_atoi& (0+255),c
  2716  000D5A  0EFF               	movlw	255
  2717  000D5C  6E0D               	movwf	(??_atoi+1)& (0+255),c
  2718  000D5E  C00A  FFF6         	movff	atoi@s,tblptrl
  2719  000D62  C00B  FFF7         	movff	atoi@s+1,tblptrh
  2720  000D66                     	if	0	;tblptru may be non-zero
  2721  000D66                     	endif
  2722  000D66                     	if	0	;tblptru may be non-zero
  2723  000D66                     	endif
  2724  000D66  0008               	tblrd		*
  2725  000D68  50F5               	movf	tablat,w,c
  2726  000D6A  6E0E               	movwf	(??_atoi+2)& (0+255),c
  2727  000D6C  6A0F               	clrf	(??_atoi+3)& (0+255),c
  2728  000D6E  500C               	movf	??_atoi,w,c
  2729  000D70  260E               	addwf	??_atoi+2,f,c
  2730  000D72  500D               	movf	??_atoi+1,w,c
  2731  000D74  220F               	addwfc	??_atoi+3,f,c
  2732  000D76  500F               	movf	??_atoi+3,w,c
  2733  000D78  E106               	bnz	u1210
  2734  000D7A  0E0A               	movlw	10
  2735  000D7C  5C0E               	subwf	??_atoi+2,w,c
  2736  000D7E  B0D8               	btfsc	status,0,c
  2737  000D80  D002               	goto	u1210
  2738  000D82  0E01               	movlw	1
  2739  000D84  D001               	goto	u1220
  2740  000D86                     u1210:
  2741  000D86  0E00               	movlw	0
  2742  000D88                     u1220:
  2743  000D88  6E14               	movwf	_atoi$817,c
  2744  000D8A  6A15               	clrf	_atoi$817+1,c
  2745  000D8C  5014               	movf	_atoi$817,w,c
  2746  000D8E  1015               	iorwf	_atoi$817+1,w,c
  2747  000D90  A4D8               	btfss	status,2,c
  2748  000D92  D7C7               	goto	l1738
  2749  000D94  5010               	movf	atoi@neg,w,c
  2750  000D96  1011               	iorwf	atoi@neg+1,w,c
  2751  000D98  A4D8               	btfss	status,2,c
  2752  000D9A  D00D               	goto	l899
  2753  000D9C  C017  F00C         	movff	atoi@n,??_atoi
  2754  000DA0  C018  F00D         	movff	atoi@n+1,??_atoi+1
  2755  000DA4  1E0C               	comf	??_atoi,f,c
  2756  000DA6  1E0D               	comf	??_atoi+1,f,c
  2757  000DA8  4A0C               	infsnz	??_atoi,f,c
  2758  000DAA  2A0D               	incf	??_atoi+1,f,c
  2759  000DAC  C00C  F00A         	movff	??_atoi,?_atoi
  2760  000DB0  C00D  F00B         	movff	??_atoi+1,?_atoi+1
  2761  000DB4  0012               	return	
  2762  000DB6                     l899:
  2763  000DB6  C017  F00A         	movff	atoi@n,?_atoi
  2764  000DBA  C018  F00B         	movff	atoi@n+1,?_atoi+1
  2765  000DBE  0012               	return		;funcret
  2766  000DC0                     __end_of_atoi:
  2767                           	opt callstack 0
  2768                           
  2769 ;; *************** function _isspace *****************
  2770 ;; Defined at:
  2771 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\isspace.c"
  2772 ;; Parameters:    Size  Location     Type
  2773 ;;  c               2    2[COMRAM] int 
  2774 ;; Auto vars:     Size  Location     Type
  2775 ;;		None
  2776 ;; Return value:  Size  Location     Type
  2777 ;;                  2    2[COMRAM] int 
  2778 ;; Registers used:
  2779 ;;		wreg, status,2, status,0
  2780 ;; Tracked objects:
  2781 ;;		On entry : 0/0
  2782 ;;		On exit  : 0/0
  2783 ;;		Unchanged: 0/0
  2784 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2785 ;;      Params:         2       0       0       0       0       0       0
  2786 ;;      Locals:         1       0       0       0       0       0       0
  2787 ;;      Temps:          4       0       0       0       0       0       0
  2788 ;;      Totals:         7       0       0       0       0       0       0
  2789 ;;Total ram usage:        7 bytes
  2790 ;; Hardware stack levels used:    1
  2791 ;; Hardware stack levels required when called:    1
  2792 ;; This function calls:
  2793 ;;		Nothing
  2794 ;; This function is called by:
  2795 ;;		_atoi
  2796 ;; This function uses a non-reentrant model
  2797 ;;
  2798                           
  2799                           	psect	text14
  2800  0013AE                     __ptext14:
  2801                           	opt callstack 0
  2802  0013AE                     _isspace:
  2803                           	opt callstack 25
  2804                           
  2805                           ;incstack = 0
  2806  0013AE  0E01               	movlw	1
  2807  0013B0  6E09               	movwf	_isspace$833,c
  2808  0013B2  0E20               	movlw	32
  2809  0013B4  1803               	xorwf	isspace@c,w,c
  2810  0013B6  1004               	iorwf	isspace@c+1,w,c
  2811  0013B8  B4D8               	btfsc	status,2,c
  2812  0013BA  D014               	goto	l1636
  2813  0013BC  0EF7               	movlw	247
  2814  0013BE  6E05               	movwf	??_isspace& (0+255),c
  2815  0013C0  0EFF               	movlw	255
  2816  0013C2  6E06               	movwf	(??_isspace+1)& (0+255),c
  2817  0013C4  C003  F007         	movff	isspace@c,??_isspace+2
  2818  0013C8  C004  F008         	movff	isspace@c+1,??_isspace+3
  2819  0013CC  5005               	movf	??_isspace,w,c
  2820  0013CE  2607               	addwf	??_isspace+2,f,c
  2821  0013D0  5006               	movf	??_isspace+1,w,c
  2822  0013D2  2208               	addwfc	??_isspace+3,f,c
  2823  0013D4  5008               	movf	??_isspace+3,w,c
  2824  0013D6  E104               	bnz	u1010
  2825  0013D8  0E05               	movlw	5
  2826  0013DA  5C07               	subwf	??_isspace+2,w,c
  2827  0013DC  A0D8               	btfss	status,0,c
  2828  0013DE  D002               	goto	l1636
  2829  0013E0                     u1010:
  2830  0013E0  0E00               	movlw	0
  2831  0013E2  6E09               	movwf	_isspace$833,c
  2832  0013E4                     l1636:
  2833  0013E4  C009  F003         	movff	_isspace$833,?_isspace
  2834  0013E8  6A04               	clrf	?_isspace+1,c
  2835  0013EA  0012               	return		;funcret
  2836  0013EC                     __end_of_isspace:
  2837                           	opt callstack 0
  2838                           
  2839 ;; *************** function _isdigit *****************
  2840 ;; Defined at:
  2841 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\isdigit.c"
  2842 ;; Parameters:    Size  Location     Type
  2843 ;;  c               2    2[COMRAM] int 
  2844 ;; Auto vars:     Size  Location     Type
  2845 ;;		None
  2846 ;; Return value:  Size  Location     Type
  2847 ;;                  2    2[COMRAM] int 
  2848 ;; Registers used:
  2849 ;;		wreg, status,2, status,0
  2850 ;; Tracked objects:
  2851 ;;		On entry : 0/0
  2852 ;;		On exit  : 0/0
  2853 ;;		Unchanged: 0/0
  2854 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2855 ;;      Params:         2       0       0       0       0       0       0
  2856 ;;      Locals:         0       0       0       0       0       0       0
  2857 ;;      Temps:          4       0       0       0       0       0       0
  2858 ;;      Totals:         6       0       0       0       0       0       0
  2859 ;;Total ram usage:        6 bytes
  2860 ;; Hardware stack levels used:    1
  2861 ;; Hardware stack levels required when called:    1
  2862 ;; This function calls:
  2863 ;;		Nothing
  2864 ;; This function is called by:
  2865 ;;		_vfpfcnvrt
  2866 ;;		_atoi
  2867 ;; This function uses a non-reentrant model
  2868 ;;
  2869                           
  2870                           	psect	text15
  2871  001456                     __ptext15:
  2872                           	opt callstack 0
  2873  001456                     _isdigit:
  2874                           	opt callstack 26
  2875                           
  2876                           ;incstack = 0
  2877  001456  0ED0               	movlw	208
  2878  001458  6E05               	movwf	??_isdigit& (0+255),c
  2879  00145A  0EFF               	movlw	255
  2880  00145C  6E06               	movwf	(??_isdigit+1)& (0+255),c
  2881  00145E  C003  F007         	movff	isdigit@c,??_isdigit+2
  2882  001462  C004  F008         	movff	isdigit@c+1,??_isdigit+3
  2883  001466  5005               	movf	??_isdigit,w,c
  2884  001468  2607               	addwf	??_isdigit+2,f,c
  2885  00146A  5006               	movf	??_isdigit+1,w,c
  2886  00146C  2208               	addwfc	??_isdigit+3,f,c
  2887  00146E  5008               	movf	??_isdigit+3,w,c
  2888  001470  E106               	bnz	u850
  2889  001472  0E0A               	movlw	10
  2890  001474  5C07               	subwf	??_isdigit+2,w,c
  2891  001476  B0D8               	btfsc	status,0,c
  2892  001478  D002               	goto	u850
  2893  00147A  0E01               	movlw	1
  2894  00147C  D001               	goto	u860
  2895  00147E                     u850:
  2896  00147E  0E00               	movlw	0
  2897  001480                     u860:
  2898  001480  6E03               	movwf	?_isdigit,c
  2899  001482  6A04               	clrf	?_isdigit+1,c
  2900  001484  0012               	return		;funcret
  2901  001486                     __end_of_isdigit:
  2902                           	opt callstack 0
  2903                           
  2904 ;; *************** function ___wmul *****************
  2905 ;; Defined at:
  2906 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\Umul16.c"
  2907 ;; Parameters:    Size  Location     Type
  2908 ;;  multiplier      2    2[COMRAM] unsigned int 
  2909 ;;  multiplicand    2    4[COMRAM] unsigned int 
  2910 ;; Auto vars:     Size  Location     Type
  2911 ;;  product         2    6[COMRAM] unsigned int 
  2912 ;; Return value:  Size  Location     Type
  2913 ;;                  2    2[COMRAM] unsigned int 
  2914 ;; Registers used:
  2915 ;;		wreg, status,2, status,0, prodl, prodh
  2916 ;; Tracked objects:
  2917 ;;		On entry : 0/0
  2918 ;;		On exit  : 0/0
  2919 ;;		Unchanged: 0/0
  2920 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2921 ;;      Params:         4       0       0       0       0       0       0
  2922 ;;      Locals:         2       0       0       0       0       0       0
  2923 ;;      Temps:          0       0       0       0       0       0       0
  2924 ;;      Totals:         6       0       0       0       0       0       0
  2925 ;;Total ram usage:        6 bytes
  2926 ;; Hardware stack levels used:    1
  2927 ;; Hardware stack levels required when called:    1
  2928 ;; This function calls:
  2929 ;;		Nothing
  2930 ;; This function is called by:
  2931 ;;		_atoi
  2932 ;; This function uses a non-reentrant model
  2933 ;;
  2934                           
  2935                           	psect	text16
  2936  0014D6                     __ptext16:
  2937                           	opt callstack 0
  2938  0014D6                     ___wmul:
  2939                           	opt callstack 25
  2940                           
  2941                           ;incstack = 0
  2942  0014D6  5003               	movf	___wmul@multiplier,w,c
  2943  0014D8  0205               	mulwf	___wmul@multiplicand,c
  2944  0014DA  CFF3 F007          	movff	prodl,___wmul@product
  2945  0014DE  CFF4 F008          	movff	prodh,___wmul@product+1
  2946  0014E2  5003               	movf	___wmul@multiplier,w,c
  2947  0014E4  0206               	mulwf	___wmul@multiplicand+1,c
  2948  0014E6  50F3               	movf	prodl,w,c
  2949  0014E8  2608               	addwf	___wmul@product+1,f,c
  2950  0014EA  5004               	movf	___wmul@multiplier+1,w,c
  2951  0014EC  0205               	mulwf	___wmul@multiplicand,c
  2952  0014EE  50F3               	movf	prodl,w,c
  2953  0014F0  2608               	addwf	___wmul@product+1,f,c
  2954  0014F2  C007  F003         	movff	___wmul@product,?___wmul
  2955  0014F6  C008  F004         	movff	___wmul@product+1,?___wmul+1
  2956  0014FA  0012               	return		;funcret
  2957  0014FC                     __end_of___wmul:
  2958                           	opt callstack 0
  2959                           
  2960 ;; *************** function _lcd_ini *****************
  2961 ;; Defined at:
  2962 ;;		line 3 in file "../Bibliotecas/LCD4bits.c"
  2963 ;; Parameters:    Size  Location     Type
  2964 ;;		None
  2965 ;; Auto vars:     Size  Location     Type
  2966 ;;  i               1    7[COMRAM] unsigned char 
  2967 ;; Return value:  Size  Location     Type
  2968 ;;                  1    wreg      void 
  2969 ;; Registers used:
  2970 ;;		wreg, status,2, status,0, cstack
  2971 ;; Tracked objects:
  2972 ;;		On entry : 0/0
  2973 ;;		On exit  : 0/0
  2974 ;;		Unchanged: 0/0
  2975 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2976 ;;      Params:         0       0       0       0       0       0       0
  2977 ;;      Locals:         1       0       0       0       0       0       0
  2978 ;;      Temps:          1       0       0       0       0       0       0
  2979 ;;      Totals:         2       0       0       0       0       0       0
  2980 ;;Total ram usage:        2 bytes
  2981 ;; Hardware stack levels used:    1
  2982 ;; Hardware stack levels required when called:    3
  2983 ;; This function calls:
  2984 ;;		_lcd_cmd
  2985 ;; This function is called by:
  2986 ;;		_main
  2987 ;; This function uses a non-reentrant model
  2988 ;;
  2989                           
  2990                           	psect	text17
  2991  00119E                     __ptext17:
  2992                           	opt callstack 0
  2993  00119E                     _lcd_ini:
  2994                           	opt callstack 27
  2995                           
  2996                           ;../Bibliotecas/LCD4bits.c: 5:     char i;;../Bibliotecas/LCD4bits.c: 7:    TRISD = 0b00
      +                          000000;
  2997                           
  2998                           ;incstack = 0
  2999  00119E  0E00               	movlw	0
  3000  0011A0  6E95               	movwf	3989,c	;volatile
  3001                           
  3002                           ;../Bibliotecas/LCD4bits.c: 8:    TRISEbits.TRISE0 = 0;
  3003  0011A2  9096               	bcf	3990,0,c	;volatile
  3004                           
  3005                           ;../Bibliotecas/LCD4bits.c: 9:    TRISEbits.TRISE1 = 0;
  3006  0011A4  9296               	bcf	3990,1,c	;volatile
  3007                           
  3008                           ;../Bibliotecas/LCD4bits.c: 11:    LATD = 0b00000000;
  3009  0011A6  0E00               	movlw	0
  3010  0011A8  6E8C               	movwf	3980,c	;volatile
  3011                           
  3012                           ;../Bibliotecas/LCD4bits.c: 12:    LATEbits.LATE0 = 0;
  3013  0011AA  908D               	bcf	3981,0,c	;volatile
  3014                           
  3015                           ;../Bibliotecas/LCD4bits.c: 13:    LATEbits.LATE1 = 0;
  3016  0011AC  928D               	bcf	3981,1,c	;volatile
  3017                           
  3018                           ;../Bibliotecas/LCD4bits.c: 15:    _delay((unsigned long)((15)*(8000000/4000.0)));
  3019  0011AE  0E27               	movlw	39
  3020  0011B0  6E07               	movwf	??_lcd_ini& (0+255),c
  3021  0011B2  0EF5               	movlw	245
  3022  0011B4                     u1477:
  3023  0011B4  2EE8               	decfsz	wreg,f,c
  3024  0011B6  D7FE               	bra	u1477
  3025  0011B8  2E07               	decfsz	??_lcd_ini& (0+255),f,c
  3026  0011BA  D7FC               	bra	u1477
  3027  0011BC  F000               	nop	
  3028                           
  3029                           ;../Bibliotecas/LCD4bits.c: 17:    for(i = 0; i < 3; i++)
  3030  0011BE  0E00               	movlw	0
  3031  0011C0  6E08               	movwf	lcd_ini@i,c
  3032  0011C2                     l1906:
  3033                           
  3034                           ;../Bibliotecas/LCD4bits.c: 18:    {;../Bibliotecas/LCD4bits.c: 19:        lcd_cmd(0x30)
      +                          ;
  3035  0011C2  0E30               	movlw	48
  3036  0011C4  EC72  F007         	call	_lcd_cmd
  3037                           
  3038                           ;../Bibliotecas/LCD4bits.c: 20:        _delay((unsigned long)((5)*(8000000/4000.0)));
  3039  0011C8  0E0D               	movlw	13
  3040  0011CA  6E07               	movwf	??_lcd_ini& (0+255),c
  3041  0011CC  0EFC               	movlw	252
  3042  0011CE                     u1487:
  3043  0011CE  2EE8               	decfsz	wreg,f,c
  3044  0011D0  D7FE               	bra	u1487
  3045  0011D2  2E07               	decfsz	??_lcd_ini& (0+255),f,c
  3046  0011D4  D7FC               	bra	u1487
  3047                           
  3048                           ;../Bibliotecas/LCD4bits.c: 21:    }
  3049  0011D6  2A08               	incf	lcd_ini@i,f,c
  3050  0011D8  0E02               	movlw	2
  3051  0011DA  6408               	cpfsgt	lcd_ini@i,c
  3052  0011DC  D7F2               	goto	l1906
  3053                           
  3054                           ;../Bibliotecas/LCD4bits.c: 22:    lcd_cmd(0x02);
  3055  0011DE  0E02               	movlw	2
  3056  0011E0  EC72  F007         	call	_lcd_cmd
  3057                           
  3058                           ;../Bibliotecas/LCD4bits.c: 23:    _delay((unsigned long)((40)*(8000000/4000000.0)));
  3059  0011E4  0E1A               	movlw	26
  3060  0011E6                     u1497:
  3061  0011E6  2EE8               	decfsz	wreg,f,c
  3062  0011E8  D7FE               	bra	u1497
  3063  0011EA  D000               	nop2	
  3064                           
  3065                           ;../Bibliotecas/LCD4bits.c: 24:    lcd_cmd(0x28);
  3066  0011EC  0E28               	movlw	40
  3067  0011EE  EC72  F007         	call	_lcd_cmd
  3068                           
  3069                           ;../Bibliotecas/LCD4bits.c: 25:    _delay((unsigned long)((40)*(8000000/4000000.0)));
  3070  0011F2  0E1A               	movlw	26
  3071  0011F4                     u1507:
  3072  0011F4  2EE8               	decfsz	wreg,f,c
  3073  0011F6  D7FE               	bra	u1507
  3074  0011F8  D000               	nop2	
  3075                           
  3076                           ;../Bibliotecas/LCD4bits.c: 26:    lcd_cmd(0x01);
  3077  0011FA  0E01               	movlw	1
  3078  0011FC  EC72  F007         	call	_lcd_cmd
  3079                           
  3080                           ;../Bibliotecas/LCD4bits.c: 27:    _delay((unsigned long)((2)*(8000000/4000.0)));
  3081  001200  0E06               	movlw	6
  3082  001202  6E07               	movwf	??_lcd_ini& (0+255),c
  3083  001204  0E30               	movlw	48
  3084  001206                     u1517:
  3085  001206  2EE8               	decfsz	wreg,f,c
  3086  001208  D7FE               	bra	u1517
  3087  00120A  2E07               	decfsz	??_lcd_ini& (0+255),f,c
  3088  00120C  D7FC               	bra	u1517
  3089  00120E  D000               	nop2	
  3090                           
  3091                           ;../Bibliotecas/LCD4bits.c: 28:    lcd_cmd(0x0C);
  3092  001210  0E0C               	movlw	12
  3093  001212  EC72  F007         	call	_lcd_cmd
  3094                           
  3095                           ;../Bibliotecas/LCD4bits.c: 29:    _delay((unsigned long)((40)*(8000000/4000000.0)));
  3096  001216  0E1A               	movlw	26
  3097  001218                     u1527:
  3098  001218  2EE8               	decfsz	wreg,f,c
  3099  00121A  D7FE               	bra	u1527
  3100  00121C  D000               	nop2	
  3101                           
  3102                           ;../Bibliotecas/LCD4bits.c: 30:    lcd_cmd(0x06);
  3103  00121E  0E06               	movlw	6
  3104  001220  EC72  F007         	call	_lcd_cmd
  3105                           
  3106                           ;../Bibliotecas/LCD4bits.c: 31:    _delay((unsigned long)((40)*(8000000/4000000.0)));
  3107  001224  0E1A               	movlw	26
  3108  001226                     u1537:
  3109  001226  2EE8               	decfsz	wreg,f,c
  3110  001228  D7FE               	bra	u1537
  3111  00122A  D000               	nop2	
  3112  00122C  0012               	return		;funcret
  3113  00122E                     __end_of_lcd_ini:
  3114                           	opt callstack 0
  3115                           
  3116 ;; *************** function _lcd_escreve_bf *****************
  3117 ;; Defined at:
  3118 ;;		line 74 in file "../Bibliotecas/LCD4bits.c"
  3119 ;; Parameters:    Size  Location     Type
  3120 ;;  lin             1    wreg     unsigned char 
  3121 ;;  col             1    8[COMRAM] unsigned char 
  3122 ;;  str             2    9[COMRAM] PTR unsigned char 
  3123 ;;		 -> bufferLCD(16), STR_2(14), STR_1(13), 
  3124 ;; Auto vars:     Size  Location     Type
  3125 ;;  lin             1   12[COMRAM] unsigned char 
  3126 ;;  end             1   11[COMRAM] unsigned char 
  3127 ;; Return value:  Size  Location     Type
  3128 ;;                  1    wreg      void 
  3129 ;; Registers used:
  3130 ;;		wreg, fsr1l, fsr1h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  3131 ;; Tracked objects:
  3132 ;;		On entry : 0/0
  3133 ;;		On exit  : 0/0
  3134 ;;		Unchanged: 0/0
  3135 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3136 ;;      Params:         3       0       0       0       0       0       0
  3137 ;;      Locals:         2       0       0       0       0       0       0
  3138 ;;      Temps:          0       0       0       0       0       0       0
  3139 ;;      Totals:         5       0       0       0       0       0       0
  3140 ;;Total ram usage:        5 bytes
  3141 ;; Hardware stack levels used:    1
  3142 ;; Hardware stack levels required when called:    4
  3143 ;; This function calls:
  3144 ;;		_lcd_envia_byte
  3145 ;; This function is called by:
  3146 ;;		_main
  3147 ;; This function uses a non-reentrant model
  3148 ;;
  3149                           
  3150                           	psect	text18
  3151  00122E                     __ptext18:
  3152                           	opt callstack 0
  3153  00122E                     _lcd_escreve_bf:
  3154                           	opt callstack 26
  3155                           
  3156                           ;incstack = 0
  3157                           ;lcd_escreve_bf@lin stored from wreg
  3158  00122E  6E0D               	movwf	lcd_escreve_bf@lin,c
  3159                           
  3160                           ;../Bibliotecas/LCD4bits.c: 74: void lcd_escreve_bf(char lin, char col, char *str);../Bi
      +                          bliotecas/LCD4bits.c: 75: {;../Bibliotecas/LCD4bits.c: 76:     char end;;../Bibliotecas/
      +                          LCD4bits.c: 79:     if (lin == 1)
  3161  001230  040D               	decf	lcd_escreve_bf@lin,w,c
  3162  001232  A4D8               	btfss	status,2,c
  3163  001234  D003               	goto	l1932
  3164                           
  3165                           ;../Bibliotecas/LCD4bits.c: 80:         end = col + 0x80 - 1;
  3166  001236  5009               	movf	lcd_escreve_bf@col,w,c
  3167  001238  0F7F               	addlw	127
  3168  00123A  D006               	goto	L3
  3169  00123C                     l1932:
  3170  00123C  0E02               	movlw	2
  3171  00123E  180D               	xorwf	lcd_escreve_bf@lin,w,c
  3172  001240  A4D8               	btfss	status,2,c
  3173  001242  D003               	goto	l1936
  3174                           
  3175                           ;../Bibliotecas/LCD4bits.c: 82:         end = col + 0xC0 - 1;
  3176  001244  5009               	movf	lcd_escreve_bf@col,w,c
  3177  001246  0FBF               	addlw	191
  3178  001248                     L3:
  3179  001248  6E0C               	movwf	lcd_escreve_bf@end,c
  3180  00124A                     l1936:
  3181                           
  3182                           ;../Bibliotecas/LCD4bits.c: 84:     lcd_envia_byte(0, end);
  3183  00124A  C00C  F007         	movff	lcd_escreve_bf@end,lcd_envia_byte@dado
  3184  00124E  0E00               	movlw	0
  3185  001250  EC7E  F00A         	call	_lcd_envia_byte
  3186                           
  3187                           ;../Bibliotecas/LCD4bits.c: 86:     while(*str)
  3188  001254  D016               	goto	l1942
  3189  001256                     l1938:
  3190                           
  3191                           ;../Bibliotecas/LCD4bits.c: 87:     {;../Bibliotecas/LCD4bits.c: 88:        lcd_envia_by
      +                          te(1,*str);
  3192  001256  C00A  FFF6         	movff	lcd_escreve_bf@str,tblptrl
  3193  00125A  C00B  FFF7         	movff	lcd_escreve_bf@str+1,tblptrh
  3194  00125E  6AF8               	clrf	tblptru,c
  3195  001260  0E05               	movlw	(high __ramtop+-1)
  3196  001262  64F7               	cpfsgt	tblptrh,c
  3197  001264  D003               	bra	u1417
  3198  001266  0008               	tblrd		*
  3199  001268  50F5               	movf	tablat,w,c
  3200  00126A  D005               	bra	u1410
  3201  00126C                     u1417:
  3202  00126C  CFF6 FFE1          	movff	tblptrl,fsr1l
  3203  001270  CFF7 FFE2          	movff	tblptrh,fsr1h
  3204  001274  50E7               	movf	indf1,w,c
  3205  001276                     u1410:
  3206  001276  6E07               	movwf	lcd_envia_byte@dado,c
  3207  001278  0E01               	movlw	1
  3208  00127A  EC7E  F00A         	call	_lcd_envia_byte
  3209                           
  3210                           ;../Bibliotecas/LCD4bits.c: 89:        str++;
  3211  00127E  4A0A               	infsnz	lcd_escreve_bf@str,f,c
  3212  001280  2A0B               	incf	lcd_escreve_bf@str+1,f,c
  3213  001282                     l1942:
  3214                           
  3215                           ;../Bibliotecas/LCD4bits.c: 86:     while(*str)
  3216  001282  C00A  FFF6         	movff	lcd_escreve_bf@str,tblptrl
  3217  001286  C00B  FFF7         	movff	lcd_escreve_bf@str+1,tblptrh
  3218  00128A  6AF8               	clrf	tblptru,c
  3219  00128C  0E05               	movlw	(high __ramtop+-1)
  3220  00128E  64F7               	cpfsgt	tblptrh,c
  3221  001290  D003               	bra	u1427
  3222  001292  0008               	tblrd		*
  3223  001294  50F5               	movf	tablat,w,c
  3224  001296  D005               	bra	u1420
  3225  001298                     u1427:
  3226  001298  CFF6 FFE1          	movff	tblptrl,fsr1l
  3227  00129C  CFF7 FFE2          	movff	tblptrh,fsr1h
  3228  0012A0  50E7               	movf	indf1,w,c
  3229  0012A2                     u1420:
  3230  0012A2  0900               	iorlw	0
  3231  0012A4  B4D8               	btfsc	status,2,c
  3232  0012A6  0012               	return	
  3233  0012A8  D7D6               	goto	l1938
  3234  0012AA                     __end_of_lcd_escreve_bf:
  3235                           	opt callstack 0
  3236                           
  3237 ;; *************** function _lcd_envia_byte *****************
  3238 ;; Defined at:
  3239 ;;		line 66 in file "../Bibliotecas/LCD4bits.c"
  3240 ;; Parameters:    Size  Location     Type
  3241 ;;  nivel           1    wreg     unsigned char 
  3242 ;;  dado            1    6[COMRAM] unsigned char 
  3243 ;; Auto vars:     Size  Location     Type
  3244 ;;  nivel           1    7[COMRAM] unsigned char 
  3245 ;; Return value:  Size  Location     Type
  3246 ;;                  1    wreg      void 
  3247 ;; Registers used:
  3248 ;;		wreg, status,2, status,0, cstack
  3249 ;; Tracked objects:
  3250 ;;		On entry : 0/0
  3251 ;;		On exit  : 0/0
  3252 ;;		Unchanged: 0/0
  3253 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3254 ;;      Params:         1       0       0       0       0       0       0
  3255 ;;      Locals:         1       0       0       0       0       0       0
  3256 ;;      Temps:          0       0       0       0       0       0       0
  3257 ;;      Totals:         2       0       0       0       0       0       0
  3258 ;;Total ram usage:        2 bytes
  3259 ;; Hardware stack levels used:    1
  3260 ;; Hardware stack levels required when called:    3
  3261 ;; This function calls:
  3262 ;;		_lcd_cmd
  3263 ;; This function is called by:
  3264 ;;		_lcd_escreve_bf
  3265 ;; This function uses a non-reentrant model
  3266 ;;
  3267                           
  3268                           	psect	text19
  3269  0014FC                     __ptext19:
  3270                           	opt callstack 0
  3271  0014FC                     _lcd_envia_byte:
  3272                           	opt callstack 26
  3273                           
  3274                           ;incstack = 0
  3275                           ;lcd_envia_byte@nivel stored from wreg
  3276  0014FC  6E08               	movwf	lcd_envia_byte@nivel,c
  3277                           
  3278                           ;../Bibliotecas/LCD4bits.c: 66: void lcd_envia_byte(char nivel, char dado);../Biblioteca
      +                          s/LCD4bits.c: 67: {;../Bibliotecas/LCD4bits.c: 68:     LATEbits.LATE0 = nivel;
  3279  0014FE  B008               	btfsc	lcd_envia_byte@nivel,0,c
  3280  001500  D002               	bra	u1365
  3281  001502  908D               	bcf	3981,0,c	;volatile
  3282  001504  D001               	bra	u1366
  3283  001506                     u1365:
  3284  001506  808D               	bsf	3981,0,c	;volatile
  3285  001508                     u1366:
  3286                           
  3287                           ;../Bibliotecas/LCD4bits.c: 69:     _delay((unsigned long)((100)*(8000000/4000000.0)));
  3288  001508  0E42               	movlw	66
  3289  00150A                     u1547:
  3290  00150A  2EE8               	decfsz	wreg,f,c
  3291  00150C  D7FE               	bra	u1547
  3292  00150E  D000               	nop2	
  3293                           
  3294                           ;../Bibliotecas/LCD4bits.c: 70:     LATEbits.LATE1 = 0;
  3295  001510  928D               	bcf	3981,1,c	;volatile
  3296                           
  3297                           ;../Bibliotecas/LCD4bits.c: 71:     lcd_cmd(dado);
  3298  001512  5007               	movf	lcd_envia_byte@dado,w,c
  3299  001514  EC72  F007         	call	_lcd_cmd
  3300  001518  0012               	return		;funcret
  3301  00151A                     __end_of_lcd_envia_byte:
  3302                           	opt callstack 0
  3303                           
  3304 ;; *************** function _lcd_cmd *****************
  3305 ;; Defined at:
  3306 ;;		line 45 in file "../Bibliotecas/LCD4bits.c"
  3307 ;; Parameters:    Size  Location     Type
  3308 ;;  cmd             1    wreg     unsigned char 
  3309 ;; Auto vars:     Size  Location     Type
  3310 ;;  cmd             1    5[COMRAM] unsigned char 
  3311 ;; Return value:  Size  Location     Type
  3312 ;;                  1    wreg      void 
  3313 ;; Registers used:
  3314 ;;		wreg, status,2, status,0, cstack
  3315 ;; Tracked objects:
  3316 ;;		On entry : 0/0
  3317 ;;		On exit  : 0/0
  3318 ;;		Unchanged: 0/0
  3319 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3320 ;;      Params:         0       0       0       0       0       0       0
  3321 ;;      Locals:         1       0       0       0       0       0       0
  3322 ;;      Temps:          1       0       0       0       0       0       0
  3323 ;;      Totals:         2       0       0       0       0       0       0
  3324 ;;Total ram usage:        2 bytes
  3325 ;; Hardware stack levels used:    1
  3326 ;; Hardware stack levels required when called:    2
  3327 ;; This function calls:
  3328 ;;		_set_bit
  3329 ;; This function is called by:
  3330 ;;		_lcd_ini
  3331 ;;		_lcd_envia_byte
  3332 ;; This function uses a non-reentrant model
  3333 ;;
  3334                           
  3335                           	psect	text20
  3336  000EE4                     __ptext20:
  3337                           	opt callstack 0
  3338  000EE4                     _lcd_cmd:
  3339                           	opt callstack 27
  3340                           
  3341                           ;incstack = 0
  3342                           ;lcd_cmd@cmd stored from wreg
  3343  000EE4  6E06               	movwf	lcd_cmd@cmd,c
  3344                           
  3345                           ;../Bibliotecas/LCD4bits.c: 45: void lcd_cmd(char cmd);../Bibliotecas/LCD4bits.c: 46: {;
      +                          ../Bibliotecas/LCD4bits.c: 47:     LATDbits.LATD4 = set_bit(cmd, 0b00010000);
  3346  000EE6  0E10               	movlw	16
  3347  000EE8  6E03               	movwf	set_bit@comp,c
  3348  000EEA  5006               	movf	lcd_cmd@cmd,w,c
  3349  000EEC  EC8D  F00A         	call	_set_bit
  3350  000EF0  6E05               	movwf	??_lcd_cmd& (0+255),c
  3351  000EF2  3A05               	swapf	??_lcd_cmd,f,c
  3352  000EF4  508C               	movf	3980,w,c	;volatile
  3353  000EF6  1805               	xorwf	??_lcd_cmd,w,c
  3354  000EF8  0BEF               	andlw	-17
  3355  000EFA  1805               	xorwf	??_lcd_cmd,w,c
  3356  000EFC  6E8C               	movwf	3980,c	;volatile
  3357                           
  3358                           ;../Bibliotecas/LCD4bits.c: 48:     LATDbits.LATD5 = set_bit(cmd, 0b00100000);
  3359  000EFE  0E20               	movlw	32
  3360  000F00  6E03               	movwf	set_bit@comp,c
  3361  000F02  5006               	movf	lcd_cmd@cmd,w,c
  3362  000F04  EC8D  F00A         	call	_set_bit
  3363  000F08  6E05               	movwf	??_lcd_cmd& (0+255),c
  3364  000F0A  3A05               	swapf	??_lcd_cmd,f,c
  3365  000F0C  4605               	rlncf	??_lcd_cmd,f,c
  3366  000F0E  508C               	movf	3980,w,c	;volatile
  3367  000F10  1805               	xorwf	??_lcd_cmd,w,c
  3368  000F12  0BDF               	andlw	-33
  3369  000F14  1805               	xorwf	??_lcd_cmd,w,c
  3370  000F16  6E8C               	movwf	3980,c	;volatile
  3371                           
  3372                           ;../Bibliotecas/LCD4bits.c: 49:     LATDbits.LATD6 = set_bit(cmd, 0b01000000);
  3373  000F18  0E40               	movlw	64
  3374  000F1A  6E03               	movwf	set_bit@comp,c
  3375  000F1C  5006               	movf	lcd_cmd@cmd,w,c
  3376  000F1E  EC8D  F00A         	call	_set_bit
  3377  000F22  6E05               	movwf	??_lcd_cmd& (0+255),c
  3378  000F24  3A05               	swapf	??_lcd_cmd,f,c
  3379  000F26  4605               	rlncf	??_lcd_cmd,f,c
  3380  000F28  4605               	rlncf	??_lcd_cmd,f,c
  3381  000F2A  508C               	movf	3980,w,c	;volatile
  3382  000F2C  1805               	xorwf	??_lcd_cmd,w,c
  3383  000F2E  0BBF               	andlw	-65
  3384  000F30  1805               	xorwf	??_lcd_cmd,w,c
  3385  000F32  6E8C               	movwf	3980,c	;volatile
  3386                           
  3387                           ;../Bibliotecas/LCD4bits.c: 50:     LATDbits.LATD7 = set_bit(cmd, 0b10000000);
  3388  000F34  0E80               	movlw	128
  3389  000F36  6E03               	movwf	set_bit@comp,c
  3390  000F38  5006               	movf	lcd_cmd@cmd,w,c
  3391  000F3A  EC8D  F00A         	call	_set_bit
  3392  000F3E  6E05               	movwf	??_lcd_cmd& (0+255),c
  3393  000F40  3205               	rrcf	??_lcd_cmd,f,c
  3394  000F42  3205               	rrcf	??_lcd_cmd,f,c
  3395  000F44  508C               	movf	3980,w,c	;volatile
  3396  000F46  1805               	xorwf	??_lcd_cmd,w,c
  3397  000F48  0B7F               	andlw	-129
  3398  000F4A  1805               	xorwf	??_lcd_cmd,w,c
  3399  000F4C  6E8C               	movwf	3980,c	;volatile
  3400                           
  3401                           ;../Bibliotecas/LCD4bits.c: 52:     LATEbits.LATE1 = 1;
  3402  000F4E  828D               	bsf	3981,1,c	;volatile
  3403                           
  3404                           ;../Bibliotecas/LCD4bits.c: 53:     LATEbits.LATE1 = 0;
  3405  000F50  928D               	bcf	3981,1,c	;volatile
  3406                           
  3407                           ;../Bibliotecas/LCD4bits.c: 55:     _delay((unsigned long)((100)*(8000000/4000000.0)));
  3408  000F52  0E42               	movlw	66
  3409  000F54                     u1557:
  3410  000F54  2EE8               	decfsz	wreg,f,c
  3411  000F56  D7FE               	bra	u1557
  3412  000F58  D000               	nop2	
  3413                           
  3414                           ;../Bibliotecas/LCD4bits.c: 57:     LATDbits.LATD4 = set_bit(cmd, 0b00000001);
  3415  000F5A  0E01               	movlw	1
  3416  000F5C  6E03               	movwf	set_bit@comp,c
  3417  000F5E  5006               	movf	lcd_cmd@cmd,w,c
  3418  000F60  EC8D  F00A         	call	_set_bit
  3419  000F64  6E05               	movwf	??_lcd_cmd& (0+255),c
  3420  000F66  3A05               	swapf	??_lcd_cmd,f,c
  3421  000F68  508C               	movf	3980,w,c	;volatile
  3422  000F6A  1805               	xorwf	??_lcd_cmd,w,c
  3423  000F6C  0BEF               	andlw	-17
  3424  000F6E  1805               	xorwf	??_lcd_cmd,w,c
  3425  000F70  6E8C               	movwf	3980,c	;volatile
  3426                           
  3427                           ;../Bibliotecas/LCD4bits.c: 58:     LATDbits.LATD5 = set_bit(cmd, 0b00000010);
  3428  000F72  0E02               	movlw	2
  3429  000F74  6E03               	movwf	set_bit@comp,c
  3430  000F76  5006               	movf	lcd_cmd@cmd,w,c
  3431  000F78  EC8D  F00A         	call	_set_bit
  3432  000F7C  6E05               	movwf	??_lcd_cmd& (0+255),c
  3433  000F7E  3A05               	swapf	??_lcd_cmd,f,c
  3434  000F80  4605               	rlncf	??_lcd_cmd,f,c
  3435  000F82  508C               	movf	3980,w,c	;volatile
  3436  000F84  1805               	xorwf	??_lcd_cmd,w,c
  3437  000F86  0BDF               	andlw	-33
  3438  000F88  1805               	xorwf	??_lcd_cmd,w,c
  3439  000F8A  6E8C               	movwf	3980,c	;volatile
  3440                           
  3441                           ;../Bibliotecas/LCD4bits.c: 59:     LATDbits.LATD6 = set_bit(cmd, 0b00000100);
  3442  000F8C  0E04               	movlw	4
  3443  000F8E  6E03               	movwf	set_bit@comp,c
  3444  000F90  5006               	movf	lcd_cmd@cmd,w,c
  3445  000F92  EC8D  F00A         	call	_set_bit
  3446  000F96  6E05               	movwf	??_lcd_cmd& (0+255),c
  3447  000F98  3A05               	swapf	??_lcd_cmd,f,c
  3448  000F9A  4605               	rlncf	??_lcd_cmd,f,c
  3449  000F9C  4605               	rlncf	??_lcd_cmd,f,c
  3450  000F9E  508C               	movf	3980,w,c	;volatile
  3451  000FA0  1805               	xorwf	??_lcd_cmd,w,c
  3452  000FA2  0BBF               	andlw	-65
  3453  000FA4  1805               	xorwf	??_lcd_cmd,w,c
  3454  000FA6  6E8C               	movwf	3980,c	;volatile
  3455                           
  3456                           ;../Bibliotecas/LCD4bits.c: 60:     LATDbits.LATD7 = set_bit(cmd, 0b00001000);
  3457  000FA8  0E08               	movlw	8
  3458  000FAA  6E03               	movwf	set_bit@comp,c
  3459  000FAC  5006               	movf	lcd_cmd@cmd,w,c
  3460  000FAE  EC8D  F00A         	call	_set_bit
  3461  000FB2  6E05               	movwf	??_lcd_cmd& (0+255),c
  3462  000FB4  3205               	rrcf	??_lcd_cmd,f,c
  3463  000FB6  3205               	rrcf	??_lcd_cmd,f,c
  3464  000FB8  508C               	movf	3980,w,c	;volatile
  3465  000FBA  1805               	xorwf	??_lcd_cmd,w,c
  3466  000FBC  0B7F               	andlw	-129
  3467  000FBE  1805               	xorwf	??_lcd_cmd,w,c
  3468  000FC0  6E8C               	movwf	3980,c	;volatile
  3469                           
  3470                           ;../Bibliotecas/LCD4bits.c: 62:     LATEbits.LATE1 = 1;
  3471  000FC2  828D               	bsf	3981,1,c	;volatile
  3472                           
  3473                           ;../Bibliotecas/LCD4bits.c: 63:     LATEbits.LATE1 = 0;
  3474  000FC4  928D               	bcf	3981,1,c	;volatile
  3475  000FC6  0012               	return		;funcret
  3476  000FC8                     __end_of_lcd_cmd:
  3477                           	opt callstack 0
  3478                           
  3479 ;; *************** function _set_bit *****************
  3480 ;; Defined at:
  3481 ;;		line 34 in file "../Bibliotecas/LCD4bits.c"
  3482 ;; Parameters:    Size  Location     Type
  3483 ;;  cmd             1    wreg     unsigned char 
  3484 ;;  comp            1    2[COMRAM] unsigned char 
  3485 ;; Auto vars:     Size  Location     Type
  3486 ;;  cmd             1    3[COMRAM] unsigned char 
  3487 ;; Return value:  Size  Location     Type
  3488 ;;                  1    wreg      unsigned char 
  3489 ;; Registers used:
  3490 ;;		wreg, status,2, status,0
  3491 ;; Tracked objects:
  3492 ;;		On entry : 0/0
  3493 ;;		On exit  : 0/0
  3494 ;;		Unchanged: 0/0
  3495 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3496 ;;      Params:         1       0       0       0       0       0       0
  3497 ;;      Locals:         1       0       0       0       0       0       0
  3498 ;;      Temps:          0       0       0       0       0       0       0
  3499 ;;      Totals:         2       0       0       0       0       0       0
  3500 ;;Total ram usage:        2 bytes
  3501 ;; Hardware stack levels used:    1
  3502 ;; Hardware stack levels required when called:    1
  3503 ;; This function calls:
  3504 ;;		Nothing
  3505 ;; This function is called by:
  3506 ;;		_lcd_cmd
  3507 ;; This function uses a non-reentrant model
  3508 ;;
  3509                           
  3510                           	psect	text21
  3511  00151A                     __ptext21:
  3512                           	opt callstack 0
  3513  00151A                     _set_bit:
  3514                           	opt callstack 27
  3515                           
  3516                           ;incstack = 0
  3517                           ;set_bit@cmd stored from wreg
  3518  00151A  6E04               	movwf	set_bit@cmd,c
  3519                           
  3520                           ;../Bibliotecas/LCD4bits.c: 34: char set_bit(char cmd, char comp);../Bibliotecas/LCD4bit
      +                          s.c: 35: {;../Bibliotecas/LCD4bits.c: 36:     if ((cmd & comp) >= 1)
  3521  00151C  5004               	movf	set_bit@cmd,w,c
  3522  00151E  1403               	andwf	set_bit@comp,w,c
  3523  001520  0900               	iorlw	0
  3524  001522  B4D8               	btfsc	status,2,c
  3525  001524  D002               	goto	l1648
  3526                           
  3527                           ;../Bibliotecas/LCD4bits.c: 37:         return 1;
  3528  001526  0E01               	movlw	1
  3529  001528  0012               	return	
  3530  00152A                     l1648:
  3531                           
  3532                           ;../Bibliotecas/LCD4bits.c: 39:         return 0;
  3533  00152A  0E00               	movlw	0
  3534  00152C  0012               	return		;funcret
  3535  00152E                     __end_of_set_bit:
  3536                           	opt callstack 0
  3537                           
  3538 ;; *************** function _int_ext *****************
  3539 ;; Defined at:
  3540 ;;		line 14 in file "EX11.c"
  3541 ;; Parameters:    Size  Location     Type
  3542 ;;		None
  3543 ;; Auto vars:     Size  Location     Type
  3544 ;;		None
  3545 ;; Return value:  Size  Location     Type
  3546 ;;                  1    wreg      void 
  3547 ;; Registers used:
  3548 ;;		wreg, status,2, status,0
  3549 ;; Tracked objects:
  3550 ;;		On entry : 0/0
  3551 ;;		On exit  : 0/0
  3552 ;;		Unchanged: 0/0
  3553 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3554 ;;      Params:         0       0       0       0       0       0       0
  3555 ;;      Locals:         0       0       0       0       0       0       0
  3556 ;;      Temps:          2       0       0       0       0       0       0
  3557 ;;      Totals:         2       0       0       0       0       0       0
  3558 ;;Total ram usage:        2 bytes
  3559 ;; Hardware stack levels used:    1
  3560 ;; This function calls:
  3561 ;;		Nothing
  3562 ;; This function is called by:
  3563 ;;		Interrupt level 2
  3564 ;; This function uses a non-reentrant model
  3565 ;;
  3566                           
  3567                           	psect	intcode
  3568  000008                     __pintcode:
  3569                           	opt callstack 0
  3570  000008                     _int_ext:
  3571                           	opt callstack 22
  3572                           
  3573                           ;incstack = 0
  3574  000008  827C               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  3575  00000A  ED55  F009         	call	int_func,f	;refresh shadow registers
  3576                           
  3577                           	psect	intcode_body
  3578  0012AA                     __pintcode_body:
  3579                           	opt callstack 22
  3580  0012AA                     int_func:
  3581                           	opt callstack 22
  3582  0012AA  0006               	pop		; remove dummy address from shadow register refresh
  3583                           
  3584                           ;EX11.c: 16:     if (INT0IF)
  3585  0012AC  A2F2               	btfss	4082,1,c	;volatile
  3586  0012AE  D02C               	goto	i2l35
  3587                           
  3588                           ;EX11.c: 17:     {;EX11.c: 18:       contaInt++;
  3589  0012B0  2A7B               	incf	_contaInt,f,c
  3590                           
  3591                           ;EX11.c: 19:         if (contaInt>=10)
  3592  0012B2  0E09               	movlw	9
  3593  0012B4  647B               	cpfsgt	_contaInt,c
  3594  0012B6  D028               	goto	i2l35
  3595                           
  3596                           ;EX11.c: 20:         {;EX11.c: 21:             contaInt = 0;
  3597  0012B8  0E00               	movlw	0
  3598  0012BA  6E7B               	movwf	_contaInt,c
  3599                           
  3600                           ;EX11.c: 22:             switch (++controle)
  3601  0012BC  D00D               	goto	i2l1440
  3602  0012BE                     i2l38:
  3603  0012BE  8881               	bsf	3969,4,c	;volatile
  3604                           
  3605                           ;EX11.c: 26:                 break;
  3606  0012C0  D023               	goto	i2l35
  3607  0012C2                     i2l40:
  3608  0012C2  8A81               	bsf	3969,5,c	;volatile
  3609                           
  3610                           ;EX11.c: 28:                 break;
  3611  0012C4  D021               	goto	i2l35
  3612  0012C6                     i2l41:
  3613  0012C6  8C81               	bsf	3969,6,c	;volatile
  3614                           
  3615                           ;EX11.c: 30:                 break;
  3616  0012C8  D01F               	goto	i2l35
  3617  0012CA                     i2l42:
  3618  0012CA  8E81               	bsf	3969,7,c	;volatile
  3619                           
  3620                           ;EX11.c: 32:                 break;
  3621  0012CC  D01D               	goto	i2l35
  3622  0012CE                     i2l1438:
  3623  0012CE  0E00               	movlw	0
  3624  0012D0  6E81               	movwf	3969,c	;volatile
  3625                           
  3626                           ;EX11.c: 34:                         controle = 0;
  3627  0012D2  0E00               	movlw	0
  3628  0012D4  6E7A               	movwf	_controle,c
  3629                           
  3630                           ;EX11.c: 35:             }
  3631  0012D6  D018               	goto	i2l35
  3632  0012D8                     i2l1440:
  3633  0012D8  2A7A               	incf	_controle,f,c
  3634  0012DA  507A               	movf	_controle,w,c
  3635  0012DC  6E01               	movwf	??_int_ext& (0+255),c
  3636  0012DE  6A02               	clrf	(??_int_ext+1)& (0+255),c
  3637                           
  3638                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  3639                           ; Switch size 1, requested type "simple"
  3640                           ; Number of cases is 1, Range of values is 0 to 0
  3641                           ; switch strategies available:
  3642                           ; Name         Instructions Cycles
  3643                           ; simple_byte            4     3 (average)
  3644                           ;	Chosen strategy is simple_byte
  3645  0012E0  5002               	movf	??_int_ext+1,w,c
  3646  0012E2  0A00               	xorlw	0	; case 0
  3647  0012E4  A4D8               	btfss	status,2,c
  3648  0012E6  D010               	goto	i2l35
  3649                           
  3650                           ; Switch size 1, requested type "simple"
  3651                           ; Number of cases is 5, Range of values is 1 to 5
  3652                           ; switch strategies available:
  3653                           ; Name         Instructions Cycles
  3654                           ; simple_byte           16     9 (average)
  3655                           ;	Chosen strategy is simple_byte
  3656  0012E8  5001               	movf	??_int_ext,w,c
  3657  0012EA  0A01               	xorlw	1	; case 1
  3658  0012EC  B4D8               	btfsc	status,2,c
  3659  0012EE  D7E7               	goto	i2l38
  3660  0012F0  0A03               	xorlw	3	; case 2
  3661  0012F2  B4D8               	btfsc	status,2,c
  3662  0012F4  D7E6               	goto	i2l40
  3663  0012F6  0A01               	xorlw	1	; case 3
  3664  0012F8  B4D8               	btfsc	status,2,c
  3665  0012FA  D7E5               	goto	i2l41
  3666  0012FC  0A07               	xorlw	7	; case 4
  3667  0012FE  B4D8               	btfsc	status,2,c
  3668  001300  D7E4               	goto	i2l42
  3669  001302  0A01               	xorlw	1	; case 5
  3670  001304  B4D8               	btfsc	status,2,c
  3671  001306  D7E3               	goto	i2l1438
  3672  001308                     i2l35:
  3673                           
  3674                           ;EX11.c: 38:     INT0IF = 0;
  3675  001308  92F2               	bcf	4082,1,c	;volatile
  3676  00130A  927C               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  3677  00130C  0011               	retfie		f
  3678  00130E                     __end_of_int_ext:
  3679                           	opt callstack 0
  3680                           
  3681                           	psect	rparam
  3682  0000                     
  3683                           	psect	temp
  3684  00007C                     btemp:
  3685                           	opt callstack 0
  3686  00007C                     	ds	1
  3687  0000                     int$flags	set	btemp
  3688  0000                     wtemp8	set	btemp+1
  3689  0000                     ttemp5	set	btemp+1
  3690  0000                     ttemp6	set	btemp+4
  3691  0000                     ttemp7	set	btemp+8
  3692                           tosu	equ	0xFFF
  3693                           tosh	equ	0xFFE
  3694                           tosl	equ	0xFFD
  3695                           stkptr	equ	0xFFC
  3696                           pclatu	equ	0xFFB
  3697                           pclath	equ	0xFFA
  3698                           pcl	equ	0xFF9
  3699                           tblptru	equ	0xFF8
  3700                           tblptrh	equ	0xFF7
  3701                           tblptrl	equ	0xFF6
  3702                           tablat	equ	0xFF5
  3703                           prodh	equ	0xFF4
  3704                           prodl	equ	0xFF3
  3705                           indf0	equ	0xFEF
  3706                           postinc0	equ	0xFEE
  3707                           postdec0	equ	0xFED
  3708                           preinc0	equ	0xFEC
  3709                           plusw0	equ	0xFEB
  3710                           fsr0h	equ	0xFEA
  3711                           fsr0l	equ	0xFE9
  3712                           wreg	equ	0xFE8
  3713                           indf1	equ	0xFE7
  3714                           postinc1	equ	0xFE6
  3715                           postdec1	equ	0xFE5
  3716                           preinc1	equ	0xFE4
  3717                           plusw1	equ	0xFE3
  3718                           fsr1h	equ	0xFE2
  3719                           fsr1l	equ	0xFE1
  3720                           bsr	equ	0xFE0
  3721                           indf2	equ	0xFDF
  3722                           postinc2	equ	0xFDE
  3723                           postdec2	equ	0xFDD
  3724                           preinc2	equ	0xFDC
  3725                           plusw2	equ	0xFDB
  3726                           fsr2h	equ	0xFDA
  3727                           fsr2l	equ	0xFD9
  3728                           status	equ	0xFD8


Data Sizes:
    Strings     32
    Constant    0
    Data        0
    BSS         60
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          126    111     123
    BANK0           128      2      50
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0

Pointer List with Targets:

    strlen@s	PTR const unsigned char  size(2) Largest target is 32
		 -> dbuf(BANK0[32]), 

    strlen@a	PTR const unsigned char  size(2) Largest target is 32
		 -> dbuf(BANK0[32]), 

    sprintf@fmt	PTR const unsigned char  size(2) Largest target is 5
		 -> STR_3(CODE[5]), 

    sprintf@s	PTR unsigned char  size(2) Largest target is 16
		 -> bufferLCD(BANK0[16]), 

    sprintf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_sprintf(COMRAM[2]), 

    f.buffer	PTR unsigned char  size(2) Largest target is 16
		 -> bufferLCD(BANK0[16]), 

    fputs@s	PTR const unsigned char  size(2) Largest target is 32
		 -> dbuf(BANK0[32]), 

    fputs@fp	PTR struct _IO_FILE size(2) Largest target is 7
		 -> sprintf@f(COMRAM[6]), 

    S837_IO_FILE$buffer	PTR unsigned char  size(2) Largest target is 16
		 -> bufferLCD(BANK0[16]), 

    fputc@fp.buffer	PTR unsigned char  size(2) Largest target is 16
		 -> bufferLCD(BANK0[16]), 

    fputc@fp	PTR struct _IO_FILE size(2) Largest target is 7
		 -> sprintf@f(COMRAM[6]), 

    atoi@s	PTR const unsigned char  size(2) Largest target is 5
		 -> STR_3(CODE[5]), 

    vfprintf@ap	PTR PTR void  size(2) Largest target is 2
		 -> sprintf@ap(COMRAM[2]), 

    vfprintf@fp	PTR struct _IO_FILE size(2) Largest target is 7
		 -> sprintf@f(COMRAM[6]), 

    vfprintf@fmt	PTR const unsigned char  size(2) Largest target is 5
		 -> STR_3(CODE[5]), 

    vfprintf@cfmt	PTR unsigned char  size(2) Largest target is 5
		 -> STR_3(CODE[5]), 

    vfpfcnvrt@fp	PTR struct _IO_FILE size(2) Largest target is 7
		 -> sprintf@f(COMRAM[6]), 

    vfpfcnvrt@ap	PTR PTR void  size(2) Largest target is 2
		 -> sprintf@ap(COMRAM[2]), 

    vfpfcnvrt@fmt	PTR PTR unsigned char  size(2) Largest target is 2
		 -> vfprintf@cfmt(COMRAM[2]), 

    dtoa@fp	PTR struct _IO_FILE size(2) Largest target is 7
		 -> sprintf@f(COMRAM[6]), 

    pad@fp	PTR struct _IO_FILE size(2) Largest target is 7
		 -> sprintf@f(COMRAM[6]), 

    pad@buf	PTR unsigned char  size(2) Largest target is 32
		 -> dbuf(BANK0[32]), 

    lcd_escreve_bf@str	PTR unsigned char  size(2) Largest target is 16
		 -> bufferLCD(BANK0[16]), STR_2(CODE[14]), STR_1(CODE[13]), 


Critical Paths under _main in COMRAM

    _main->_sprintf
    _sprintf->_vfprintf
    _vfprintf->_vfpfcnvrt
    _vfpfcnvrt->_dtoa
    _dtoa->_pad
    _pad->_fputs
    _fputs->_fputc
    _abs->___aomod
    _atoi->_isspace
    _lcd_ini->_lcd_cmd
    _lcd_escreve_bf->_lcd_envia_byte
    _lcd_envia_byte->_lcd_cmd
    _lcd_cmd->_set_bit

Critical Paths under _int_ext in COMRAM

    None.

Critical Paths under _main in BANK0

    None.

Critical Paths under _int_ext in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _int_ext in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _int_ext in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _int_ext in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _int_ext in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _int_ext in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0   10803
                                              0 BANK0      2     2      0
                     _lcd_escreve_bf
                            _lcd_ini
                            _sprintf
 ---------------------------------------------------------------------------------
 (1) _sprintf                                             16    10      6    8292
                                             95 COMRAM    16    10      6
                           _vfprintf
 ---------------------------------------------------------------------------------
 (2) _vfprintf                                             8     2      6    7939
                                             87 COMRAM     8     2      6
                          _vfpfcnvrt
 ---------------------------------------------------------------------------------
 (3) _vfpfcnvrt                                           46    40      6    7566
                                             65 COMRAM    22    16      6
                               _atoi
                               _dtoa
                              _fputc
                            _isdigit
 ---------------------------------------------------------------------------------
 (4) _dtoa                                                36    26     10    4358
                                             29 COMRAM    36    26     10
                            ___aodiv
                            ___aomod
                                _abs
                                _pad
 ---------------------------------------------------------------------------------
 (5) _pad                                                 11     5      6    2709
                                             18 COMRAM    11     5      6
                              _fputc
                              _fputs
                             _strlen
 ---------------------------------------------------------------------------------
 (6) _strlen                                               4     2      2     166
                                              2 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (6) _fputs                                                7     3      4    1235
                                             11 COMRAM     7     3      4
                              _fputc
 ---------------------------------------------------------------------------------
 (4) _fputc                                                9     5      4     834
                                              2 COMRAM     9     5      4
                              _putch
 ---------------------------------------------------------------------------------
 (5) _putch                                                1     1      0       0
 ---------------------------------------------------------------------------------
 (5) _abs                                                  4     2      2     142
                                             20 COMRAM     4     2      2
                            ___aomod (ARG)
 ---------------------------------------------------------------------------------
 (5) ___aomod                                             18     2     16     448
                                              2 COMRAM    18     2     16
 ---------------------------------------------------------------------------------
 (5) ___aodiv                                             26    10     16     452
                                              2 COMRAM    26    10     16
 ---------------------------------------------------------------------------------
 (4) _atoi                                                15    13      2    1244
                                              9 COMRAM    15    13      2
                             ___wmul
                            _isdigit
                            _isspace
 ---------------------------------------------------------------------------------
 (5) _isspace                                              7     5      2     207
                                              2 COMRAM     7     5      2
 ---------------------------------------------------------------------------------
 (4) _isdigit                                              6     4      2     237
                                              2 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (5) ___wmul                                               6     2      4     403
                                              2 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (1) _lcd_ini                                              2     2      0     874
                                              6 COMRAM     2     2      0
                            _lcd_cmd
 ---------------------------------------------------------------------------------
 (1) _lcd_escreve_bf                                       5     2      3    1637
                                              8 COMRAM     5     2      3
                     _lcd_envia_byte
 ---------------------------------------------------------------------------------
 (2) _lcd_envia_byte                                       2     1      1    1024
                                              6 COMRAM     2     1      1
                            _lcd_cmd
 ---------------------------------------------------------------------------------
 (2) _lcd_cmd                                              2     2      0     828
                                              4 COMRAM     2     2      0
                            _set_bit
 ---------------------------------------------------------------------------------
 (3) _set_bit                                              2     1      1     652
                                              2 COMRAM     2     1      1
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (9) _int_ext                                              2     2      0       0
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 9
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _lcd_escreve_bf
     _lcd_envia_byte
       _lcd_cmd
         _set_bit
   _lcd_ini
     _lcd_cmd
       _set_bit
   _sprintf
     _vfprintf
       _vfpfcnvrt
         _atoi
           ___wmul
           _isdigit
           _isspace
         _dtoa
           ___aodiv
           ___aomod
           _abs
             ___aomod (ARG)
           _pad
             _fputc
               _putch
             _fputs
               _fputc
                 _putch
             _strlen
         _fputc
           _putch
         _isdigit

 _int_ext (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             5FF      0       0      17        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK5           100      0       0      16        0.0%
BANK5              100      0       0      14        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80      2      32       5       39.1%
BITCOMRAM           7E      0       0       0        0.0%
COMRAM              7E     6F      7B       1       97.6%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      AD      15        0.0%
DATA                 0      0      AD       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.05 build -831301201 
Symbol Table                                                                                   Fri Apr 19 15:06:54 2019

    ___wmul@multiplicand 0005              __CFG_BORV$3 000000             __CFG_CP0$OFF 000000  
           __CFG_CP1$OFF 000000             __CFG_CP2$OFF 000000             __CFG_CP3$OFF 000000  
            __CFG_OSC$HS 000000                      l123 1136                      l134 0968  
                    l136 0970                      l868 144C                      l899 0DB6  
           __CFG_CPB$OFF 000000             __CFG_CPD$OFF 000000                      u910 0BCA  
                    u750 1078                      u840 1432                      u850 147E  
                    u770 10C0                      u860 1480                      u970 0E42  
                    u891 0B92                      _abs 1424                      _pad 1108  
                    wreg 000FE8             __CFG_LVP$OFF 000000             __CFG_WDT$OFF 000000  
                   ?_abs 0015                     l1500 140C                     l1600 0DEC  
                   l1504 1490                     l1520 112E                     l2056 1038  
                   l2048 1002                     l1610 0E3E                     l1506 1494  
                   l1530 1184                     l1522 1140                     l1620 0E9C  
                   l1604 0E10                     l1516 1120                     l1526 1158  
                   l1710 0B0E                     l1624 0EC2                     l1616 0E86  
                   l1608 0E2A                     l1570 0BC6                     l1562 0B8C  
                   l1706 0AF6                     l1810 0692                     l1802 0684  
                   l1636 13E4                     l1732 0CEC                     l1716 0C92  
                   l1580 0C22                     l1556 0B64                     l1812 06D4  
                   l1742 0D56                     l1734 0CF4                     l1726 0CDC  
                   l1718 0C96                     l1486 1080                     l1806 0688  
                   l1648 152A                     l1736 0CFA                     l1568 0BB2  
                   l1584 0C38                     l1496 13F6                     l1672 098A  
                   l1824 0740                     l1906 11C2                     l1738 0D22  
                   l1658 094C                     l1850 08A0                     l1826 075E  
                   l1932 123C                     l1588 0C5E                     l1676 099A  
                   l1844 0864                     l1828 076C                     l1860 08C2  
                   l1942 1282                     l1686 0A92                     l1854 08AA  
                   l1790 0678                     l1936 124A                     l1938 1256  
                   l1794 067C                     l1786 0666                     l1788 0668  
                   l1884 1320                     l1798 0680                     l1886 1344  
                   ?_pad 0013                     STR_1 060F                     STR_2 0601  
                   STR_3 061C                     u1010 13E0                     u1100 0AA0  
                   u1030 091E                     u1120 0AC2                     u1040 0920  
                   u1121 0AC0                     u1210 0D86                     u1130 0AD0  
                   u1220 0D88                     u1140 0AD4                     u1300 07A4  
                   u1070 095E                     u1310 07A6                     u1160 0AE0  
                   u1320 07B2                     u1410 1276                     u1090 0984  
                   u1420 12A2                     u1340 07E6                     u1190 0CD8  
                   _LATD 000F8C                     u1417 126C                     u1427 1298  
                   u1507 11F4                     u1365 1506                     u1517 1206  
                   u1366 1508                     u1527 1218                     u1537 1226  
                   u1547 150A                     u1467 100E                     u1557 0F54  
                   u1477 11B4                     u1487 11CE                     u1497 11E6  
                   i2l40 12C2                     i2l41 12C6                     i2l42 12CA  
                   i2l35 1308                     i2l38 12BE             __CFG_PWRT$ON 000000  
                   abs@a 0015                     _dbuf 0080                     _atoi 0C80  
                   _main 0FC8                     _dtoa 08F6                     _prec 0074  
                   _nout 0070                     pad@i 001A                     pad@p 0017  
                   fsr1h 000FE2                     fsr2h 000FDA                     indf1 000FE7  
                   indf2 000FDF                     fsr1l 000FE1                     pad@w 001C  
                   fsr2l 000FD9                     btemp 007C                     prodh 000FF4  
                   prodl 000FF3                     start 000E            __CFG_IESO$OFF 000000  
          __CFG_MCLRE$ON 000000             ___param_bank 000000                    ??_abs 0017  
                  ??_pad 0019          __end_of___aodiv 0C80                    ?_atoi 000A  
                  ?_main 0001                    ?_dtoa 001E          __end_of___aomod 0EE4  
           vfpfcnvrt@fmt 0044                    _PORTB 000F81                    _TRISB 000F93  
                  _TRISD 000F95            __CFG_WRT0$OFF 000000            __CFG_WRT1$OFF 000000  
          __CFG_WRT2$OFF 000000            __CFG_WRT3$OFF 000000           __CFG_EBTR0$OFF 000000  
         __CFG_FCMEN$OFF 000000           __CFG_EBTR1$OFF 000000           __CFG_EBTR2$OFF 000000  
         __CFG_EBTR3$OFF 000000          __end_of_lcd_cmd 0FC8          __end_of_lcd_ini 122E  
          __CFG_WRTB$OFF 000000            __CFG_WRTC$OFF 000000            __CFG_WRTD$OFF 000000  
         __CFG_EBTRB$OFF 000000                    _flags 0076                    _conta 0078  
                  _fputc 1068                    _fputs 13EC          __end_of_isdigit 1486  
        __end_of_int_ext 130E                    atoi@n 0017                    pad@fp 0013  
                  atoi@s 000A                    _width 0072                    _putch 152E  
                  dtoa@d 0020                    dtoa@i 0040                    dtoa@n 0038  
                  dtoa@p 0032                    dtoa@s 0036                    dtoa@w 0034  
        __end_of_isspace 13EC           __CFG_BOREN$OFF 000000          __end_of_set_bit 152E  
                  tablat 000FF5                    ttemp5 007D                    ttemp6 0080  
                  ttemp7 0084                    status 000FD8                    wtemp8 007D  
        __end_of_sprintf 13AE          __initialization 14B0             __end_of_atoi 0DC0  
           __end_of_main 1068             __end_of_dtoa 0B38                   ??_atoi 000C  
                 ??_main 00B0                   ??_dtoa 0028            __activetblptr 000002  
                 _ADCON1 000FC1                   ?_fputc 0003                   ?_fputs 000C  
                 ?_putch 0001                   _INT0IF 007F91                   i2l1440 12D8  
                 i2l1438 12CE                   _INTCON 000FF2            vfpfcnvrt@done 0054  
         __CFG_XINST$OFF 000000             vfprintf@cfmt 005E                ??___aodiv 0013  
              ??___aomod 0013                   ___wmul 14D6           __CFG_STVREN$ON 000000  
       ??_lcd_escreve_bf 000C                   clear_0 14B6                   clear_1 14C2  
       ??_lcd_envia_byte 0008                   pad@buf 0015                ??_lcd_cmd 0005  
                 dtoa@fp 001E                ??_lcd_ini 0007                   _strlen 1486  
                 fputc@c 0003                   fputs@c 0010                   fputs@i 0011  
                 fputs@s 000C                ??_isdigit 0005                ??_int_ext 0001  
           __mediumconst 0000                ??_isspace 0005                ??_set_bit 0004  
                 tblptrh 000FF7                   tblptrl 000FF6                   tblptru 000FF8  
                 putch@c 0001         __end_of_vfprintf 1360                ??_sprintf 0066  
             __accesstop 0080  __end_of__initialization 14C8          __CFG_PBADEN$OFF 000000  
          ___rparam_used 000001           __pcstackCOMRAM 0001            __end_of_fputc 1108  
          __end_of_fputs 1424            __end_of_putch 1530                  ??_fputc 0007  
                ??_fputs 0010                  ??_putch 0003               __pbssBANK0 0080  
                ?___wmul 0003                  ?_strlen 0003                  _INTEDG0 007F8E  
     __size_of_vfpfcnvrt 02D4                  __Hparam 0000                  __Lparam 0000  
                ___aodiv 0B38                  ___aomod 0DC0          __size_of___wmul 0026  
              ?_vfprintf 0058              set_bit@comp 0003             __psmallconst 0600  
                __pcinit 14B0                  __ramtop 0600                  __ptext0 0FC8  
                __ptext1 1360                  __ptext2 130E                  __ptext3 0622  
                __ptext4 08F6                  __ptext5 1108                  __ptext6 1486  
                __ptext7 13EC                  __ptext8 1068                  __ptext9 152E  
                _lcd_cmd 0EE4                  _lcd_ini 119E          __size_of_strlen 002A  
           __size_of_abs 0032             __size_of_pad 0096                  _isdigit 1456  
                _int_ext 0008                  _isspace 13AE                  _set_bit 151A  
                atoi@neg 0010                  _sprintf 1360           __pintcode_body 12AA  
   end_of_initialization 14C8       lcd_envia_byte@dado 0007                  fputc@fp 0005  
          __Lmediumconst 0000                  int_func 12AA                  fputs@fp 000E  
      __end_of_vfpfcnvrt 08F6                  postdec2 000FDD                  postinc0 000FEE  
                postinc1 000FE6                  postinc2 000FDE               ??_vfprintf 005E  
                strlen@a 0005                  strlen@s 0003                _PORTBbits 000F81  
              _TRISEbits 000F96               lcd_cmd@cmd 0006              vfpfcnvrt@ap 0046  
            vfpfcnvrt@fp 0042              vfpfcnvrt@ll 004C           __end_of___wmul 14FC  
         __end_of_strlen 14B0      start_initialization 14B0              __end_of_abs 1456  
            __end_of_pad 119E              vfprintf@fmt 005A                 ??___wmul 0007  
       __CFG_LPT1OSC$OFF 000000                 ??_strlen 0005              __pbssCOMRAM 0070  
          __pcstackBANK0 00B0         ___aodiv@dividend 0003  __size_of_lcd_escreve_bf 007C  
__size_of_lcd_envia_byte 001E        __CFG_CCP2MX$PORTC 000000                __pintcode 0008  
               ?___aodiv 0003                 ?___aomod 0003        lcd_escreve_bf@end 000C  
      lcd_escreve_bf@col 0009        lcd_escreve_bf@lin 000D         ___aodiv@quotient 0015  
      lcd_escreve_bf@str 000A                _bufferLCD 00A0                 ?_lcd_cmd 0001  
      __size_of_vfprintf 0052                 ?_lcd_ini 0001              __smallconst 0600  
               ?_isdigit 0003                 ?_int_ext 0001                 ?_isspace 0003  
               ?_set_bit 0003               set_bit@cmd 0004                 ?_sprintf 0060  
         __size_of_fputc 00A0           __size_of_fputs 0038           __size_of_putch 0002  
         ___wmul@product 0007                 _LATDbits 000F8C                 _LATEbits 000F8D  
       __CFG_WDTPS$32768 000000                _vfpfcnvrt 0622        ___wmul@multiplier 0003  
               __Hrparam 0000               vfprintf@ap 005C                 __Lrparam 0000  
             vfprintf@fp 0058         __size_of___aodiv 0148         __size_of___aomod 0124  
             ?_vfpfcnvrt 0042          ___aodiv@divisor 000B          ___aodiv@counter 0013  
       __size_of_lcd_cmd 00E4         __size_of_lcd_ini 0090               sprintf@fmt 0062  
               _atoi$815 0012                 _atoi$816 0016                 _atoi$817 0014  
       __size_of_isdigit 0030         __size_of_int_ext 1306                 _dtoa$343 0030  
         _lcd_escreve_bf 122E         __size_of_isspace 003E                 __ptext10 1424  
               __ptext11 0DC0                 __ptext20 0EE4                 __ptext12 0B38  
               __ptext21 151A                 __ptext13 0C80                 __ptext14 13AE  
               __ptext15 1456                 __ptext16 14D6                 __ptext17 119E  
               __ptext18 122E                 __ptext19 14FC         __size_of_set_bit 0014  
         _lcd_envia_byte 14FC                 _contaInt 007B         __size_of_sprintf 004E  
               _controle 007A            __size_of_atoi 0140            __size_of_main 00A0  
          __size_of_dtoa 0242                 int$flags 007C                 lcd_ini@i 0008  
               _vfprintf 130E              _isspace$833 0009         ___aomod@dividend 0003  
 __end_of_lcd_escreve_bf 12AA   __end_of_lcd_envia_byte 151A      lcd_envia_byte@nivel 0008  
               isdigit@c 0003                 intlevel2 0000                sprintf@ap 0068  
               isspace@c 0003          ___aomod@divisor 000B              ??_vfpfcnvrt 0048  
          _vfpfcnvrt$358 0056          ___aomod@counter 0013                 sprintf@f 006A  
               sprintf@s 0060          ?_lcd_escreve_bf 0009          ?_lcd_envia_byte 0007  
           ___aodiv@sign 0014             ___aomod@sign 0014  
